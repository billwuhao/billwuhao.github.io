<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>理清概念 🔁 丰富经验</title>
    <url>/zhuye-ca99db58d160/</url>
    <content><![CDATA[<p><a href="https://billwuhao.com/" title="诗和远方都在脚下"><img src="/images/dbj.jpg"></a></p>
<br>

<h2 id="⚫"><a href="#⚫" class="headerlink" title="⚫ "></a>⚫ <a href="/python/python-7251ecf1d2a3/" title="&lt;font color&#x3D;#AE6011 &gt;Python 基础知识手册&lt;&#x2F;font&gt;"><font color=#AE6011 >Python 基础知识手册</font></a></h2><h2 id="⚫-1"><a href="#⚫-1" class="headerlink" title="⚫ "></a>⚫ <a href="/numpy-464aacb14f3e/" title="&lt;font color&#x3D;#AE6011 &gt;Numpy 速查笔记&lt;&#x2F;font&gt;"><font color=#AE6011 >Numpy 速查笔记</font></a></h2><h2 id="⚫-2"><a href="#⚫-2" class="headerlink" title="⚫ "></a>⚫ <a href="/pandas-a5600fdbeadc/" title="&lt;font color&#x3D;#AE6011 &gt;Pandas 速查笔记&lt;&#x2F;font&gt;"><font color=#AE6011 >Pandas 速查笔记</font></a></h2><h2 id="⚫-3"><a href="#⚫-3" class="headerlink" title="⚫ "></a>⚫ <a href="/matplotlib-a8d811132015/" title="&lt;font color&#x3D;#AE6011 &gt;matplotlib 快速入门&lt;&#x2F;font&gt;"><font color=#AE6011 >matplotlib 快速入门</font></a></h2><h2 id="⚫-4"><a href="#⚫-4" class="headerlink" title="⚫ "></a>⚫ <a href="/regex-acfc7a7a1ed4/" title="&lt;font color&#x3D;#AE6011 &gt;通俗易懂 python 正则表达式&lt;&#x2F;font&gt;"><font color=#AE6011 >通俗易懂 python 正则表达式</font></a></h2><h2 id="⚫-5"><a href="#⚫-5" class="headerlink" title="⚫ "></a>⚫ <a href="/statistics/statistics-9ac0e1160c0b/" title="&lt;font color&#x3D;#AE6011 &gt;Python 数理统计和机器学习笔记&lt;&#x2F;font&gt;"><font color=#AE6011 >Python 数理统计和机器学习笔记</font></a></h2><h2 id="⚫-6"><a href="#⚫-6" class="headerlink" title="⚫ "></a>⚫ <a href="/sql/sql-b8cf85784f97/" title="&lt;font color&#x3D;#AE6011 &gt;MySQL 和 Hive SQL 速查笔记&lt;&#x2F;font&gt;"><font color=#AE6011 >MySQL 和 Hive SQL 速查笔记</font></a></h2><h2 id="⚫-7"><a href="#⚫-7" class="headerlink" title="⚫ "></a>⚫ <a href="/Markdown-d39685381dd6/" title="&lt;font color&#x3D;#AE6011 &gt;实用 Markdown 语法汇总&lt;&#x2F;font&gt;"><font color=#AE6011 >实用 Markdown 语法汇总</font></a></h2><h2 id="⚫-8"><a href="#⚫-8" class="headerlink" title="⚫ "></a>⚫ <a href="/poetry/poetry-272f7965d2fe/" title="&lt;font color&#x3D;#AE6011 &gt;野诗集&lt;&#x2F;font&gt;"><font color=#AE6011 >野诗集</font></a></h2>]]></content>
  </entry>
  <entry>
    <title>Python 数理统计和机器学习入门</title>
    <url>/statistics/statistics-9ac0e1160c0b/</url>
    <content><![CDATA[<p><a href="https://billwuhao.com/" title="诗和远方都在脚下"><img src="/images/dbj.jpg"></a></p>
<br>

<blockquote>
<p>内容主要来源：<strong>开课吧</strong>学习笔记整理。</p>
</blockquote>
<h2 id="⚫"><a href="#⚫" class="headerlink" title="⚫ "></a>⚫ <a href="/statistics/statistics1-c52131cc9c3a/" title="&lt;font color&#x3D;#AE6011 &gt;描述统计&lt;&#x2F;font&gt;"><font color=#AE6011 >描述统计</font></a></h2><h2 id="⚫-1"><a href="#⚫-1" class="headerlink" title="⚫ "></a>⚫ <a href="/statistics/statistics2-4cc5fc64703e/" title="&lt;font color&#x3D;#AE6011 &gt;推断统计&lt;&#x2F;font&gt;"><font color=#AE6011 >推断统计</font></a></h2><h2 id="⚫-2"><a href="#⚫-2" class="headerlink" title="⚫ "></a>⚫ <a href="/statistics/statistics3-65786bb614a2/" title="&lt;font color&#x3D;#AE6011 &gt;线性回归&lt;&#x2F;font&gt;"><font color=#AE6011 >线性回归</font></a></h2><h2 id="⚫-3"><a href="#⚫-3" class="headerlink" title="⚫ "></a>⚫ <a href="/statistics/statistics4-548ae340f960/" title="&lt;font color&#x3D;#AE6011 &gt;逻辑回归&lt;&#x2F;font&gt;"><font color=#AE6011 >逻辑回归</font></a></h2><h2 id="⚫-4"><a href="#⚫-4" class="headerlink" title="⚫ "></a>⚫ <a href="/statistics/statistics5-718e604fdfd5/" title="&lt;font color&#x3D;#AE6011 &gt;分类模型评估&lt;&#x2F;font&gt;"><font color=#AE6011 >分类模型评估</font></a></h2><h2 id="⚫-5"><a href="#⚫-5" class="headerlink" title="⚫ "></a>⚫ <a href="/statistics/statistics6-7e2ca84cd5fe/" title="&lt;font color&#x3D;#AE6011 &gt;KNN 算法&lt;&#x2F;font&gt;"><font color=#AE6011 >KNN 算法</font></a></h2><h2 id="⚫-6"><a href="#⚫-6" class="headerlink" title="⚫ "></a>⚫ <a href="/statistics/statistics7-c1988cb61792/" title="&lt;font color&#x3D;#AE6011 &gt;朴素贝叶斯&lt;&#x2F;font&gt;"><font color=#AE6011 >朴素贝叶斯</font></a></h2><h2 id="⚫-7"><a href="#⚫-7" class="headerlink" title="⚫ "></a>⚫ <a href="/statistics/statistics8-144b84551481/" title="&lt;font color&#x3D;#AE6011 &gt;决策树&lt;&#x2F;font&gt;"><font color=#AE6011 >决策树</font></a></h2><h2 id="⚫-8"><a href="#⚫-8" class="headerlink" title="⚫ "></a>⚫ <a href="/statistics/statistics9-1d958e8e187b/" title="&lt;font color&#x3D;#AE6011 &gt;K-Means 算法&lt;&#x2F;font&gt;"><font color=#AE6011 >K-Means 算法</font></a></h2>]]></content>
  </entry>
  <entry>
    <title>MySQL 和 Hive SQL 速查笔记</title>
    <url>/sql/sql-b8cf85784f97/</url>
    <content><![CDATA[<p><a href="https://billwuhao.com/" title="诗和远方都在脚下"><img src="/images/dbj.jpg"></a></p>
<br>

<blockquote>
<p>内容主要来源：<strong>开课吧</strong>学习笔记整理。</p>
</blockquote>
<h2 id="⚫-MySQL"><a href="#⚫-MySQL" class="headerlink" title="⚫ MySQL"></a>⚫ MySQL</h2><h3 id=""><a href="#" class="headerlink" title=""></a><a href="/sql/mysql1-e9ff17e2db5a/" title="&lt;font color&#x3D;#AE6011 &gt;基本介绍和单表操作&lt;&#x2F;font&gt;"><font color=#AE6011 >基本介绍和单表操作</font></a></h3><h3 id="-1"><a href="#-1" class="headerlink" title=""></a><a href="/sql/mysql2-bc4653311c6b/" title="&lt;font color&#x3D;#AE6011 &gt;多表基础操作&lt;&#x2F;font&gt;"><font color=#AE6011 >多表基础操作</font></a></h3><h3 id="-2"><a href="#-2" class="headerlink" title=""></a><a href="/sql/mysql3-718da85106ae/" title="&lt;font color&#x3D;#AE6011 &gt;常用函数&lt;&#x2F;font&gt;"><font color=#AE6011 >常用函数</font></a></h3><h3 id="-3"><a href="#-3" class="headerlink" title=""></a><a href="/sql/mysql4-99c5d36532eb/" title="&lt;font color&#x3D;#AE6011 &gt;索引，视图和三范式&lt;&#x2F;font&gt;"><font color=#AE6011 >索引，视图和三范式</font></a></h3><h2 id="⚫-HiveQL"><a href="#⚫-HiveQL" class="headerlink" title="⚫ HiveQL"></a>⚫ HiveQL</h2><h3 id="-4"><a href="#-4" class="headerlink" title=""></a><a href="/sql/hadoop1-f1634b625912/" title="&lt;font color&#x3D;#AE6011 &gt;Hive 介绍和 HiveQL 库和表初探&lt;&#x2F;font&gt;"><font color=#AE6011 >Hive 介绍和 HiveQL 库和表初探</font></a></h3><h3 id="-5"><a href="#-5" class="headerlink" title=""></a><a href="/sql/hadoop2-4c8304e56f6f/" title="&lt;font color&#x3D;#AE6011 &gt;HiveQL 表查询&lt;&#x2F;font&gt;"><font color=#AE6011 >HiveQL 表查询</font></a></h3><h3 id="-6"><a href="#-6" class="headerlink" title=""></a><a href="/sql/hadoop3-2506774f632f/" title="&lt;font color&#x3D;#AE6011 &gt;HiveQL 窗口函数和常用优化技巧&lt;&#x2F;font&gt;"><font color=#AE6011 >HiveQL 窗口函数和常用优化技巧</font></a></h3>]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/16_class/14_inheritance-3f3e743ec10e/</url>
    <content><![CDATA[<h2 id="类继承"><a href="#类继承" class="headerlink" title="类继承"></a>类继承</h2><p>所有的类都继承自 object。被继承的类称为基类（或父类，超类），继承者称为子类。</p>
<p>对于多数应用来说，在最简单的情况下，你可以认为搜索从父类所继承属性的操作是<strong>深度优先、从左至右</strong>的，当层次结构中存在重叠时不会在同一个类中搜索两次。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>():</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;A&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>(<span class="params">A</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span>():</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span>():</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;D&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">E</span>(<span class="params">C, B, D</span>):</span>  <span class="comment"># C -&gt; B -&gt; A -&gt; D</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">e = E()</span><br><span class="line">e.show()</span><br></pre></td></tr></table></figure>

<pre><code>A</code></pre>
<p>真实情况比这个更复杂一些；方法解析顺序会动态改变以支持对 super() 的协同调用。这种方式在某些其他多重继承型语言中被称为 后续方法调用，它比单继承型语言中的 super 调用更强大。</p>
<p>动态改变顺序是有必要的，因为所有多重继承的情况都会显示出一个或更多的菱形关联（即至少有一个父类可通过多条路径被最底层类所访问）。例如，所有类都是继承自 object，因此任何多重继承的情况都提供了一条以上的路径可以通向 object。为了确保基类不会被访问一次以上，动态算法会用一种特殊方式将搜索顺序线性化，保留每个类所指定的从左至右的顺序，只调用每个父类一次，并且保持单调（即一个类可以被子类化而不影响其父类的优先顺序）。</p>
<p>总而言之，这些特性使得设计具有多重继承的可靠且可扩展的类成为可能。</p>
<p>一个基类如果有 <code>__init__()</code> 方法，则其所派生的类如果也有 <code>__init__()</code> 方法，就必须显式地调用它以确保实例基类部分的正确初始化：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.a = <span class="string">&#x27;A&#x27;</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(self.a)</span><br><span class="line">        </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>(<span class="params">A</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.b = <span class="string">&#x27;B&#x27;</span></span><br><span class="line"></span><br><span class="line">b = B()</span><br><span class="line">b.f() <span class="comment"># 基类未初始化，属性 a 不可调用</span></span><br></pre></td></tr></table></figure>


<pre><code>---------------------------------------------------------------------------

AttributeError                            Traceback (most recent call last)

&lt;ipython-input-5-cda60db4451f&gt; in &lt;module&gt;
     11 
     12 b = B()
---&gt; 13 b.f()


&lt;ipython-input-5-cda60db4451f&gt; in f(self)
      4 
      5     def f(self):
----&gt; 6         print(self.a)
      7 
      8 class B(A):


AttributeError: &#39;B&#39; object has no attribute &#39;a&#39;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">A.__init__(b) <span class="comment"># 将实例 b 传给 A 初始化</span></span><br><span class="line">b.f()</span><br></pre></td></tr></table></figure>

<pre><code>A</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 或者直接用 super()</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.a = <span class="string">&#x27;A&#x27;</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(self.a)</span><br><span class="line">        </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>(<span class="params">A</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        self.b = <span class="string">&#x27;B&#x27;</span></span><br><span class="line"></span><br><span class="line">b = B()</span><br><span class="line">b.f()</span><br></pre></td></tr></table></figure>

<pre><code>A</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/16_class/13_method_operation-cba4485cf5b7/</url>
    <content><![CDATA[<h2 id="方法操作"><a href="#方法操作" class="headerlink" title="方法操作"></a>方法操作</h2><p>一个从父类继承过来的方法，如果不满足子类的需求，可以进行重写，重写的方法将屏蔽父类的方法，但可以显示地调用，或使用 super() 委托给父类调用，实现父类、子类的方法都可调用。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f</span>(<span class="params">self,x</span>):</span></span><br><span class="line">        y = x + x</span><br><span class="line">        print(y)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>(<span class="params">A</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f</span>(<span class="params">self,x</span>):</span></span><br><span class="line">        y = (x + x)**<span class="number">2</span> </span><br><span class="line">        print(y)</span><br><span class="line"></span><br><span class="line">b = B()</span><br><span class="line">b.f(<span class="number">2</span>)</span><br></pre></td></tr></table></figure>

<pre><code>16</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 显示地调用</span></span><br><span class="line">A.f(b, <span class="number">2</span>)</span><br></pre></td></tr></table></figure>

<pre><code>4</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f</span>(<span class="params">self,x</span>):</span></span><br><span class="line">        y = x + x</span><br><span class="line">        print(y)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>(<span class="params">A</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f</span>(<span class="params">self,x</span>):</span></span><br><span class="line">        <span class="built_in">super</span>().f(x)</span><br><span class="line">        y = (x + x)**<span class="number">2</span> </span><br><span class="line">        print(y)</span><br><span class="line"></span><br><span class="line">b = B()</span><br><span class="line">b.f(<span class="number">2</span>)</span><br></pre></td></tr></table></figure>

<pre><code>4
16</code></pre>
<p>还可使用装饰器修改方法，或添加丰富功能等。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将方法定义为静态方法</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span>:</span></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f</span>(<span class="params">value</span>):</span></span><br><span class="line">        print(value)</span><br><span class="line">c = C()</span><br><span class="line">c.f(<span class="string">&#x27;必须传参调用&#x27;</span>)</span><br></pre></td></tr></table></figure>

<pre><code>必须传参调用</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将私有属性定义为只读，</span></span><br><span class="line"><span class="comment"># 直接用不带下划线的名称访问</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.__name = <span class="string">&#x27;私有属性&#x27;</span></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">name</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.__name</span><br><span class="line">c = C()</span><br><span class="line">c.name</span><br></pre></td></tr></table></figure>




<pre><code>&#39;私有属性&#39;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 尝试修改不被允许</span></span><br><span class="line">c.name = <span class="number">0</span></span><br></pre></td></tr></table></figure>


<pre><code>---------------------------------------------------------------------------

AttributeError                            Traceback (most recent call last)

&lt;ipython-input-11-c0f354f546f5&gt; in &lt;module&gt;
      1 # 尝试修改不被允许
----&gt; 2 c.name = 0


AttributeError: can&#39;t set attribute</code></pre>
<p>用特殊方法定制类：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">d = D()</span><br><span class="line"><span class="built_in">bool</span>(d)</span><br></pre></td></tr></table></figure>




<pre><code>True</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 上述类的实例逻辑值检查为 True</span></span><br><span class="line"><span class="comment"># 定义为 False</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__bool__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">d = D()</span><br><span class="line"><span class="built_in">bool</span>(d)</span><br></pre></td></tr></table></figure>




<pre><code>False</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 让数字字符串也可以相减</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mystr</span>(<span class="params"><span class="built_in">str</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__sub__</span>(<span class="params">self, other</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">str</span>(<span class="built_in">float</span>(self) - <span class="built_in">float</span>(other))</span><br><span class="line">m = Mystr(<span class="string">&#x27;123&#x27;</span>)</span><br><span class="line">n = Mystr(<span class="string">&#x27;3.14&#x27;</span>)</span><br><span class="line">m, n, m - n</span><br></pre></td></tr></table></figure>




<pre><code>(&#39;123&#39;, &#39;3.14&#39;, &#39;119.86&#39;)</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/16_class/12_attribute_operation-a07d7d2d9358/</url>
    <content><![CDATA[<h2 id="属性操作"><a href="#属性操作" class="headerlink" title="属性操作"></a>属性操作</h2><p>Python 是动态语言，对象的属性不仅可以查看、访问、调用，还可以动态地增、删、改。</p>
<p>下面定义一个没有自定义属性的类 A 举例：</p>
<p>dir() 函数查看属性，双下划线 <code>__</code> 包围的属性是继承自 object 的特殊属性：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 定义一个类，查看属性</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">dir</span>(A)</span><br></pre></td></tr></table></figure>




<pre><code>[&#39;__class__&#39;,
 &#39;__delattr__&#39;,
 &#39;__dict__&#39;,
 &#39;__dir__&#39;,
 &#39;__doc__&#39;,
 &#39;__eq__&#39;,
 &#39;__format__&#39;,
 &#39;__ge__&#39;,
 &#39;__getattribute__&#39;,
 &#39;__gt__&#39;,
 &#39;__hash__&#39;,
 &#39;__init__&#39;,
 &#39;__init_subclass__&#39;,
 &#39;__le__&#39;,
 &#39;__lt__&#39;,
 &#39;__module__&#39;,
 &#39;__ne__&#39;,
 &#39;__new__&#39;,
 &#39;__reduce__&#39;,
 &#39;__reduce_ex__&#39;,
 &#39;__repr__&#39;,
 &#39;__setattr__&#39;,
 &#39;__sizeof__&#39;,
 &#39;__str__&#39;,
 &#39;__subclasshook__&#39;,
 &#39;__weakref__&#39;]</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 访问属性 __class__ 相当于调用 type() 函数</span></span><br><span class="line">A.__class__, A().__class__</span><br></pre></td></tr></table></figure>




<pre><code>(type, __main__.A)</code></pre>
<p>给类 A 及其实例动态添加属性，属性可以是数据属性和方法。类层级添加的属性，将作为所有实例的属性；实例添加的属性，只有对应的实例能访问。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 添加数据属性</span></span><br><span class="line">a1 = A()</span><br><span class="line">a2 = A()</span><br><span class="line">A.a = <span class="string">&#x27;类变量&#x27;</span></span><br><span class="line">a1.x = <span class="string">&#x27;a1 的属性&#x27;</span></span><br><span class="line">a2.y = <span class="string">&#x27;a2 的属性&#x27;</span></span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 类层级添加方法</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span>(<span class="params">self</span>):</span></span><br><span class="line">    print(self.a)</span><br><span class="line"></span><br><span class="line">A.f = f</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 类 A 调用刚添加的属性</span></span><br><span class="line">A.f(a1)</span><br><span class="line">A.f(a2)</span><br></pre></td></tr></table></figure>

<pre><code>类变量
类变量</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 实例调用刚添加的属性</span></span><br><span class="line">a1.f()</span><br><span class="line">a2.f()</span><br></pre></td></tr></table></figure>

<pre><code>类变量
类变量</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 实例 a1 没有 y 属性</span></span><br><span class="line"><span class="comment"># 同理，a2 没有 x 属性</span></span><br><span class="line">a1.y </span><br></pre></td></tr></table></figure>


<pre><code>---------------------------------------------------------------------------

AttributeError                            Traceback (most recent call last)

&lt;ipython-input-44-178a7ac627a0&gt; in &lt;module&gt;
      1 # 实例 a1 没有 y 属性
      2 # 同理，a2 没有 x 属性
----&gt; 3 a1.y


AttributeError: &#39;A&#39; object has no attribute &#39;y&#39;</code></pre>
<p>实例直接添加一个函数作为属性，将不会隐式地将自身作为第一个参数，而是和正常函数一样使用：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">p</span>(<span class="params">self</span>):</span></span><br><span class="line">    print(self)</span><br><span class="line"></span><br><span class="line">a1.p = p</span><br><span class="line">a1.p(<span class="string">&#x27;正常传参&#x27;</span>)</span><br><span class="line">a1.p()</span><br></pre></td></tr></table></figure>

<pre><code>正常传参



---------------------------------------------------------------------------

TypeError                                 Traceback (most recent call last)

&lt;ipython-input-45-4ebdece61250&gt; in &lt;module&gt;
      4 a1.p = p
      5 a1.p(&#39;正常传参&#39;)
----&gt; 6 a1.p()


TypeError: p() missing 1 required positional argument: &#39;self&#39;</code></pre>
<p>如果要通过实例添加实例方法（第一个参数 self 即是自身的方法），可以通过 types 模块添加。添加的属性，类不可访问，只有对应的实例可访问：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> types <span class="keyword">import</span> MethodType</span><br><span class="line"></span><br><span class="line"><span class="comment"># 改变了 a1 的上述 p 属性</span></span><br><span class="line">a1.p = MethodType(p, a1)</span><br><span class="line">a1.p()</span><br></pre></td></tr></table></figure>

<pre><code>&lt;__main__.A object at 0x000001D40578D730&gt;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">A.p</span><br></pre></td></tr></table></figure>


<pre><code>---------------------------------------------------------------------------

AttributeError                            Traceback (most recent call last)

&lt;ipython-input-47-94cb580acfb0&gt; in &lt;module&gt;
----&gt; 1 A.p


AttributeError: type object &#39;A&#39; has no attribute &#39;p&#39;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a2.p</span><br></pre></td></tr></table></figure>


<pre><code>---------------------------------------------------------------------------

AttributeError                            Traceback (most recent call last)

&lt;ipython-input-48-29321b2aa581&gt; in &lt;module&gt;
----&gt; 1 a2.p


AttributeError: &#39;A&#39; object has no attribute &#39;p&#39;</code></pre>
<p>删除属性使用 del 语句：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">del</span> a1.p</span><br><span class="line"></span><br><span class="line">a1.p()</span><br></pre></td></tr></table></figure>


<pre><code>---------------------------------------------------------------------------

AttributeError                            Traceback (most recent call last)

&lt;ipython-input-49-9cf9b7e7dc86&gt; in &lt;module&gt;
      1 del a1.p
      2 
----&gt; 3 a1.p()


AttributeError: &#39;A&#39; object has no attribute &#39;p&#39;</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/16_class/11_create_instance-b76dac7cac16/</url>
    <content><![CDATA[<h2 id="创建实例"><a href="#创建实例" class="headerlink" title="创建实例"></a>创建实例</h2><p>直接调用类对象，即可创建该类的实例对象。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">int</span>() <span class="comment"># 调用 int 类</span></span><br></pre></td></tr></table></figure>




<pre><code>0</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">list</span>(<span class="string">&#x27;123&#x27;</span>) <span class="comment"># 传参调用 list 类</span></span><br></pre></td></tr></table></figure>




<pre><code>[&#39;1&#39;, &#39;2&#39;, &#39;3&#39;]</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name</span>):</span></span><br><span class="line">        self.name = name</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.name</span><br><span class="line">    </span><br><span class="line">A(<span class="string">&#x27;实例1&#x27;</span>), A(<span class="string">&#x27;实例2&#x27;</span>) <span class="comment"># 调用自定义类</span></span><br></pre></td></tr></table></figure>




<pre><code>(实例1, 实例2)</code></pre>
<p>实例对象是由特殊方法 <code>__new__()</code> 创建，<code>__init__()</code> 定制完成。两个方法是隐式地完成创建和定制的，当然也可以显式地创建并定制。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.name = <span class="string">&#x27;实例&#x27;</span></span><br><span class="line">        </span><br><span class="line">A <span class="comment"># 类对象 A</span></span><br></pre></td></tr></table></figure>




<pre><code>__main__.A</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 显式地创建类 A 的一个实例 a</span></span><br><span class="line">a = <span class="built_in">object</span>.__new__(A)</span><br><span class="line">a</span><br></pre></td></tr></table></figure>




<pre><code>&lt;__main__.A at 0x20d23e95d30&gt;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 未初始化，无属性</span></span><br><span class="line">a.name</span><br></pre></td></tr></table></figure>


<pre><code>---------------------------------------------------------------------------

AttributeError                            Traceback (most recent call last)

&lt;ipython-input-36-b3a4d04d98fc&gt; in &lt;module&gt;
      1 # 未初始化，无属性
----&gt; 2 a.name


AttributeError: &#39;A&#39; object has no attribute &#39;name&#39;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 也可以使用 a.__init__(), </span></span><br><span class="line"><span class="comment"># 它会自动将实例作为第一个参数完成初始化</span></span><br><span class="line">A.__init__(a)</span><br><span class="line">a</span><br></pre></td></tr></table></figure>




<pre><code>&lt;__main__.A at 0x20d23e95d30&gt;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a.name</span><br></pre></td></tr></table></figure>




<pre><code>&#39;实例&#39;</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/16_class/10_scope-26bb8c7537e6/</url>
    <content><![CDATA[<h2 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h2><p>作用域定义了一个代码块中名称的可见性。如果代码块中定义了一个局部变量，则其作用域包含该代码块。如果定义发生于函数代码块中，则其作用域会扩展到该函数所包含的任何代码块，除非有某个被包含代码块引入了对该名称的不同绑定。</p>
<p>当一个名称在代码块中被使用时，会由包含它的最近作用域来解析。对一个代码块可见的所有这种作用域的集合称为该代码块的环境。</p>
<p>一个作用域是一个 <a href="https://xue.cn/hub/reader?bookId=64&path=xue_python_kp/16_class/09_namespace.ipynb">命名空间</a> 可直接访问的 Python 程序的文本区域。这里的 “可直接访问” 意味着对名称的非限定引用（限定引用指点号表达式例如 math.pi）会尝试在命名空间中查找名称。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 全局变量作用域为当前模块</span></span><br><span class="line">a = <span class="string">&#x27;全局变量&#x27;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span>():</span></span><br><span class="line">    <span class="comment"># print 内置名称作用域包含全局</span></span><br><span class="line">    print(<span class="string">f&#x27;print 函数的命名空间可以访问：<span class="subst">&#123;a&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">f&#x27;f 的命名空间可以访问：<span class="subst">&#123;a&#125;</span>&#x27;</span></span><br><span class="line"></span><br><span class="line">print(a)</span><br><span class="line">print(f())</span><br></pre></td></tr></table></figure>

<pre><code>全局变量
print 函数的命名空间可以访问：全局变量
f 的命名空间可以访问：全局变量</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 全局变量作用域为当前模块</span></span><br><span class="line"><span class="comment"># 但被包含命名空间引入了同名的局部变量</span></span><br><span class="line">a = <span class="string">&#x27;全局变量&#x27;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span>():</span></span><br><span class="line">    <span class="comment"># f 中定义的局部变量</span></span><br><span class="line">    <span class="comment"># 作用域为函数内部</span></span><br><span class="line">    a = <span class="string">&#x27;局部变量&#x27;</span></span><br><span class="line">    print(<span class="string">f&#x27;print 函数的命名空间可以访问：<span class="subst">&#123;a&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">f&#x27;f 的命名空间可以访问：<span class="subst">&#123;a&#125;</span>&#x27;</span></span><br><span class="line"></span><br><span class="line">print(a)</span><br><span class="line">print(f())</span><br></pre></td></tr></table></figure>

<pre><code>全局变量
print 函数的命名空间可以访问：局部变量
f 的命名空间可以访问：局部变量</code></pre>
<p>虽然作用域是静态地确定的，但它们会被动态地使用。嵌套作用域的搜索顺序:</p>
<ul>
<li>最先搜索最内部作用域包含的局部名称</li>
<li>从最近的封闭作用域开始搜索作用域包含的名称</li>
<li>倒数第二个作用域包含当前模块的全局名称</li>
<li>最外面的作用域（最后搜索）是包含内置名称的命名空间</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 搜索最内部作用域名称 str</span></span><br><span class="line"><span class="comment"># 屏蔽上层作用域</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span>():</span></span><br><span class="line">    <span class="built_in">str</span> = <span class="number">0</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f1</span>():</span></span><br><span class="line">        <span class="built_in">str</span> = <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">str</span></span><br><span class="line">    <span class="keyword">return</span> f1()</span><br><span class="line"></span><br><span class="line">f(), <span class="built_in">str</span></span><br></pre></td></tr></table></figure>




<pre><code>(1, str)</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 搜索最近封闭作用域名称 str</span></span><br><span class="line"><span class="comment"># 屏蔽上层作用域</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span>():</span></span><br><span class="line">    <span class="built_in">str</span> = <span class="number">0</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f1</span>():</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">str</span></span><br><span class="line">    <span class="keyword">return</span> f1()</span><br><span class="line"></span><br><span class="line">f(), <span class="built_in">str</span></span><br></pre></td></tr></table></figure>




<pre><code>(0, str)</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 搜索当前模块作用域名称 str</span></span><br><span class="line"><span class="comment"># 屏蔽上层作用域</span></span><br><span class="line"><span class="built_in">str</span> = <span class="string">&#x27;当前模块str&#x27;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span>():</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f1</span>():</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">str</span></span><br><span class="line">    <span class="keyword">return</span> f1()</span><br><span class="line"></span><br><span class="line">f()</span><br></pre></td></tr></table></figure>




<pre><code>&#39;当前模块str&#39;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 搜索最外面作用域名称 str</span></span><br><span class="line"><span class="comment"># 删除前面对 str 的绑定</span></span><br><span class="line"><span class="keyword">del</span> <span class="built_in">str</span></span><br><span class="line"><span class="comment"># 注意，运行多次会将内置名称 str 都删除</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span>():</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f1</span>():</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">str</span></span><br><span class="line">    <span class="keyword">return</span> f1()</span><br><span class="line"></span><br><span class="line">f()</span><br></pre></td></tr></table></figure>




<pre><code>str</code></pre>
<p>可见，当前模块中的全局名称，最好不要和内置名称相同，它会屏蔽掉内置名称，从而不可以直接使用内置功能。内置名称如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> builtins</span><br><span class="line"><span class="built_in">dir</span>(builtins)</span><br></pre></td></tr></table></figure>




<pre><code>[&#39;ArithmeticError&#39;,
 &#39;AssertionError&#39;,
 &#39;AttributeError&#39;,
 &#39;BaseException&#39;,
 &#39;BlockingIOError&#39;,
 &#39;BrokenPipeError&#39;,
 &#39;BufferError&#39;,
 &#39;BytesWarning&#39;,
 &#39;ChildProcessError&#39;,
 &#39;ConnectionAbortedError&#39;,
 &#39;ConnectionError&#39;,
 &#39;ConnectionRefusedError&#39;,
 &#39;ConnectionResetError&#39;,
 &#39;DeprecationWarning&#39;,
 &#39;EOFError&#39;,
 &#39;Ellipsis&#39;,
 &#39;EnvironmentError&#39;,
 &#39;Exception&#39;,
 &#39;False&#39;,
 &#39;FileExistsError&#39;,
 &#39;FileNotFoundError&#39;,
 &#39;FloatingPointError&#39;,
 &#39;FutureWarning&#39;,
 &#39;GeneratorExit&#39;,
 &#39;IOError&#39;,
 &#39;ImportError&#39;,
 &#39;ImportWarning&#39;,
 &#39;IndentationError&#39;,
 &#39;IndexError&#39;,
 &#39;InterruptedError&#39;,
 &#39;IsADirectoryError&#39;,
 &#39;KeyError&#39;,
 &#39;KeyboardInterrupt&#39;,
 &#39;LookupError&#39;,
 &#39;MemoryError&#39;,
 &#39;ModuleNotFoundError&#39;,
 &#39;NameError&#39;,
 &#39;None&#39;,
 &#39;NotADirectoryError&#39;,
 &#39;NotImplemented&#39;,
 &#39;NotImplementedError&#39;,
 &#39;OSError&#39;,
 &#39;OverflowError&#39;,
 &#39;PendingDeprecationWarning&#39;,
 &#39;PermissionError&#39;,
 &#39;ProcessLookupError&#39;,
 &#39;RecursionError&#39;,
 &#39;ReferenceError&#39;,
 &#39;ResourceWarning&#39;,
 &#39;RuntimeError&#39;,
 &#39;RuntimeWarning&#39;,
 &#39;StopAsyncIteration&#39;,
 &#39;StopIteration&#39;,
 &#39;SyntaxError&#39;,
 &#39;SyntaxWarning&#39;,
 &#39;SystemError&#39;,
 &#39;SystemExit&#39;,
 &#39;TabError&#39;,
 &#39;TimeoutError&#39;,
 &#39;True&#39;,
 &#39;TypeError&#39;,
 &#39;UnboundLocalError&#39;,
 &#39;UnicodeDecodeError&#39;,
 &#39;UnicodeEncodeError&#39;,
 &#39;UnicodeError&#39;,
 &#39;UnicodeTranslateError&#39;,
 &#39;UnicodeWarning&#39;,
 &#39;UserWarning&#39;,
 &#39;ValueError&#39;,
 &#39;Warning&#39;,
 &#39;WindowsError&#39;,
 &#39;ZeroDivisionError&#39;,
 &#39;__IPYTHON__&#39;,
 &#39;__build_class__&#39;,
 &#39;__debug__&#39;,
 &#39;__doc__&#39;,
 &#39;__import__&#39;,
 &#39;__loader__&#39;,
 &#39;__name__&#39;,
 &#39;__package__&#39;,
 &#39;__spec__&#39;,
 &#39;abs&#39;,
 &#39;all&#39;,
 &#39;any&#39;,
 &#39;ascii&#39;,
 &#39;bin&#39;,
 &#39;bool&#39;,
 &#39;breakpoint&#39;,
 &#39;bytearray&#39;,
 &#39;bytes&#39;,
 &#39;callable&#39;,
 &#39;chr&#39;,
 &#39;classmethod&#39;,
 &#39;compile&#39;,
 &#39;complex&#39;,
 &#39;copyright&#39;,
 &#39;credits&#39;,
 &#39;delattr&#39;,
 &#39;dict&#39;,
 &#39;dir&#39;,
 &#39;display&#39;,
 &#39;divmod&#39;,
 &#39;enumerate&#39;,
 &#39;eval&#39;,
 &#39;exec&#39;,
 &#39;filter&#39;,
 &#39;float&#39;,
 &#39;format&#39;,
 &#39;frozenset&#39;,
 &#39;get_ipython&#39;,
 &#39;getattr&#39;,
 &#39;globals&#39;,
 &#39;hasattr&#39;,
 &#39;hash&#39;,
 &#39;help&#39;,
 &#39;hex&#39;,
 &#39;id&#39;,
 &#39;input&#39;,
 &#39;int&#39;,
 &#39;isinstance&#39;,
 &#39;issubclass&#39;,
 &#39;iter&#39;,
 &#39;len&#39;,
 &#39;license&#39;,
 &#39;list&#39;,
 &#39;locals&#39;,
 &#39;map&#39;,
 &#39;max&#39;,
 &#39;memoryview&#39;,
 &#39;min&#39;,
 &#39;next&#39;,
 &#39;object&#39;,
 &#39;oct&#39;,
 &#39;open&#39;,
 &#39;ord&#39;,
 &#39;pow&#39;,
 &#39;print&#39;,
 &#39;property&#39;,
 &#39;range&#39;,
 &#39;repr&#39;,
 &#39;reversed&#39;,
 &#39;round&#39;,
 &#39;set&#39;,
 &#39;setattr&#39;,
 &#39;slice&#39;,
 &#39;sorted&#39;,
 &#39;staticmethod&#39;,
 &#39;str&#39;,
 &#39;sum&#39;,
 &#39;super&#39;,
 &#39;tuple&#39;,
 &#39;type&#39;,
 &#39;vars&#39;,
 &#39;zip&#39;]</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/16_class/09_namespace-e511f0988a04/</url>
    <content><![CDATA[<h2 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h2><p>命名空间是存放变量的场所。命名空间有局部、全局和内置的，还有对象中的嵌套命名空间。不同命名空间中的变量没有关系。</p>
<p>命名空间通过防止命名冲突来支持模块化。例如，函数 builtins.open 与 os.open 可通过各自的命名空间来区分。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 函数的局部命名空间，在函数调用时创建</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span>():</span></span><br><span class="line">    x = <span class="string">&#x27;函数 f 命名空间中的变量 x&#x27;</span></span><br><span class="line">    print(x)</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 全局命名空间</span></span><br><span class="line">x = <span class="string">&#x27;全局命名空间中的变量 x&#x27;</span></span><br><span class="line"><span class="comment"># 调用函数 f，与全局命名空间中的 x 无关</span></span><br><span class="line">f()</span><br></pre></td></tr></table></figure>

<pre><code>函数 f 命名空间中的变量 x</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 模块 random 导入创建它自己的局部命名空间</span></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="comment"># 定义一个全局变量 randint</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">randint</span>():</span></span><br><span class="line">    print(<span class="string">&#x27;全局 randint&#x27;</span>)</span><br><span class="line"><span class="comment"># random 局部命名空间中的 randint </span></span><br><span class="line"><span class="comment"># 与全局变量 randint 无关</span></span><br><span class="line">randint()</span><br><span class="line">random.randint(<span class="number">0</span>,<span class="number">3</span>)</span><br></pre></td></tr></table></figure>

<pre><code>全局 randint





1</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 上述定义的变量 f, x, randint，导入的变量 random，</span></span><br><span class="line"><span class="comment"># 都存放在了当前全局命名空间中</span></span><br><span class="line">f, x, random, randint</span><br></pre></td></tr></table></figure>




<pre><code>(&lt;function __main__.f()&gt;,
 &#39;全局命名空间中的变量 x&#39;,
 &lt;module &#39;random&#39; from &#39;C:\\ProgramData\\Anaconda3\\lib\\random.py&#39;&gt;,
 &lt;function __main__.randint()&gt;)</code></pre>
<p>内置命名空间是在 Python 解释器启动时创建，存放的变量包括内置函数、异常等。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 全局命名空间中定义变量 str，</span></span><br><span class="line"><span class="comment"># 将屏蔽内置命名空间中的 str</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">str</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">f&#x27;x = <span class="subst">&#123;x&#125;</span>&#x27;</span></span><br><span class="line"><span class="built_in">str</span>(<span class="number">123</span>)</span><br></pre></td></tr></table></figure>




<pre><code>&#39;x = 123&#39;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 但可以在 builtins 中继续调用</span></span><br><span class="line"><span class="keyword">import</span> builtins</span><br><span class="line"></span><br><span class="line">builtins.<span class="built_in">str</span>(<span class="number">123</span>)</span><br></pre></td></tr></table></figure>




<pre><code>&#39;123&#39;</code></pre>
<p>递归函数，每次递归调用，都会有一个新的命名空间。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="keyword">if</span> x &gt; <span class="number">0</span>:</span><br><span class="line">        print(<span class="string">f&#x27;x=<span class="subst">&#123;x&#125;</span>调用，x-1=<span class="subst">&#123;x<span class="number">-1</span>&#125;</span>继续调用&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> x == <span class="number">0</span>:</span><br><span class="line">        print(<span class="string">f&#x27;x=<span class="subst">&#123;x&#125;</span>,调用结束&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># 以 x-1 作为参数调用函数 f</span></span><br><span class="line">        <span class="keyword">return</span> f(x<span class="number">-1</span>)</span><br><span class="line">f(<span class="number">3</span>)</span><br></pre></td></tr></table></figure>

<pre><code>x=3调用，x-1=2继续调用
x=2调用，x-1=1继续调用
x=1调用，x-1=0继续调用
x=0,调用结束</code></pre>
<p>嵌套的命名空间：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="string">&#x27;全局变量 a&#x27;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line">    a = <span class="string">&#x27;类变量 a&#x27;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f</span>(<span class="params">self</span>):</span></span><br><span class="line">        a = <span class="string">&#x27;函数局部变量 a&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> a</span><br><span class="line"></span><br><span class="line">print(a)</span><br><span class="line">print(A.a)</span><br><span class="line">print(A().f())</span><br></pre></td></tr></table></figure>

<pre><code>全局变量 a
类变量 a
函数局部变量 a</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/16_class/08_method-745a2b8afe40/</url>
    <content><![CDATA[<h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><p>方法指在类内部定义的函数。但并不严格要求一定要在类内部定义。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span>(<span class="params">self</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line">    f = f</span><br><span class="line">A().f</span><br></pre></td></tr></table></figure>




<pre><code>&lt;bound method f of &lt;__main__.A object at 0x00000290DC56E198&gt;&gt;</code></pre>
<p>下列方法看起来是模块中的函数，其实是模块中，类实例方法重新赋值的名称：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"><span class="built_in">type</span>(randint)</span><br></pre></td></tr></table></figure>




<pre><code>method</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="comment"># randint 完整路径</span></span><br><span class="line">random.Random.randint</span><br><span class="line"></span><br><span class="line"><span class="comment"># 例如重新赋值后即可直接调用</span></span><br><span class="line">r = random.Random()</span><br><span class="line">randint = r.randint</span><br><span class="line">randint(<span class="number">0</span>,<span class="number">3</span>)</span><br></pre></td></tr></table></figure>




<pre><code>2</code></pre>
<p>普通方法（第一个参数通常命名为 self）如果作为该类的实例的一个属性来调用，方法将会获取实例对象作为其第一个参数。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># list 类的方法 append</span></span><br><span class="line"><span class="built_in">help</span>(<span class="string">&#x27;list.append&#x27;</span>)</span><br></pre></td></tr></table></figure>

<pre><code>Help on method_descriptor in list:

list.append = append(self, object, /)
    Append object to the end of the list.</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># list 的实例 [] 调用，</span></span><br><span class="line"><span class="comment"># 方法将会获取实例对象 [] 作为其第一个参数</span></span><br><span class="line">a = []</span><br><span class="line">a.append(<span class="number">1</span>)</span><br><span class="line">a</span><br></pre></td></tr></table></figure>




<pre><code>[1]</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 等价于</span></span><br><span class="line">a = []</span><br><span class="line"><span class="built_in">list</span>.append(a,<span class="number">1</span>)</span><br><span class="line">a</span><br></pre></td></tr></table></figure>




<pre><code>[1]</code></pre>
<p>类方法（第一个参数通常命名为 cls）则无论是类或是实例调用，方法都将获取类对象作为其第一个参数。类方法定义详见 <a href="https://xue.cn/hub/reader?bookId=64&path=xue_python_kp/11_built-in_function/10_classmethod.ipynb">classmethod 封装函数为类方法</a>。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f</span>(<span class="params">cls,x</span>):</span></span><br><span class="line">        print(cls,x)</span><br><span class="line">        </span><br><span class="line">print(<span class="string">f&#x27;A = <span class="subst">&#123;A&#125;</span>&#x27;</span>)        </span><br><span class="line">A.f(<span class="string">&#x27;类方法&#x27;</span>)</span><br><span class="line">A().f(<span class="string">&#x27;类方法&#x27;</span>)</span><br></pre></td></tr></table></figure>

<pre><code>A = &lt;class &#39;__main__.A&#39;&gt;
&lt;class &#39;__main__.A&#39;&gt; 类方法
&lt;class &#39;__main__.A&#39;&gt; 类方法</code></pre>
<p>静态方法则不会接收隐式的第一个参数。调用它需要正常传递参数。静态方法详见 <a href="https://xue.cn/hub/reader?bookId=64&path=xue_python_kp/11_built-in_function/58_staticmethod.ipynb">staticmethod 封装函数为静态方法</a>。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">in_print</span>(<span class="params">value</span>):</span></span><br><span class="line">        print(value)</span><br><span class="line">        </span><br><span class="line">a = A()</span><br><span class="line">a.in_print(<span class="string">&#x27;静态方法&#x27;</span>)</span><br><span class="line">A.in_print(<span class="string">&#x27;静态方法&#x27;</span>)</span><br></pre></td></tr></table></figure>

<pre><code>静态方法
静态方法</code></pre>
<p>特殊方法（也称魔术方法）：一种由 Python 隐式调用的方法，用来对某个类型执行特定操作例如相加等等。这种方法的名称的首尾都为双下划线。可以通过方法重载，对某个类型定义特定操作。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1 + 2 操作其实是隐式调用了 __add__</span></span><br><span class="line"><span class="number">1</span> + <span class="number">2</span></span><br></pre></td></tr></table></figure>




<pre><code>3</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">(<span class="number">1</span>).__add__(<span class="number">2</span>)</span><br></pre></td></tr></table></figure>




<pre><code>3</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 列表没有 “-” 操作符，自定义一个</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mlist</span>(<span class="params"><span class="built_in">list</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__sub__</span>(<span class="params">self, other</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">list</span>(<span class="built_in">set</span>(self) - <span class="built_in">set</span>(other))</span><br><span class="line">    </span><br><span class="line">a = Mlist(<span class="string">&#x27;123&#x27;</span>)</span><br><span class="line">b = Mlist(<span class="string">&#x27;13&#x27;</span>)</span><br><span class="line">a, b, a - b</span><br></pre></td></tr></table></figure>




<pre><code>([&#39;1&#39;, &#39;2&#39;, &#39;3&#39;], [&#39;1&#39;, &#39;3&#39;], [&#39;2&#39;])</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/16_class/07_attribute-d94e94b8cb29/</url>
    <content><![CDATA[<h2 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h2><p>属性指关联到一个对象的值，可以使用点号表达式通过其名称来引用。</p>
<p>可以使用  dir() 函数查看任意对象的属性。</p>
<p>如果属性是可调用对象（例如类，函数，方法等），引用之后可直接调用，也可先赋值给变量再调用。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看 list 对象的属性</span></span><br><span class="line"><span class="built_in">dir</span>(<span class="built_in">list</span>)</span><br></pre></td></tr></table></figure>




<pre><code>[&#39;__add__&#39;,
 &#39;__class__&#39;,
 &#39;__contains__&#39;,
 &#39;__delattr__&#39;,
 &#39;__delitem__&#39;,
 &#39;__dir__&#39;,
 &#39;__doc__&#39;,
 &#39;__eq__&#39;,
 &#39;__format__&#39;,
 &#39;__ge__&#39;,
 &#39;__getattribute__&#39;,
 &#39;__getitem__&#39;,
 &#39;__gt__&#39;,
 &#39;__hash__&#39;,
 &#39;__iadd__&#39;,
 &#39;__imul__&#39;,
 &#39;__init__&#39;,
 &#39;__init_subclass__&#39;,
 &#39;__iter__&#39;,
 &#39;__le__&#39;,
 &#39;__len__&#39;,
 &#39;__lt__&#39;,
 &#39;__mul__&#39;,
 &#39;__ne__&#39;,
 &#39;__new__&#39;,
 &#39;__reduce__&#39;,
 &#39;__reduce_ex__&#39;,
 &#39;__repr__&#39;,
 &#39;__reversed__&#39;,
 &#39;__rmul__&#39;,
 &#39;__setattr__&#39;,
 &#39;__setitem__&#39;,
 &#39;__sizeof__&#39;,
 &#39;__str__&#39;,
 &#39;__subclasshook__&#39;,
 &#39;append&#39;,
 &#39;clear&#39;,
 &#39;copy&#39;,
 &#39;count&#39;,
 &#39;extend&#39;,
 &#39;index&#39;,
 &#39;insert&#39;,
 &#39;pop&#39;,
 &#39;remove&#39;,
 &#39;reverse&#39;,
 &#39;sort&#39;]</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 通过名称 __add__ 引用属性</span></span><br><span class="line"><span class="built_in">list</span>.__add__ </span><br></pre></td></tr></table></figure>




<pre><code>&lt;slot wrapper &#39;__add__&#39; of &#39;list&#39; objects&gt;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 直接调用属性</span></span><br><span class="line"><span class="built_in">list</span>.__add__([<span class="number">1</span>,<span class="number">2</span>],[<span class="number">3</span>,<span class="number">4</span>])</span><br></pre></td></tr></table></figure>




<pre><code>[1, 2, 3, 4]</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 赋值给变量再调用</span></span><br><span class="line">la = <span class="built_in">list</span>.__add__</span><br><span class="line">la([<span class="number">1</span>,<span class="number">2</span>],[<span class="number">3</span>,<span class="number">4</span>])</span><br></pre></td></tr></table></figure>




<pre><code>[1, 2, 3, 4]</code></pre>
<p>有时也只将具体的值称为属性从而与抽象的值（类，函数，方法等对象的值）区分开来。例如将一个人有身体和四肢的属性和这个人会唱歌跳舞的属性区分开来。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">pd.Series <span class="comment"># pandas 模块的属性 Series 类</span></span><br></pre></td></tr></table></figure>




<pre><code>pandas.core.series.Series</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line">math.pi <span class="comment"># math 模块的属性圆周率</span></span><br></pre></td></tr></table></figure>




<pre><code>3.141592653589793</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line">    a = <span class="number">1</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(self)</span><br><span class="line">        </span><br><span class="line">a = A()</span><br><span class="line">A.a, a.a <span class="comment"># 类 A 及其实例的数据属性 a</span></span><br></pre></td></tr></table></figure>




<pre><code>(1, 1)</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">A.f, a.f <span class="comment"># 类 A 及其实例的方法属性 f</span></span><br></pre></td></tr></table></figure>




<pre><code>(&lt;function __main__.A.f(self)&gt;,
 &lt;bound method A.f of &lt;__main__.A object at 0x000001B569DC0860&gt;&gt;)</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 方法属性的等价调用</span></span><br><span class="line"><span class="comment"># 实例直接调用，第一个参数 self 就是它自身</span></span><br><span class="line">a.f()</span><br><span class="line"><span class="comment"># 类直接调用，则需要传入实例作为参数</span></span><br><span class="line">A.f(a)</span><br></pre></td></tr></table></figure>

<pre><code>&lt;__main__.A object at 0x000001B569DC0860&gt;
&lt;__main__.A object at 0x000001B569DC0860&gt;</code></pre>
<p>属性名以一个下划线开头的属性应该视为 “私有” 属性，但可以直接访问。</p>
<p>属性名以两个下划线开头，非两个下划线结尾的属性，在模块中视为 “私有” 属性，但可以直接访问；在类中属于私有属性，这种名称在类定义中使用时，会以一种混合形式重写以避免在基类及派生类的 “私有” 属性之间出现名称冲突。类的私有属性并非不可访问（使用重写名称可访问），全靠自觉。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line">    _a = <span class="number">1</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__f</span>():</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"><span class="built_in">dir</span>(A)</span><br></pre></td></tr></table></figure>




<pre><code>[&#39;_A__f&#39;,
 &#39;__class__&#39;,
 &#39;__delattr__&#39;,
 &#39;__dict__&#39;,
 &#39;__dir__&#39;,
 &#39;__doc__&#39;,
 &#39;__eq__&#39;,
 &#39;__format__&#39;,
 &#39;__ge__&#39;,
 &#39;__getattribute__&#39;,
 &#39;__gt__&#39;,
 &#39;__hash__&#39;,
 &#39;__init__&#39;,
 &#39;__init_subclass__&#39;,
 &#39;__le__&#39;,
 &#39;__lt__&#39;,
 &#39;__module__&#39;,
 &#39;__ne__&#39;,
 &#39;__new__&#39;,
 &#39;__reduce__&#39;,
 &#39;__reduce_ex__&#39;,
 &#39;__repr__&#39;,
 &#39;__setattr__&#39;,
 &#39;__sizeof__&#39;,
 &#39;__str__&#39;,
 &#39;__subclasshook__&#39;,
 &#39;__weakref__&#39;,
 &#39;_a&#39;]</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">A._a</span><br></pre></td></tr></table></figure>




<pre><code>1</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">A._A__f</span><br></pre></td></tr></table></figure>




<pre><code>&lt;function __main__.A.__f()&gt;</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/16_class/06_variable-86dfb6c6955a/</url>
    <content><![CDATA[<h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>Python 中绑定对象的名称即为变量。</p>
<p>人们称呼模块、类、函数和方法对象的名称时，习惯直接指代对象本身，而不是把它们当作变量，例如 random，int，print 等，当将它们绑定到另外的名称时，才称新名称为变量（或化名）。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 函数名称 f 绑定自定义函数对象</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span>(<span class="params">x, func</span>):</span> </span><br><span class="line">    print(func(x))</span><br><span class="line">    </span><br><span class="line">a = <span class="string">&#x27;1231&#x27;</span> <span class="comment"># 变量 a</span></span><br><span class="line">b = [<span class="built_in">int</span>,<span class="built_in">list</span>,<span class="built_in">set</span>] <span class="comment"># 变量 b</span></span><br><span class="line">c = f <span class="comment"># 名称 f 起别名 c</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> b: <span class="comment"># 变量 b 中的项循环赋值给变量 i</span></span><br><span class="line">    c(a,i)</span><br></pre></td></tr></table></figure>

<pre><code>1231
[&#39;1&#39;, &#39;2&#39;, &#39;3&#39;, &#39;1&#39;]
&#123;&#39;3&#39;, &#39;1&#39;, &#39;2&#39;&#125;</code></pre>
<p>如果名称绑定在一个代码块中，则为该代码块的局部变量，除非声明为 nonlocal 或 global。</p>
<p>如果名称绑定在模块层级，则为全局变量。(模块代码块的变量既为局部变量又为全局变量。) </p>
<p>如果变量在一个代码块中被使用但不是在其中定义，则为自由变量。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 第一个代码块中全局变量 n</span></span><br><span class="line">n = <span class="number">100</span> </span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 第二个代码块</span></span><br><span class="line"><span class="comment"># random 模块中的全局变量 randint，</span></span><br><span class="line"><span class="comment"># 在此为局部变量，引用后赋值给全局变量 r</span></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line">r = random.randint</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 第三个代码块中 x 为局部变量</span></span><br><span class="line"><span class="comment"># n 和 r 不在该代码块中定义，在该代码块为自由变量</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span>(<span class="params">x</span>):</span></span><br><span class="line">    print(r(x,n))</span><br><span class="line">    </span><br><span class="line">f(<span class="number">1</span>)</span><br></pre></td></tr></table></figure>

<pre><code>22</code></pre>
<p>如果代码块中定义了一个局部变量，则其作用域包含该代码块。如果定义发生于函数代码块中，则其作用域会扩展到该函数所包含的任何代码块，除非有某个被包含代码块引入了对该名称的不同绑定。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">m = <span class="number">0</span></span><br><span class="line">n = <span class="number">1</span> <span class="comment"># 全局变量 n</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span>():</span></span><br><span class="line">    n = <span class="number">2</span> <span class="comment"># 局部变量 n</span></span><br><span class="line">    print(m,n)</span><br><span class="line">f()</span><br></pre></td></tr></table></figure>

<pre><code>0 2</code></pre>
<p>改变变量作用域，详见 <a href="https://xue.cn/hub/reader?bookId=64&path=xue_python_kp/10_statement/19_global.ipynb">global 语句</a> 和 <a href="https://xue.cn/hub/reader?bookId=64&path=xue_python_kp/10_statement/20_nonlocal.ipynb">nonlocal 语句</a>。</p>
<p>类变量和实例变量：</p>
<ul>
<li>在类中定义，仅在类层级修改的变量为类变量，实例也可访问类变量；</li>
<li>以 <code>self.name</code> 命名的变量为实例变量，类不能访问。 </li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line">    a = <span class="number">1</span> <span class="comment"># 类变量</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.a = <span class="number">100</span> <span class="comment"># 实例变量</span></span><br><span class="line">        self.b = <span class="number">2</span></span><br><span class="line">        </span><br><span class="line">a = A()</span><br><span class="line">A.a, a.a, a.b</span><br></pre></td></tr></table></figure>




<pre><code>(1, 100, 2)</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">A.b <span class="comment"># 类 A 不能访问它的实例的变量 b</span></span><br></pre></td></tr></table></figure>


<pre><code>---------------------------------------------------------------------------

AttributeError                            Traceback (most recent call last)

&lt;ipython-input-11-f92f3bcfde9d&gt; in &lt;module&gt;
----&gt; 1 A.b # 类 A 不能访问它的实例的变量 b


AttributeError: type object &#39;A&#39; has no attribute &#39;b&#39;</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/16_class/05_name-ef1a09230831/</url>
    <content><![CDATA[<h2 id="名称"><a href="#名称" class="headerlink" title="名称"></a>名称</h2><p>名称（标识符）用于指代对象。当名称被绑定到一个对象时，对该名称求值将返回相应对象。当名称未被绑定时，尝试对其求值将引发 NameError 异常。Python 的保留字或称关键字是特殊的名称，不可被用作普通名称，例如函数名，模块名。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将 1 绑定名称 a</span></span><br><span class="line">a = <span class="number">1</span></span><br><span class="line">a</span><br></pre></td></tr></table></figure>




<pre><code>1</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将自定义类对象绑定到名称 A</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">A</span><br></pre></td></tr></table></figure>




<pre><code>__main__.A</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将模块 random 绑定到名称 r</span></span><br><span class="line"><span class="keyword">import</span> random <span class="keyword">as</span> r</span><br><span class="line">r</span><br></pre></td></tr></table></figure>




<pre><code>&lt;module &#39;random&#39; from &#39;F:\\anaconda\\lib\\random.py&#39;&gt;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 迭代的每一项循环绑定到名称 i</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="string">&#x27;xue&#x27;</span>:</span><br><span class="line">    display(i)</span><br><span class="line"></span><br><span class="line">i</span><br></pre></td></tr></table></figure>


<pre><code>&#39;x&#39;



&#39;u&#39;



&#39;e&#39;





&#39;e&#39;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 未绑定的名称 m</span></span><br><span class="line">m</span><br></pre></td></tr></table></figure>


<pre><code>---------------------------------------------------------------------------

NameError                                 Traceback (most recent call last)

&lt;ipython-input-4-2469ef96c490&gt; in &lt;module&gt;
      1 # 未绑定的名称 m
----&gt; 2 m


NameError: name &#39;m&#39; is not defined</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">help</span>(<span class="string">&#x27;keywords&#x27;</span>) <span class="comment"># 保留字</span></span><br></pre></td></tr></table></figure>


<pre><code>Here is a list of the Python keywords.  Enter any keyword to get more help.

False               class               from                or
None                continue            global              pass
True                def                 if                  raise
and                 del                 import              return
as                  elif                in                  try
assert              else                is                  while
async               except              lambda              with
await               finally             nonlocal            yield
break               for                 not                 </code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="literal">False</span> = <span class="number">0</span></span><br></pre></td></tr></table></figure>


<pre><code>  File &quot;&lt;ipython-input-9-223dbc74e028&gt;&quot;, line 1
    False = 0
    ^
SyntaxError: cannot assign to False</code></pre>
<p>检查一个名称是否有效可用字符串方法 str.isidentifier()：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;for&#x27;</span>.isidentifier()</span><br></pre></td></tr></table></figure>




<pre><code>True</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;my_name&#x27;</span>.isidentifier()</span><br></pre></td></tr></table></figure>




<pre><code>True</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;函数&#x27;</span>.isidentifier()</span><br></pre></td></tr></table></figure>




<pre><code>True</code></pre>
<p>普通名称命名规则：</p>
<ul>
<li>可以使用大部分非标点符号的 Unicode 字符，但请使用 ASCII 范围内 (U+0001..U+007F) 的字符；</li>
<li>习惯使用大写和小写字母 A 至 Z，下划线 _ 以及数字 0 至 9，但不可以数字打头；</li>
<li>长度没有限制，对大小写敏感。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">数字一 = <span class="number">1</span></span><br><span class="line">数字一</span><br></pre></td></tr></table></figure>




<pre><code>1</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> 函数():</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">函数</span><br></pre></td></tr></table></figure>




<pre><code>&lt;function __main__.函数()&gt;</code></pre>
<p>命名模式以下划线字符打头和结尾，有特殊含义的名称（<code>*</code> 代表任意数量可用名称字符）:</p>
<ul>
<li><p><code>_*</code> 不会被 <code>from module import *</code> 导入。特殊标识符 <code>_</code> 在交互式解释器中被用来存放最近一次求值结果；它保存在 builtins 模块中。当不处于交互模式时，<code>_</code> 无特殊含义也没有预定义。</p>
</li>
<li><p><code>__*__</code> 系统定义的名称，这些名称是由解释器及其实现（包括标准库）定义的特殊属性和方法名称。未来的 Python 版本中还将定义更多此类名称。任何情况下任何不遵循文档所显式指明的 <code>__*__</code> 名称使用方式都可能导致无警告的错误。</p>
</li>
<li><p><code>__*</code> 类的私有名称。这种名称在类定义中使用时，会以一种混合形式重写以避免在基类及派生类的 “私有” 属性之间出现名称冲突。例如，出现在一个名为 <code>Ham</code> 的类中的名称 <code>__spam</code> 会被转换为 <code>_Ham__spam</code>。如果类名仅由下划线组成，则不会进行转换。</p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">b = <span class="number">100</span></span><br><span class="line">b</span><br></pre></td></tr></table></figure>




<pre><code>100</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">_</span><br></pre></td></tr></table></figure>




<pre><code>100</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">dir</span>(<span class="built_in">object</span>)</span><br></pre></td></tr></table></figure>




<pre><code>[&#39;__class__&#39;,
 &#39;__delattr__&#39;,
 &#39;__dir__&#39;,
 &#39;__doc__&#39;,
 &#39;__eq__&#39;,
 &#39;__format__&#39;,
 &#39;__ge__&#39;,
 &#39;__getattribute__&#39;,
 &#39;__gt__&#39;,
 &#39;__hash__&#39;,
 &#39;__init__&#39;,
 &#39;__init_subclass__&#39;,
 &#39;__le__&#39;,
 &#39;__lt__&#39;,
 &#39;__ne__&#39;,
 &#39;__new__&#39;,
 &#39;__reduce__&#39;,
 &#39;__reduce_ex__&#39;,
 &#39;__repr__&#39;,
 &#39;__setattr__&#39;,
 &#39;__sizeof__&#39;,
 &#39;__str__&#39;,
 &#39;__subclasshook__&#39;]</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>:</span></span><br><span class="line">    __b = <span class="number">0</span></span><br><span class="line"><span class="built_in">dir</span>(B)</span><br></pre></td></tr></table></figure>




<pre><code>[&#39;_B__b&#39;,
 &#39;__class__&#39;,
 &#39;__delattr__&#39;,
 &#39;__dict__&#39;,
 &#39;__dir__&#39;,
 &#39;__doc__&#39;,
 &#39;__eq__&#39;,
 &#39;__format__&#39;,
 &#39;__ge__&#39;,
 &#39;__getattribute__&#39;,
 &#39;__gt__&#39;,
 &#39;__hash__&#39;,
 &#39;__init__&#39;,
 &#39;__init_subclass__&#39;,
 &#39;__le__&#39;,
 &#39;__lt__&#39;,
 &#39;__module__&#39;,
 &#39;__ne__&#39;,
 &#39;__new__&#39;,
 &#39;__reduce__&#39;,
 &#39;__reduce_ex__&#39;,
 &#39;__repr__&#39;,
 &#39;__setattr__&#39;,
 &#39;__sizeof__&#39;,
 &#39;__str__&#39;,
 &#39;__subclasshook__&#39;,
 &#39;__weakref__&#39;]</code></pre>
<p>del 语句可删除名称绑定：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">c = <span class="number">3</span></span><br><span class="line">print(<span class="string">f&#x27;c=<span class="subst">&#123;c&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="keyword">del</span> c</span><br><span class="line">c</span><br></pre></td></tr></table></figure>

<pre><code>c=3



---------------------------------------------------------------------------

NameError                                 Traceback (most recent call last)

&lt;ipython-input-23-5ba97d2f3254&gt; in &lt;module&gt;
      2 print(f&#39;c=&#123;c&#125;&#39;)
      3 del c
----&gt; 4 c


NameError: name &#39;c&#39; is not defined</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/16_class/04_object-d50c7282520d/</url>
    <content><![CDATA[<h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><p>对象是 Python 中对数据的抽象。Python 程序中的所有数据都是由对象或对象间关系来表示的。</p>
<p>例如计算 <code>x + y</code> 就有对象 <code>x</code> 和 <code>y</code>，<code>+</code> 其实是调用了 <code>__add__</code> 方法对象。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[<span class="number">1</span>,<span class="number">2</span>] + [<span class="number">3</span>,<span class="number">4</span>]</span><br></pre></td></tr></table></figure>




<pre><code>[1, 2, 3, 4]</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">list</span>.__add__</span><br></pre></td></tr></table></figure>




<pre><code>&lt;slot wrapper &#39;__add__&#39; of &#39;list&#39; objects&gt;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[<span class="number">1</span>,<span class="number">2</span>].__add__([<span class="number">3</span>,<span class="number">4</span>])</span><br></pre></td></tr></table></figure>




<pre><code>[1, 2, 3, 4]</code></pre>
<p>每个对象都有各自的编号、类型和值。一个对象被创建后，它的编号就绝不会改变，可以将其理解为该对象在内存中的地址。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">id</span>([<span class="number">1</span>,<span class="number">2</span>]), <span class="built_in">type</span>([<span class="number">1</span>,<span class="number">2</span>]) <span class="comment"># 实例对象 [1,2] 的编号 和 类型</span></span><br></pre></td></tr></table></figure>




<pre><code>(2229938322504, list)</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">id</span>(<span class="built_in">list</span>), <span class="built_in">type</span>(<span class="built_in">list</span>) <span class="comment"># 类对象 list 的编号 和 类型</span></span><br></pre></td></tr></table></figure>




<pre><code>(140736641645872, type)</code></pre>
<p>对象的值在 Python 中是一个相当抽象的概念：</p>
<ul>
<li>对象的值并没有一个规范的访问方法；</li>
<li>对象的值并不要求具有特定的构建方式，例如由其全部数据属性组成等；</li>
<li>比较运算符实现了一个特定的对象的值概念，可以认为正是通过实现对象比较，间接地定义了对象的值。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 列表对象 [1,2] 和类对象 list </span></span><br><span class="line"><span class="comment"># 是两个不同对象，值是不相等的</span></span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>] == <span class="built_in">list</span> </span><br></pre></td></tr></table></figure>




<pre><code>False</code></pre>
<p>具有固定值的对象为不可变对象，例如数字，字符串，元组（包含的对象集不可变），相等的两个值，可能会也可能不会指向同一个对象，看具体实现。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 元组的对象集固定不可变</span></span><br><span class="line">t = ([<span class="number">1</span>,<span class="number">2</span>],(<span class="number">3</span>,<span class="number">4</span>))</span><br><span class="line">print(<span class="built_in">id</span>(t[<span class="number">0</span>]),<span class="built_in">id</span>(t[<span class="number">1</span>]),t)</span><br><span class="line"><span class="keyword">del</span> t[<span class="number">0</span>][:]</span><br><span class="line">print(<span class="built_in">id</span>(t[<span class="number">0</span>]),<span class="built_in">id</span>(t[<span class="number">1</span>]),t)</span><br></pre></td></tr></table></figure>

<pre><code>2229937078536 2229937013960 ([1, 2], (3, 4))
2229937078536 2229937013960 ([], (3, 4))</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 同一个对象 1</span></span><br><span class="line">print(<span class="built_in">id</span>(<span class="number">1</span>))</span><br><span class="line">print(<span class="built_in">id</span>(<span class="number">1</span>))</span><br></pre></td></tr></table></figure>

<pre><code>140736642126656
140736642126656</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 两个不同对象 1000</span></span><br><span class="line">print(<span class="built_in">id</span>(<span class="number">1000</span>))</span><br><span class="line">print(<span class="built_in">id</span>(<span class="number">1000</span>))</span><br></pre></td></tr></table></figure>

<pre><code>2229938479344
2229938479248</code></pre>
<p>对象的编号保持不变，可以改变值的对象为可变对象。对于可变对象，分别创建两个相等的值，一定是不同对象。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 可变对象 a，值改变了还是 a</span></span><br><span class="line">a = [<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line">print(<span class="built_in">id</span>(a), a)</span><br><span class="line"><span class="keyword">del</span> a[:]</span><br><span class="line">print(<span class="built_in">id</span>(a), a)</span><br></pre></td></tr></table></figure>

<pre><code>2229937082056 [1, 2]
2229937082056 []</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 类对象 A，增加属性 a 还是 A</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span><span class="keyword">pass</span></span><br><span class="line">print(<span class="built_in">id</span>(A), A)</span><br><span class="line">A.a = <span class="number">0</span></span><br><span class="line">print(<span class="built_in">id</span>(A), A)</span><br></pre></td></tr></table></figure>

<pre><code>2229917928424 &lt;class &#39;__main__.A&#39;&gt;
2229917928424 &lt;class &#39;__main__.A&#39;&gt;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = []</span><br><span class="line">b = []</span><br><span class="line">print(<span class="built_in">id</span>(a))</span><br><span class="line">print(<span class="built_in">id</span>(b))</span><br><span class="line">a == b</span><br></pre></td></tr></table></figure>

<pre><code>2229937416840
2229937416648





True</code></pre>
<p>类或函数对象的哈希值基于其 id，创建两个看起来完全一样的类或函数，id 是不一样的，而可哈希对象必须具有相同的哈希值，比较结果才会相同。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span>():</span><span class="keyword">pass</span></span><br><span class="line">print(<span class="built_in">id</span>(f))</span><br><span class="line">a = f</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span>():</span><span class="keyword">pass</span></span><br><span class="line">print(<span class="built_in">id</span>(f))</span><br><span class="line">b = f</span><br><span class="line">a == b</span><br></pre></td></tr></table></figure>

<pre><code>2229938263992
2229938264128





False</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/16_class/03_instance-26f26b338f43/</url>
    <content><![CDATA[<h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>实例是调用类对象创建的具体对象。例如调用内置类型 int，创建的所有整数，都是 int 类的实例。可通过内置函数 isinstance() 进行实例检查。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">int</span>(<span class="string">&#x27;1&#x27;</span>)</span><br></pre></td></tr></table></figure>




<pre><code>1</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">isinstance</span>(<span class="number">1</span>,<span class="built_in">int</span>)</span><br></pre></td></tr></table></figure>




<pre><code>True</code></pre>
<p>Python 中所有的实例对象，都是 object 的实例。所有的类都是 object 的子类，也被视为 object 的实例；所有的类也被视为默认的元类（创建类的类）type 的实例。</p>
<p>如果一个实例对象应该视为某个类的实例，可以通过魔法方法 <code>__instancecheck__()</code> 来重载 isinstance() 函数，自定义实例检查行为。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">isinstance</span>(<span class="number">1</span>,<span class="built_in">object</span>), <span class="built_in">isinstance</span>([],<span class="built_in">object</span>)</span><br></pre></td></tr></table></figure>




<pre><code>(True, True)</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">isinstance</span>(<span class="built_in">int</span>,<span class="built_in">object</span>)</span><br></pre></td></tr></table></figure>




<pre><code>True</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">isinstance</span>(<span class="built_in">int</span>,<span class="built_in">type</span>)</span><br></pre></td></tr></table></figure>




<pre><code>True</code></pre>
<p>下面定义一个 “人” 类，来对实例进行说明：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span></span><br><span class="line">    <span class="string">&#x27;这是人类&#x27;</span></span><br><span class="line">    <span class="comment"># 定义人的属性</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name</span>):</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.ears = <span class="string">&#x27;耳朵&#x27;</span></span><br><span class="line">        self.brain = <span class="string">&#x27;大脑&#x27;</span></span><br><span class="line">        self.hands = <span class="string">&#x27;双手&#x27;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 人有生活</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">live</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">f&#x27;<span class="subst">&#123;self.name&#125;</span>用<span class="subst">&#123;self.ears&#125;</span>&#x27;</span></span><br><span class="line">              <span class="string">&#x27;听着音乐，&#x27;</span></span><br><span class="line">              <span class="string">&#x27;享受美好生活。&#x27;</span>)</span><br><span class="line">        </span><br><span class="line">    <span class="comment"># 还有工作</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">work</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">f&#x27;<span class="subst">&#123;self.name&#125;</span>用<span class="subst">&#123;self.brain&#125;</span>和&#x27;</span></span><br><span class="line">              <span class="string">f&#x27;<span class="subst">&#123;self.hands&#125;</span>&#x27;</span></span><br><span class="line">               <span class="string">&#x27;勤劳致富。&#x27;</span>)</span><br><span class="line">        </span><br><span class="line"><span class="comment"># 造人</span></span><br><span class="line">xm = Person(<span class="string">&#x27;小明&#x27;</span>)</span><br><span class="line">xz = Person(<span class="string">&#x27;小张&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>上述 “人” 类对象 Person 是类对象，调用类对象创建的 xm 和 xz，是两个具体的 “人”，是实例对象。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Person</span><br></pre></td></tr></table></figure>




<pre><code>__main__.Person</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">xm</span><br></pre></td></tr></table></figure>




<pre><code>&lt;__main__.Person at 0x24cf9ef6d68&gt;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">xz</span><br></pre></td></tr></table></figure>




<pre><code>&lt;__main__.Person at 0x24cf9ef6d30&gt;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">isinstance</span>(xm, Person), <span class="built_in">isinstance</span>(xz, Person)</span><br></pre></td></tr></table></figure>




<pre><code>(True, True)</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">isinstance</span>(Person, <span class="built_in">object</span>), <span class="built_in">isinstance</span>(Person, <span class="built_in">type</span>)</span><br></pre></td></tr></table></figure>




<pre><code>(True, True)</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/16_class/02_class_definition-91a8825aecc4/</url>
    <content><![CDATA[<h2 id="类定义"><a href="#类定义" class="headerlink" title="类定义"></a>类定义</h2><p>类是用来创建用户定义对象的模板，是抽象的对象（类对象）。例如我们说鱼类，指的就是一类抽象的对象，而具体到武昌鱼，鲈鱼，鲫鱼…… 就是具体的对象。</p>
<p>定义了一个类，就可以用这个模块来创建它的具体对象（实例）。类定义的详细语法规则见 <a href="https://xue.cn/hub/reader?bookId=64&path=xue_python_kp/10_statement/13_class.ipynb">class 定义类</a>。</p>
<p>创建一个类，需要继承另一个类。新创建的类是子类，继承的类是基类。如不指定，创建类默认继承自所有类的基类 object。</p>
<p>下面是一个没有任何自定义属性的简单类：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">A</span><br></pre></td></tr></table></figure>




<pre><code>__main__.A</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">type</span>(A)</span><br></pre></td></tr></table></figure>




<pre><code>type</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">A.__bases__ <span class="comment"># 查看基类</span></span><br></pre></td></tr></table></figure>




<pre><code>(object,)</code></pre>
<p>继承一个指定的类，可以对它进行定制化开发。需要注意参数 self, 它是约定名称（可自定义但不推荐），它就代表类创建的实例对象自身。</p>
<p>例如创建一个自定义的列表类，增加 add() 方法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mylist</span>(<span class="params"><span class="built_in">list</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">self,value</span>):</span></span><br><span class="line">        self.append(value)</span><br><span class="line">        </span><br><span class="line">lst = Mylist(<span class="string">&#x27;123&#x27;</span>) <span class="comment"># 创建实例赋值给 lst</span></span><br><span class="line">lst.add(<span class="number">4</span>) <span class="comment"># lst 调用 add 方法，self 参数就是 lst</span></span><br><span class="line">lst</span><br></pre></td></tr></table></figure>




<pre><code>[&#39;1&#39;, &#39;2&#39;, &#39;3&#39;, 4]</code></pre>
<p>或者自定义一个字典，当访问的键不存在时，不报错，而是返回 None（<code>__missing__()</code> 是用来定义字典子类时找不到键如何处理的魔法方法）：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mydict</span>(<span class="params"><span class="built_in">dict</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__missing__</span>(<span class="params">self, key</span>):</span></span><br><span class="line">        <span class="keyword">return</span> </span><br><span class="line"></span><br><span class="line">d = Mydict(a=<span class="number">1</span>,b=<span class="number">2</span>)</span><br><span class="line">d, d[<span class="string">&#x27;c&#x27;</span>]</span><br></pre></td></tr></table></figure>




<pre><code>(&#123;&#39;a&#39;: 1, &#39;b&#39;: 2&#125;, None)</code></pre>
<p>我们也可以自定义任意的类，其中 <code>__init__()</code> 方法是创建实例时用来初始化实例对象的魔法方法，可以用它来增加一些自定义属性。没有该方法，创建实例时，将自动调用基类的该方法完成初始化。</p>
<p>例如定义一个 “人” 类：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span></span><br><span class="line">    <span class="string">&#x27;这是人类&#x27;</span></span><br><span class="line">    <span class="comment"># 定义人的属性</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name</span>):</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.ears = <span class="string">&#x27;耳朵&#x27;</span></span><br><span class="line">        self.brain = <span class="string">&#x27;大脑&#x27;</span></span><br><span class="line">        self.hands = <span class="string">&#x27;双手&#x27;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 人有生活</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">live</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">f&#x27;<span class="subst">&#123;self.name&#125;</span>用<span class="subst">&#123;self.ears&#125;</span>&#x27;</span></span><br><span class="line">              <span class="string">&#x27;听着音乐，&#x27;</span></span><br><span class="line">              <span class="string">&#x27;享受美好生活。&#x27;</span>)</span><br><span class="line">        </span><br><span class="line">    <span class="comment"># 还有工作</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">work</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">f&#x27;<span class="subst">&#123;self.name&#125;</span>用<span class="subst">&#123;self.brain&#125;</span>和&#x27;</span></span><br><span class="line">              <span class="string">f&#x27;<span class="subst">&#123;self.hands&#125;</span>&#x27;</span></span><br><span class="line">               <span class="string">&#x27;勤劳致富。&#x27;</span>)</span><br><span class="line">        </span><br><span class="line"><span class="comment"># 造人</span></span><br><span class="line">xm = Person(<span class="string">&#x27;小明&#x27;</span>)</span><br><span class="line">xz = Person(<span class="string">&#x27;小张&#x27;</span>)</span><br><span class="line">xm.live() <span class="comment"># 小明在享受生活</span></span><br><span class="line">xz.work() <span class="comment"># 小张在努力工作</span></span><br></pre></td></tr></table></figure>

<pre><code>小明用耳朵听着音乐，享受美好生活。
小张用大脑和双手勤劳致富。</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/16_class/01_class_summary-313cbd60571f/</url>
    <content><![CDATA[<h2 id="面向对象概述"><a href="#面向对象概述" class="headerlink" title="面向对象概述"></a>面向对象概述</h2><p>面向对象是一种对现实世界理解和抽象的方法，是计算机编程技术发展到一定阶段后的产物。它把相关的数据和方法组织为一个整体来看待，从更高的层次来进行系统建模，更贴近事物的自然运行模式。</p>
<p>例如生活中我们会遇到各种数字及其运算，于是计算机科学家们就把数字抽象出来，成为一类对象。它们有别于其他事物（例如文字，图像）的特征，有自己的一套运算、操作方法。</p>
<p>Python 中的数字当然非常类似数学中的数字，但也受限于计算机中的数字表示方法。</p>
<p>为了方便，又把数字这一类对象，基本分成了整数，浮点数，复数三类对象。这对应 Python 中的 int，float，comlex 三种数字类型，三种数字类型下具体的整数，浮点数，复数也是对象。它们有共同的特征和计算方法，也有各自特有的特征和方法。例如都可以进行加减乘除，只有整数有按位运算。</p>
<p>整数中，0 和 1 的特殊性，又使得可以将整数类中再分出一类对象，布尔类型对象。布尔类型的对象，只有两个对象，True 和 False。</p>
<p>从数字类对象，到三类数字对象，到布尔类对象，到具体的数字对象以及 True 和 False 对象，层层细分，最终是具体的一个个对象，它们都是对象。这也是为什么称 Python 一切皆对象的原因。</p>
<p>类似地，对数据，因为要实现的目的不同，将装数据的 “容器” 分为字符串，列表，元组，集合，字典等类型的对象。</p>
<p>函数抽象出函数对象，模块又抽象出模块对象…… 甚至连空都是对象（None）。</p>
<p>具体的对象，称为实例，它归属于某个类。而所有的类，又都是 object 对象的子类。各种类（类型），又统一归为类型对象（type)。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">type</span>(<span class="number">1</span>), <span class="built_in">isinstance</span>(<span class="number">1</span>,<span class="built_in">int</span>) <span class="comment"># 1 是 int 类的实例</span></span><br></pre></td></tr></table></figure>




<pre><code>(int, True)</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">issubclass</span>(<span class="built_in">int</span>,<span class="built_in">object</span>) <span class="comment"># int 类是 object 的子类</span></span><br></pre></td></tr></table></figure>




<pre><code>True</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">type</span>(<span class="built_in">int</span>), <span class="built_in">isinstance</span>(<span class="built_in">int</span>,<span class="built_in">type</span>) <span class="comment"># int 是 type 的实例</span></span><br></pre></td></tr></table></figure>




<pre><code>(type, True)</code></pre>
<p>按照面向对象的思想，我们可以定义一个 “人” 类对象，然后很方便地给这个 “人” 加上现有的各种函数，类，以及模块的功能，造出更多更多有各种特异功能的 “人”。这是不是非常伟大的设计思想呢？</p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/15_module/05_import_code-ba2a46fd0843/</url>
    <content><![CDATA[<h2 id="导入操作"><a href="#导入操作" class="headerlink" title="导入操作"></a>导入操作</h2><p>导入操作使用 import 语句，详细的语法规则查看 <a href="https://xue.cn/hub/reader?bookId=64&path=xue_python_kp/10_statement/18_import.ipynb">import 导入语句</a>。</p>
<ul>
<li><code>import ...</code> 只能导入模块：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random <span class="keyword">as</span> r, pandas.core <span class="keyword">as</span> pc</span><br><span class="line">r, pc</span><br></pre></td></tr></table></figure>




<pre><code>(&lt;module &#39;random&#39; from &#39;F:\\anaconda\\lib\\random.py&#39;&gt;,
 &lt;module &#39;pandas.core&#39; from &#39;F:\\anaconda\\lib\\site-packages\\pandas\\core\\__init__.py&#39;&gt;)</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 导入方法报错</span></span><br><span class="line"><span class="keyword">import</span> random.randint</span><br></pre></td></tr></table></figure>


<pre><code>---------------------------------------------------------------------------

ModuleNotFoundError                       Traceback (most recent call last)

&lt;ipython-input-2-8d4ecd1fe339&gt; in &lt;module&gt;
      1 # 导入方法报错
----&gt; 2 import random.randint


ModuleNotFoundError: No module named &#39;random.randint&#39;; &#39;random&#39; is not a package</code></pre>
<ul>
<li><code>from ... import ...</code> 从模块中导入子模块，类，函数等： </li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pandas <span class="keyword">import</span> core</span><br><span class="line">core</span><br></pre></td></tr></table></figure>




<pre><code>&lt;module &#39;pandas.core&#39; from &#39;F:\\anaconda\\lib\\site-packages\\pandas\\core\\__init__.py&#39;&gt;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pandas <span class="keyword">import</span> DataFrame <span class="keyword">as</span> df</span><br><span class="line">df</span><br></pre></td></tr></table></figure>




<pre><code>pandas.core.frame.DataFrame</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line">randint</span><br></pre></td></tr></table></figure>




<pre><code>&lt;bound method Random.randint of &lt;random.Random object at 0x000001E44ED52020&gt;&gt;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> pi</span><br><span class="line">pi</span><br></pre></td></tr></table></figure>




<pre><code>3.141592653589793</code></pre>
<ul>
<li><code>from ... import *</code> 将导入模块中所有的公有属性：</li>
</ul>
<p>例如，如果在文件 <code>mycode/__init__.py</code> 中我们定义了属性 <code>__all__</code> ，从包 <code>mycode</code> 导入则只能导入该属性中的名称；在文件 <code>mycode/mycode.py</code> 中，以下划线打头的属性名，从模块 <code>mycode.mycode</code> 导入时都不可导入。</p>
<p>通常情况下不应使用这个功能，因为它在解释器中引入了一组未知的名称，而它们很可能会覆盖一些你已经定义过的名称。而且会导致代码的可读性很差。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># mycode/__init__.py</span></span><br><span class="line">__all__ = [<span class="string">&#x27;mycode&#x27;</span>,<span class="string">&#x27;xue&#x27;</span>]</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># mycode/mycode.py</span></span><br><span class="line">_a = <span class="string">&#x27;自学&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__f</span>():</span></span><br><span class="line">    print(_a)</span><br><span class="line"></span><br><span class="line">print(<span class="string">&#x27;mycode&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> mycode <span class="keyword">import</span> xue</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    print(xue.msg)</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> mycode <span class="keyword">import</span> *</span><br><span class="line">mycode, xue</span><br></pre></td></tr></table></figure>




<pre><code>(&lt;module &#39;mycode.mycode&#39; from &#39;E:\\xue\\脚本\\kp_book\\15_module\\mycode\\mycode.py&#39;&gt;,
 &lt;module &#39;mycode.xue&#39; from &#39;E:\\xue\\脚本\\kp_book\\15_module\\mycode\\xue.py&#39;&gt;)</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> mycode.mycode <span class="keyword">import</span> *</span><br><span class="line">_a</span><br></pre></td></tr></table></figure>


<pre><code>---------------------------------------------------------------------------

NameError                                 Traceback (most recent call last)

&lt;ipython-input-14-e68848edb46a&gt; in &lt;module&gt;
      1 from mycode.mycode import *
----&gt; 2 _a


NameError: name &#39;_a&#39; is not defined</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">__f</span><br></pre></td></tr></table></figure>


<pre><code>---------------------------------------------------------------------------

NameError                                 Traceback (most recent call last)

&lt;ipython-input-15-004321bbfec5&gt; in &lt;module&gt;
----&gt; 1 __f


NameError: name &#39;__f&#39; is not defined</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 其他方式则可以导入</span></span><br><span class="line"><span class="keyword">from</span> mycode.mycode <span class="keyword">import</span> __f</span><br><span class="line">print(__f)</span><br><span class="line"><span class="keyword">del</span> __f</span><br></pre></td></tr></table></figure>

<pre><code>&lt;function __f at 0x000001E45129B430&gt;</code></pre>
<ul>
<li>相对导入：</li>
</ul>
<p>存在相对导入代码的模块，通常是不能直接执行的。因为直接执行，解释器认为该模块即为顶级模块，属性 <code>__package__</code> 的值为 None。但可以使用 <code>python -m 模块</code> 命令直接执行。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(__package__)</span><br></pre></td></tr></table></figure>

<pre><code>None</code></pre>
<p>例如，当前文件路径下，文件 <code>mycode/test.py</code> 中相对导入的代码可以使用 <code>python -m 模块</code> 命令直接执行，因为该命令将属性 <code>__package__</code> 重新设置为顶级模块的名称：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># xue.py 模块在 mycode 包中</span></span><br><span class="line"><span class="comment"># mycode/test.py</span></span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> xue</span><br><span class="line">print(xue.msg)</span><br><span class="line">print(__package__)</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">%run -m mycode.test</span><br></pre></td></tr></table></figure>

<pre><code>自学是门手艺
mycode</code></pre>
<p>模块导入之后，即可使用属性表示法调用模块中属性：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random, math</span><br><span class="line">random.randint, math.pi</span><br></pre></td></tr></table></figure>




<pre><code>(&lt;bound method Random.randint of &lt;random.Random object at 0x000002811CF98C80&gt;&gt;,
 3.141592653589793)</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/15_module/04_executable_file-c3365f12ffd1/</url>
    <content><![CDATA[<h2 id="可执行文件"><a href="#可执行文件" class="headerlink" title="可执行文件"></a>可执行文件</h2><p>每一个 <code>.py</code> 文件模块，都是 Python 的可执行文件。文件内容可以为空，但执行什么也不发生。</p>
<p>你可以在某些编辑工具里打开文件执行，也可以在命令行使用 <code>python 文件路径</code> 或 <code>python -m 模块</code> 的方式执行。这些方式都是主模块中直接执行文件。</p>
<p>主模块（你正在运行代码的当前模块）的 <code>__name__</code> 属性总是 <code>&#39;__main__&#39;</code> （<code>__main__</code> 是一个在解释器启动时直接初始化的特殊模块），因此直接执行文件，<code>if __name__ == &#39;__main__&#39;:</code> 语句下的代码一定会被执行，而如果导入到其他模块则不会。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">__name__</span><br></pre></td></tr></table></figure>




<pre><code>&#39;__main__&#39;</code></pre>
<p>下面举例说明：</p>
<p>当前文件路径下，有一个 <code>mycode</code> 的包，包里有 <code>space.py</code>，<code>mycode.py</code> 和 <code>xue.py</code>，三个模块，内容如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># space.py 为空</span></span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># mycode.py</span></span><br><span class="line">print(<span class="string">&#x27;mycode&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> mycode <span class="keyword">import</span> xue</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    print(xue.msg)</span><br></pre></td></tr></table></figure>

<pre><code>mycode
自学是门手艺</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># xue.py</span></span><br><span class="line">msg = <span class="string">&#x27;自学是门手艺&#x27;</span></span><br></pre></td></tr></table></figure>

<p>直接执行效果如上。下面使用命令执行（<code>%run</code> 是 jupyter 的魔法命令，终端请改为 <code>python</code>）：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 文件路径必须带 .py，可以是相对或绝对路径</span></span><br><span class="line">%run mycode/space.py </span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">%run mycode/mycode.py</span><br></pre></td></tr></table></figure>

<pre><code>mycode
自学是门手艺</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> warnings <span class="comment"># 忽略警告</span></span><br><span class="line">warnings.filterwarnings(<span class="string">&quot;ignore&quot;</span>) </span><br><span class="line"></span><br><span class="line"><span class="comment"># 模块可以使用属性表示法，但不能有 .py</span></span><br><span class="line">%run -m mycode.mycode </span><br></pre></td></tr></table></figure>

<pre><code>mycode
自学是门手艺</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 导入则不会执行 if __name__ == &#x27;__main__&#x27;: 语句下的代码</span></span><br><span class="line"><span class="keyword">import</span> mycode.mycode</span><br></pre></td></tr></table></figure>

<pre><code>mycode</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/15_module/02_create_module-fe48140b42f1/</url>
    <content><![CDATA[<h2 id="创建模块"><a href="#创建模块" class="headerlink" title="创建模块"></a>创建模块</h2><p>创建一个模块非常简单，有两种方式：</p>
<ul>
<li><p>创建一个 <code>.py</code> 文件，即可创建一个模块；</p>
</li>
<li><p>创建一个文件夹，则该文件夹也是一个模块（包）。</p>
</li>
</ul>
<p>模块中可以无任何内容。但模块是用来组织代码，实现处理各类问题或完成各种功能的，这更便于应用或开发。例如正则模块 re，科学计算库 pandas 等。</p>
<p>创建一个文件夹，如果文件夹中包含一个 <code>__init__.py</code> 模块，则该文件夹是一个常规包；否则是一个命名空间包。包中还可以再创建子包或子模块。</p>
<p><code>__init__.py</code> 文件中可以无任何内容，但因为当一个常规包被导入时，这个 <code>__init__.py</code> 文件会隐式地被执行，所以通常用来写入一些导入包即可执行的代码，或导入子包，或导入子包中模块的属性等，从而可以直接调用某些属性，例如 pandas 包的文档描述属性 <code>__doc__</code> 和 DataFrame 数据结构。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> folder <span class="comment"># 空文件夹</span></span><br><span class="line">folder</span><br></pre></td></tr></table></figure>




<pre><code>&lt;module &#39;folder&#39; (namespace)&gt;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">print(pd.__doc__)</span><br></pre></td></tr></table></figure>


<pre><code>pandas - a powerful data analysis and manipulation library for Python
=====================================================================

**pandas** is a Python package providing fast, flexible, and expressive data
structures designed to make working with &quot;relational&quot; or &quot;labeled&quot; data both
easy and intuitive. It aims to be the fundamental high-level building block for
doing practical, **real world** data analysis in Python. Additionally, it has
the broader goal of becoming **the most powerful and flexible open source data
analysis / manipulation tool available in any language**. It is already well on
its way toward this goal.

Main Features
-------------
Here are just a few of the things that pandas does well:

  - Easy handling of missing data in floating point as well as non-floating
    point data.
  - Size mutability: columns can be inserted and deleted from DataFrame and
    higher dimensional objects
  - Automatic and explicit data alignment: objects can be explicitly aligned
    to a set of labels, or the user can simply ignore the labels and let
    `Series`, `DataFrame`, etc. automatically align the data for you in
    computations.
  - Powerful, flexible group by functionality to perform split-apply-combine
    operations on data sets, for both aggregating and transforming data.
  - Make it easy to convert ragged, differently-indexed data in other Python
    and NumPy data structures into DataFrame objects.
  - Intelligent label-based slicing, fancy indexing, and subsetting of large
    data sets.
  - Intuitive merging and joining data sets.
  - Flexible reshaping and pivoting of data sets.
  - Hierarchical labeling of axes (possible to have multiple labels per tick).
  - Robust IO tools for loading data from flat files (CSV and delimited),
    Excel files, databases, and saving/loading data from the ultrafast HDF5
    format.
  - Time series-specific functionality: date range generation and frequency
    conversion, moving window statistics, date shifting and lagging.</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 直接调用子包 core 中模块 frame 的属性 DataFrame</span></span><br><span class="line">pd.DataFrame</span><br></pre></td></tr></table></figure>




<pre><code>pandas.core.frame.DataFrame</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/15_module/01_module_summary-ee6e296c3ead/</url>
    <content><![CDATA[<h2 id="模块概述"><a href="#模块概述" class="headerlink" title="模块概述"></a>模块概述</h2><p>模块是 Python 代码的一种组织单位，也是一种对象。各模块具有独立的命名空间，可包含任意 Python 对象。</p>
<p>一个 <code>.py</code> 文件是一个模块；一个文件夹是一个模块（包）；文件夹（包）中还可以再有 <code>.py</code> 文件（子模块）和文件夹（子包）。例如 内置模块 random，和第三方包 pandas。</p>
<p>文件夹中包含一个 <code>__init__.py</code> 文件的包是常规包；无 <code>__init__.py</code> 文件的是命名空间包，仅被用作子包的容器。</p>
<p>模块无论是用 Python、C 还是别的语言实现均可。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random, pandas</span><br><span class="line"><span class="built_in">type</span>(random), <span class="built_in">type</span>(pandas)</span><br></pre></td></tr></table></figure>




<pre><code>(module, module)</code></pre>
<p>所有包都是模块，但并非所有模块都是包。或者换句话说，包只是一种特殊的模块。</p>
<p>可以使用属性 <code>__packge__</code> 查看包名，如果只是模块不是包，该属性为空字符串。</p>
<p><code>__name__</code> 属性是模块的名字。</p>
<p>特别地，主模块（你正在运行代码的当前模块）的 <code>__packge__</code> 属性总是 None；<code>__name__</code> 属性总是 <code>&#39;__main__&#39;</code> （<code>__main__</code> 是一个在解释器启动时直接初始化的特殊模块），这可以控制当前模块能够执行，而导入到其他模块不能被执行的代码，然后用来测试当前模块。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">random.__package__, pandas.__package__</span><br></pre></td></tr></table></figure>




<pre><code>(&#39;&#39;, &#39;pandas&#39;)</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(__package__)</span><br></pre></td></tr></table></figure>

<pre><code>None</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">random.__name__, pandas.__name__</span><br></pre></td></tr></table></figure>




<pre><code>(&#39;random&#39;, &#39;pandas&#39;)</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">__name__</span><br></pre></td></tr></table></figure>




<pre><code>&#39;__main__&#39;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="number">3</span> + <span class="number">2</span> - <span class="number">5</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span>():</span></span><br><span class="line">    print(a+<span class="number">1</span>)</span><br><span class="line">print(a)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 以下代码导入其他模块不会执行</span></span><br><span class="line">    print(a == <span class="number">0</span>)</span><br></pre></td></tr></table></figure>

<pre><code>0
True</code></pre>
<p>使用 import 语句将其他模块导入当前模块；使用属性表示法调用模块中的属性。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">pd.core</span><br></pre></td></tr></table></figure>




<pre><code>&lt;module &#39;pandas.core&#39; from &#39;C:\\ProgramData\\Anaconda3\\lib\\site-packages\\pandas\\core\\__init__.py&#39;&gt;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pd.core.series.Series</span><br></pre></td></tr></table></figure>




<pre><code>pandas.core.series.Series</code></pre>
<p>还可以以脚本的方式执行不属于包的模块（此时 <code>__name__</code> 属性为 <code>&quot;__main__&quot;</code>）。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> this</span><br><span class="line">this</span><br></pre></td></tr></table></figure>

<pre><code>The Zen of Python, by Tim Peters

Beautiful is better than ugly.
Explicit is better than implicit.
Simple is better than complex.
Complex is better than complicated.
Flat is better than nested.
Sparse is better than dense.
Readability counts.
Special cases aren&#39;t special enough to break the rules.
Although practicality beats purity.
Errors should never pass silently.
Unless explicitly silenced.
In the face of ambiguity, refuse the temptation to guess.
There should be one-- and preferably only one --obvious way to do it.
Although that way may not be obvious at first unless you&#39;re Dutch.
Now is better than never.
Although never is often better than *right* now.
If the implementation is hard to explain, it&#39;s a bad idea.
If the implementation is easy to explain, it may be a good idea.
Namespaces are one honking great idea -- let&#39;s do more of those!





&lt;module &#39;this&#39; from &#39;C:\\ProgramData\\Anaconda3\\lib\\this.py&#39;&gt;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># %run 是 jupyter 的魔法命令，在终端使用 python 命令</span></span><br><span class="line"><span class="comment"># F:\anaconda\lib\this.py 根据自己电脑的路径调整</span></span><br><span class="line">%run F:\anaconda\lib\this.py</span><br></pre></td></tr></table></figure>

<pre><code>The Zen of Python, by Tim Peters

Beautiful is better than ugly.
Explicit is better than implicit.
Simple is better than complex.
Complex is better than complicated.
Flat is better than nested.
Sparse is better than dense.
Readability counts.
Special cases aren&#39;t special enough to break the rules.
Although practicality beats purity.
Errors should never pass silently.
Unless explicitly silenced.
In the face of ambiguity, refuse the temptation to guess.
There should be one-- and preferably only one --obvious way to do it.
Although that way may not be obvious at first unless you&#39;re Dutch.
Now is better than never.
Although never is often better than *right* now.
If the implementation is hard to explain, it&#39;s a bad idea.
If the implementation is easy to explain, it may be a good idea.
Namespaces are one honking great idea -- let&#39;s do more of those!</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/14_file/03_write-ec6410c6fc35/</url>
    <content><![CDATA[<h2 id="文件写入内容"><a href="#文件写入内容" class="headerlink" title="文件写入内容"></a>文件写入内容</h2><p>打开方式不同，会创建不同类型的文件对象（流），不同类型的文件对象，可能有不同的属性或方法。</p>
<p>打开模式不同，写入内容的方式也会不同，详见 <a href="https://xue.cn/hub/reader?bookId=64&path=xue_python_kp/11_built-in_function/45_open.ipynb">open() 打开文件</a>。</p>
<p>下列检查或写入内容的属性或方法，是多数文件对象通用的：</p>
<ul>
<li>writable() 如果流支持写入则返回 True。如为 False，则 write() 将引发 OSError。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;test.txt&#x27;</span>,<span class="string">&#x27;a&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">f.writable()</span><br></pre></td></tr></table></figure>




<pre><code>True</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;test.txt&#x27;</span>)</span><br><span class="line">f.writable()</span><br><span class="line">f.write(<span class="string">&#x27;这世界进步得太快，&#x27;</span>)</span><br></pre></td></tr></table></figure>


<pre><code>---------------------------------------------------------------------------

UnsupportedOperation                      Traceback (most recent call last)

&lt;ipython-input-1-7bf449cf8958&gt; in &lt;module&gt;
      1 f = open(&#39;test.txt&#39;)
      2 f.writable()
----&gt; 3 f.write(&#39;这世界进步得太快，&#39;)


UnsupportedOperation: not writable</code></pre>
<ul>
<li>write() 将字符串或字节串写入到流并返回写入的字符或字节数。对于阻塞流（需要刷新才能将内容写入文件），写入内容在缓冲区（打开文件看不到写入的内容）。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;test.txt&#x27;</span>,<span class="string">&#x27;a+&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">f.write(<span class="string">&#x27;\n这世界进步得太快，&#x27;</span>)</span><br></pre></td></tr></table></figure>




<pre><code>10</code></pre>
<ul>
<li>flush() 刷新流的写入缓冲区（打开文件将看到写入的内容）。这对只读和非阻塞流不起作用。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">f.flush()</span><br></pre></td></tr></table></figure>

<ul>
<li>writelines(lines) 将行列表写入到流。不会添加行分隔符，因此通常所提供的每一行都带有末尾行分隔符。对于阻塞流，写入内容在缓冲区。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;test.txt&#x27;</span>,<span class="string">&#x27;a+&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">f.writelines([<span class="string">&#x27;\n没有自学能力，\n&#x27;</span>, <span class="string">&#x27;没有未来。&#x27;</span>])</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">f.tell() <span class="comment"># 流的位置在末尾</span></span><br></pre></td></tr></table></figure>




<pre><code>137</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">f.read() <span class="comment"># 从末尾读取内容为空</span></span><br></pre></td></tr></table></figure>




<pre><code>&#39;&#39;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">f.seek(<span class="number">0</span>, <span class="number">0</span>) <span class="comment"># 重设流的位置为开头</span></span><br></pre></td></tr></table></figure>




<pre><code>0</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">f.read()</span><br></pre></td></tr></table></figure>




<pre><code>&#39;为什么一定要掌握自学能力？\n未来的日子还很长，\n这世界进步得太快，\n没有自学能力，\n没有未来。&#39;</code></pre>
<ul>
<li>closed 如果流已关闭，则返回 True。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">f.closed</span><br></pre></td></tr></table></figure>




<pre><code>False</code></pre>
<ul>
<li>close() 刷新并关闭此流。无论读写操作，最后都应该关闭流。如果文件已经关闭，则此方法无效。文件关闭后，对文件的任何操作（例如读取或写入）都会引发 ValueError 。为方便起见，允许多次调用此方法。但是，只有第一个调用才会生效。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">f.close()</span><br><span class="line">f.close()</span><br><span class="line">f.closed</span><br></pre></td></tr></table></figure>




<pre><code>True</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/14_file/02_read-b076bc13cc25/</url>
    <content><![CDATA[<h2 id="读取文件内容"><a href="#读取文件内容" class="headerlink" title="读取文件内容"></a>读取文件内容</h2><p>打开方式不同，会创建不同类型的文件对象（流），不同类型的文件对象，可能有不同的属性或方法。</p>
<p>下列检查或读取内容的属性或方法，是多数文件对象通用的：</p>
<ul>
<li>readable() 如果可以读取流，则返回 True 。否则为 False ，且 read() 将引发 OSError 错误。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;test.txt&#x27;</span>)</span><br><span class="line">f.readable()</span><br></pre></td></tr></table></figure>




<pre><code>True</code></pre>
<ul>
<li><p>read(size=-1) 从对象中读取 size 个字节并将其返回。作为一个便捷选项，如果 size 未指定或为 -1，则返回所有字节直到 EOF。流的位置与读取内容同步，不重设流的位置，内容只能被读取一次。</p>
</li>
<li><p>tell() 返回当前流的位置。</p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;test.txt&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">f.read()</span><br></pre></td></tr></table></figure>




<pre><code>&#39;为什么一定要掌握自学能力？\n未来的日子还很长，\n这世界进步得太快，\n没有自学能力，\n没有未来。&#39;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;test.txt&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">f.read(<span class="number">12</span>)</span><br></pre></td></tr></table></figure>




<pre><code>&#39;为什么一定要掌握自学能力&#39;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">f.tell()</span><br></pre></td></tr></table></figure>




<pre><code>36</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">f.read() <span class="comment"># 再次读取，将读取剩下未读部分</span></span><br></pre></td></tr></table></figure>




<pre><code>&#39;？\n未来的日子还很长，\n这世界进步得太快，\n没有自学能力，\n没有未来。&#39;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">f.read() <span class="comment"># 已经没有内容</span></span><br></pre></td></tr></table></figure>




<pre><code>&#39;&#39;</code></pre>
<ul>
<li>seek(offset, whence=0) 将流位置修改到给定的字节 offset。返回新的绝对位置。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">f.seek(<span class="number">0</span>, <span class="number">0</span>)</span><br></pre></td></tr></table></figure>




<pre><code>0</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">f.read() <span class="comment"># 从新位置读取</span></span><br></pre></td></tr></table></figure>




<pre><code>&#39;为什么一定要掌握自学能力？\n未来的日子还很长，\n这世界进步得太快，\n没有自学能力，\n没有未来。&#39;</code></pre>
<ul>
<li>readline(size=-1) 从流中读取并返回一行。如果指定了 size，将至多读取 size 个字节。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;test.txt&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">f.readline()</span><br></pre></td></tr></table></figure>




<pre><code>&#39;为什么一定要掌握自学能力？\n&#39;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">f.readline(<span class="number">2</span>) <span class="comment"># 再次读取，将读取剩下未读部分</span></span><br></pre></td></tr></table></figure>




<pre><code>&#39;未来&#39;</code></pre>
<ul>
<li>readlines(hint=-1) 从流中读取并返回包含多行的列表。可以指定 hint 来控制要读取的行数。指定行数可以多于实际。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;test.txt&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">f.readlines(<span class="number">1</span>)</span><br></pre></td></tr></table></figure>




<pre><code>[&#39;为什么一定要掌握自学能力？\n&#39;]</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">f.readlines(<span class="number">10</span>) <span class="comment"># 再次读取，将读取剩下未读部分</span></span><br></pre></td></tr></table></figure>




<pre><code>[&#39;未来的日子还很长，\n&#39;, &#39;这世界进步得太快，\n&#39;]</code></pre>
<ul>
<li>使用 <code>for line in file: ...</code> 就足够对文件对象进行迭代了，可以不必调用 file.readlines()。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;test.txt&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line">    print(line)</span><br></pre></td></tr></table></figure>

<pre><code>为什么一定要掌握自学能力？

未来的日子还很长，

这世界进步得太快，

没有自学能力，

没有未来。</code></pre>
<ul>
<li>closed 如果流已关闭，则返回 True。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">f.closed</span><br></pre></td></tr></table></figure>




<pre><code>False</code></pre>
<ul>
<li>close() 刷新并关闭此流。无论读写操作，最后都应该关闭流。如果文件已经关闭，则此方法无效。文件关闭后，对文件的任何操作（例如读取或写入）都会引发 ValueError 。为方便起见，允许多次调用此方法。但是，只有第一个调用才会生效。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">f.close()</span><br><span class="line">f.close()</span><br><span class="line">f.closed</span><br></pre></td></tr></table></figure>




<pre><code>True</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/14_file/01_file_summary-d01fc64a461c/</url>
    <content><![CDATA[<h2 id="文件对象概述"><a href="#文件对象概述" class="headerlink" title="文件对象概述"></a>文件对象概述</h2><p>文件对象是指对外提供面向文件 API 以使用下层资源的对象（带有 read() 或 write() 这样的方法），也被称作<strong>流</strong>或<strong>文件类对象</strong>。</p>
<p>有三种类别的文件对象: 原始二进制文件, 缓冲二进制文件 以及<br>文本文件。三种类别下还有子类别，因创建方式的不同得到不同类别文件对象。它们的接口定义均在 io 模块中。创建文件对象的规范方式是使用 <a href="https://xue.cn/hub/reader?bookId=64&path=xue_python_kp/11_built-in_function/45_open.ipynb">open() 函数</a>。</p>
<p>用户代码直接操作原始流的用法非常罕见。不过，可以通过在禁用缓冲的情况下以二进制模式打开文件来创建原始流：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">f = <span class="built_in">open</span>(<span class="string">&quot;test.txt&quot;</span>,<span class="string">&quot;rb&quot;</span>, buffering=<span class="number">0</span>)</span><br><span class="line">f</span><br></pre></td></tr></table></figure>




<pre><code>&lt;_io.FileIO name=&#39;test.txt&#39; mode=&#39;rb&#39; closefd=True&gt;</code></pre>
<p>缓冲二进制流不执行编码、解码或换行转换。这种类型的流可以用于所有类型的非文本数据（例如图片，视频），并且还可以在需要手动控制文本数据的处理时使用。创建缓冲二进制流的最简单方法是使用 open()，并在模式中指定 ‘b’：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">f = <span class="built_in">open</span>(<span class="string">&quot;test.txt&quot;</span>,<span class="string">&quot;rb&quot;</span>)</span><br><span class="line">f</span><br></pre></td></tr></table></figure>




<pre><code>&lt;_io.BufferedReader name=&#39;test.txt&#39;&gt;</code></pre>
<p>文本流生成 str 对象。这意味着，无论何时后台存储是由字节组成的，数据的编码和解码都是透明的，并且可以选择转换特定于平台的换行符。创建文本流的最简单方法是使用 open()，可以选择指定编码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">f = <span class="built_in">open</span>(<span class="string">&quot;test.txt&quot;</span>,encoding=<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">f</span><br></pre></td></tr></table></figure>




<pre><code>&lt;_io.TextIOWrapper name=&#39;test.txt&#39; mode=&#39;r&#39; encoding=&#39;utf-8&#39;&gt;</code></pre>
<p>所有流对提供给它们的数据类型都很敏感。例如将 str 对象给二进制流的 write() 方法会引发 TypeError。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">f = <span class="built_in">open</span>(<span class="string">&quot;test.txt&quot;</span>,<span class="string">&quot;ab&quot;</span>)</span><br><span class="line">f.write(<span class="string">&#x27;写入内容&#x27;</span>)</span><br></pre></td></tr></table></figure>


<pre><code>---------------------------------------------------------------------------

TypeError                                 Traceback (most recent call last)

&lt;ipython-input-19-a9efd264aca2&gt; in &lt;module&gt;
      1 f = open(&quot;test.txt&quot;,&quot;ab&quot;)
----&gt; 2 f.write(&#39;写入内容&#39;)


TypeError: a bytes-like object is required, not &#39;str&#39;</code></pre>
<p>内存中的流也可以作为文件对象使用：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> io</span><br><span class="line">f = io.StringIO(<span class="string">&quot;some initial text data&quot;</span>)</span><br><span class="line">print(f)</span><br><span class="line">f.read()</span><br></pre></td></tr></table></figure>

<pre><code>&lt;_io.StringIO object at 0x000001BE348D2040&gt;





&#39;some initial text data&#39;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">f = io.BytesIO(<span class="string">b&quot;some initial binary data: \x00\x01&quot;</span>)</span><br><span class="line">print(f)</span><br><span class="line">f.read()</span><br></pre></td></tr></table></figure>

<pre><code>&lt;_io.BytesIO object at 0x000001BE348D3310&gt;





b&#39;some initial binary data: \x00\x01&#39;</code></pre>
<p>open() 函数打开文件，创建流后，会使文件在一段不确定的时间内处于打开状态。这在简单脚本中不是问题，但对于较大的应用程序来说可能是个问题。此时用 close() 方法刷新并关闭流（或直接使用 with 语句打开）是明智的做法。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">f = <span class="built_in">open</span>(<span class="string">&quot;test.txt&quot;</span>,encoding=<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">print(f.read())</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure>

<pre><code>为什么要掌握自学能力？
未来还很长。</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/13_exception/05_finally-83663a0ba2c5/</url>
    <content><![CDATA[<h2 id="finally-清理操作"><a href="#finally-清理操作" class="headerlink" title="finally 清理操作"></a>finally 清理操作</h2><p>try 语句有另一个可选子句 finally，用于定义必须在所有情况下执行的清理操作（详见 <a href="https://xue.cn/hub/reader?bookId=64&path=xue_python_kp/10_statement/14_try.ipynb">try 语句</a>）。</p>
<p>例如，在 finally 子句中关闭打开的文件：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_file</span>():</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        f = <span class="built_in">open</span>(<span class="string">&#x27;../11_built-in_function/test.txt&#x27;</span>,</span><br><span class="line">                encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> f.read()</span><br><span class="line">    <span class="keyword">except</span> OSError:</span><br><span class="line">        print(<span class="string">&#x27;不能打开&#x27;</span>)</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        print(<span class="string">&#x27;执行清理操作&#x27;</span>)</span><br><span class="line">        f.close()</span><br><span class="line">        </span><br><span class="line">read_file() <span class="comment"># 先执行关闭，在执行返回</span></span><br></pre></td></tr></table></figure>

<pre><code>执行清理操作





&#39;xue.cn\n\n自学是门手艺&#39;</code></pre>
<p>如果 finally 子句中引发了新的异常，清理操作本身无效，则达不到清理目的：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_file</span>():</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        f = <span class="built_in">open</span>(<span class="string">&#x27;../11_built-in_function/test.txt&#x27;</span>,</span><br><span class="line">                encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> f.read()</span><br><span class="line">    <span class="keyword">except</span> OSError:</span><br><span class="line">        print(<span class="string">&#x27;不能打开&#x27;</span>)</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        print(执行清理操作) <span class="comment"># 清理操作引发异常</span></span><br><span class="line">        f.close()</span><br><span class="line">        </span><br><span class="line">read_file() </span><br></pre></td></tr></table></figure>


<pre><code>---------------------------------------------------------------------------

NameError                                 Traceback (most recent call last)

&lt;ipython-input-13-af7cdb6d88f0&gt; in &lt;module&gt;
     10         f.close()
     11 
---&gt; 12 read_file() # 先执行关闭，在执行返回


&lt;ipython-input-13-af7cdb6d88f0&gt; in read_file()
      7         print(&#39;不能打开&#39;)
      8     finally:
----&gt; 9         print(执行清理操作) # 清理操作引发异常
     10         f.close()
     11 


NameError: name &#39;执行清理操作&#39; is not defined</code></pre>
<p>某些对象（例如文件对象）定义了在不再需要该对象时，要执行的标准清理操作，无论使用该对象的操作是成功还是失败，清理操作都会被执行。此时使用 with 语句允许像文件这样的对象能够以一种确保它们得到及时和正确的清理的方式使用。</p>
<p>with 语句相当于将引发异常情况下的清理操作放到了 except 子句中，正常情况下的清理操作放到了 finally 子句中。详情见 <a href="https://xue.cn/hub/reader?bookId=64&path=xue_python_kp/10_statement/16_with.ipynb">with 语句</a>。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_file</span>():</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;../11_built-in_function/test.txt&#x27;</span>,</span><br><span class="line">                encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">return</span> f.read()</span><br><span class="line">    </span><br><span class="line">read_file()</span><br></pre></td></tr></table></figure>




<pre><code>&#39;xue.cn\n\n自学是门手艺&#39;</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/13_exception/04_user_defined-7d9496ca5f07/</url>
    <content><![CDATA[<h2 id="自定义异常"><a href="#自定义异常" class="headerlink" title="自定义异常"></a>自定义异常</h2><p>可以通过创建新的异常类来自定义代码执行错误引发的异常。许多标准模块定义了它们自己的异常，以报告它们定义的函数中可能出现的错误。</p>
<p>异常通常应该直接或间接地从 Exception 类派生。定义的异常类，可以执行任何其他类可以执行的任何操作，但通常保持简单，只提供一些属性，这<br>些属性允许处理程序为异常提取有关错误的信息。</p>
<p>在创建可能引发多个不同错误的模块时，通常的做法是为该模块定义的异常创建基类，并为不同错误条件创建特定异常类的子类。大多数异常都定义为名称以 <code>Error</code> 结尾，类似于标准异常的命名:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Error</span>(<span class="params">Exception</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Base class for exceptions in this module.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">InputError</span>(<span class="params">Error</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Exception raised for errors in the input.</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Attributes:</span></span><br><span class="line"><span class="string">        expression -- input expression in which the error occurred</span></span><br><span class="line"><span class="string">        message -- explanation of the error</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, expression, message</span>):</span></span><br><span class="line">        self.expression = expression</span><br><span class="line">        self.message = message</span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TransitionError</span>(<span class="params">Error</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Raised when an operation attempts a state transition that&#x27;s not allowed.</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Attributes:</span></span><br><span class="line"><span class="string">        previous -- state at beginning of transition</span></span><br><span class="line"><span class="string">        next -- attempted new state</span></span><br><span class="line"><span class="string">        message -- explanation of why the specific transition is not allowed</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, previous, <span class="built_in">next</span>, message</span>):</span></span><br><span class="line">        self.previous = previous</span><br><span class="line">        self.<span class="built_in">next</span> = <span class="built_in">next</span></span><br><span class="line">        self.message = message</span><br><span class="line">        </span><br><span class="line"><span class="keyword">raise</span> InputError(<span class="number">3</span>/<span class="number">1</span>,<span class="string">&#x27;分母不能为 1&#x27;</span>)</span><br></pre></td></tr></table></figure>


<pre><code>---------------------------------------------------------------------------

InputError                                Traceback (most recent call last)

&lt;ipython-input-2-d0c6938bc1c4&gt; in &lt;module&gt;
     29         self.message = message
     30 
---&gt; 31 raise InputError(3/1,&#39;分母不能为 1&#39;)


InputError: (3.0, &#39;分母不能为 1&#39;)</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/13_exception/03_raising-1d22dc227b1a/</url>
    <content><![CDATA[<h2 id="抛出异常"><a href="#抛出异常" class="headerlink" title="抛出异常"></a>抛出异常</h2><p><a href="https://xue.cn/hub/reader?bookId=64&path=xue_python_kp/10_statement/15_raise.ipynb">raise 语句</a> 允许强制发生指定的异常。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">raise</span> NameError(<span class="string">&#x27;HiThere&#x27;</span>)</span><br></pre></td></tr></table></figure>


<pre><code>---------------------------------------------------------------------------

NameError                                 Traceback (most recent call last)

&lt;ipython-input-1-72c183edb298&gt; in &lt;module&gt;
----&gt; 1 raise NameError(&#39;HiThere&#39;)


NameError: HiThere</code></pre>
<p>如果你需要确定是否引发了异常但不打算处理它，则可以使用更简单的 raise 语句形式重新引发异常:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">raise</span> NameError(<span class="string">&#x27;HiThere&#x27;</span>)</span><br><span class="line"><span class="keyword">except</span> NameError:</span><br><span class="line">    print(<span class="string">&#x27;An exception flew by!&#x27;</span>)</span><br><span class="line">    <span class="keyword">raise</span></span><br></pre></td></tr></table></figure>

<pre><code>An exception flew by!



---------------------------------------------------------------------------

NameError                                 Traceback (most recent call last)

&lt;ipython-input-2-bf6ef4926f8c&gt; in &lt;module&gt;
      1 try:
----&gt; 2     raise NameError(&#39;HiThere&#39;)
      3 except NameError:
      4     print(&#39;An exception flew by!&#39;)
      5     raise


NameError: HiThere</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/13_exception/02_handling-d20186248e3c/</url>
    <content><![CDATA[<h2 id="处理异常"><a href="#处理异常" class="headerlink" title="处理异常"></a>处理异常</h2><p>异常处理通过 try 语句（详细语法及使用规则见 <a href="https://xue.cn/hub/reader?bookId=64&path=xue_python_kp/10_statement/14_try.ipynb">try 语句</a>）来实现。</p>
<p>通过 try 语句处理程序已经出现或可能出现异常，使代码能够继续执行，否则异常未被处理，程序终止执行。</p>
<p>例如下列代码要求用户输入有效的整数：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        x = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;Please enter a number: &quot;</span>))</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">except</span> ValueError:</span><br><span class="line">        print(<span class="string">&quot;Oops! That was no valid number. Try again...&quot;</span>)</span><br></pre></td></tr></table></figure>

<pre><code>Please enter a number:  3.14


Oops! That was no valid number. Try again...


Please enter a number:  314</code></pre>
<p>try 语句的工作原理如下：</p>
<ul>
<li><p>首先执行 try 子句；</p>
</li>
<li><p>如果没有异常发生，则跳过 except 子句并完成 try 语句的执行；</p>
</li>
<li><p>如果在执行 try 子句时发生了异常，则跳过该子句中剩下的部分。然后，如果异常的类型和 except 关键字后面的异常匹配，则执行 except 子句，然后继续执行 try 语句之后的代码；</p>
</li>
<li><p>如果发生的异常和 except 子句中指定的异常不匹配，则将其传递到外部的 try 语句中；如果没有找到处理程序，则它是一个未处理异常，执行将停止并显示异常信息。</p>
</li>
</ul>
<p>一个 try 语句可能有多个 except 子句，以指定不同异常的处理程序，但最多会执行一个处理程序。</p>
<p>处理程序只处理相应的 try 子句中发生的异常。如果发生的异常和 except 子句中的类是同一个类或者是它的基类，则异常和 except 子句中的类是兼容的。如果首先处理了基类，子类不再被处理（子类也被基类处理了）：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>(<span class="params">Exception</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span>(<span class="params">B</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span>(<span class="params">C</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> cls <span class="keyword">in</span> [B, C, D]:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">raise</span> cls()</span><br><span class="line">    <span class="keyword">except</span> D:</span><br><span class="line">        print(<span class="string">&quot;D&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> C:</span><br><span class="line">        print(<span class="string">&quot;C&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> B:</span><br><span class="line">        print(<span class="string">&quot;B&quot;</span>)</span><br></pre></td></tr></table></figure>

<pre><code>B
C
D</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>(<span class="params">Exception</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span>(<span class="params">B</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span>(<span class="params">C</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> cls <span class="keyword">in</span> [B, C, D]:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">raise</span> cls()</span><br><span class="line">    <span class="keyword">except</span> B: <span class="comment"># 下列都是 B 的子类，不再被处理</span></span><br><span class="line">        print(<span class="string">&quot;B&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> C:</span><br><span class="line">        print(<span class="string">&quot;C&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> D:</span><br><span class="line">        print(<span class="string">&quot;D&quot;</span>)</span><br></pre></td></tr></table></figure>

<pre><code>B
B
B</code></pre>
<p>最后的 except 子句可以省略异常名，以用作通配符。但请谨慎使用，因为以这种方式很容易掩盖真正的编程错误！它还可用于打印错误消息，然后重新引发异常:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="number">3</span>/<span class="number">0</span></span><br><span class="line"><span class="keyword">except</span> ValueError <span class="keyword">as</span> v:</span><br><span class="line">    print(v)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    print(<span class="string">&quot;Unexpected error:&quot;</span>, sys.exc_info()[<span class="number">0</span>])</span><br><span class="line">    <span class="keyword">raise</span></span><br></pre></td></tr></table></figure>

<pre><code>Unexpected error: &lt;class &#39;ZeroDivisionError&#39;&gt;



---------------------------------------------------------------------------

ZeroDivisionError                         Traceback (most recent call last)

&lt;ipython-input-13-f0b3e840c5ab&gt; in &lt;module&gt;
      2 
      3 try:
----&gt; 4     3/0
      5 except ValueError as v:
      6     print(v)


ZeroDivisionError: division by zero</code></pre>
<p>可选的 else 子句，在使用时必须放在所有的 except 子句后面。对于在 try 子句不引发异常时必须执行的代码来说很有用：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    f = <span class="built_in">open</span>(<span class="string">&#x27;../11_built-in_function/test.txt&#x27;</span>,</span><br><span class="line">             <span class="string">&#x27;r&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"><span class="keyword">except</span> OSError:</span><br><span class="line">    print(<span class="string">&#x27;cannot open&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="built_in">len</span>(f.readlines()), <span class="string">&#x27;lines&#x27;</span>)</span><br><span class="line">    f.close()</span><br></pre></td></tr></table></figure>

<pre><code>3 lines</code></pre>
<p>异常处理程序不仅处理 try 子句中遇到的异常，还处理 try 子句中调用（即使是间接地）的函数内部发生的异常。</p>
<p>如果 try 子句中有多个可能的异常，只处理最先引发的：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">3</span>/<span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    f() * <span class="built_in">int</span>(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line"><span class="keyword">except</span> ValueError <span class="keyword">as</span> v:</span><br><span class="line">    print(v)</span><br><span class="line"><span class="keyword">except</span>  ZeroDivisionError <span class="keyword">as</span> z:</span><br><span class="line">    print(z)</span><br></pre></td></tr></table></figure>

<pre><code>division by zero</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/13_exception/01_ex_summary-033968da8661/</url>
    <content><![CDATA[<h2 id="错误和异常"><a href="#错误和异常" class="headerlink" title="错误和异常"></a>错误和异常</h2><p>异常中断代码块的正常控制流程以便处理 <strong>错误</strong> 或 <strong>其他异常条件</strong> 。它是 Python 中的一类对象。一个异常表示一个或一类错误。</p>
<p>异常会在错误被检测到的位置引发，它可以被 <strong>当前包围发生错误的代码块</strong> 或是 <strong>任何直接或间接调用发生错误的代码块的其他代码块</strong> 所处理。</p>
<p>Python 解析器会在检测到代码运行错误的时候引发异常。也可以通过 raise 语句显式地引发异常。</p>
<p>异常处理通过 <a href="https://xue.cn/hub/reader?bookId=64&path=xue_python_kp/10_statement/14_try.ipynb">try 语句</a> 来指定。该语句的 finally 子句可被用来指定清理代码，它并不处理异常，而是无论之前的代码是否发生异常都会被执行。</p>
<p>Python 的错误处理采用的是 “终止” 模型：异常处理器可以找出发生了什么问题，并在外层继续执行，但它不能修复错误的根源并重试失败的操作（除非通过从顶层重新进入出错的代码片段）。</p>
<p>当一个异常完全未被处理时，解释器会终止程序的执行，或者返回交互模式。无论是哪种情况，它都会打印栈回溯信息，除非是当异常为 SystemExit 的时候。</p>
<p>异常是通过类实例来标识的。except 子句必须引用实例的类或是其所属的基类。实例可通过处理器被接收，并可携带有关异常条件的附加信息。</p>
<p>在 Python 中，所有异常必须为一个派生自 BaseException 的类的实例。</p>
<p>内置异常类可以被子类化以定义新的异常。鼓励从 Exception 类或它的某个子类而不是从 BaseException 来派生新的异常。</p>
<p>内置异常的类层级结构如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">BaseException</span><br><span class="line">+-- SystemExit</span><br><span class="line">+-- KeyboardInterrupt</span><br><span class="line">+-- GeneratorExit</span><br><span class="line">+-- Exception</span><br><span class="line">      +-- StopIteration</span><br><span class="line">      +-- StopAsyncIteration</span><br><span class="line">      +-- ArithmeticError</span><br><span class="line">      | +-- FloatingPointError</span><br><span class="line">      | +-- OverflowError</span><br><span class="line">      | +-- ZeroDivisionError</span><br><span class="line">      +-- AssertionError</span><br><span class="line">      +-- AttributeError</span><br><span class="line">      +-- BufferError</span><br><span class="line">      +-- EOFError</span><br><span class="line">      +-- ImportError</span><br><span class="line">      | +-- ModuleNotFoundError</span><br><span class="line">      +-- LookupError</span><br><span class="line">      | +-- IndexError</span><br><span class="line">      | +-- KeyError</span><br><span class="line">      +-- MemoryError</span><br><span class="line">      +-- NameError</span><br><span class="line">      | +-- UnboundLocalError</span><br><span class="line">      +-- OSError</span><br><span class="line">      | +-- BlockingIOError</span><br><span class="line">      | +-- ChildProcessError</span><br><span class="line">      | +-- ConnectionError</span><br><span class="line">      | | +-- BrokenPipeError</span><br><span class="line">      | | +-- ConnectionAbortedError</span><br><span class="line">      | | +-- ConnectionRefusedError</span><br><span class="line">      | | +-- ConnectionResetError</span><br><span class="line">      | +-- FileExistsError</span><br><span class="line">      | +-- FileNotFoundError</span><br><span class="line">      | +-- InterruptedError</span><br><span class="line">      | +-- IsADirectoryError</span><br><span class="line">      | +-- NotADirectoryError</span><br><span class="line">      | +-- PermissionError</span><br><span class="line">      | +-- ProcessLookupError</span><br><span class="line">      | +-- TimeoutError</span><br><span class="line">      +-- ReferenceError</span><br><span class="line">      +-- RuntimeError</span><br><span class="line">      | +-- NotImplementedError</span><br><span class="line">      | +-- RecursionError</span><br><span class="line">      +-- SyntaxError</span><br><span class="line">      | +-- IndentationError</span><br><span class="line">      | +-- TabError</span><br><span class="line">      +-- SystemError</span><br><span class="line">      +-- TypeError</span><br><span class="line">      +-- ValueError</span><br><span class="line">      | +-- UnicodeError</span><br><span class="line">      | +-- UnicodeDecodeError</span><br><span class="line">      | +-- UnicodeEncodeError</span><br><span class="line">      | +-- UnicodeTranslateError</span><br><span class="line">      +-- Warning</span><br><span class="line">           +-- DeprecationWarning</span><br><span class="line">           +-- PendingDeprecationWarning</span><br><span class="line">           +-- RuntimeWarning</span><br><span class="line">           +-- SyntaxWarning</span><br><span class="line">           +-- UserWarning</span><br><span class="line">           +-- FutureWarning</span><br><span class="line">           +-- ImportWarning</span><br><span class="line">           +-- UnicodeWarning</span><br><span class="line">           +-- BytesWarning</span><br><span class="line">           +-- ResourceWarning</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/12_function/09_generator-df69a72591b5/</url>
    <content><![CDATA[<h2 id="生成器函数"><a href="#生成器函数" class="headerlink" title="生成器函数"></a>生成器函数</h2><p>函数定义中使用了 <a href="https://xue.cn/hub/reader?bookId=64&path=xue_python_kp/10_statement/12_yield.ipynb">yield 语句</a>，该定义创建的函数是生成器函数。生成器函数通常也直接叫生成器。</p>
<p>当一个生成器函数被调用的时候，它返回一个迭代器，也称为生成器（全称是生成器迭代器，下面所说生成器均指生成器迭代器）。然后通过这个生成器来控制生成器函数的执行。</p>
<p>生成器是一个迭代器，也是一个可迭代对象。但一个生成器生成的 “元素” 只能被使用一次，原因如下：</p>
<ul>
<li><p>迭代生成器的时候，生成器函数开始执行，执行到 yield，然后执行被挂起，给生成器的调用者返回 yield 之后的表达式的值。挂起后，所有局部状态都被保留下来，包括局部变量的当前绑定，指令指针，内部求值栈和任何异常处理的状态。</p>
</li>
<li><p>继续迭代生成器，生成器函数从挂起状态继续执行，执行到 yield，然后执行又被挂起，给生成器的调用者返回 yield 之后的表达式的值。</p>
</li>
<li><p>生成器迭代完成时，引发 StopIteration。</p>
</li>
</ul>
<p>在一个生成器函数中，return 语句表示生成器已完成并将导致 StopIteration 被引发。返回值（如果有的话）会被当作一个参数用来构建 StopIteration 并成为 StopIteration.value 属性。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">next</span>(g)</span><br></pre></td></tr></table></figure>




<pre><code>0</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="keyword">yield</span> n</span><br><span class="line">g = f(<span class="number">0</span>)</span><br><span class="line">print(f)</span><br><span class="line">print(g)</span><br></pre></td></tr></table></figure>

<pre><code>&lt;function f at 0x000002480120ACA0&gt;
&lt;generator object f at 0x000002480122E040&gt;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">next</span>(g) <span class="comment"># 迭代结束</span></span><br></pre></td></tr></table></figure>


<pre><code>---------------------------------------------------------------------------

StopIteration                             Traceback (most recent call last)

&lt;ipython-input-3-c91425ed1388&gt; in &lt;module&gt;
----&gt; 1 next(g) # 迭代结束


StopIteration: </code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="keyword">yield</span> n</span><br><span class="line">    n += <span class="number">1</span></span><br><span class="line">    <span class="keyword">yield</span> n</span><br><span class="line">    n += <span class="number">1</span></span><br><span class="line">    <span class="keyword">yield</span> n</span><br><span class="line">    <span class="comment"># 生成器已完成，后面的不被执行</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;end&#x27;</span></span><br><span class="line">    n += <span class="number">1</span></span><br><span class="line">    <span class="keyword">yield</span> n</span><br><span class="line">    </span><br><span class="line">g = f(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        print(<span class="built_in">next</span>(g))</span><br><span class="line">    <span class="keyword">except</span> StopIteration <span class="keyword">as</span> s:</span><br><span class="line">        print(s.value) <span class="comment"># StopIteration.value 属性</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="comment"># 迭代结束，不能再次迭代生成器</span></span><br><span class="line"><span class="built_in">next</span>(g)</span><br></pre></td></tr></table></figure>

<pre><code>0
1
2
end



---------------------------------------------------------------------------

StopIteration                             Traceback (most recent call last)

&lt;ipython-input-10-3ebb4e469fc1&gt; in &lt;module&gt;
     19         break
     20 # 迭代结束，不能再次迭代生成器
---&gt; 21 next(g)


StopIteration: </code></pre>
<p><code>yield from</code> 将可迭代对象中的每一项作为生成器的迭代项：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span>(<span class="params">*args</span>):</span></span><br><span class="line">    <span class="keyword">yield</span> <span class="keyword">from</span> args</span><br><span class="line"></span><br><span class="line">g = f(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line"><span class="built_in">next</span>(g),<span class="built_in">list</span>(g)</span><br></pre></td></tr></table></figure>




<pre><code>(1, [2, 3])</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span>(<span class="params">arg</span>):</span></span><br><span class="line">    <span class="keyword">yield</span> <span class="keyword">from</span> arg</span><br><span class="line"></span><br><span class="line">g = f(<span class="string">&#x27;123&#x27;</span>)</span><br><span class="line">print(<span class="built_in">list</span>(g))</span><br><span class="line"><span class="comment"># g 使用结束，再次使用什么也没有，创建了一个空列表</span></span><br><span class="line">print(<span class="built_in">list</span>(g))</span><br><span class="line"><span class="comment"># 如要再次使用可再创建一个生成器</span></span><br><span class="line"><span class="built_in">list</span>(f(<span class="string">&#x27;123&#x27;</span>))</span><br></pre></td></tr></table></figure>

<pre><code>[&#39;1&#39;, &#39;2&#39;, &#39;3&#39;]
[]





[&#39;1&#39;, &#39;2&#39;, &#39;3&#39;]</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/12_function/08_lambda-52545d66e728/</url>
    <content><![CDATA[<h2 id="lambda-函数"><a href="#lambda-函数" class="headerlink" title="lambda 函数"></a>lambda 函数</h2><p>lambda 函数由 lambda 表达式创建，表达式的语法为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">lambda parameters: expression</span><br></pre></td></tr></table></figure>
<p>形参 <code>parameters</code> 是可选的，表达式 <code>expression</code> 会在函数调用时被求值并作为返回值返回。</p>
<p>表达式必须显示地确定为一个表达式，而不能像 return 语句那样返回多个表达式（默认为一个元组）。</p>
<p>lambda 表达式会创建一个没有名字的函数，函数不能包含语句或标注，可以像调用函数一样直接调用它。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">(<span class="keyword">lambda</span> x,y: x**y)(<span class="number">2</span>,<span class="number">3</span>)</span><br></pre></td></tr></table></figure>




<pre><code>8</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">lambda</span> x,y: x**y</span><br></pre></td></tr></table></figure>




<pre><code>&lt;function __main__.&lt;lambda&gt;(x, y)&gt;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 返回值必须显示地确定为一个表达式</span></span><br><span class="line">f = <span class="keyword">lambda</span> x: <span class="built_in">sum</span>(x),<span class="built_in">max</span>(x),<span class="built_in">min</span>(x)</span><br><span class="line">f([<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>])</span><br></pre></td></tr></table></figure>


<pre><code>---------------------------------------------------------------------------

NameError                                 Traceback (most recent call last)

&lt;ipython-input-5-1652333b2bc4&gt; in &lt;module&gt;
      1 # 必须显示地确定为一个表达式
----&gt; 2 f = lambda x: sum(x),max(x),min(x)
      3 f([2,3,4])


NameError: name &#39;x&#39; is not defined</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">f = <span class="keyword">lambda</span> x: (<span class="built_in">sum</span>(x),<span class="built_in">max</span>(x),<span class="built_in">min</span>(x))</span><br><span class="line">f([<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>])</span><br></pre></td></tr></table></figure>




<pre><code>(9, 4, 2)</code></pre>
<p>lambda 函数通常在以函数作为参数的高阶函数中使用，没有名称，用完即弃。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = [<span class="string">&#x27;2  2&#x27;</span>, <span class="string">&#x27;2 1 &#x27;</span>,<span class="string">&#x27;2  3&#x27;</span>]</span><br><span class="line"><span class="built_in">sorted</span>(a,key=<span class="keyword">lambda</span> x:<span class="string">&#x27;&#x27;</span>.join(x.split()))</span><br></pre></td></tr></table></figure>




<pre><code>[&#39;2 1 &#39;, &#39;2  2&#39;, &#39;2  3&#39;]</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">list</span>(<span class="built_in">map</span>(<span class="keyword">lambda</span> x:<span class="string">&#x27;&#x27;</span>.join(x.split()), a))</span><br></pre></td></tr></table></figure>




<pre><code>[&#39;22&#39;, &#39;21&#39;, &#39;23&#39;]</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/12_function/07_function_call-d874c9f52350/</url>
    <content><![CDATA[<h2 id="函数调用"><a href="#函数调用" class="headerlink" title="函数调用"></a>函数调用</h2><p>函数名之后带一个圆括号，圆括号内，根据形参的类型（详见<a href="xue/%E8%84%9A%E6%9C%AC/kp_book/12_function/03_formal_parameter.ipynb">函数形参</a>），给函数传递相应的实参，即可调用函数，执行函数体中的代码。</p>
<p>函数调用传递的实参分为：<strong>位置参数</strong>和<strong>关键字参数</strong>。</p>
<ul>
<li>位置参数: 调用函数时，不带标识符（例如 name=）直接按形参位置传递给函数的参数。位置参数可使用 <code>*</code> 将可迭代对象的元素拆包传入函数，但元素个数不能多于可接收位置参数的形参个数，除非有接收多个位置参数的可变位置形参。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span>(<span class="params">a,b=<span class="literal">None</span>,*c,d=<span class="literal">None</span></span>):</span></span><br><span class="line">    print(<span class="string">f&#x27;a=<span class="subst">&#123;a&#125;</span>,b=<span class="subst">&#123;b&#125;</span>,c=<span class="subst">&#123;c&#125;</span>,d=<span class="subst">&#123;d&#125;</span>&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">f(*[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]) <span class="comment"># d 只能接收关键字参数</span></span><br></pre></td></tr></table></figure>

<pre><code>a=1,b=2,c=(3, 4, 5),d=None</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span>(<span class="params">a,b=<span class="literal">None</span>,*,c=<span class="literal">None</span></span>):</span></span><br><span class="line">    print(<span class="string">f&#x27;a=<span class="subst">&#123;a&#125;</span>,b=<span class="subst">&#123;b&#125;</span>,c=<span class="subst">&#123;c&#125;</span>&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">f(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line">f(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>) <span class="comment"># c 只能接收关键字参数</span></span><br></pre></td></tr></table></figure>

<pre><code>a=1,b=2,c=None



---------------------------------------------------------------------------

TypeError                                 Traceback (most recent call last)

&lt;ipython-input-2-9cc318bcfef7&gt; in &lt;module&gt;
      2     print(f&#39;a=&#123;a&#125;,b=&#123;b&#125;,c=&#123;c&#125;&#39;)
      3 f(1,2)
----&gt; 4 f(1,2,3)


TypeError: f() takes from 1 to 2 positional arguments but 3 were given</code></pre>
<ul>
<li>关键字参数: 函数调用中前面带有标识符（例如 name=）传递给函数的参数。关键字参数可以使用 <code>**</code> 将字典里的元素传入函数，但元素个数不能多于可接收关键字参数的形参个数。关键字参数的标识符或字典的键，必须与可接收关键字参数的形参的名称相同，除非有可接收任意关键字参数的可变关键字形参。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span>(<span class="params">a,/,b=<span class="literal">None</span>,*,c=<span class="literal">None</span></span>):</span></span><br><span class="line">    print(<span class="string">f&#x27;a=<span class="subst">&#123;a&#125;</span>,b=<span class="subst">&#123;b&#125;</span>,c=<span class="subst">&#123;c&#125;</span>&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">f(<span class="number">1</span>,c=<span class="number">3</span>,b=<span class="number">2</span>) <span class="comment"># a 仅限位置传参</span></span><br><span class="line">f(a=<span class="number">1</span>,c=<span class="number">3</span>,b=<span class="number">2</span>)</span><br></pre></td></tr></table></figure>

<pre><code>a=1,b=2,c=3



---------------------------------------------------------------------------

TypeError                                 Traceback (most recent call last)

&lt;ipython-input-7-3c39aaeac558&gt; in &lt;module&gt;
      3 
      4 f(1,c=3,b=2) # a 仅限位置传参
----&gt; 5 f(a=1,c=3,b=2)


TypeError: f() got some positional-only arguments passed as keyword arguments: &#39;a&#39;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span>(<span class="params">a,/,b=<span class="literal">None</span>,**c</span>):</span></span><br><span class="line">    print(<span class="string">f&#x27;a=<span class="subst">&#123;a&#125;</span>,b=<span class="subst">&#123;b&#125;</span>,c=<span class="subst">&#123;c&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># a 仅限位置，b 没有对应的名称，因此全部传给 c</span></span><br><span class="line">f(<span class="number">1</span>,**&#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">1</span>,<span class="string">&#x27;d&#x27;</span>:<span class="number">4</span>,<span class="string">&#x27;c&#x27;</span>:<span class="number">3</span>&#125;)</span><br></pre></td></tr></table></figure>

<pre><code>a=1,b=None,c=&#123;&#39;a&#39;: 1, &#39;d&#39;: 4, &#39;c&#39;: 3&#125;</code></pre>
<p>位置参数必须在关键字参数前面：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span>(<span class="params">a,b=<span class="literal">None</span>,**c</span>):</span></span><br><span class="line">    print(<span class="string">f&#x27;a=<span class="subst">&#123;a&#125;</span>,b=<span class="subst">&#123;b&#125;</span>,c=<span class="subst">&#123;c&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line">f(b=<span class="number">2</span>,<span class="number">1</span>)</span><br></pre></td></tr></table></figure>


<pre><code>  File &quot;&lt;ipython-input-13-59f3b615f9f3&gt;&quot;, line 4
    f(b=2,1)
          ^
SyntaxError: positional argument follows keyword argument</code></pre>
<p>位置参数的位置不能传错，关键字参数的则可以任意位置：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span>(<span class="params">a,b=<span class="literal">None</span>,/,c=<span class="literal">None</span>,**d</span>):</span></span><br><span class="line">    print(<span class="string">f&#x27;a=<span class="subst">&#123;a&#125;</span>,b=<span class="subst">&#123;b&#125;</span>,c=<span class="subst">&#123;c&#125;</span>,d=<span class="subst">&#123;d&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line">f(<span class="number">1</span>,<span class="number">2</span>,c=<span class="number">3</span>,d=<span class="number">4</span>)</span><br><span class="line">f(<span class="number">2</span>,<span class="number">1</span>,d=<span class="number">4</span>,c=<span class="number">3</span>,e=<span class="number">5</span>)</span><br></pre></td></tr></table></figure>

<pre><code>a=1,b=2,c=3,d=&#123;&#39;d&#39;: 4&#125;
a=2,b=1,c=3,d=&#123;&#39;d&#39;: 4, &#39;e&#39;: 5&#125;</code></pre>
<p>标注并不影响传参规则，但按照标注传参是更明智的做法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span>(<span class="params">a:<span class="built_in">int</span>,b:<span class="built_in">str</span>=<span class="string">&#x27;b&#x27;</span></span>)-&gt; str:</span></span><br><span class="line">    print(a*b)</span><br><span class="line">    </span><br><span class="line">f(<span class="number">2</span>,<span class="string">&#x27;hi&#x27;</span>)</span><br><span class="line">f(<span class="number">2</span>,<span class="number">3</span>)</span><br></pre></td></tr></table></figure>

<pre><code>hihi
6</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/12_function/06_doc-20ce6cd30ddb/</url>
    <content><![CDATA[<h2 id="函数文档"><a href="#函数文档" class="headerlink" title="函数文档"></a>函数文档</h2><p>关键字 def 引入一个函数定义。构成函数体的语句从下一行开始，并且必须缩进。</p>
<p>函数体的第一个语句可以是字符串文字（可选的），这个字符串文字即是函数的文档字符串。有些工具使用文档字符串自动生成在线或印刷文档，或者让用户以交互式的形式浏览代码。在你编写的代码中包含文档字符串是一种很好的做法，所以要养成习惯。</p>
<p>文档字符串的内容和格式的约定：</p>
<ul>
<li><p>第一行应该是函数目的的简要概述。为简洁起见，它不应显式声明对象的名称或类型，因为这些可通过其他方式获得（除非名称恰好是描述函数操作的动词）。这一行应以大写字母开头，以句点结尾。</p>
</li>
<li><p>如果文档字符串中有更多行，则第二行应为空白，从而在视觉上将摘要与其余描述分开。后面几行应该是一个或多个段落，描述对象的调用约定，它的副作用等。</p>
</li>
</ul>
<p>可以使用函数的 <code>__doc__</code> 属性或 help() 函数查看函数文档。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">help</span>(my_function)</span><br></pre></td></tr></table></figure>

<pre><code>Help on function my_function in module __main__:

my_function()
    Do nothing, but document it.</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_function</span>():</span></span><br><span class="line">    <span class="string">&#x27;Do nothing, but document it.&#x27;</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">my_function.__doc__</span><br></pre></td></tr></table></figure>




<pre><code>&#39;Do nothing, but document it.&#39;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 多行的函数文档</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_func</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Do nothing, but document it.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    No, really, it doesn&#x27;t do anything.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">print(my_func.__doc__)</span><br></pre></td></tr></table></figure>

<pre><code>Do nothing, but document it.

    No, really, it doesn&#39;t do anything.</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">help</span>(my_func)</span><br></pre></td></tr></table></figure>

<pre><code>Help on function my_func in module __main__:

my_func()
    Do nothing, but document it.

    No, really, it doesn&#39;t do anything.</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="built_in">print</span>.__doc__)</span><br></pre></td></tr></table></figure>

<pre><code>print(value, ..., sep=&#39; &#39;, end=&#39;\n&#39;, file=sys.stdout, flush=False)

Prints the values to a stream, or to sys.stdout by default.
Optional keyword arguments:
file:  a file-like object (stream); defaults to the current sys.stdout.
sep:   string inserted between values, default a space.
end:   string appended after the last value, default a newline.
flush: whether to forcibly flush the stream.</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/12_function/05_recursion-514c422b2d47/</url>
    <content><![CDATA[<h2 id="递归函数"><a href="#递归函数" class="headerlink" title="递归函数"></a>递归函数</h2><p>函数 return 语句的表达式中包含函数自身的调用，则称该函数为递归函数。</p>
<p>递归函数必须设定退出条件，并且调用过程能够逐步达到退出条件，否则将引发 RecursionError。</p>
<p>例如定义一个计算阶乘的函数：</p>
<p>上述函数的退出条件是 <code>x == 0</code>，并且 return 语句中函数调用的参数是 <code>x-1</code>，第一层调用函数的参数 <code>x</code> 为 5，return 语句进入第二层调用，就变成了 <code>x-1</code> 为 4，依此类推，最终以 0 调用函数，达到了退出条件，但是值还没有最终返回，以退出条件下的返回值层层向上返回，最终得到结果。详情查看 <a href="https://xue.cn/hub/reader?bookId=1&path=the-craft-of-selfteaching/Part.2.D.4-recursion.ipynb">递归函数</a>。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="keyword">if</span> x == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> f(x<span class="number">-1</span>)*x</span><br><span class="line">f(<span class="number">5</span>)</span><br></pre></td></tr></table></figure>




<pre><code>120</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/12_function/04_return_value-2cdda3ae83c4/</url>
    <content><![CDATA[<h2 id="函数返回值"><a href="#函数返回值" class="headerlink" title="函数返回值"></a>函数返回值</h2><p>函数返回值通过 <a href="https://xue.cn/hub/reader?bookId=64&path=xue_python_kp/10_statement/11_return.ipynb">return 语句</a> 来实现，调用函数时，返回 return 语句之后表达式的值，没有 return 语句或 return 语句之后为空的函数，调用函数默认返回 None。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="keyword">return</span> x**<span class="number">2</span></span><br><span class="line"></span><br><span class="line">f(<span class="number">2</span>)</span><br></pre></td></tr></table></figure>




<pre><code>4</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span>():</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">f() <span class="keyword">is</span> <span class="literal">None</span></span><br></pre></td></tr></table></figure>




<pre><code>True</code></pre>
<p>函数执行到 return 语句，则结束当前函数的调用，可以通过条件判断，返回特定结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span>(<span class="params">x=<span class="literal">None</span></span>):</span></span><br><span class="line">    <span class="keyword">if</span> x == <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span> <span class="comment"># 使用默认值调用函数，接下来的代码将不被执行</span></span><br><span class="line">    print(<span class="string">f&#x27;x=<span class="subst">&#123;x&#125;</span>&#x27;</span>) </span><br><span class="line">    <span class="keyword">if</span> x != <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&#x27;x²=<span class="subst">&#123;x**<span class="number">2</span>&#125;</span>&#x27;</span></span><br><span class="line">    </span><br><span class="line">f()</span><br></pre></td></tr></table></figure>




<pre><code>0</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">f(<span class="number">2</span>)</span><br></pre></td></tr></table></figure>

<pre><code>x=2





&#39;x²=4&#39;</code></pre>
<p>return 之后的表达式可以是多个表达式用逗号隔开（其实是一个元组），可用赋值语句分别接收返回值：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sum</span>(x), <span class="built_in">max</span>(x), <span class="built_in">min</span>(x)</span><br><span class="line">f([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>])</span><br></pre></td></tr></table></figure>




<pre><code>(10, 4, 1)</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sum_x, max_x, min_x = f([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>])</span><br><span class="line">sum_x, max_x, min_x</span><br></pre></td></tr></table></figure>




<pre><code>(10, 4, 1)</code></pre>
<p>返回值可以是任何值。如果 return 之后的表达式中包含函数自身的调用，则该函数称为递归函数。详见 <a href="https://xue.cn/hub/reader?bookId=64&path=xue_python_kp/12_function/05_recursion.ipynb">递归函数</a>。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 返回函数自身</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span>(<span class="params">x</span>):</span></span><br><span class="line">    print(x)</span><br><span class="line">    <span class="keyword">return</span> f</span><br><span class="line"></span><br><span class="line">f(<span class="number">1</span>)(<span class="number">2</span>)(<span class="number">3</span>)</span><br></pre></td></tr></table></figure>

<pre><code>1
2
3





&lt;function __main__.f(x)&gt;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 返回函数自身的调用</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="keyword">if</span> x == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(x<span class="number">-1</span>)</span><br><span class="line">        <span class="keyword">return</span> f(x<span class="number">-1</span>)</span><br><span class="line">    </span><br><span class="line">f(<span class="number">3</span>)</span><br></pre></td></tr></table></figure>

<pre><code>2
1
0





0</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/12_function/03_formal_parameter-e773aef4e75c/</url>
    <content><![CDATA[<h2 id="函数形参"><a href="#函数形参" class="headerlink" title="函数形参"></a>函数形参</h2><p>形参是函数定义中指定的参数名称。指定某个参数的形式，决定了该形参在函数调用时，可以接受实参的方式。关于实参详见 <a href="https://xue.cn/hub/reader?bookId=64&path=xue_python_kp/12_function/07_function_call.ipynb">函数调用</a>。</p>
<p>因而形参分为五种：</p>
<ul>
<li>位置或关键字：指定一个可以作为 位置参数 传入也可以作为 关键字参数 传入的实参。这是默认的形参类型，但有默认值的形参必须置于无默认值的形参之后。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span>(<span class="params">a,b=<span class="literal">None</span></span>):</span></span><br><span class="line">    print(<span class="string">f&#x27;a=<span class="subst">&#123;a&#125;</span>,b=<span class="subst">&#123;b&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="comment"># 位置实参传入</span></span><br><span class="line">f(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line"><span class="comment"># 关键字实参传入</span></span><br><span class="line">f(b=<span class="number">2</span>,a=<span class="number">1</span>)</span><br></pre></td></tr></table></figure>

<pre><code>a=1,b=2
a=1,b=2</code></pre>
<ul>
<li>仅限位置：指定一个只能通过位置传入的参数。仅限位置形参通过在函数定义的形参之后包含一个 <code>/</code> 字符来定义。<code>/</code> 之前的参数为仅限位置形参，之后的形参为默认形参类型。有默认值的形参也必须置于无默认值的形参之后。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span>(<span class="params">a,b=<span class="literal">None</span>,/,c=<span class="literal">None</span></span>):</span> <span class="comment"># 因为 b 有默认值，c 必须要有默认值</span></span><br><span class="line">    print(<span class="string">f&#x27;a=<span class="subst">&#123;a&#125;</span>,b=<span class="subst">&#123;b&#125;</span>,c=<span class="subst">&#123;c&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="comment"># 按位置传参调用</span></span><br><span class="line">f(<span class="number">1</span>,<span class="number">2</span>,c=<span class="number">3</span>)</span><br><span class="line"><span class="comment"># 关键字传参则不允许</span></span><br><span class="line">f(a=<span class="number">1</span>,b=<span class="number">2</span>)</span><br></pre></td></tr></table></figure>

<pre><code>a=1,b=2,c=3



---------------------------------------------------------------------------

TypeError                                 Traceback (most recent call last)

&lt;ipython-input-6-52b3afdaad4c&gt; in &lt;module&gt;
      4 f(1,2,c=3)
      5 # 关键字传参则不允许
----&gt; 6 f(a=1,b=2)


TypeError: f() got some positional-only arguments passed as keyword arguments: &#39;a, b&#39;</code></pre>
<ul>
<li>仅限关键字：指定一个只能通过关键字传入的参数。仅限关键字形参可通过在函数定义的形参中包含单个 可变位置形参 或者在形参之前放一个 <code>*</code> 来定义。可变位置形参 或 <code>*</code> 之后的参数为仅限关键字形参。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span>(<span class="params">*a,b=<span class="literal">None</span>,c=<span class="literal">None</span></span>):</span> <span class="comment"># b 和 c 必须有默认值</span></span><br><span class="line">    print(<span class="string">f&#x27;a=<span class="subst">&#123;a&#125;</span>,b=<span class="subst">&#123;b&#125;</span>,c=<span class="subst">&#123;c&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="comment"># 位置传参将被解读为可变位置参数</span></span><br><span class="line">f(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line"><span class="comment"># 关键字传参</span></span><br><span class="line">f(<span class="number">1</span>,b=<span class="number">2</span>,c=<span class="number">3</span>)</span><br></pre></td></tr></table></figure>

<pre><code>a=(1, 2, 3),b=None,c=None
a=(1,),b=2,c=3</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span>(<span class="params">*,a,b=<span class="literal">None</span>,c</span>):</span></span><br><span class="line">    print(<span class="string">f&#x27;a=<span class="subst">&#123;a&#125;</span>,b=<span class="subst">&#123;b&#125;</span>,c=<span class="subst">&#123;c&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="comment"># 关键字传参</span></span><br><span class="line">f(b=<span class="number">2</span>,a=<span class="number">1</span>,c=<span class="number">3</span>)</span><br><span class="line"><span class="comment"># 位置传参不允许</span></span><br><span class="line">f(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br></pre></td></tr></table></figure>

<pre><code>a=1,b=2,c=3



---------------------------------------------------------------------------

TypeError                                 Traceback (most recent call last)

&lt;ipython-input-1-9d584fa28622&gt; in &lt;module&gt;
      4 f(b=2,a=1,c=3)
      5 # 位置传参不允许
----&gt; 6 f(1,2,3)


TypeError: f() takes 0 positional arguments but 3 were given</code></pre>
<ul>
<li>可变位置：指定一个可以接受任意数量的位置参数传入的参数。这种形参可通过在形参名称前加缀 <code>*</code> 来定义，并将接受到的参数封装成一个元组。该参数如果接受到了实参，它前面的参数必须为仅限位置参数。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span>(<span class="params">a,b=<span class="literal">None</span>,*c</span>):</span></span><br><span class="line">    print(<span class="string">f&#x27;a=<span class="subst">&#123;a&#125;</span>,b=<span class="subst">&#123;b&#125;</span>,c=<span class="subst">&#123;c&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="comment"># c 没有接受参数</span></span><br><span class="line">f(<span class="number">1</span>); f(b=<span class="number">2</span>,a=<span class="number">1</span>)</span><br><span class="line"><span class="comment"># c 接受到了参数</span></span><br><span class="line">f(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>)</span><br></pre></td></tr></table></figure>

<pre><code>a=1,b=None,c=()
a=1,b=2,c=()
a=1,b=2,c=(3, 4, 5)</code></pre>
<ul>
<li>可变关键字：指定一个可以接受任意数量的关键字参数的参数。这种形参可通过在形参名称前加缀 <code>**</code> 来定义，并将接受到的参数封装成一个字典。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span>(<span class="params">a,b=<span class="literal">None</span>,**c</span>):</span></span><br><span class="line">    print(<span class="string">f&#x27;a=<span class="subst">&#123;a&#125;</span>,b=<span class="subst">&#123;b&#125;</span>,c=<span class="subst">&#123;c&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line">f(<span class="number">1</span>,<span class="number">2</span>,c=<span class="number">3</span>,d=<span class="number">4</span>)</span><br><span class="line">f(d=<span class="number">4</span>,b=<span class="number">2</span>,a=<span class="number">1</span>,c=<span class="number">3</span>)</span><br></pre></td></tr></table></figure>

<pre><code>a=1,b=2,c=&#123;&#39;c&#39;: 3, &#39;d&#39;: 4&#125;
a=1,b=2,c=&#123;&#39;d&#39;: 4, &#39;c&#39;: 3&#125;</code></pre>
<p>带默认值的参数，可变位置参数和可变关键字参数，调用函数时可以不传参。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span>(<span class="params">a=<span class="number">1</span>,*b,c=<span class="number">3</span>,**d</span>):</span></span><br><span class="line">    print(<span class="string">f&#x27;a=<span class="subst">&#123;a&#125;</span>,b=<span class="subst">&#123;b&#125;</span>,c=<span class="subst">&#123;c&#125;</span>,d=<span class="subst">&#123;d&#125;</span>&#x27;</span>)</span><br><span class="line">f()</span><br></pre></td></tr></table></figure>

<pre><code>a=1,b=(),c=3,d=&#123;&#125;</code></pre>
<p>默认值只会执行一次，这条规则很重要。如果参数有默认值且为可变对象，则需要做必要的限制：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span>(<span class="params">a=[]</span>):</span></span><br><span class="line">    print(<span class="built_in">id</span>(a))</span><br><span class="line">    a.append(<span class="number">1</span>)</span><br><span class="line">    print(a)</span><br><span class="line">f() <span class="comment"># 多次调用会引用参数指向的同一个对象</span></span><br><span class="line">f()</span><br></pre></td></tr></table></figure>

<pre><code>2399568560064
[1]
2399568560064
[1, 1]</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 可以拷贝一个副本</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span>(<span class="params">a=[]</span>):</span></span><br><span class="line">    b = a.copy()</span><br><span class="line">    b.append(<span class="number">1</span>)</span><br><span class="line">    print(b)</span><br><span class="line">f()</span><br><span class="line">f()</span><br></pre></td></tr></table></figure>

<pre><code>[1]
[1]</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 或者修改参数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span>(<span class="params">a=<span class="literal">None</span></span>):</span></span><br><span class="line">    <span class="keyword">if</span> a == <span class="literal">None</span>:</span><br><span class="line">        a = []</span><br><span class="line">        a.append(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        a.append(<span class="number">1</span>)</span><br><span class="line">    print(a)</span><br><span class="line">    </span><br><span class="line">f()</span><br><span class="line">f([])</span><br></pre></td></tr></table></figure>

<pre><code>[1]
[1]</code></pre>
<p>函数的形参可以使用标注，标注的语法是参数后面接一个冒号 <code>:</code>，然后接一个表达式（任意表达式），通常用来指明应该（不是必须）传递什么类型的参数等。标注提高了代码的可读性：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># a 标注为字符串类型，b 标注为整数，并设置默认值 2</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span>(<span class="params">a:<span class="built_in">str</span>,b:<span class="built_in">int</span>=<span class="number">2</span></span>):</span></span><br><span class="line">    <span class="keyword">return</span> a*b</span><br><span class="line">f(<span class="string">&#x27;Hi&#x27;</span>,<span class="number">3</span>)</span><br></pre></td></tr></table></figure>




<pre><code>&#39;HiHiHi&#39;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span>(<span class="params">a:<span class="string">&#x27;字符串&#x27;</span>,b:<span class="string">&#x27;整数&#x27;</span>=<span class="number">2</span></span>):</span></span><br><span class="line">    <span class="keyword">return</span> a*b</span><br><span class="line">f(<span class="string">&#x27;Hi&#x27;</span>)</span><br></pre></td></tr></table></figure>




<pre><code>&#39;HiHi&#39;</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/12_function/02_function_definition-f4d7c2e81fbb/</url>
    <content><![CDATA[<h2 id="函数定义"><a href="#函数定义" class="headerlink" title="函数定义"></a>函数定义</h2><p>函数定义有两种方式，def 语句定义有名字的函数（详见 <a href="https://xue.cn/hub/reader?bookId=64&path=xue_python_kp/10_statement/10_def.ipynb">def 定义函数</a>），lambda 表达式定义匿名函数（详见 <a href="https://xue.cn/hub/reader?bookId=64&path=xue_python_kp/12_function/08_lambda.ipynb">lambda 函数</a>）。</p>
<p>定义一个函数，即是创建了一个函数可执行代码的包装器，他将函数想要实现的功能包装起来。然后通过调用它来实现其功能。def 语句 详细介绍了定义函数的语法规则，下面看看如何将一个功能包装起来。</p>
<p>例如下列函数，实现了将列表中的 字符串整数 以及 整数 相加求和的功能，以后只要遇到这种情况，都可以用它来求和：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sumpro([<span class="number">1</span>,<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;3&#x27;</span>])</span><br></pre></td></tr></table></figure>




<pre><code>6</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># def 定义</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sumpro</span>(<span class="params">lst</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sum</span>(<span class="built_in">int</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> lst)</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sumpro([<span class="string">&#x27;1 &#x27;</span>,<span class="string">&#x27; 2&#x27;</span>,<span class="number">3</span>])</span><br></pre></td></tr></table></figure>




<pre><code>6</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># lambda 表达式定义</span></span><br><span class="line"><span class="keyword">lambda</span> lst: <span class="built_in">sum</span>(<span class="built_in">int</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> lst)</span><br></pre></td></tr></table></figure>




<pre><code>&lt;function __main__.&lt;lambda&gt;(lst)&gt;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">lst = [[<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;8&#x27;</span>],[<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;4&#x27;</span>]]</span><br><span class="line"><span class="built_in">sorted</span>(lst,key=<span class="keyword">lambda</span> lst: <span class="built_in">sum</span>(<span class="built_in">int</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> lst))</span><br></pre></td></tr></table></figure>




<pre><code>[[&#39;3&#39;, &#39;4&#39;], [&#39;2&#39;, &#39;8&#39;]]</code></pre>
<p>函数定义，也可以定义为实现功能，但没有返回值（默认返回 None）的过程。</p>
<p>例如下列函数，实现了将列表中的字符串整数都转换为整数：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">convert_to_numb</span>(<span class="params">lst</span>):</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(lst)):</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">type</span>(lst[i]) != <span class="built_in">int</span>:</span><br><span class="line">            lst[i] = <span class="built_in">int</span>(lst[i])</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">lst = [<span class="string">&#x27;1&#x27;</span>,<span class="number">2</span>,<span class="string">&#x27;3&#x27;</span>]</span><br><span class="line">n = convert_to_numb(lst)</span><br><span class="line">lst, n <span class="keyword">is</span> <span class="literal">None</span></span><br></pre></td></tr></table></figure>




<pre><code>([1, 2, 3], True)</code></pre>
<p>函数定义所使用的函数名称，不能与当前作用域中以定义的名称相同，这会屏蔽掉已存在的名称，或将自定义的函数对象重新赋值给了该名称。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">str</span>(<span class="number">123</span>)</span><br></pre></td></tr></table></figure>




<pre><code>&#39;123&#39;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">str</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">f&#x27;x=<span class="subst">&#123;x&#125;</span>&#x27;</span></span><br><span class="line"><span class="built_in">str</span>(<span class="number">123</span>) <span class="comment"># 屏蔽掉了内置名称 str</span></span><br></pre></td></tr></table></figure>




<pre><code>&#39;x=123&#39;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">f = <span class="number">0</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span>():</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">f <span class="comment"># f 被重新赋值</span></span><br></pre></td></tr></table></figure>




<pre><code>&lt;function __main__.f()&gt;</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/12_function/01_function_summary-2667ef3bdac3/</url>
    <content><![CDATA[<h2 id="函数概述"><a href="#函数概述" class="headerlink" title="函数概述"></a>函数概述</h2><p>函数是组织好的，可重复使用的，用来实现单一，或相关联功能的代码段。是可以向调用者返回某个值（至少是 None）的一组语句。</p>
<p>函数使代码的组织模块化，提供了代码的利用率。例如 print() 函数实现打印功能，input() 函数实现输入功能，需要它们的地方，都可以使用。</p>
<p>函数通过函数名称来使用它，传入零个或多个参数，并在函数体执行中被使用。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 函数 abs() 返回一个数的绝对值</span></span><br><span class="line">a = <span class="built_in">abs</span>(<span class="number">-3.14</span>)</span><br><span class="line">a</span><br></pre></td></tr></table></figure>




<pre><code>3.14</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># print() 函数打印传入的参数值，返回 None</span></span><br><span class="line">n = print(<span class="string">&#x27;hello, world&#x27;</span>)</span><br><span class="line">n <span class="keyword">is</span> <span class="literal">None</span></span><br></pre></td></tr></table></figure>

<pre><code>hello, world





True</code></pre>
<p>按照上述定义，类也被称作函数（例如内置函数 int，list 等）。</p>
<p>我们通常所说的函数，是指使用 def 语句和 lambda 表达式定义的函数。</p>
<p>而在类内部定义，使用属性表示法来调用的函数，我们习惯称作方法。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># int 类实例化返回整数对象</span></span><br><span class="line"><span class="built_in">int</span>(<span class="string">&#x27;1&#x27;</span>)</span><br></pre></td></tr></table></figure>




<pre><code>1</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">isinstance</span>(<span class="number">1</span>, <span class="built_in">int</span>)</span><br></pre></td></tr></table></figure>




<pre><code>True</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># list 类的方法 append 将一个对象加入列表中，返回值为 None</span></span><br><span class="line">a = []</span><br><span class="line">b = <span class="built_in">list</span>.append(a,<span class="string">&#x27;123&#x27;</span>)</span><br><span class="line">a, b <span class="keyword">is</span> <span class="literal">None</span></span><br></pre></td></tr></table></figure>




<pre><code>([&#39;123&#39;], True)</code></pre>
<p>函数有内置函数和内置方法，用户也可以自定义函数和方法。定义了一个函数，即创建了一个函数对象，可以通过函数名和必要的参数调用它。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_sum</span>(<span class="params">lst</span>):</span></span><br><span class="line">    <span class="string">&#x27;将列表中的字符串数字转为数字求和&#x27;</span> <span class="comment"># 函数文档说明</span></span><br><span class="line">    </span><br><span class="line">    rlt = <span class="built_in">sum</span>(<span class="built_in">map</span>(<span class="built_in">float</span>,lst)) <span class="comment"># 调用内置函数求值</span></span><br><span class="line">    <span class="keyword">return</span> rlt <span class="comment"># 返回结果</span></span><br><span class="line"></span><br><span class="line">my_sum([<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;3.14&#x27;</span>,<span class="number">2</span>]) <span class="comment"># 调用自定义函数</span></span><br></pre></td></tr></table></figure>




<pre><code>6.140000000000001</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/11_built-in_function/65_zip-23ecc1f20588/</url>
    <content><![CDATA[<h2 id="zip-重组可迭代对象"><a href="#zip-重组可迭代对象" class="headerlink" title="zip 重组可迭代对象"></a>zip 重组可迭代对象</h2><p>内置函数（类）zip，Python 官方文档描述如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">help</span>(<span class="built_in">zip</span>)</span><br></pre></td></tr></table></figure>

<pre><code>Help on class zip in module builtins:

class zip(object)
 |  zip(iter1 [,iter2 [...]]) --&gt; zip object
 |  
 |  Return a zip object whose .__next__() method returns a tuple where
 |  the i-th element comes from the i-th iterable argument.  The .__next__()
 |  method continues until the shortest iterable in the argument sequence
 |  is exhausted and then it raises StopIteration.
 |  
 |  Methods defined here:
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __iter__(self, /)
 |      Implement iter(self).
 |  
 |  __next__(self, /)
 |      Implement next(self).
 |  
 |  __reduce__(...)
 |      Return state information for pickling.
 |  
 |  ----------------------------------------------------------------------
 |  Static methods defined here:
 |  
 |  __new__(*args, **kwargs) from builtins.type
 |      Create and return a new object.  See help(type) for accurate signature.</code></pre>
<p>创建一个聚合了来自每个可迭代对象中的元素的迭代器。</p>
<p>返回一个元组的迭代器，其中的第 i 个元组包含来自每个可迭代对象的第 i 个元素。</p>
<p>当所输入可迭代对象中最短的一个被耗尽时，迭代器将停止迭代。</p>
<p>当只有一个可迭代对象参数时，它将返回一个单元组的迭代器。</p>
<p>不带参数时，它将返回一个空迭代器。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">type</span>(<span class="built_in">zip</span>)</span><br></pre></td></tr></table></figure>




<pre><code>type</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">zip</span>()</span><br></pre></td></tr></table></figure>




<pre><code>&lt;zip at 0x2ac600edac8&gt;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">list</span>(<span class="built_in">zip</span>(<span class="string">&#x27;123&#x27;</span>))</span><br></pre></td></tr></table></figure>




<pre><code>[(&#39;1&#39;,), (&#39;2&#39;,), (&#39;3&#39;,)]</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">list</span>(<span class="built_in">zip</span>(<span class="string">&#x27;123&#x27;</span>,&#123;<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>&#125;))</span><br></pre></td></tr></table></figure>




<pre><code>[(&#39;1&#39;, 1), (&#39;2&#39;, 2), (&#39;3&#39;, 3)]</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">list</span>(<span class="built_in">zip</span>([<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>],(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>),<span class="string">&#x27;12&#x27;</span>))</span><br></pre></td></tr></table></figure>




<pre><code>[(3, 1, &#39;1&#39;), (2, 2, &#39;2&#39;)]</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">list</span>(<span class="built_in">zip</span>(*[<span class="string">&#x27;abc&#x27;</span>,<span class="string">&#x27;123&#x27;</span>]))</span><br></pre></td></tr></table></figure>




<pre><code>[(&#39;a&#39;, &#39;1&#39;), (&#39;b&#39;, &#39;2&#39;), (&#39;c&#39;, &#39;3&#39;)]</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/11_built-in_function/64_vars-fc7be5a9f530/</url>
    <content><![CDATA[<h2 id="vars-返回对象的变量字典"><a href="#vars-返回对象的变量字典" class="headerlink" title="vars() 返回对象的变量字典"></a>vars() 返回对象的变量字典</h2><p>内置函数 vars()，Python 官方文档描述如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">help</span>(<span class="built_in">vars</span>)</span><br></pre></td></tr></table></figure>

<pre><code>Help on built-in function vars in module builtins:

vars(...)
    vars([object]) -&gt; dictionary

    Without arguments, equivalent to locals().
    With an argument, equivalent to object.__dict__.</code></pre>
<p>返回模块、类、实例或任何其它具有 <code>__dict__</code> 属性的对象的 <code>__dict__</code> 属性。</p>
<p>模块和实例这样的对象具有可更新的 <code>__dict__</code> 属性；但是，其它对象的 <code>__dict__</code> 属性可能会设为限制写入（例如，类会使用<code>types.MappingProxyType</code> 来防止直接更新字典）。</p>
<p>不带参数时，vars() 的行为类似 locals()。请注意，locals 字典仅对于读取起作用，因为对 locals 字典的更新会被忽略。</p>
<p>如果指定了一个对象但它没有 <code>__dict__</code> 属性则会引发TypeError 异常。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">vars</span>()</span><br></pre></td></tr></table></figure>




<pre><code>&#123;&#39;__name__&#39;: &#39;__main__&#39;,
 &#39;__doc__&#39;: &#39;Automatically created module for IPython interactive environment&#39;,
 &#39;__package__&#39;: None,
 &#39;__loader__&#39;: None,
 &#39;__spec__&#39;: None,
 &#39;__builtin__&#39;: &lt;module &#39;builtins&#39; (built-in)&gt;,
 &#39;__builtins__&#39;: &lt;module &#39;builtins&#39; (built-in)&gt;,
 &#39;_ih&#39;: [&#39;&#39;, &quot;get_ipython().run_line_magic(&#39;pinfo&#39;, &#39;vars&#39;)&quot;, &#39;vars()&#39;],
 &#39;_oh&#39;: &#123;&#125;,
 &#39;_dh&#39;: [&#39;E:\\xue\\脚本\\kp_book\\11_built-in_function&#39;],
 &#39;In&#39;: [&#39;&#39;, &quot;get_ipython().run_line_magic(&#39;pinfo&#39;, &#39;vars&#39;)&quot;, &#39;vars()&#39;],
 &#39;Out&#39;: &#123;&#125;,
 &#39;get_ipython&#39;: &lt;bound method InteractiveShell.get_ipython of &lt;ipykernel.zmqshell.ZMQInteractiveShell object at 0x00000189A6512310&gt;&gt;,
 &#39;exit&#39;: &lt;IPython.core.autocall.ZMQExitAutocall at 0x189a65b32e0&gt;,
 &#39;quit&#39;: &lt;IPython.core.autocall.ZMQExitAutocall at 0x189a65b32e0&gt;,
 &#39;_&#39;: &#39;&#39;,
 &#39;__&#39;: &#39;&#39;,
 &#39;___&#39;: &#39;&#39;,
 &#39;_i&#39;: &#39;vars?&#39;,
 &#39;_ii&#39;: &#39;&#39;,
 &#39;_iii&#39;: &#39;&#39;,
 &#39;_i1&#39;: &#39;vars?&#39;,
 &#39;_i2&#39;: &#39;vars()&#39;&#125;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span>():</span><span class="keyword">pass</span></span><br><span class="line"><span class="built_in">vars</span>(f)</span><br></pre></td></tr></table></figure>




<pre><code>&#123;&#125;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">f.__dict__[<span class="string">&#x27;a&#x27;</span>] = <span class="number">1</span></span><br><span class="line">f.a</span><br></pre></td></tr></table></figure>




<pre><code>1</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">vars</span>(<span class="number">1</span>)</span><br></pre></td></tr></table></figure>


<pre><code>---------------------------------------------------------------------------

TypeError                                 Traceback (most recent call last)

&lt;ipython-input-9-3391faf83557&gt; in &lt;module&gt;
----&gt; 1 vars(1)


TypeError: vars() argument must have __dict__ attribute</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/11_built-in_function/63_type-e4bd0e1cf0f7/</url>
    <content><![CDATA[<h2 id="type-判断类型或创建类"><a href="#type-判断类型或创建类" class="headerlink" title="type 判断类型或创建类"></a>type 判断类型或创建类</h2><p>内置函数（类）type，Python 官方文档描述如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">help</span>(<span class="built_in">type</span>)</span><br></pre></td></tr></table></figure>

<pre><code>Help on class type in module builtins:

class type(object)
 |  type(object_or_name, bases, dict)
 |  type(object) -&gt; the object&#39;s type
 |  type(name, bases, dict) -&gt; a new type
 |  
 |  Methods defined here:
 |  
 |  __call__(self, /, *args, **kwargs)
 |      Call self as a function.
 |  
 |  __delattr__(self, name, /)
 |      Implement delattr(self, name).
 |  
 |  __dir__(self, /)
 |      Specialized __dir__ implementation for types.
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __init__(self, /, *args, **kwargs)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __instancecheck__(self, instance, /)
 |      Check if an object is an instance.
 |  
 |  __repr__(self, /)
 |      Return repr(self).
 |  
 |  __setattr__(self, name, value, /)
 |      Implement setattr(self, name, value).
 |  
 |  __sizeof__(self, /)
 |      Return memory consumption of the type object.
 |  
 |  __subclasscheck__(self, subclass, /)
 |      Check if a class is a subclass.
 |  
 |  __subclasses__(self, /)
 |      Return a list of immediate subclasses.
 |  
 |  mro(self, /)
 |      Return a type&#39;s method resolution order.
 |  
 |  ----------------------------------------------------------------------
 |  Class methods defined here:
 |  
 |  __prepare__(...)
 |      __prepare__() -&gt; dict
 |      used to create the namespace for the class statement
 |  
 |  ----------------------------------------------------------------------
 |  Static methods defined here:
 |  
 |  __new__(*args, **kwargs)
 |      Create and return a new object.  See help(type) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __abstractmethods__
 |  
 |  __dict__
 |  
 |  __text_signature__
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  __base__ = &lt;class &#39;object&#39;&gt;
 |      The most base type
 |  
 |  __bases__ = (&lt;class &#39;object&#39;&gt;,)
 |  
 |  __basicsize__ = 864
 |  
 |  __dictoffset__ = 264
 |  
 |  __flags__ = -2146675712
 |  
 |  __itemsize__ = 40
 |  
 |  __mro__ = (&lt;class &#39;type&#39;&gt;, &lt;class &#39;object&#39;&gt;)
 |  
 |  __weakrefoffset__ = 368</code></pre>
<p>传入一个参数时，返回对象的类型。推荐使用 isinstance() 内置函数来检测对象的类型，因为它会考虑子类的情况。</p>
<p>传入三个参数时，返回一个新的 type 对象。这在本质上是 class 语句的一种动态形式。name 参数是字符串即类名并且会成为 <code>__name__</code> 属性；bases 元组列出基类并且会成为 <code>__bases__</code> 属性；而 dict 字典为包含类主体定义的命名空间并且会被复制到一个标准字典成为 <code>__dict__</code> 属性。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">type</span>(<span class="built_in">type</span>)</span><br></pre></td></tr></table></figure>




<pre><code>type</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">type</span>(<span class="built_in">int</span>), <span class="built_in">type</span>(<span class="built_in">object</span>)</span><br></pre></td></tr></table></figure>




<pre><code>(type, type)</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">isinstance</span>(<span class="built_in">int</span>, <span class="built_in">object</span>)</span><br></pre></td></tr></table></figure>




<pre><code>True</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line">    a = <span class="number">1</span></span><br><span class="line">A.__name__, A.__bases__, A.__dict__</span><br></pre></td></tr></table></figure>




<pre><code>(&#39;A&#39;,
 (object,),
 mappingproxy(&#123;&#39;__module__&#39;: &#39;__main__&#39;,
               &#39;a&#39;: 1,
               &#39;__dict__&#39;: &lt;attribute &#39;__dict__&#39; of &#39;A&#39; objects&gt;,
               &#39;__weakref__&#39;: &lt;attribute &#39;__weakref__&#39; of &#39;A&#39; objects&gt;,
               &#39;__doc__&#39;: None&#125;))</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">A = <span class="built_in">type</span>(<span class="string">&#x27;A&#x27;</span>, (<span class="built_in">object</span>,), <span class="built_in">dict</span>(a=<span class="number">1</span>))</span><br><span class="line">A.__name__, A.__bases__, A.__dict__</span><br></pre></td></tr></table></figure>




<pre><code>(&#39;A&#39;,
 (object,),
 mappingproxy(&#123;&#39;a&#39;: 1,
               &#39;__module__&#39;: &#39;__main__&#39;,
               &#39;__dict__&#39;: &lt;attribute &#39;__dict__&#39; of &#39;A&#39; objects&gt;,
               &#39;__weakref__&#39;: &lt;attribute &#39;__weakref__&#39; of &#39;A&#39; objects&gt;,
               &#39;__doc__&#39;: None&#125;))</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/11_built-in_function/62_tuple-2792aabdfc00/</url>
    <content><![CDATA[<h2 id="tuple-创建元组"><a href="#tuple-创建元组" class="headerlink" title="tuple 创建元组"></a>tuple 创建元组</h2><p>内置函数（类）tuple，Python 官方文档描述如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">help</span>(<span class="built_in">tuple</span>)</span><br></pre></td></tr></table></figure>

<pre><code>Help on class tuple in module builtins:

class tuple(object)
 |  tuple(iterable=(), /)
 |  
 |  Built-in immutable sequence.
 |  
 |  If no argument is given, the constructor returns an empty tuple.
 |  If iterable is specified the tuple is initialized from iterable&#39;s items.
 |  
 |  If the argument is a tuple, the return value is the same object.
 |  
 |  Methods defined here:
 |  
 |  __add__(self, value, /)
 |      Return self+value.
 |  
 |  __contains__(self, key, /)
 |      Return key in self.
 |  
 |  __eq__(self, value, /)
 |      Return self==value.
 |  
 |  __ge__(self, value, /)
 |      Return self&gt;=value.
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __getitem__(self, key, /)
 |      Return self[key].
 |  
 |  __getnewargs__(self, /)
 |  
 |  __gt__(self, value, /)
 |      Return self&gt;value.
 |  
 |  __hash__(self, /)
 |      Return hash(self).
 |  
 |  __iter__(self, /)
 |      Implement iter(self).
 |  
 |  __le__(self, value, /)
 |      Return self&lt;=value.
 |  
 |  __len__(self, /)
 |      Return len(self).
 |  
 |  __lt__(self, value, /)
 |      Return self&lt;value.
 |  
 |  __mul__(self, value, /)
 |      Return self*value.
 |  
 |  __ne__(self, value, /)
 |      Return self!=value.
 |  
 |  __repr__(self, /)
 |      Return repr(self).
 |  
 |  __rmul__(self, value, /)
 |      Return value*self.
 |  
 |  count(self, value, /)
 |      Return number of occurrences of value.
 |  
 |  index(self, value, start=0, stop=9223372036854775807, /)
 |      Return first index of value.
 |      
 |      Raises ValueError if the value is not present.
 |  
 |  ----------------------------------------------------------------------
 |  Static methods defined here:
 |  
 |  __new__(*args, **kwargs) from builtins.type
 |      Create and return a new object.  See help(type) for accurate signature.</code></pre>
<p>将可迭代对象转换为元组。可迭代对象为空或不传参数，返回空元组。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">type</span>(<span class="built_in">tuple</span>)</span><br></pre></td></tr></table></figure>




<pre><code>type</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">tuple</span>(<span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure>




<pre><code>()</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">tuple</span>(<span class="string">&#x27;123&#x27;</span>)</span><br></pre></td></tr></table></figure>




<pre><code>(&#39;1&#39;, &#39;2&#39;, &#39;3&#39;)</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/11_built-in_function/61_super-67ce0cb0e744/</url>
    <content><![CDATA[<h2 id="super-调用委托给父类或兄弟类"><a href="#super-调用委托给父类或兄弟类" class="headerlink" title="super 调用委托给父类或兄弟类"></a>super 调用委托给父类或兄弟类</h2><p>内置函数（类）super，Python 官方文档描述如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">help</span>(<span class="built_in">super</span>)</span><br></pre></td></tr></table></figure>

<pre><code>Help on class super in module builtins:

class super(object)
 |  super() -&gt; same as super(__class__, &lt;first argument&gt;)
 |  super(type) -&gt; unbound super object
 |  super(type, obj) -&gt; bound super object; requires isinstance(obj, type)
 |  super(type, type2) -&gt; bound super object; requires issubclass(type2, type)
 |  Typical use to call a cooperative superclass method:
 |  class C(B):
 |      def meth(self, arg):
 |          super().meth(arg)
 |  This works for class methods too:
 |  class C(B):
 |      @classmethod
 |      def cmeth(cls, arg):
 |          super().cmeth(arg)
 |  
 |  Methods defined here:
 |  
 |  __get__(self, instance, owner, /)
 |      Return an attribute of instance, which is of type owner.
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __init__(self, /, *args, **kwargs)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self, /)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Static methods defined here:
 |  
 |  __new__(*args, **kwargs) from builtins.type
 |      Create and return a new object.  See help(type) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __self__
 |      the instance invoking super(); may be None
 |  
 |  __self_class__
 |      the type of the instance invoking super(); may be None
 |  
 |  __thisclass__
 |      the class invoking super()</code></pre>
<p>返回一个代理对象，它会将方法调用委托给类 type 的父类或兄弟类。这对于访问已在类中被重载的继承方法很有用。</p>
<ul>
<li><code>super()</code> 和 <code>super(__class__, &lt;first argument&gt;)</code> 一样。</li>
<li>如果省略第二个参数，则返回的超类对象是未绑定的。</li>
<li>如果第二个参数为一个对象，则 isinstance(obj, type) 必须为真值。</li>
<li>如果第二个参数为一个类型，则 issubclass(type2, type) 必须为真值（这适用于类方法）。</li>
</ul>
<p>super 有两个典型用例：</p>
<ul>
<li>在具有单继承的类层级结构中，super 可用来引用父类而不必显式地指定它们的名称，从而令代码更易维护。</li>
<li>第二个用例是在动态执行环境中支持协作多重继承。此用例为 Python 所独有。这使得实现 “菱形图” 成为可能，在这时会有多个基类实现相同的方法。好的设计强制要求这种方法在每个情况下具有相同的调用签名（因为调用顺序是在运行时确定的，也因为该顺序要适应类层级结构的更改，还因为该顺序可能包含在运行时之前未知的兄弟类）。</li>
</ul>
<p>类或方法的 <code>__mro__</code> 属性列出了 getattr() 和 super() 所共同使用的方法解析顺序（MRO）。该属性是动态的，可以在任何继承层级结构发生更新的时候被改变。</p>
<p>除了方法查找之外，super() 也可用于属性查找。一个可能的应用场合是在上级或同级类中调用描述器。</p>
<p>请注意 super() 是作为显式加点属性查找的绑定过程的一部分来实现的，例如 <code>super().__getitem__(name)</code>。它做到这一点是通过实现自己的 <code>__getattribute__()</code> 方法，这样就能以可预测的顺序搜索类，并且支持协作多重继承。</p>
<p>还要注意的是，除了零个参数的形式以外，super() 并不限于在方法内部使用。两个参数的形式明确指定参数并进行相应的引用。零个参数的形式仅适用于类定义内部，因为编译器需要填入必要的细节以正确地检索到被定义的类，还需要让普通方法访问当前实例。</p>
<p>方法调用委托给父类：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">type</span>(<span class="built_in">super</span>)</span><br></pre></td></tr></table></figure>




<pre><code>type</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">self, x</span>):</span></span><br><span class="line">        y = x + x</span><br><span class="line">        print(y)</span><br><span class="line">            </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>(<span class="params">A</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">self, x</span>):</span></span><br><span class="line">        <span class="built_in">super</span>().add(x) <span class="comment"># super() 等价于 super(B,self)</span></span><br><span class="line">        </span><br><span class="line">b = B()</span><br><span class="line">b.add(<span class="number">5</span>)</span><br></pre></td></tr></table></figure>

<pre><code>10</code></pre>
<p>初始化委托给父类：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.a = <span class="string">&#x27;父类A&#x27;</span></span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&#x27;A&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">print_msg</span>(<span class="params">self,a</span>):</span></span><br><span class="line">        <span class="built_in">print</span> (<span class="string">f&#x27;<span class="subst">&#123;a&#125;</span>来自A&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>(<span class="params">A</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment"># super(B, self) 可写为 super()</span></span><br><span class="line">        <span class="built_in">super</span>(B, self).__init__() </span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&#x27;B&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">print_msg</span>(<span class="params">self,b</span>):</span></span><br><span class="line">        <span class="built_in">super</span>().print_msg(b)</span><br><span class="line">        <span class="built_in">print</span> (<span class="string">f&#x27;<span class="subst">&#123;b&#125;</span>来自B&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span> (self.a)</span><br><span class="line"></span><br><span class="line">b = B()</span><br><span class="line">b.print_msg(<span class="string">&#x27;HelloWorld&#x27;</span>)</span><br></pre></td></tr></table></figure>

<pre><code>A
B
HelloWorld来自A
HelloWorld来自B
父类A</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/11_built-in_function/60_sum-6f8576c47660/</url>
    <content><![CDATA[<h2 id="sum-数字求和或序列拼接"><a href="#sum-数字求和或序列拼接" class="headerlink" title="sum() 数字求和或序列拼接"></a>sum() 数字求和或序列拼接</h2><p>内置函数 sum()，Python 官方文档描述如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">help</span>(<span class="built_in">sum</span>)</span><br></pre></td></tr></table></figure>

<pre><code>Help on built-in function sum in module builtins:

sum(iterable, start=0, /)
    Return the sum of a &#39;start&#39; value (default: 0) plus an iterable of numbers

    When the iterable is empty, return the start value.
    This function is intended specifically for use with numeric values and may
    reject non-numeric types.</code></pre>
<p>通常对一个以数字为元素的可迭代对象求和并返回和。如果指定 start 参数，和需要加上 start。</p>
<p>start 不能为字符串，拼接字符串 sum() 不支持，更好更快的方式是 str.join() 方法。</p>
<p>sum() 还支持其他序列（列表和元组）。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sum</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br></pre></td></tr></table></figure>




<pre><code>6</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sum</span>(<span class="built_in">range</span>(<span class="number">4</span>), <span class="number">10</span>)</span><br></pre></td></tr></table></figure>




<pre><code>16</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sum</span>([(<span class="number">1</span>,<span class="number">2</span>),(<span class="number">3</span>,<span class="number">4</span>)], (<span class="number">5</span>,))</span><br></pre></td></tr></table></figure>




<pre><code>(5, 1, 2, 3, 4)</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sum</span>([[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">3</span>]],[<span class="number">0</span>])</span><br></pre></td></tr></table></figure>




<pre><code>[0, 1, 2, 3]</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/11_built-in_function/59_str-880887137be6/</url>
    <content><![CDATA[<h2 id="str-创建字符串"><a href="#str-创建字符串" class="headerlink" title="str 创建字符串"></a>str 创建字符串</h2><p>内置函数（类）str，Python 官方文档描述如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">help</span>(<span class="built_in">str</span>)</span><br></pre></td></tr></table></figure>

<pre><code>Help on class str in module builtins:

class str(object)
 |  str(object=&#39;&#39;) -&gt; str
 |  str(bytes_or_buffer[, encoding[, errors]]) -&gt; str
 |  
 |  Create a new string object from the given object. If encoding or
 |  errors is specified, then the object must expose a data buffer
 |  that will be decoded using the given encoding and error handler.
 |  Otherwise, returns the result of object.__str__() (if defined)
 |  or repr(object).
 |  encoding defaults to sys.getdefaultencoding().
 |  errors defaults to &#39;strict&#39;.
 |  
 |  Methods defined here:
 |  
 |  __add__(self, value, /)
 |      Return self+value.
 |  
 |  __contains__(self, key, /)
 |      Return key in self.
 |  
 |  __eq__(self, value, /)
 |      Return self==value.
 |  
 |  __format__(self, format_spec, /)
 |      Return a formatted version of the string as described by format_spec.
 |  
 |  __ge__(self, value, /)
 |      Return self&gt;=value.
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __getitem__(self, key, /)
 |      Return self[key].
 |  
 |  __getnewargs__(...)
 |  
 |  __gt__(self, value, /)
 |      Return self&gt;value.
 |  
 |  __hash__(self, /)
 |      Return hash(self).
 |  
 |  __iter__(self, /)
 |      Implement iter(self).
 |  
 |  __le__(self, value, /)
 |      Return self&lt;=value.
 |  
 |  __len__(self, /)
 |      Return len(self).
 |  
 |  __lt__(self, value, /)
 |      Return self&lt;value.
 |  
 |  __mod__(self, value, /)
 |      Return self%value.
 |  
 |  __mul__(self, value, /)
 |      Return self*value.
 |  
 |  __ne__(self, value, /)
 |      Return self!=value.
 |  
 |  __repr__(self, /)
 |      Return repr(self).
 |  
 |  __rmod__(self, value, /)
 |      Return value%self.
 |  
 |  __rmul__(self, value, /)
 |      Return value*self.
 |  
 |  __sizeof__(self, /)
 |      Return the size of the string in memory, in bytes.
 |  
 |  __str__(self, /)
 |      Return str(self).
 |  
 |  capitalize(self, /)
 |      Return a capitalized version of the string.
 |      
 |      More specifically, make the first character have upper case and the rest lower
 |      case.
 |  
 |  casefold(self, /)
 |      Return a version of the string suitable for caseless comparisons.
 |  
 |  center(self, width, fillchar=&#39; &#39;, /)
 |      Return a centered string of length width.
 |      
 |      Padding is done using the specified fill character (default is a space).
 |  
 |  count(...)
 |      S.count(sub[, start[, end]]) -&gt; int
 |      
 |      Return the number of non-overlapping occurrences of substring sub in
 |      string S[start:end].  Optional arguments start and end are
 |      interpreted as in slice notation.
 |  
 |  encode(self, /, encoding=&#39;utf-8&#39;, errors=&#39;strict&#39;)
 |      Encode the string using the codec registered for encoding.
 |      
 |      encoding
 |        The encoding in which to encode the string.
 |      errors
 |        The error handling scheme to use for encoding errors.
 |        The default is &#39;strict&#39; meaning that encoding errors raise a
 |        UnicodeEncodeError.  Other possible values are &#39;ignore&#39;, &#39;replace&#39; and
 |        &#39;xmlcharrefreplace&#39; as well as any other name registered with
 |        codecs.register_error that can handle UnicodeEncodeErrors.
 |  
 |  endswith(...)
 |      S.endswith(suffix[, start[, end]]) -&gt; bool
 |      
 |      Return True if S ends with the specified suffix, False otherwise.
 |      With optional start, test S beginning at that position.
 |      With optional end, stop comparing S at that position.
 |      suffix can also be a tuple of strings to try.
 |  
 |  expandtabs(self, /, tabsize=8)
 |      Return a copy where all tab characters are expanded using spaces.
 |      
 |      If tabsize is not given, a tab size of 8 characters is assumed.
 |  
 |  find(...)
 |      S.find(sub[, start[, end]]) -&gt; int
 |      
 |      Return the lowest index in S where substring sub is found,
 |      such that sub is contained within S[start:end].  Optional
 |      arguments start and end are interpreted as in slice notation.
 |      
 |      Return -1 on failure.
 |  
 |  format(...)
 |      S.format(*args, **kwargs) -&gt; str
 |      
 |      Return a formatted version of S, using substitutions from args and kwargs.
 |      The substitutions are identified by braces (&#39;&#123;&#39; and &#39;&#125;&#39;).
 |  
 |  format_map(...)
 |      S.format_map(mapping) -&gt; str
 |      
 |      Return a formatted version of S, using substitutions from mapping.
 |      The substitutions are identified by braces (&#39;&#123;&#39; and &#39;&#125;&#39;).
 |  
 |  index(...)
 |      S.index(sub[, start[, end]]) -&gt; int
 |      
 |      Return the lowest index in S where substring sub is found, 
 |      such that sub is contained within S[start:end].  Optional
 |      arguments start and end are interpreted as in slice notation.
 |      
 |      Raises ValueError when the substring is not found.
 |  
 |  isalnum(self, /)
 |      Return True if the string is an alpha-numeric string, False otherwise.
 |      
 |      A string is alpha-numeric if all characters in the string are alpha-numeric and
 |      there is at least one character in the string.
 |  
 |  isalpha(self, /)
 |      Return True if the string is an alphabetic string, False otherwise.
 |      
 |      A string is alphabetic if all characters in the string are alphabetic and there
 |      is at least one character in the string.
 |  
 |  isascii(self, /)
 |      Return True if all characters in the string are ASCII, False otherwise.
 |      
 |      ASCII characters have code points in the range U+0000-U+007F.
 |      Empty string is ASCII too.
 |  
 |  isdecimal(self, /)
 |      Return True if the string is a decimal string, False otherwise.
 |      
 |      A string is a decimal string if all characters in the string are decimal and
 |      there is at least one character in the string.
 |  
 |  isdigit(self, /)
 |      Return True if the string is a digit string, False otherwise.
 |      
 |      A string is a digit string if all characters in the string are digits and there
 |      is at least one character in the string.
 |  
 |  isidentifier(self, /)
 |      Return True if the string is a valid Python identifier, False otherwise.
 |      
 |      Use keyword.iskeyword() to test for reserved identifiers such as &quot;def&quot; and
 |      &quot;class&quot;.
 |  
 |  islower(self, /)
 |      Return True if the string is a lowercase string, False otherwise.
 |      
 |      A string is lowercase if all cased characters in the string are lowercase and
 |      there is at least one cased character in the string.
 |  
 |  isnumeric(self, /)
 |      Return True if the string is a numeric string, False otherwise.
 |      
 |      A string is numeric if all characters in the string are numeric and there is at
 |      least one character in the string.
 |  
 |  isprintable(self, /)
 |      Return True if the string is printable, False otherwise.
 |      
 |      A string is printable if all of its characters are considered printable in
 |      repr() or if it is empty.
 |  
 |  isspace(self, /)
 |      Return True if the string is a whitespace string, False otherwise.
 |      
 |      A string is whitespace if all characters in the string are whitespace and there
 |      is at least one character in the string.
 |  
 |  istitle(self, /)
 |      Return True if the string is a title-cased string, False otherwise.
 |      
 |      In a title-cased string, upper- and title-case characters may only
 |      follow uncased characters and lowercase characters only cased ones.
 |  
 |  isupper(self, /)
 |      Return True if the string is an uppercase string, False otherwise.
 |      
 |      A string is uppercase if all cased characters in the string are uppercase and
 |      there is at least one cased character in the string.
 |  
 |  join(self, iterable, /)
 |      Concatenate any number of strings.
 |      
 |      The string whose method is called is inserted in between each given string.
 |      The result is returned as a new string.
 |      
 |      Example: &#39;.&#39;.join([&#39;ab&#39;, &#39;pq&#39;, &#39;rs&#39;]) -&gt; &#39;ab.pq.rs&#39;
 |  
 |  ljust(self, width, fillchar=&#39; &#39;, /)
 |      Return a left-justified string of length width.
 |      
 |      Padding is done using the specified fill character (default is a space).
 |  
 |  lower(self, /)
 |      Return a copy of the string converted to lowercase.
 |  
 |  lstrip(self, chars=None, /)
 |      Return a copy of the string with leading whitespace removed.
 |      
 |      If chars is given and not None, remove characters in chars instead.
 |  
 |  partition(self, sep, /)
 |      Partition the string into three parts using the given separator.
 |      
 |      This will search for the separator in the string.  If the separator is found,
 |      returns a 3-tuple containing the part before the separator, the separator
 |      itself, and the part after it.
 |      
 |      If the separator is not found, returns a 3-tuple containing the original string
 |      and two empty strings.
 |  
 |  replace(self, old, new, count=-1, /)
 |      Return a copy with all occurrences of substring old replaced by new.
 |      
 |        count
 |          Maximum number of occurrences to replace.
 |          -1 (the default value) means replace all occurrences.
 |      
 |      If the optional argument count is given, only the first count occurrences are
 |      replaced.
 |  
 |  rfind(...)
 |      S.rfind(sub[, start[, end]]) -&gt; int
 |      
 |      Return the highest index in S where substring sub is found,
 |      such that sub is contained within S[start:end].  Optional
 |      arguments start and end are interpreted as in slice notation.
 |      
 |      Return -1 on failure.
 |  
 |  rindex(...)
 |      S.rindex(sub[, start[, end]]) -&gt; int
 |      
 |      Return the highest index in S where substring sub is found,
 |      such that sub is contained within S[start:end].  Optional
 |      arguments start and end are interpreted as in slice notation.
 |      
 |      Raises ValueError when the substring is not found.
 |  
 |  rjust(self, width, fillchar=&#39; &#39;, /)
 |      Return a right-justified string of length width.
 |      
 |      Padding is done using the specified fill character (default is a space).
 |  
 |  rpartition(self, sep, /)
 |      Partition the string into three parts using the given separator.
 |      
 |      This will search for the separator in the string, starting at the end. If
 |      the separator is found, returns a 3-tuple containing the part before the
 |      separator, the separator itself, and the part after it.
 |      
 |      If the separator is not found, returns a 3-tuple containing two empty strings
 |      and the original string.
 |  
 |  rsplit(self, /, sep=None, maxsplit=-1)
 |      Return a list of the words in the string, using sep as the delimiter string.
 |      
 |        sep
 |          The delimiter according which to split the string.
 |          None (the default value) means split according to any whitespace,
 |          and discard empty strings from the result.
 |        maxsplit
 |          Maximum number of splits to do.
 |          -1 (the default value) means no limit.
 |      
 |      Splits are done starting at the end of the string and working to the front.
 |  
 |  rstrip(self, chars=None, /)
 |      Return a copy of the string with trailing whitespace removed.
 |      
 |      If chars is given and not None, remove characters in chars instead.
 |  
 |  split(self, /, sep=None, maxsplit=-1)
 |      Return a list of the words in the string, using sep as the delimiter string.
 |      
 |      sep
 |        The delimiter according which to split the string.
 |        None (the default value) means split according to any whitespace,
 |        and discard empty strings from the result.
 |      maxsplit
 |        Maximum number of splits to do.
 |        -1 (the default value) means no limit.
 |  
 |  splitlines(self, /, keepends=False)
 |      Return a list of the lines in the string, breaking at line boundaries.
 |      
 |      Line breaks are not included in the resulting list unless keepends is given and
 |      true.
 |  
 |  startswith(...)
 |      S.startswith(prefix[, start[, end]]) -&gt; bool
 |      
 |      Return True if S starts with the specified prefix, False otherwise.
 |      With optional start, test S beginning at that position.
 |      With optional end, stop comparing S at that position.
 |      prefix can also be a tuple of strings to try.
 |  
 |  strip(self, chars=None, /)
 |      Return a copy of the string with leading and trailing whitespace remove.
 |      
 |      If chars is given and not None, remove characters in chars instead.
 |  
 |  swapcase(self, /)
 |      Convert uppercase characters to lowercase and lowercase characters to uppercase.
 |  
 |  title(self, /)
 |      Return a version of the string where each word is titlecased.
 |      
 |      More specifically, words start with uppercased characters and all remaining
 |      cased characters have lower case.
 |  
 |  translate(self, table, /)
 |      Replace each character in the string using the given translation table.
 |      
 |        table
 |          Translation table, which must be a mapping of Unicode ordinals to
 |          Unicode ordinals, strings, or None.
 |      
 |      The table must implement lookup/indexing via __getitem__, for instance a
 |      dictionary or list.  If this operation raises LookupError, the character is
 |      left untouched.  Characters mapped to None are deleted.
 |  
 |  upper(self, /)
 |      Return a copy of the string converted to uppercase.
 |  
 |  zfill(self, width, /)
 |      Pad a numeric string with zeros on the left, to fill a field of the given width.
 |      
 |      The string is never truncated.
 |  
 |  ----------------------------------------------------------------------
 |  Static methods defined here:
 |  
 |  __new__(*args, **kwargs) from builtins.type
 |      Create and return a new object.  See help(type) for accurate signature.
 |  
 |  maketrans(x, y=None, z=None, /)
 |      Return a translation table usable for str.translate().
 |      
 |      If there is only one argument, it must be a dictionary mapping Unicode
 |      ordinals (integers) or characters to Unicode ordinals, strings or None.
 |      Character keys will be then converted to ordinals.
 |      If there are two arguments, they must be strings of equal length, and
 |      in the resulting dictionary, each character in x will be mapped to the
 |      character at the same position in y. If there is a third argument, it
 |      must be a string, whose characters will be mapped to None in the result.</code></pre>
<p>返回对象 object 的字符串形式。如果未提供 object 则返回空字符串。</p>
<p>如果 encoding 或 errors 至少给出其中之一，则 bytes_or_buffer 应该是一个 bytes-like object (例如字节串或字节数组)。在此情况下，如果是一个字节串 (或字节数组) 对象，则 <code>str(bytes, encoding, errors)</code> 等价于 <code>bytes.decode(encoding, errors)</code>。否则的话，会在调用 <code>bytes.decode()</code> 之前获取缓冲区对象下层的 bytes 对象。</p>
<p>将一个 bytes 对象传入 str() 而不给出 encoding 或 errors 参数，将直接转 bytes 对象为字符串。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">type</span>(<span class="built_in">str</span>)</span><br></pre></td></tr></table></figure>




<pre><code>type</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">str</span>()</span><br></pre></td></tr></table></figure>




<pre><code>&#39;&#39;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">str</span>(<span class="built_in">int</span>)</span><br></pre></td></tr></table></figure>




<pre><code>&quot;&lt;class &#39;int&#39;&gt;&quot;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">str</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br></pre></td></tr></table></figure>




<pre><code>&#39;[1, 2, 3]&#39;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">str</span>(<span class="string">b&#x27;\xe8\x87\xaa\xe5\xad\xa6&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br></pre></td></tr></table></figure>




<pre><code>&#39;自学&#39;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">b&#x27;\xe8\x87\xaa\xe5\xad\xa6&#x27;</span>.decode(encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br></pre></td></tr></table></figure>




<pre><code>&#39;自学&#39;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">str</span>(<span class="string">b&#x27;\xe8\x87\xaa\xe5\xad\xa6&#x27;</span>)</span><br></pre></td></tr></table></figure>




<pre><code>&quot;b&#39;\\xe8\\x87\\xaa\\xe5\\xad\\xa6&#39;&quot;</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/11_built-in_function/58_staticmethod-2fea0e099726/</url>
    <content><![CDATA[<h2 id="staticmethod-封装函数为静态方法"><a href="#staticmethod-封装函数为静态方法" class="headerlink" title="staticmethod 封装函数为静态方法"></a>staticmethod 封装函数为静态方法</h2><p>内置函数（类）staticmethod，Python 官方文档描述如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">help</span>(<span class="built_in">staticmethod</span>)</span><br></pre></td></tr></table></figure>

<pre><code>Help on class staticmethod in module builtins:

class staticmethod(object)
 |  staticmethod(function) -&gt; method
 |  
 |  Convert a function to be a static method.
 |  
 |  A static method does not receive an implicit first argument.
 |  To declare a static method, use this idiom:
 |  
 |       class C:
 |           @staticmethod
 |           def f(arg1, arg2, ...):
 |               ...
 |  
 |  It can be called either on the class (e.g. C.f()) or on an instance
 |  (e.g. C().f()).  The instance is ignored except for its class.
 |  
 |  Static methods in Python are similar to those found in Java or C++.
 |  For a more advanced concept, see the classmethod builtin.
 |  
 |  Methods defined here:
 |  
 |  __get__(self, instance, owner, /)
 |      Return an attribute of instance, which is of type owner.
 |  
 |  __init__(self, /, *args, **kwargs)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Static methods defined here:
 |  
 |  __new__(*args, **kwargs) from builtins.type
 |      Create and return a new object.  See help(type) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |  
 |  __func__
 |  
 |  __isabstractmethod__</code></pre>
<p>将函数转换为静态方法。</p>
<p>静态方法不会接收隐式的第一个参数。可以传递一个函数作为参数定义为静态方法，也可以使用装饰器的形式将一个自定义函数定义为静态方法。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">type</span>(<span class="built_in">staticmethod</span>)</span><br></pre></td></tr></table></figure>




<pre><code>type</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line">    in_print = <span class="built_in">staticmethod</span>(<span class="built_in">print</span>)</span><br><span class="line">a = A()</span><br><span class="line">a.in_print(<span class="string">&#x27;静态方法&#x27;</span>)</span><br></pre></td></tr></table></figure>

<pre><code>静态方法</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">in_print</span>(<span class="params">value</span>):</span></span><br><span class="line">        print(value)</span><br><span class="line">a = A()</span><br><span class="line">a.in_print(<span class="string">&#x27;静态方法&#x27;</span>)</span><br></pre></td></tr></table></figure>

<pre><code>静态方法</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/11_built-in_function/57_sorted-9cd59184cf14/</url>
    <content><![CDATA[<h2 id="sorted-返回排序列表"><a href="#sorted-返回排序列表" class="headerlink" title="sorted() 返回排序列表"></a>sorted() 返回排序列表</h2><p>内置函数 sorted()，Python 官方文档描述如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">help</span>(<span class="built_in">sorted</span>)</span><br></pre></td></tr></table></figure>

<pre><code>Help on built-in function sorted in module builtins:

sorted(iterable, /, *, key=None, reverse=False)
    Return a new list containing all items from the iterable in ascending order.

    A custom key function can be supplied to customize the sort order, and the
    reverse flag can be set to request the result in descending order.</code></pre>
<p>根据 iterable 中的项返回一个新的已排序列表。</p>
<p>具有两个可选参数，它们都必须指定为关键字参数。</p>
<p>key 指定带有单个参数的函数，应用于 iterable 中的每个元素，将计算结果用来对原 iterable 排序。默认值为 None (直接比较)。</p>
<p>reverse 为一个布尔值。如果设为 True，则每个列表元素将按反向顺序比较进行排序。</p>
<p>sorted() 排序确保是稳定的。如果一个排序确保不会改变比较结果相等的元素的相对顺序就称其为稳定的 — 这有利于进行多重排序。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sorted</span>(&#123;<span class="string">&#x27;b&#x27;</span>:<span class="number">1</span>,<span class="string">&#x27;a&#x27;</span>:<span class="number">3</span>,<span class="string">&#x27;c&#x27;</span>:<span class="number">2</span>&#125;)</span><br></pre></td></tr></table></figure>




<pre><code>[&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d = [&#123;<span class="string">&#x27;age&#x27;</span>:<span class="number">18</span>&#125;,&#123;<span class="string">&#x27;age&#x27;</span>:<span class="number">30</span>&#125;,&#123;<span class="string">&#x27;age&#x27;</span>:<span class="number">26</span>&#125;]</span><br><span class="line"><span class="built_in">sorted</span>(d,key=<span class="keyword">lambda</span> x:x[<span class="string">&#x27;age&#x27;</span>])</span><br></pre></td></tr></table></figure>




<pre><code>[&#123;&#39;age&#39;: 18&#125;, &#123;&#39;age&#39;: 26&#125;, &#123;&#39;age&#39;: 30&#125;]</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sorted</span>([<span class="number">1.5</span>,<span class="string">&#x27;2.0&#x27;</span>,<span class="string">&#x27;1.5&#x27;</span>,<span class="number">3.14</span>], key=<span class="built_in">float</span>)</span><br></pre></td></tr></table></figure>




<pre><code>[1.5, &#39;1.5&#39;, &#39;2.0&#39;, 3.14]</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sorted</span>(<span class="string">&#x27;3123&#x27;</span>, reverse=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>




<pre><code>[&#39;3&#39;, &#39;3&#39;, &#39;2&#39;, &#39;1&#39;]</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/11_built-in_function/56_slice-e955f87942b2/</url>
    <content><![CDATA[<h2 id="slice-创建切片对象"><a href="#slice-创建切片对象" class="headerlink" title="slice 创建切片对象"></a>slice 创建切片对象</h2><p>内置函数（类）slice，Python 官方文档描述如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">help</span>(<span class="built_in">slice</span>)</span><br></pre></td></tr></table></figure>

<pre><code>Help on class slice in module builtins:

class slice(object)
 |  slice(stop)
 |  slice(start, stop[, step])
 |  
 |  Create a slice object.  This is used for extended slicing (e.g. a[0:10:2]).
 |  
 |  Methods defined here:
 |  
 |  __eq__(self, value, /)
 |      Return self==value.
 |  
 |  __ge__(self, value, /)
 |      Return self&gt;=value.
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __gt__(self, value, /)
 |      Return self&gt;value.
 |  
 |  __le__(self, value, /)
 |      Return self&lt;=value.
 |  
 |  __lt__(self, value, /)
 |      Return self&lt;value.
 |  
 |  __ne__(self, value, /)
 |      Return self!=value.
 |  
 |  __reduce__(...)
 |      Return state information for pickling.
 |  
 |  __repr__(self, /)
 |      Return repr(self).
 |  
 |  indices(...)
 |      S.indices(len) -&gt; (start, stop, stride)
 |      
 |      Assuming a sequence of length len, calculate the start and stop
 |      indices, and the stride length of the extended slice described by
 |      S. Out of bounds indices are clipped in a manner consistent with the
 |      handling of normal slices.
 |  
 |  ----------------------------------------------------------------------
 |  Static methods defined here:
 |  
 |  __new__(*args, **kwargs) from builtins.type
 |      Create and return a new object.  See help(type) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  start
 |  
 |  step
 |  
 |  stop
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  __hash__ = None</code></pre>
<p>返回一个表示由 range(start, stop, step) 指定索引集的 slice 对象。其中 start 和 step 参数默认为 None。</p>
<p>切片对象具有仅会返回对应参数值（或其默认值）的只读数据属性 start, stop 和 step。它们没有其他的显式功能。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">type</span>(<span class="built_in">slice</span>)</span><br></pre></td></tr></table></figure>




<pre><code>type</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = <span class="built_in">slice</span>(<span class="number">3</span>)</span><br><span class="line">s</span><br></pre></td></tr></table></figure>




<pre><code>slice(None, 3, None)</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">5</span>))</span><br><span class="line">a[s]</span><br></pre></td></tr></table></figure>




<pre><code>[0, 1, 2]</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">slice</span>(<span class="number">2</span>,<span class="number">8</span>,<span class="number">2</span>)</span><br></pre></td></tr></table></figure>




<pre><code>slice(2, 8, 2)</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">10</span>)[<span class="built_in">slice</span>(<span class="number">2</span>,<span class="number">8</span>,<span class="number">2</span>)])</span><br></pre></td></tr></table></figure>




<pre><code>[2, 4, 6]</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/11_built-in_function/55_setattr-2d591efa9c32/</url>
    <content><![CDATA[<h2 id="setattr-设置或新增属性"><a href="#setattr-设置或新增属性" class="headerlink" title="setattr() 设置或新增属性"></a>setattr() 设置或新增属性</h2><p>内置函数 setattr()，Python 官方文档描述如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">help</span>(<span class="built_in">setattr</span>)</span><br></pre></td></tr></table></figure>

<pre><code>Help on built-in function setattr in module builtins:

setattr(obj, name, value, /)
    Sets the named attribute on the given object to the specified value.

    setattr(x, &#39;y&#39;, v) is equivalent to ``x.y = v&#39;&#39;</code></pre>
<p>参数为一个对象、一个字符串和一个任意值。字符串指定一个现有属性或者新增属性。函数会将值赋给该属性，只要对象允许这种操作。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line">    y = <span class="number">1</span></span><br><span class="line">x = A()</span><br><span class="line">x.y</span><br></pre></td></tr></table></figure>




<pre><code>1</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 为实例 x 新增属性</span></span><br><span class="line"><span class="built_in">setattr</span>(x, <span class="string">&#x27;y&#x27;</span>, <span class="number">10</span>)</span><br><span class="line">x.y</span><br></pre></td></tr></table></figure>




<pre><code>10</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">A.y</span><br></pre></td></tr></table></figure>




<pre><code>1</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 修改类 A 的 y 属性</span></span><br><span class="line"><span class="built_in">setattr</span>(A, <span class="string">&#x27;y&#x27;</span>, <span class="number">100</span>)</span><br><span class="line">A.y</span><br></pre></td></tr></table></figure>




<pre><code>100</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x.y</span><br></pre></td></tr></table></figure>




<pre><code>10</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/11_built-in_function/54_set-31861456f80a/</url>
    <content><![CDATA[<h2 id="set-创建集合"><a href="#set-创建集合" class="headerlink" title="set 创建集合"></a>set 创建集合</h2><p>内置函数（类）set，Python 官方文档描述如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">help</span>(<span class="built_in">set</span>)</span><br></pre></td></tr></table></figure>

<pre><code>Help on class set in module builtins:

class set(object)
 |  set() -&gt; new empty set object
 |  set(iterable) -&gt; new set object
 |  
 |  Build an unordered collection of unique elements.
 |  
 |  Methods defined here:
 |  
 |  __and__(self, value, /)
 |      Return self&amp;value.
 |  
 |  __contains__(...)
 |      x.__contains__(y) &lt;==&gt; y in x.
 |  
 |  __eq__(self, value, /)
 |      Return self==value.
 |  
 |  __ge__(self, value, /)
 |      Return self&gt;=value.
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __gt__(self, value, /)
 |      Return self&gt;value.
 |  
 |  __iand__(self, value, /)
 |      Return self&amp;=value.
 |  
 |  __init__(self, /, *args, **kwargs)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __ior__(self, value, /)
 |      Return self|=value.
 |  
 |  __isub__(self, value, /)
 |      Return self-=value.
 |  
 |  __iter__(self, /)
 |      Implement iter(self).
 |  
 |  __ixor__(self, value, /)
 |      Return self^=value.
 |  
 |  __le__(self, value, /)
 |      Return self&lt;=value.
 |  
 |  __len__(self, /)
 |      Return len(self).
 |  
 |  __lt__(self, value, /)
 |      Return self&lt;value.
 |  
 |  __ne__(self, value, /)
 |      Return self!=value.
 |  
 |  __or__(self, value, /)
 |      Return self|value.
 |  
 |  __rand__(self, value, /)
 |      Return value&amp;self.
 |  
 |  __reduce__(...)
 |      Return state information for pickling.
 |  
 |  __repr__(self, /)
 |      Return repr(self).
 |  
 |  __ror__(self, value, /)
 |      Return value|self.
 |  
 |  __rsub__(self, value, /)
 |      Return value-self.
 |  
 |  __rxor__(self, value, /)
 |      Return value^self.
 |  
 |  __sizeof__(...)
 |      S.__sizeof__() -&gt; size of S in memory, in bytes
 |  
 |  __sub__(self, value, /)
 |      Return self-value.
 |  
 |  __xor__(self, value, /)
 |      Return self^value.
 |  
 |  add(...)
 |      Add an element to a set.
 |      
 |      This has no effect if the element is already present.
 |  
 |  clear(...)
 |      Remove all elements from this set.
 |  
 |  copy(...)
 |      Return a shallow copy of a set.
 |  
 |  difference(...)
 |      Return the difference of two or more sets as a new set.
 |      
 |      (i.e. all elements that are in this set but not the others.)
 |  
 |  difference_update(...)
 |      Remove all elements of another set from this set.
 |  
 |  discard(...)
 |      Remove an element from a set if it is a member.
 |      
 |      If the element is not a member, do nothing.
 |  
 |  intersection(...)
 |      Return the intersection of two sets as a new set.
 |      
 |      (i.e. all elements that are in both sets.)
 |  
 |  intersection_update(...)
 |      Update a set with the intersection of itself and another.
 |  
 |  isdisjoint(...)
 |      Return True if two sets have a null intersection.
 |  
 |  issubset(...)
 |      Report whether another set contains this set.
 |  
 |  issuperset(...)
 |      Report whether this set contains another set.
 |  
 |  pop(...)
 |      Remove and return an arbitrary set element.
 |      Raises KeyError if the set is empty.
 |  
 |  remove(...)
 |      Remove an element from a set; it must be a member.
 |      
 |      If the element is not a member, raise a KeyError.
 |  
 |  symmetric_difference(...)
 |      Return the symmetric difference of two sets as a new set.
 |      
 |      (i.e. all elements that are in exactly one of the sets.)
 |  
 |  symmetric_difference_update(...)
 |      Update a set with the symmetric difference of itself and another.
 |  
 |  union(...)
 |      Return the union of sets as a new set.
 |      
 |      (i.e. all elements that are in either set.)
 |  
 |  update(...)
 |      Update a set with the union of itself and others.
 |  
 |  ----------------------------------------------------------------------
 |  Static methods defined here:
 |  
 |  __new__(*args, **kwargs) from builtins.type
 |      Create and return a new object.  See help(type) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  __hash__ = None</code></pre>
<p>将一个可迭代对象转换为集合。可迭代对象为空，或不传参数，将得到空集合。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">type</span>(<span class="built_in">set</span>)</span><br></pre></td></tr></table></figure>




<pre><code>type</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set</span>([])</span><br></pre></td></tr></table></figure>




<pre><code>set()</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set</span>()</span><br></pre></td></tr></table></figure>




<pre><code>set()</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set</span>(<span class="string">&#x27;1231&#x27;</span>)</span><br></pre></td></tr></table></figure>




<pre><code>&#123;&#39;1&#39;, &#39;2&#39;, &#39;3&#39;&#125;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set</span>(&#123;<span class="string">&#x27;1&#x27;</span>:<span class="number">1</span>, <span class="string">&#x27;2&#x27;</span>:<span class="number">2</span>, <span class="string">&#x27;3&#x27;</span>:<span class="number">3</span>&#125;)</span><br></pre></td></tr></table></figure>




<pre><code>&#123;&#39;1&#39;, &#39;2&#39;, &#39;3&#39;&#125;</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/11_built-in_function/53_round-b3da53a89e3e/</url>
    <content><![CDATA[<h2 id="round-数字舍入"><a href="#round-数字舍入" class="headerlink" title="round() 数字舍入"></a>round() 数字舍入</h2><p>内置函数 round()，Python 官方文档描述如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">help</span>(<span class="built_in">round</span>)</span><br></pre></td></tr></table></figure>

<pre><code>Help on built-in function round in module builtins:

round(number, ndigits=None)
    Round a number to a given precision in decimal digits.

    The return value is an integer if ndigits is omitted or None.  Otherwise
    the return value has the same type as the number.  ndigits may be negative.</code></pre>
<p>返回 number 舍入到小数点后 ndigits 位精度的值。如果 ndigits 被省略或为 None，则返回最接近输入值的整数。</p>
<p>对于支持 round() 的内置类型，值会被舍入到最接近的 10 的负 ndigits 次幂的倍数；如果与两个倍数的距离相等，则选择偶数。</p>
<p>任何整数值都可作为有效的 ndigits (正数、零或负数)。如果 ndigits 被省略或为 None 则返回值将为整数。否则返回值与 number 的类型相同。</p>
<p>由于大多数十进制小数实际上都不能以浮点数精确地表示。返回值可能会不是预期的四舍五入结果。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">round</span>(<span class="number">3.14</span>)</span><br></pre></td></tr></table></figure>




<pre><code>3</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">round</span>(<span class="number">3.14</span>, <span class="number">3</span>)</span><br></pre></td></tr></table></figure>




<pre><code>3.14</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">round</span>(<span class="number">3.14</span>, <span class="number">0</span>)</span><br></pre></td></tr></table></figure>




<pre><code>3.0</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">round</span>(<span class="number">13.14</span>,<span class="number">-1</span>)</span><br></pre></td></tr></table></figure>




<pre><code>10.0</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">round</span>(<span class="number">2.5</span>), <span class="built_in">round</span>(<span class="number">-2.5</span>)</span><br></pre></td></tr></table></figure>




<pre><code>(2, -2)</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">round</span>(<span class="number">1.5</span>), <span class="built_in">round</span>(<span class="number">-1.5</span>)</span><br></pre></td></tr></table></figure>




<pre><code>(2, -2)</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">round</span>(<span class="number">2.675</span>, <span class="number">2</span>), <span class="built_in">round</span>(<span class="number">2.665</span>, <span class="number">2</span>)</span><br></pre></td></tr></table></figure>




<pre><code>(2.67, 2.67)</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/11_built-in_function/52_reversed-c7545c0ed2da/</url>
    <content><![CDATA[<h2 id="reversed-序列逆置"><a href="#reversed-序列逆置" class="headerlink" title="reversed 序列逆置"></a>reversed 序列逆置</h2><p>内置函数（类）reversed，Python 官方文档描述如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">help</span>(<span class="built_in">reversed</span>)</span><br></pre></td></tr></table></figure>

<pre><code>Help on class reversed in module builtins:

class reversed(object)
 |  reversed(sequence, /)
 |  
 |  Return a reverse iterator over the values of the given sequence.
 |  
 |  Methods defined here:
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __iter__(self, /)
 |      Implement iter(self).
 |  
 |  __length_hint__(...)
 |      Private method returning an estimate of len(list(it)).
 |  
 |  __next__(self, /)
 |      Implement next(self).
 |  
 |  __reduce__(...)
 |      Return state information for pickling.
 |  
 |  __setstate__(...)
 |      Set state information for unpickling.
 |  
 |  ----------------------------------------------------------------------
 |  Static methods defined here:
 |  
 |  __new__(*args, **kwargs) from builtins.type
 |      Create and return a new object.  See help(type) for accurate signature.</code></pre>
<p>返回给定的序列逆置之后的迭代器。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">type</span>(<span class="built_in">reversed</span>)</span><br></pre></td></tr></table></figure>




<pre><code>type</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">reversed</span>(<span class="string">&#x27;1234&#x27;</span>)</span><br></pre></td></tr></table></figure>




<pre><code>&lt;reversed at 0x14b684fe460&gt;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">list</span>(<span class="built_in">reversed</span>(<span class="string">&#x27;1234&#x27;</span>))</span><br></pre></td></tr></table></figure>




<pre><code>[&#39;4&#39;, &#39;3&#39;, &#39;2&#39;, &#39;1&#39;]</code></pre>
<p>因为字典顺序会确保为插入顺序，字典和字典视图都是可逆的。3.8 新版可以返回一个逆序获取字典键的迭代器。 </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d = <span class="built_in">reversed</span>(&#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">1</span>,<span class="string">&#x27;b&#x27;</span>:<span class="number">2</span>,<span class="string">&#x27;c&#x27;</span>:<span class="number">3</span>&#125;)</span><br><span class="line"><span class="built_in">list</span>(d)</span><br></pre></td></tr></table></figure>




<pre><code>[&#39;c&#39;, &#39;b&#39;, &#39;a&#39;]</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/11_built-in_function/51_repr-6a88ffc79473/</url>
    <content><![CDATA[<h2 id="repr-返回对象的可打印字符串"><a href="#repr-返回对象的可打印字符串" class="headerlink" title="repr() 返回对象的可打印字符串"></a>repr() 返回对象的可打印字符串</h2><p>内置函数 repr()，Python 官方文档描述如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">help</span>(<span class="built_in">repr</span>)</span><br></pre></td></tr></table></figure>

<pre><code>Help on built-in function repr in module builtins:

repr(obj, /)
    Return the canonical string representation of the object.

    For many object types, including most builtins, eval(repr(obj)) == obj.</code></pre>
<p>返回包含一个对象的可打印表示形式的字符串。</p>
<p>对于许多类型来说，该函数会尝试返回的字符串将会与该对象被传递给 eval() 时所生成的对象具有相同的值，在其他情况下表示形式会是一个括在尖括号中的字符串，其中包含对象类型的名称与通常包括对象名称和地址的附加信息。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">repr</span>(<span class="number">1</span>+<span class="number">1</span>)</span><br></pre></td></tr></table></figure>




<pre><code>&#39;2&#39;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">repr</span>(<span class="built_in">int</span>)</span><br></pre></td></tr></table></figure>




<pre><code>&quot;&lt;class &#39;int&#39;&gt;&quot;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">str</span>(<span class="string">&#x27;python\n&#x27;</span>)</span><br></pre></td></tr></table></figure>




<pre><code>&#39;python\n&#39;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">repr</span>(<span class="string">&#x27;python\n&#x27;</span>)</span><br></pre></td></tr></table></figure>




<pre><code>&quot;&#39;python\\n&#39;&quot;</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/11_built-in_function/50_range-298285b2e70f/</url>
    <content><![CDATA[<h2 id="range-创建-range-序列"><a href="#range-创建-range-序列" class="headerlink" title="range 创建 range 序列"></a>range 创建 range 序列</h2><p>内置函数（类）range，Python 官方文档描述如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">help</span>(<span class="built_in">range</span>)</span><br></pre></td></tr></table></figure>

<pre><code>Help on class range in module builtins:

class range(object)
 |  range(stop) -&gt; range object
 |  range(start, stop[, step]) -&gt; range object
 |  
 |  Return an object that produces a sequence of integers from start (inclusive)
 |  to stop (exclusive) by step.  range(i, j) produces i, i+1, i+2, ..., j-1.
 |  start defaults to 0, and stop is omitted!  range(4) produces 0, 1, 2, 3.
 |  These are exactly the valid indices for a list of 4 elements.
 |  When step is given, it specifies the increment (or decrement).
 |  
 |  Methods defined here:
 |  
 |  __bool__(self, /)
 |      self != 0
 |  
 |  __contains__(self, key, /)
 |      Return key in self.
 |  
 |  __eq__(self, value, /)
 |      Return self==value.
 |  
 |  __ge__(self, value, /)
 |      Return self&gt;=value.
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __getitem__(self, key, /)
 |      Return self[key].
 |  
 |  __gt__(self, value, /)
 |      Return self&gt;value.
 |  
 |  __hash__(self, /)
 |      Return hash(self).
 |  
 |  __iter__(self, /)
 |      Implement iter(self).
 |  
 |  __le__(self, value, /)
 |      Return self&lt;=value.
 |  
 |  __len__(self, /)
 |      Return len(self).
 |  
 |  __lt__(self, value, /)
 |      Return self&lt;value.
 |  
 |  __ne__(self, value, /)
 |      Return self!=value.
 |  
 |  __reduce__(...)
 |      Helper for pickle.
 |  
 |  __repr__(self, /)
 |      Return repr(self).
 |  
 |  __reversed__(...)
 |      Return a reverse iterator.
 |  
 |  count(...)
 |      rangeobject.count(value) -&gt; integer -- return number of occurrences of value
 |  
 |  index(...)
 |      rangeobject.index(value, [start, [stop]]) -&gt; integer -- return index of value.
 |      Raise ValueError if the value is not present.
 |  
 |  ----------------------------------------------------------------------
 |  Static methods defined here:
 |  
 |  __new__(*args, **kwargs) from builtins.type
 |      Create and return a new object.  See help(type) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  start
 |  
 |  step
 |  
 |  stop</code></pre>
<p>虽然被称为函数，但 range 实际上是一个不可变的序列类型，参见 <a href="https://xue.cn/hub/reader?bookId=64&path=xue_python_kp/05_sequence/02_range.ipynb">range 对象</a>。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">type</span>(<span class="built_in">range</span>)</span><br></pre></td></tr></table></figure>




<pre><code>type</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">3</span>))</span><br></pre></td></tr></table></figure>




<pre><code>[0, 1, 2]</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">-5</span>))</span><br></pre></td></tr></table></figure>




<pre><code>[]</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">1</span>,<span class="number">5</span>,<span class="number">2</span>))</span><br></pre></td></tr></table></figure>




<pre><code>[1, 3]</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">0</span>,<span class="number">-5</span>,<span class="number">-1</span>))</span><br></pre></td></tr></table></figure>




<pre><code>[0, -1, -2, -3, -4]</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/11_built-in_function/49_property-8dc46e043054/</url>
    <content><![CDATA[<h2 id="property-返回-property-属性"><a href="#property-返回-property-属性" class="headerlink" title="property 返回 property 属性"></a>property 返回 property 属性</h2><p>内置函数（类）property，Python 官方文档描述如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">help</span>(<span class="built_in">property</span>)</span><br></pre></td></tr></table></figure>

<pre><code>Help on class property in module builtins:

class property(object)
 |  property(fget=None, fset=None, fdel=None, doc=None)
 |  
 |  Property attribute.
 |  
 |    fget
 |      function to be used for getting an attribute value
 |    fset
 |      function to be used for setting an attribute value
 |    fdel
 |      function to be used for del&#39;ing an attribute
 |    doc
 |      docstring
 |  
 |  Typical use is to define a managed attribute x:
 |  
 |  class C(object):
 |      def getx(self): return self._x
 |      def setx(self, value): self._x = value
 |      def delx(self): del self._x
 |      x = property(getx, setx, delx, &quot;I&#39;m the &#39;x&#39; property.&quot;)
 |  
 |  Decorators make defining new properties or modifying existing ones easy:
 |  
 |  class C(object):
 |      @property
 |      def x(self):
 |          &quot;I am the &#39;x&#39; property.&quot;
 |          return self._x
 |      @x.setter
 |      def x(self, value):
 |          self._x = value
 |      @x.deleter
 |      def x(self):
 |          del self._x
 |  
 |  Methods defined here:
 |  
 |  __delete__(self, instance, /)
 |      Delete an attribute of instance.
 |  
 |  __get__(self, instance, owner, /)
 |      Return an attribute of instance, which is of type owner.
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __init__(self, /, *args, **kwargs)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __set__(self, instance, value, /)
 |      Set an attribute of instance to value.
 |  
 |  deleter(...)
 |      Descriptor to change the deleter on a property.
 |  
 |  getter(...)
 |      Descriptor to change the getter on a property.
 |  
 |  setter(...)
 |      Descriptor to change the setter on a property.
 |  
 |  ----------------------------------------------------------------------
 |  Static methods defined here:
 |  
 |  __new__(*args, **kwargs) from builtins.type
 |      Create and return a new object.  See help(type) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __isabstractmethod__
 |  
 |  fdel
 |  
 |  fget
 |  
 |  fset</code></pre>
<p>返回 property 属性。</p>
<p>fget 是获取属性值的函数。fset 是用于设置属性值的函数。fdel 是用于删除属性值的函数，doc 为属性对象创建文档字符串。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">type</span>(<span class="built_in">property</span>)</span><br></pre></td></tr></table></figure>




<pre><code>type</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">dir</span>(<span class="built_in">property</span>)</span><br></pre></td></tr></table></figure>




<pre><code>[&#39;__class__&#39;,
 &#39;__delattr__&#39;,
 &#39;__delete__&#39;,
 &#39;__dir__&#39;,
 &#39;__doc__&#39;,
 &#39;__eq__&#39;,
 &#39;__format__&#39;,
 &#39;__ge__&#39;,
 &#39;__get__&#39;,
 &#39;__getattribute__&#39;,
 &#39;__gt__&#39;,
 &#39;__hash__&#39;,
 &#39;__init__&#39;,
 &#39;__init_subclass__&#39;,
 &#39;__isabstractmethod__&#39;,
 &#39;__le__&#39;,
 &#39;__lt__&#39;,
 &#39;__ne__&#39;,
 &#39;__new__&#39;,
 &#39;__reduce__&#39;,
 &#39;__reduce_ex__&#39;,
 &#39;__repr__&#39;,
 &#39;__set__&#39;,
 &#39;__setattr__&#39;,
 &#39;__sizeof__&#39;,
 &#39;__str__&#39;,
 &#39;__subclasshook__&#39;,
 &#39;deleter&#39;,
 &#39;fdel&#39;,
 &#39;fget&#39;,
 &#39;fset&#39;,
 &#39;getter&#39;,
 &#39;setter&#39;]</code></pre>
<p>一个典型的用法是定义一个托管属性 x:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 列一</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,value</span>):</span></span><br><span class="line">        self._x = value</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getx</span>(<span class="params">self</span>):</span> </span><br><span class="line">        <span class="keyword">return</span> self._x</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setx</span>(<span class="params">self, value</span>):</span> </span><br><span class="line">        self._x = value</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">delx</span>(<span class="params">self</span>):</span> </span><br><span class="line">        <span class="keyword">del</span> self._x</span><br><span class="line">        </span><br><span class="line">    x = <span class="built_in">property</span>(getx, setx, delx, <span class="string">&quot;I&#x27;m the &#x27;x&#x27; property.&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>如果 c 是 C 的实例，<code>c.x</code> 将调用 getter，<code>c.x = value</code> 将调用 setter，<code>del c.x</code> 将调用 deleter。</p>
<p>如果给出，doc 将成为该 property 属性的文档字符串。否则该 property 将拷贝 fget 的文档字符串（如果存在）。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">c = C(<span class="number">1</span>)</span><br><span class="line">c.x</span><br></pre></td></tr></table></figure>




<pre><code>1</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">c.x = <span class="number">2</span></span><br><span class="line">c.x</span><br></pre></td></tr></table></figure>




<pre><code>2</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">del</span> c.x</span><br><span class="line">c.x</span><br></pre></td></tr></table></figure>


<pre><code>---------------------------------------------------------------------------

AttributeError                            Traceback (most recent call last)

&lt;ipython-input-16-d32ce31f0255&gt; in &lt;module&gt;
      1 del c.x
----&gt; 2 c.x


&lt;ipython-input-10-eaaa1d84111b&gt; in getx(self)
      4 
      5     def getx(self):
----&gt; 6         return self._x
      7 
      8     def setx(self, value):


AttributeError: &#39;C&#39; object has no attribute &#39;_x&#39;</code></pre>
<p>这令使用 property() 作为装饰器来创建只读的特征属性可以很容易地实现:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parrot</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self._voltage = <span class="number">100000</span></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">voltage</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;Get the current voltage.&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> self._voltage</span><br></pre></td></tr></table></figure>

<p>以上 @property 装饰器会将 voltage() 方法转化为一个具有相同名称的只读属性的 getter，并将 voltage 的文档字符串设置为 ‘Get the current voltage.’</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">p = Parrot()</span><br><span class="line">p.voltage</span><br></pre></td></tr></table></figure>




<pre><code>100000</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">p.voltage = <span class="number">100</span></span><br></pre></td></tr></table></figure>


<pre><code>---------------------------------------------------------------------------

AttributeError                            Traceback (most recent call last)

&lt;ipython-input-20-50ba7917c8b5&gt; in &lt;module&gt;
----&gt; 1 p.voltage = 100


AttributeError: can&#39;t set attribute</code></pre>
<p>特征属性对象具有 getter, setter 以及 deleter 方法，它们可用作装饰器来创建该特征属性的副本，并将相应的访问函数设为所装饰的函数。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,value</span>):</span></span><br><span class="line">        self._x = value</span><br><span class="line">        </span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">x</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;I&#x27;m the &#x27;x&#x27; property.&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> self._x</span><br><span class="line">    </span><br><span class="line"><span class="meta">    @x.setter</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">x</span>(<span class="params">self, value</span>):</span></span><br><span class="line">        self._x = value</span><br><span class="line">        </span><br><span class="line"><span class="meta">    @x.deleter</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">x</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">del</span> self._x</span><br></pre></td></tr></table></figure>

<p>上述代码与 例一 完全等价。注意一定要给附加函数与原始的特征属性相同的名称。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">c = C(<span class="number">1</span>)</span><br><span class="line">c.x</span><br></pre></td></tr></table></figure>




<pre><code>1</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">c.x = <span class="number">2</span></span><br><span class="line">c.x</span><br></pre></td></tr></table></figure>




<pre><code>2</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">del</span> c.x</span><br><span class="line">c.x</span><br></pre></td></tr></table></figure>


<pre><code>---------------------------------------------------------------------------

AttributeError                            Traceback (most recent call last)

&lt;ipython-input-7-d32ce31f0255&gt; in &lt;module&gt;
      1 del c.x
----&gt; 2 c.x


&lt;ipython-input-4-356a299284e7&gt; in x(self)
      6     def x(self):
      7         &quot;&quot;&quot;I&#39;m the &#39;x&#39; property.&quot;&quot;&quot;
----&gt; 8         return self._x
      9 
     10     @x.setter


AttributeError: &#39;C&#39; object has no attribute &#39;_x&#39;</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/11_built-in_function/48_print-c35715e3eff4/</url>
    <content><![CDATA[<h2 id="print-打印对象"><a href="#print-打印对象" class="headerlink" title="print() 打印对象"></a>print() 打印对象</h2><p>内置函数 print()，Python 官方文档描述如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">help</span>(<span class="built_in">print</span>)</span><br></pre></td></tr></table></figure>

<pre><code>Help on built-in function print in module builtins:

print(...)
    print(value, ..., sep=&#39; &#39;, end=&#39;\n&#39;, file=sys.stdout, flush=False)

    Prints the values to a stream, or to sys.stdout by default.
    Optional keyword arguments:
    file:  a file-like object (stream); defaults to the current sys.stdout.
    sep:   string inserted between values, default a space.
    end:   string appended after the last value, default a newline.
    flush: whether to forcibly flush the stream.</code></pre>
<p>将 value … 打印到 file 指定的文本流，以 sep 分隔并在末尾加上 end。sep, end, file 和 flush 如果存在，它们必须以关键字参数的形式给出。</p>
<p>所有非关键字参数都会被转换为字符串，就像是执行了 str() 一样，并会被写入到流。sep 和 end 都必须为字符串。sep 默认为一个空格 ‘ ‘，end 默认为换行 ‘\n’。</p>
<p>如果没有给出 value …，则 print() 将只打印 end。</p>
<p>file 参数必须是一个具有 <code>write(string)</code> 方法的对象。如果参数不指定，则将使用解释器用于标准输出的文件对象 sys.stdout。</p>
<p>输出是否被缓存通常决定于 file，但如果 flush 关键字参数为真值，流会被强制刷新。</p>
<p>该函数返回值为 None。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="number">1</span>+<span class="number">1</span>)</span><br><span class="line">print(<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>)</span><br></pre></td></tr></table></figure>

<pre><code>2
a b</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="string">&#x27;a&#x27;</span>,<span class="number">1</span>,<span class="built_in">int</span>, sep=<span class="string">&#x27;-&#x27;</span>, end=<span class="string">&#x27;end&#x27;</span>)</span><br></pre></td></tr></table></figure>

<pre><code>a-1-&lt;class &#39;int&#39;&gt;end</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(end=<span class="string">&#x27;end&#x27;</span>)</span><br></pre></td></tr></table></figure>

<pre><code>end</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">p = print(<span class="string">&#x27;end&#x27;</span>)</span><br><span class="line">print(p)</span><br></pre></td></tr></table></figure>

<pre><code>end
None</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/11_built-in_function/47_pow-96b10a725f72/</url>
    <content><![CDATA[<h2 id="pow-幂运算并取余"><a href="#pow-幂运算并取余" class="headerlink" title="pow() 幂运算并取余"></a>pow() 幂运算并取余</h2><p>内置函数 pow()，Python 官方文档描述如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">help</span>(<span class="built_in">pow</span>)</span><br></pre></td></tr></table></figure>

<pre><code>Help on built-in function pow in module builtins:

pow(base, exp, mod=None)
    Equivalent to base**exp with 2 arguments or base**exp % mod with 3 arguments

    Some types, such as ints, are able to use a more efficient algorithm when
    invoked using the three argument form.</code></pre>
<p>返回 base 的 exp 次幂；如果 mod 存在，则返回 base 的 exp 次幂对 mod 取余（比 <code>pow(base, exp) % mod</code> 更高效）。</p>
<p>对于混用的操作数类型，则将应用双目算术运算符的类型强制转换规则。<br>对于 int 操作数，结果具有与操作数相同的类型（强制转换后），除非第二个参数为负值；在这种情况下，所有参数将被转换为浮点数并输出浮点数结果。</p>
<p>对于 int 操作数 base 和 exp，如果给出 mod，则 mod 必须为整数类型并且 mod 必须不为零。如果给出 mod 并且 exp 为负值，则 base 必须相对于 mod 不可整除。在这种情况下，将会返回 <code>pow(inv_base, -exp, mod)</code>，其中 inv_base 为 base 的倒数对 mod 取余。</p>
<p>在 3.8 版更改: 对于 int 操作数，三参数形式的 pow 现在允许第二个参数为负值，即可以计算倒数的余数；允许关键字参数。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">pow</span>(<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br></pre></td></tr></table></figure>




<pre><code>0</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">pow</span>(<span class="number">2.0</span>, <span class="number">3</span>)</span><br></pre></td></tr></table></figure>




<pre><code>8.0</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">pow</span>(<span class="number">2</span>, <span class="number">-1</span>)</span><br></pre></td></tr></table></figure>




<pre><code>0.5</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">pow</span>(<span class="number">38</span>, <span class="number">-1</span>, <span class="number">97</span>) <span class="comment">#  38 的倒数对 97 取余为 23</span></span><br></pre></td></tr></table></figure>




<pre><code>23</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">23</span> * <span class="number">38</span> % <span class="number">97</span> == <span class="number">1</span></span><br></pre></td></tr></table></figure>




<pre><code>True</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">pow</span>(<span class="number">38</span>, <span class="number">-2</span>, <span class="number">97</span>), <span class="built_in">pow</span>(<span class="number">23</span>, <span class="number">2</span>, <span class="number">97</span>)</span><br></pre></td></tr></table></figure>




<pre><code>(44, 44)</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/11_built-in_function/46_ord-8edcb872b0d6/</url>
    <content><![CDATA[<h2 id="ord-返回单个字符-Unicode-码位值"><a href="#ord-返回单个字符-Unicode-码位值" class="headerlink" title="ord() 返回单个字符 Unicode 码位值"></a>ord() 返回单个字符 Unicode 码位值</h2><p>内置函数 ord()，Python 官方文档描述如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">help</span>(<span class="built_in">ord</span>)</span><br></pre></td></tr></table></figure>

<pre><code>Help on built-in function ord in module builtins:

ord(c, /)
    Return the Unicode code point for a one-character string.</code></pre>
<p>返回单个字符 Unicode 码点的整数。这是 chr() 的逆函数。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ord</span>(<span class="string">&#x27;a&#x27;</span>)</span><br></pre></td></tr></table></figure>




<pre><code>97</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">chr</span>(<span class="number">97</span>)</span><br></pre></td></tr></table></figure>




<pre><code>&#39;a&#39;</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/11_built-in_function/45_open-8c47a8d90aa0/</url>
    <content><![CDATA[<h2 id="open-打开文件"><a href="#open-打开文件" class="headerlink" title="open() 打开文件"></a>open() 打开文件</h2><p>内置函数 open()，Python 官方文档描述如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">help</span>(<span class="built_in">open</span>)</span><br></pre></td></tr></table></figure>

<pre><code>Help on built-in function open in module io:

open(file, mode=&#39;r&#39;, buffering=-1, encoding=None, errors=None, newline=None, closefd=True, opener=None)
    Open file and return a stream.  Raise OSError upon failure.

    file is either a text or byte string giving the name (and the path
    if the file isn&#39;t in the current working directory) of the file to
    be opened or an integer file descriptor of the file to be
    wrapped. (If a file descriptor is given, it is closed when the
    returned I/O object is closed, unless closefd is set to False.)

    mode is an optional string that specifies the mode in which the file
    is opened. It defaults to &#39;r&#39; which means open for reading in text
    mode.  Other common values are &#39;w&#39; for writing (truncating the file if
    it already exists), &#39;x&#39; for creating and writing to a new file, and
    &#39;a&#39; for appending (which on some Unix systems, means that all writes
    append to the end of the file regardless of the current seek position).
    In text mode, if encoding is not specified the encoding used is platform
    dependent: locale.getpreferredencoding(False) is called to get the
    current locale encoding. (For reading and writing raw bytes use binary
    mode and leave encoding unspecified.) The available modes are:

    ========= ===============================================================
    Character Meaning
    --------- ---------------------------------------------------------------
    &#39;r&#39;       open for reading (default)
    &#39;w&#39;       open for writing, truncating the file first
    &#39;x&#39;       create a new file and open it for writing
    &#39;a&#39;       open for writing, appending to the end of the file if it exists
    &#39;b&#39;       binary mode
    &#39;t&#39;       text mode (default)
    &#39;+&#39;       open a disk file for updating (reading and writing)
    &#39;U&#39;       universal newline mode (deprecated)
    ========= ===============================================================

    The default mode is &#39;rt&#39; (open for reading text). For binary random
    access, the mode &#39;w+b&#39; opens and truncates the file to 0 bytes, while
    &#39;r+b&#39; opens the file without truncation. The &#39;x&#39; mode implies &#39;w&#39; and
    raises an `FileExistsError` if the file already exists.

    Python distinguishes between files opened in binary and text modes,
    even when the underlying operating system doesn&#39;t. Files opened in
    binary mode (appending &#39;b&#39; to the mode argument) return contents as
    bytes objects without any decoding. In text mode (the default, or when
    &#39;t&#39; is appended to the mode argument), the contents of the file are
    returned as strings, the bytes having been first decoded using a
    platform-dependent encoding or using the specified encoding if given.

    &#39;U&#39; mode is deprecated and will raise an exception in future versions
    of Python.  It has no effect in Python 3.  Use newline to control
    universal newlines mode.

    buffering is an optional integer used to set the buffering policy.
    Pass 0 to switch buffering off (only allowed in binary mode), 1 to select
    line buffering (only usable in text mode), and an integer &gt; 1 to indicate
    the size of a fixed-size chunk buffer.  When no buffering argument is
    given, the default buffering policy works as follows:

    * Binary files are buffered in fixed-size chunks; the size of the buffer
      is chosen using a heuristic trying to determine the underlying device&#39;s
      &quot;block size&quot; and falling back on `io.DEFAULT_BUFFER_SIZE`.
      On many systems, the buffer will typically be 4096 or 8192 bytes long.

    * &quot;Interactive&quot; text files (files for which isatty() returns True)
      use line buffering.  Other text files use the policy described above
      for binary files.

    encoding is the name of the encoding used to decode or encode the
    file. This should only be used in text mode. The default encoding is
    platform dependent, but any encoding supported by Python can be
    passed.  See the codecs module for the list of supported encodings.

    errors is an optional string that specifies how encoding errors are to
    be handled---this argument should not be used in binary mode. Pass
    &#39;strict&#39; to raise a ValueError exception if there is an encoding error
    (the default of None has the same effect), or pass &#39;ignore&#39; to ignore
    errors. (Note that ignoring encoding errors can lead to data loss.)
    See the documentation for codecs.register or run &#39;help(codecs.Codec)&#39;
    for a list of the permitted encoding error strings.

    newline controls how universal newlines works (it only applies to text
    mode). It can be None, &#39;&#39;, &#39;\n&#39;, &#39;\r&#39;, and &#39;\r\n&#39;.  It works as
    follows:

    * On input, if newline is None, universal newlines mode is
      enabled. Lines in the input can end in &#39;\n&#39;, &#39;\r&#39;, or &#39;\r\n&#39;, and
      these are translated into &#39;\n&#39; before being returned to the
      caller. If it is &#39;&#39;, universal newline mode is enabled, but line
      endings are returned to the caller untranslated. If it has any of
      the other legal values, input lines are only terminated by the given
      string, and the line ending is returned to the caller untranslated.

    * On output, if newline is None, any &#39;\n&#39; characters written are
      translated to the system default line separator, os.linesep. If
      newline is &#39;&#39; or &#39;\n&#39;, no translation takes place. If newline is any
      of the other legal values, any &#39;\n&#39; characters written are translated
      to the given string.

    If closefd is False, the underlying file descriptor will be kept open
    when the file is closed. This does not work when a file name is given
    and must be True in that case.

    A custom opener can be used by passing a callable as *opener*. The
    underlying file descriptor for the file object is then obtained by
    calling *opener* with (*file*, *flags*). *opener* must return an open
    file descriptor (passing os.open as *opener* results in functionality
    similar to passing None).

    open() returns a file object whose type depends on the mode, and
    through which the standard file operations such as reading and writing
    are performed. When open() is used to open a file in a text mode (&#39;w&#39;,
    &#39;r&#39;, &#39;wt&#39;, &#39;rt&#39;, etc.), it returns a TextIOWrapper. When used to open
    a file in a binary mode, the returned class varies: in read binary
    mode, it returns a BufferedReader; in write binary and append binary
    modes, it returns a BufferedWriter, and in read/write mode, it returns
    a BufferedRandom.

    It is also possible to use a string or bytearray as a file for both
    reading and writing. For strings StringIO can be used like a file
    opened in a text mode, and for bytes a BytesIO can be used like a file
    opened in a binary mode.</code></pre>
<p>打开文件 file 并返回对应的文件对象（file object）。</p>
<p>参数说明：</p>
<p>1，file 是将要打开的文件的路径（绝对路径或者当前工作目录的相对路径），也可以是要被封装的整数类型文件描述符。（如果是文件描述符，它会随着返回的 I/O 对象关闭而关闭，除非 closefd 被设为 False ）。</p>
<p>2，mode 是一个可选字符串，用于指定打开文件的模式。默认值是 ‘r’ ，这意味着它以文本模式打开并读取。在文本模式，如果 encoding 没有指定，则根据平台来决定使用的编码（要读取和写入原始字节，请使用二进制模式并不要指定 encoding）。可用的模式有：</p>
<ul>
<li>‘r’ 读取（默认）</li>
<li>‘w’ 写入，并先截断文件（会删除原内容），文件不存在则创建</li>
<li>‘x’ 排它性创建，如果文件已存在则失败</li>
<li>‘a’ 写入，如果文件存在则在末尾追加，不存在则创建</li>
<li>‘b’ 二进制模式</li>
<li>‘t’ 文本模式（默认）</li>
<li>‘+’ 打开用于更新（读取与写入）</li>
</ul>
<p>模式 ‘r’，’w’，’x’，’a’ 可以单独使用，也可与 ‘b’ 或 ‘+’，或两者同时组合使用。’b’，’t’ 和 ‘+’ 不能单独使用。’b’ 和 ‘t’ 互斥，’t’ 默认省略。</p>
<p>默认模式为 ‘r’ (打开用于读取文本，与 ‘rt’ 同义)。模式 ‘w+’ 与 ‘w+b’ 打开文件并清空内容。模式 ‘r+’ 与 ‘r+b’ 打开文件并不清空内容。</p>
<p>以二进制模式打开的文件返回的内容为字节串，不进行任何解码。在文本模式下打开时，文件内容返回为字符串，首先使用指定的 encoding （如果给定）或者使用平台默认的的字节编码解码。</p>
<p>3，buffering 是一个可选的整数，用于设置缓冲策略。</p>
<p>4，encoding 是用于解码或编码文件的编码的名称。这应该只在文本模式下使用。</p>
<p>5，errors 是一个可选的字符串参数，用于指定如何处理编码和解码错误。这不能在二进制模式下使用。</p>
<p>6，newline 控制通用换行模式如何生效（它仅适用于文本模式）。</p>
<p>7，如果 closefd 是 False 并且打开文件给出了文件描述符而不是文件名，那么当文件关闭时，底层文件描述符将保持打开状态。如果给出文件名则 closefd 必须为 True （默认值），否则将引发错误。</p>
<p>8，可以通过传递可调用的 opener 来使用自定义开启器。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;test.txt&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    print(f)</span><br></pre></td></tr></table></figure>

<pre><code>&lt;_io.TextIOWrapper name=&#39;test.txt&#39; mode=&#39;r&#39; encoding=&#39;cp936&#39;&gt;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;test.txt&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    print(f.read())</span><br></pre></td></tr></table></figure>

<pre><code>xue.cn

自学是门手艺</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;test.txt&#x27;</span>,<span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    print(f.read())</span><br></pre></td></tr></table></figure>

<pre><code>b&#39;xue.cn\r\n\r\n\xe8\x87\xaa\xe5\xad\xa6\xe6\x98\xaf\xe9\x97\xa8\xe6\x89\x8b\xe8\x89\xba&#39;</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/11_built-in_function/44_oct-1db602c415af/</url>
    <content><![CDATA[<h2 id="oct-整数的八进制形式"><a href="#oct-整数的八进制形式" class="headerlink" title="oct() 整数的八进制形式"></a>oct() 整数的八进制形式</h2><p>内置函数 oct()，Python 官方文档描述如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">help</span>(<span class="built_in">oct</span>)</span><br></pre></td></tr></table></figure>

<pre><code>Help on built-in function oct in module builtins:

oct(number, /)
    Return the octal representation of an integer.

    &gt;&gt;&gt; oct(342391)
    &#39;0o1234567&#39;</code></pre>
<p>将一个整数转换为八进制整数的字符串形式。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">oct</span>(<span class="number">123</span>)</span><br></pre></td></tr></table></figure>




<pre><code>&#39;0o173&#39;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">0o173</span></span><br></pre></td></tr></table></figure>




<pre><code>123</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">oct</span>(<span class="number">0x12</span>)</span><br></pre></td></tr></table></figure>




<pre><code>&#39;0o22&#39;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">0x12</span>, <span class="number">0o22</span></span><br></pre></td></tr></table></figure>




<pre><code>(18, 18)</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/11_built-in_function/43_object-6dcdc800455f/</url>
    <content><![CDATA[<h2 id="object-所有类的基类"><a href="#object-所有类的基类" class="headerlink" title="object 所有类的基类"></a>object 所有类的基类</h2><p>内置函数（类）object，Python 官方文档描述如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">help</span>(<span class="built_in">object</span>)</span><br></pre></td></tr></table></figure>

<pre><code>Help on class object in module builtins:

class object
 |  The most base type</code></pre>
<p>当被调用时，它不接受任何参数，并返回一个新的无特性实例，并且不能给定任何实例属性。</p>
<p>object 是所有类的基类。它具有所有 Python 类实例的通用方法。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">type</span>(<span class="built_in">object</span>)</span><br></pre></td></tr></table></figure>




<pre><code>type</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">object</span>()</span><br></pre></td></tr></table></figure>




<pre><code>&lt;object at 0x1de8bc75170&gt;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">dir</span>(<span class="built_in">object</span>)</span><br></pre></td></tr></table></figure>




<pre><code>[&#39;__class__&#39;,
 &#39;__delattr__&#39;,
 &#39;__dir__&#39;,
 &#39;__doc__&#39;,
 &#39;__eq__&#39;,
 &#39;__format__&#39;,
 &#39;__ge__&#39;,
 &#39;__getattribute__&#39;,
 &#39;__gt__&#39;,
 &#39;__hash__&#39;,
 &#39;__init__&#39;,
 &#39;__init_subclass__&#39;,
 &#39;__le__&#39;,
 &#39;__lt__&#39;,
 &#39;__ne__&#39;,
 &#39;__new__&#39;,
 &#39;__reduce__&#39;,
 &#39;__reduce_ex__&#39;,
 &#39;__repr__&#39;,
 &#39;__setattr__&#39;,
 &#39;__sizeof__&#39;,
 &#39;__str__&#39;,
 &#39;__subclasshook__&#39;]</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/11_built-in_function/42_next-938afbae754d/</url>
    <content><![CDATA[<h2 id="next-返回迭代器下一个元素"><a href="#next-返回迭代器下一个元素" class="headerlink" title="next() 返回迭代器下一个元素"></a>next() 返回迭代器下一个元素</h2><p>内置函数 next()，Python 官方文档描述如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">help</span>(<span class="built_in">next</span>)</span><br></pre></td></tr></table></figure>

<pre><code>Help on built-in function next in module builtins:

next(...)
    next(iterator[, default])

    Return the next item from the iterator. If default is given and the iterator
    is exhausted, it is returned instead of raising StopIteration.</code></pre>
<p>返回迭代器（iterator）的下一个元素。如果迭代器耗尽，则返回给定的 default，如果没有默认值则触发 StopIteration。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">i = <span class="built_in">iter</span>(<span class="string">&#x27;123&#x27;</span>)</span><br><span class="line"><span class="built_in">next</span>(i,<span class="string">&#x27;迭代结束&#x27;</span>)</span><br></pre></td></tr></table></figure>




<pre><code>&#39;1&#39;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">next</span>(i,<span class="string">&#x27;迭代结束&#x27;</span>)</span><br></pre></td></tr></table></figure>




<pre><code>&#39;2&#39;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">next</span>(i,<span class="string">&#x27;迭代结束&#x27;</span>)</span><br></pre></td></tr></table></figure>




<pre><code>&#39;3&#39;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">next</span>(i,<span class="string">&#x27;迭代结束&#x27;</span>)</span><br></pre></td></tr></table></figure>




<pre><code>&#39;迭代结束&#39;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">next</span>(i,<span class="string">&#x27;迭代结束&#x27;</span>)</span><br></pre></td></tr></table></figure>




<pre><code>&#39;迭代结束&#39;</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/11_built-in_function/41_min-1fd08ad72391/</url>
    <content><![CDATA[<h2 id="min-求最小项"><a href="#min-求最小项" class="headerlink" title="min() 求最小项"></a>min() 求最小项</h2><p>内置函数 min()，Python 官方文档描述如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">help</span>(<span class="built_in">min</span>)</span><br></pre></td></tr></table></figure>

<pre><code>Help on built-in function min in module builtins:

min(...)
    min(iterable, *[, default=obj, key=func]) -&gt; value
    min(arg1, arg2, *args, *[, key=func]) -&gt; value

    With a single iterable argument, return its smallest item. The
    default keyword-only argument specifies an object to return if
    the provided iterable is empty.
    With two or more arguments, return the smallest argument.</code></pre>
<p>返回可迭代对象中最小的元素，或多个实参中最小的项。参数说明：</p>
<ul>
<li>如果只提供了一个位置参数，它必须是可迭代对象（iterable），返回 iterable 中最小的元素，iterable 为空，返回 default。</li>
<li>如果提供了两个及以上的位置参数，则返回最小的位置参数。</li>
<li>如果有多个最小元素，则此函数将返回第一个找到的。</li>
<li>参数 key（可选）指定排序函数，将排序的项都经此函数计算，按计算值取最小的项。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">min</span>(<span class="string">&#x27;3142&#x27;</span>)</span><br></pre></td></tr></table></figure>




<pre><code>&#39;1&#39;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">min</span>([], default=<span class="number">0</span>)</span><br></pre></td></tr></table></figure>




<pre><code>0</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">min</span>(<span class="number">2</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">4</span>)</span><br></pre></td></tr></table></figure>




<pre><code>2</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">min</span>([<span class="number">2</span>,<span class="number">1</span>],[<span class="number">2</span>,<span class="number">1</span>,<span class="number">1</span>])</span><br></pre></td></tr></table></figure>




<pre><code>[2, 1]</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">min</span>((<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;ab&#x27;</span>,<span class="string">&#x27;bcd&#x27;</span>),key=<span class="built_in">len</span>)</span><br></pre></td></tr></table></figure>




<pre><code>&#39;a&#39;</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/11_built-in_function/40_max-0d396952bce9/</url>
    <content><![CDATA[<h2 id="max-求最大项"><a href="#max-求最大项" class="headerlink" title="max() 求最大项"></a>max() 求最大项</h2><p>内置函数 max()，Python 官方文档描述如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">help</span>(<span class="built_in">max</span>)</span><br></pre></td></tr></table></figure>

<pre><code>Help on built-in function max in module builtins:

max(...)
    max(iterable, *[, default=obj, key=func]) -&gt; value
    max(arg1, arg2, *args, *[, key=func]) -&gt; value

    With a single iterable argument, return its biggest item. The
    default keyword-only argument specifies an object to return if
    the provided iterable is empty.
    With two or more arguments, return the largest argument.</code></pre>
<p>返回可迭代对象中最大的元素，或多个实参中最大的项。参数说明：</p>
<ul>
<li>如果只提供了一个位置参数，它必须是可迭代对象（iterable），返回 iterable 中最大的元素，iterable 为空，返回 default。</li>
<li>如果提供了两个及以上的位置参数，则返回最大的位置参数。</li>
<li>如果有多个最大元素，则此函数将返回第一个找到的。</li>
<li>参数 key（可选）指定排序函数，将排序的项都经此函数计算，按计算值取最大的项。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">max</span>(<span class="string">&#x27;3142&#x27;</span>)</span><br></pre></td></tr></table></figure>




<pre><code>&#39;4&#39;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">max</span>([], default=<span class="number">0</span>)</span><br></pre></td></tr></table></figure>




<pre><code>0</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">max</span>(<span class="number">2</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">4</span>)</span><br></pre></td></tr></table></figure>




<pre><code>4</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">max</span>([<span class="number">2</span>,<span class="number">1</span>],[<span class="number">2</span>,<span class="number">1</span>,<span class="number">1</span>])</span><br></pre></td></tr></table></figure>




<pre><code>[2, 1, 1]</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">max</span>((<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;ab&#x27;</span>,<span class="string">&#x27;bcd&#x27;</span>),key=<span class="built_in">len</span>)</span><br></pre></td></tr></table></figure>




<pre><code>&#39;bcd&#39;</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/11_built-in_function/39_map-35f7fd9203d0/</url>
    <content><![CDATA[<h2 id="map-以给定函数转换元素"><a href="#map-以给定函数转换元素" class="headerlink" title="map 以给定函数转换元素"></a>map 以给定函数转换元素</h2><p>内置函数（类）map，Python 官方文档描述如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">help</span>(<span class="built_in">map</span>)</span><br></pre></td></tr></table></figure>

<pre><code>Help on class map in module builtins:

class map(object)
 |  map(func, *iterables) --&gt; map object
 |  
 |  Make an iterator that computes the function using arguments from
 |  each of the iterables.  Stops when the shortest iterable is exhausted.
 |  
 |  Methods defined here:
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __iter__(self, /)
 |      Implement iter(self).
 |  
 |  __next__(self, /)
 |      Implement next(self).
 |  
 |  __reduce__(...)
 |      Return state information for pickling.
 |  
 |  ----------------------------------------------------------------------
 |  Static methods defined here:
 |  
 |  __new__(*args, **kwargs) from builtins.type
 |      Create and return a new object.  See help(type) for accurate signature.</code></pre>
<p>返回一个将函数 func 应用于 iterable 中每一项并输出其结果的迭代器。</p>
<p>如果传入了额外的 iterable 参数，func 必须接受相同个数的实参并被应用于从所有可迭代对象中并行获取的项。</p>
<p>当有多个可迭代对象时，最短的可迭代对象耗尽则整个迭代就将结束。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">type</span>(<span class="built_in">map</span>)</span><br></pre></td></tr></table></figure>




<pre><code>type</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="string">&#x27;1234&#x27;</span>)</span><br><span class="line">a</span><br></pre></td></tr></table></figure>




<pre><code>&lt;map at 0x16048be3828&gt;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">list</span>(a)</span><br></pre></td></tr></table></figure>




<pre><code>[1, 2, 3, 4]</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">m = <span class="built_in">map</span>(<span class="built_in">int</span>,<span class="string">&#x27;abc&#x27;</span>,(<span class="number">16</span>,<span class="number">16</span>))</span><br><span class="line"><span class="built_in">list</span>(m)</span><br></pre></td></tr></table></figure>




<pre><code>[10, 11]</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span>(<span class="params">x,y</span>):</span></span><br><span class="line">    d = &#123;&#125;</span><br><span class="line">    d[x] = y</span><br><span class="line">    <span class="keyword">return</span> d</span><br><span class="line"></span><br><span class="line">m = <span class="built_in">map</span>(f,<span class="string">&#x27;abc&#x27;</span>,(<span class="number">1</span>,<span class="number">2</span>))</span><br><span class="line"><span class="built_in">list</span>(m)</span><br></pre></td></tr></table></figure>




<pre><code>[&#123;&#39;a&#39;: 1&#125;, &#123;&#39;b&#39;: 2&#125;]</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/11_built-in_function/38_locals-6bc35cc67295/</url>
    <content><![CDATA[<h2 id="locals-返回局部变量的字典"><a href="#locals-返回局部变量的字典" class="headerlink" title="locals() 返回局部变量的字典"></a>locals() 返回局部变量的字典</h2><p>内置函数 locals()，Python 官方文档描述如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">help</span>(<span class="built_in">locals</span>)</span><br></pre></td></tr></table></figure>

<pre><code>Help on built-in function locals in module builtins:

locals()
    Return a dictionary containing the current scope&#39;s local variables.

    NOTE: Whether or not updates to this dictionary will affect name lookups in
    the local scope and vice-versa is *implementation dependent* and not
    covered by any backwards compatibility guarantees.</code></pre>
<p>返回包含当前作用域的局部变量的字典。在模块层级上，locals() 和 globals() 是同一个字典。</p>
<p>globals() 和 locals() 函数各自返回当前的全局和本地字典，因此可以将它们传递给 eval() 或 exec() 来使用。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">locals</span>()</span><br></pre></td></tr></table></figure>




<pre><code>&#123;&#39;__name__&#39;: &#39;__main__&#39;,
 &#39;__doc__&#39;: &#39;Automatically created module for IPython interactive environment&#39;,
 &#39;__package__&#39;: None,
 &#39;__loader__&#39;: None,
 &#39;__spec__&#39;: None,
 &#39;__builtin__&#39;: &lt;module &#39;builtins&#39; (built-in)&gt;,
 &#39;__builtins__&#39;: &lt;module &#39;builtins&#39; (built-in)&gt;,
 &#39;_ih&#39;: [&#39;&#39;, &#39;help(locals)&#39;, &#39;locals()&#39;],
 &#39;_oh&#39;: &#123;&#125;,
 &#39;_dh&#39;: [&#39;D:\\Jupyter\\xuecn_books\\books\\xue_python_kp\\11_built-in_function&#39;],
 &#39;In&#39;: [&#39;&#39;, &#39;help(locals)&#39;, &#39;locals()&#39;],
 &#39;Out&#39;: &#123;&#125;,
 &#39;get_ipython&#39;: &lt;bound method InteractiveShell.get_ipython of &lt;ipykernel.zmqshell.ZMQInteractiveShell object at 0x0000023E24AE89B0&gt;&gt;,
 &#39;exit&#39;: &lt;IPython.core.autocall.ZMQExitAutocall at 0x23e27368898&gt;,
 &#39;quit&#39;: &lt;IPython.core.autocall.ZMQExitAutocall at 0x23e27368898&gt;,
 &#39;_&#39;: &#39;&#39;,
 &#39;__&#39;: &#39;&#39;,
 &#39;___&#39;: &#39;&#39;,
 &#39;_i&#39;: &#39;help(locals)&#39;,
 &#39;_ii&#39;: &#39;&#39;,
 &#39;_iii&#39;: &#39;&#39;,
 &#39;_i1&#39;: &#39;help(locals)&#39;,
 &#39;_i2&#39;: &#39;locals()&#39;&#125;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span>():</span></span><br><span class="line">    a = <span class="number">1</span></span><br><span class="line">    print(<span class="built_in">locals</span>())</span><br><span class="line">f()</span><br></pre></td></tr></table></figure>

<pre><code>&#123;&#39;a&#39;: 1&#125;</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/11_built-in_function/37_list-ac1386f7aa8f/</url>
    <content><![CDATA[<h2 id="list-创建列表"><a href="#list-创建列表" class="headerlink" title="list 创建列表"></a>list 创建列表</h2><p>内置函数（类）list，Python 官方文档描述如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">help</span>(<span class="built_in">list</span>)</span><br></pre></td></tr></table></figure>

<pre><code>Help on class list in module builtins:

class list(object)
 |  list(iterable=(), /)
 |  
 |  Built-in mutable sequence.
 |  
 |  If no argument is given, the constructor creates a new empty list.
 |  The argument must be an iterable if specified.
 |  
 |  Methods defined here:
 |  
 |  __add__(self, value, /)
 |      Return self+value.
 |  
 |  __contains__(self, key, /)
 |      Return key in self.
 |  
 |  __delitem__(self, key, /)
 |      Delete self[key].
 |  
 |  __eq__(self, value, /)
 |      Return self==value.
 |  
 |  __ge__(self, value, /)
 |      Return self&gt;=value.
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __getitem__(...)
 |      x.__getitem__(y) &lt;==&gt; x[y]
 |  
 |  __gt__(self, value, /)
 |      Return self&gt;value.
 |  
 |  __iadd__(self, value, /)
 |      Implement self+=value.
 |  
 |  __imul__(self, value, /)
 |      Implement self*=value.
 |  
 |  __init__(self, /, *args, **kwargs)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __iter__(self, /)
 |      Implement iter(self).
 |  
 |  __le__(self, value, /)
 |      Return self&lt;=value.
 |  
 |  __len__(self, /)
 |      Return len(self).
 |  
 |  __lt__(self, value, /)
 |      Return self&lt;value.
 |  
 |  __mul__(self, value, /)
 |      Return self*value.
 |  
 |  __ne__(self, value, /)
 |      Return self!=value.
 |  
 |  __repr__(self, /)
 |      Return repr(self).
 |  
 |  __reversed__(self, /)
 |      Return a reverse iterator over the list.
 |  
 |  __rmul__(self, value, /)
 |      Return value*self.
 |  
 |  __setitem__(self, key, value, /)
 |      Set self[key] to value.
 |  
 |  __sizeof__(self, /)
 |      Return the size of the list in memory, in bytes.
 |  
 |  append(self, object, /)
 |      Append object to the end of the list.
 |  
 |  clear(self, /)
 |      Remove all items from list.
 |  
 |  copy(self, /)
 |      Return a shallow copy of the list.
 |  
 |  count(self, value, /)
 |      Return number of occurrences of value.
 |  
 |  extend(self, iterable, /)
 |      Extend list by appending elements from the iterable.
 |  
 |  index(self, value, start=0, stop=9223372036854775807, /)
 |      Return first index of value.
 |      
 |      Raises ValueError if the value is not present.
 |  
 |  insert(self, index, object, /)
 |      Insert object before index.
 |  
 |  pop(self, index=-1, /)
 |      Remove and return item at index (default last).
 |      
 |      Raises IndexError if list is empty or index is out of range.
 |  
 |  remove(self, value, /)
 |      Remove first occurrence of value.
 |      
 |      Raises ValueError if the value is not present.
 |  
 |  reverse(self, /)
 |      Reverse *IN PLACE*.
 |  
 |  sort(self, /, *, key=None, reverse=False)
 |      Stable sort *IN PLACE*.
 |  
 |  ----------------------------------------------------------------------
 |  Static methods defined here:
 |  
 |  __new__(*args, **kwargs) from builtins.type
 |      Create and return a new object.  See help(type) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  __hash__ = None</code></pre>
<p>将一个可迭代对象转为列表。不传参数将得到空列表。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">type</span>(<span class="built_in">list</span>)</span><br></pre></td></tr></table></figure>




<pre><code>type</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">list</span>()</span><br></pre></td></tr></table></figure>




<pre><code>[]</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">list</span>(<span class="string">&#x27;123&#x27;</span>)</span><br></pre></td></tr></table></figure>




<pre><code>[&#39;1&#39;, &#39;2&#39;, &#39;3&#39;]</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">list</span>(&#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">1</span>,<span class="string">&#x27;b&#x27;</span>:<span class="number">2</span>&#125;)</span><br></pre></td></tr></table></figure>




<pre><code>[&#39;a&#39;, &#39;b&#39;]</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/11_built-in_function/36_len-5ebab417e525/</url>
    <content><![CDATA[<h2 id="len-返回元素个数"><a href="#len-返回元素个数" class="headerlink" title="len() 返回元素个数"></a>len() 返回元素个数</h2><p>内置函数 len()，Python 官方文档描述如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">help</span>(<span class="built_in">len</span>)</span><br></pre></td></tr></table></figure>

<pre><code>Help on built-in function len in module builtins:

len(obj, /)
    Return the number of items in a container.</code></pre>
<p>返回对象的长度（元素个数）。实参可以是序列（如 str、bytes、tuple、list 或 range 等的实例），集合（set 或 frozenset 的实例），或字典（dict 的实例）等。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">len</span>(<span class="string">&#x27;123&#x27;</span>)</span><br></pre></td></tr></table></figure>




<pre><code>3</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">len</span>(<span class="string">&#x27;嗨&#x27;</span>)</span><br></pre></td></tr></table></figure>




<pre><code>1</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">len</span>(<span class="string">&#x27;嗨&#x27;</span>.encode())</span><br></pre></td></tr></table></figure>




<pre><code>3</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">len</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br></pre></td></tr></table></figure>




<pre><code>3</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">len</span>(&#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">1</span>,<span class="string">&#x27;b&#x27;</span>:<span class="number">2</span>&#125;)</span><br></pre></td></tr></table></figure>




<pre><code>2</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/11_built-in_function/35_iter-5555e79d7850/</url>
    <content><![CDATA[<h2 id="iter-转迭代器"><a href="#iter-转迭代器" class="headerlink" title="iter() 转迭代器"></a>iter() 转迭代器</h2><p>内置函数 iter()，Python 官方文档描述如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">help</span>(<span class="built_in">iter</span>)</span><br></pre></td></tr></table></figure>

<pre><code>Help on built-in function iter in module builtins:

iter(...)
    iter(iterable) -&gt; iterator
    iter(callable, sentinel) -&gt; iterator

    Get an iterator from an object.  In the first form, the argument must
    supply its own iterator, or be a sequence.
    In the second form, the callable is called until it returns the sentinel.</code></pre>
<p>将一个可迭代对象（iterable）或可调用对象（callable）转换为一个迭代器。</p>
<p>当参数是可调用对象时，需要提供参数 sentinel，生成的迭代器，每次<br>迭代时都会不带实参地调用 callable，返回 sentinel 时则触<br>发 StopIteration。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="built_in">iter</span>(<span class="string">&#x27;abcd&#x27;</span>)</span><br><span class="line">a</span><br></pre></td></tr></table></figure>




<pre><code>&lt;str_iterator at 0x1c7eea4f910&gt;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">next</span>(a),<span class="built_in">next</span>(a),<span class="built_in">next</span>(a),<span class="built_in">next</span>(a)</span><br></pre></td></tr></table></figure>




<pre><code>(&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;)</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="built_in">iter</span>(<span class="built_in">int</span>, <span class="number">1</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">    print(<span class="built_in">next</span>(a))</span><br></pre></td></tr></table></figure>

<pre><code>0
0
0</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="built_in">iter</span>(<span class="built_in">int</span>, <span class="number">0</span>)</span><br><span class="line"><span class="built_in">next</span>(a)</span><br></pre></td></tr></table></figure>


<pre><code>---------------------------------------------------------------------------

StopIteration                             Traceback (most recent call last)

&lt;ipython-input-21-694e44f6d78c&gt; in &lt;module&gt;
      1 a = iter(int, 0)
----&gt; 2 next(a)


StopIteration: </code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/11_built-in_function/34_issubclass-9820fb7c0dd0/</url>
    <content><![CDATA[<h2 id="issubclass-是给定类的子类吗？"><a href="#issubclass-是给定类的子类吗？" class="headerlink" title="issubclass() 是给定类的子类吗？"></a>issubclass() 是给定类的子类吗？</h2><p>内置函数 issubclass()，Python 官方文档描述如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">help</span>(<span class="built_in">issubclass</span>)</span><br></pre></td></tr></table></figure>

<pre><code>Help on built-in function issubclass in module builtins:

issubclass(cls, class_or_tuple, /)
    Return whether &#39;cls&#39; is a derived from another class or is the same class.

    A tuple, as in ``issubclass(x, (A, B, ...))``, may be given as the target to
    check against. This is equivalent to ``issubclass(x, A) or issubclass(x, B)
    or ...`` etc.</code></pre>
<p>如果类 cls 是给定类的 (直接、间接或虚拟) 子类则返回 True，不是则返回 False。给定的不是类则引发 TypeError 异常。</p>
<p>给定类可以以元组形式传参，cls 是其中任何一个类的子类就返回 True。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">issubclass</span>(<span class="number">1</span>, <span class="built_in">int</span>) <span class="comment"># 1 不是类</span></span><br></pre></td></tr></table></figure>


<pre><code>---------------------------------------------------------------------------

TypeError                                 Traceback (most recent call last)

&lt;ipython-input-2-257e7a8dbb04&gt; in &lt;module&gt;
----&gt; 1 issubclass(1, int)


TypeError: issubclass() arg 1 must be a class</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">issubclass</span>(<span class="built_in">bool</span>, <span class="built_in">int</span>)</span><br></pre></td></tr></table></figure>




<pre><code>True</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">issubclass</span>(<span class="built_in">bool</span>, (<span class="built_in">set</span>, <span class="built_in">str</span>, <span class="built_in">list</span>))</span><br></pre></td></tr></table></figure>




<pre><code>False</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 所有的类都是 object 的子类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span><span class="keyword">pass</span></span><br><span class="line"><span class="built_in">issubclass</span>(A, <span class="built_in">object</span>),\</span><br><span class="line"><span class="built_in">issubclass</span>(<span class="built_in">str</span>, <span class="built_in">object</span>),\</span><br><span class="line"><span class="built_in">issubclass</span>(<span class="built_in">object</span>, <span class="built_in">object</span>)</span><br></pre></td></tr></table></figure>




<pre><code>(True, True, True)</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/11_built-in_function/33_isinstance-13f7fc2e1df6/</url>
    <content><![CDATA[<h2 id="isinstance-是给定类的实例？"><a href="#isinstance-是给定类的实例？" class="headerlink" title="isinstance() 是给定类的实例？"></a>isinstance() 是给定类的实例？</h2><p>内置函数 isinstance()，Python 官方文档描述如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">help</span>(<span class="built_in">isinstance</span>)</span><br></pre></td></tr></table></figure>

<pre><code>Help on built-in function isinstance in module builtins:

isinstance(obj, class_or_tuple, /)
    Return whether an object is an instance of a class or of a subclass thereof.

    A tuple, as in ``isinstance(x, (A, B, ...))``, may be given as the target to
    check against. This is equivalent to ``isinstance(x, A) or isinstance(x, B)
    or ...`` etc.</code></pre>
<p>如果对象 obj 是给定类的实例或者是其 (直接、间接或虚拟) 子类的实例则返回 True，不是则返回 False。给定的不是类则引发 TypeError 异常。</p>
<p>给定类可以以元组形式传参，obj 是其中任何一个类型的实例就返回 True。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">isinstance</span>(<span class="number">1</span>, <span class="built_in">int</span>)</span><br></pre></td></tr></table></figure>




<pre><code>True</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">isinstance</span>(<span class="string">&#x27;abc&#x27;</span>, (<span class="built_in">float</span>, <span class="built_in">complex</span>))</span><br></pre></td></tr></table></figure>




<pre><code>False</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># bool 是 int 的子类型，但不是实例</span></span><br><span class="line"><span class="built_in">isinstance</span>(<span class="built_in">bool</span>, <span class="built_in">int</span>)</span><br></pre></td></tr></table></figure>




<pre><code>False</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># True 是 int 的子类的实例</span></span><br><span class="line"><span class="built_in">isinstance</span>(<span class="literal">True</span>, <span class="built_in">int</span>)</span><br></pre></td></tr></table></figure>




<pre><code>True</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># bool 的实例只有 True 和 False</span></span><br><span class="line"><span class="built_in">isinstance</span>(<span class="number">1</span>, <span class="built_in">bool</span>)</span><br></pre></td></tr></table></figure>




<pre><code>False</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 所有的对象都是 object 的实例</span></span><br><span class="line"><span class="built_in">isinstance</span>(<span class="built_in">object</span>, <span class="built_in">object</span>)</span><br></pre></td></tr></table></figure>




<pre><code>True</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random <span class="comment"># 模块</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span><span class="keyword">pass</span> <span class="comment"># 自定义类</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">isinstance</span>(<span class="number">1</span>, <span class="built_in">object</span>),\</span><br><span class="line"><span class="built_in">isinstance</span>(<span class="built_in">int</span>, <span class="built_in">object</span>),\</span><br><span class="line"><span class="built_in">isinstance</span>(<span class="built_in">list</span>, <span class="built_in">object</span>),\</span><br><span class="line"><span class="built_in">isinstance</span>(random, <span class="built_in">object</span>),\</span><br><span class="line"><span class="built_in">isinstance</span>(A, <span class="built_in">object</span>)</span><br></pre></td></tr></table></figure>




<pre><code>(True, True, True, True, True)</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/11_built-in_function/32_int-e971af77b922/</url>
    <content><![CDATA[<h2 id="int-创建整数"><a href="#int-创建整数" class="headerlink" title="int 创建整数"></a>int 创建整数</h2><p>内置函数（类）int，Python 官方文档描述如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">help</span>(<span class="built_in">int</span>)</span><br></pre></td></tr></table></figure>

<pre><code>Help on class int in module builtins:

class int(object)
 |  int([x]) -&gt; integer
 |  int(x, base=10) -&gt; integer
 |  
 |  Convert a number or string to an integer, or return 0 if no arguments
 |  are given.  If x is a number, return x.__int__().  For floating point
 |  numbers, this truncates towards zero.
 |  
 |  If x is not a number or if base is given, then x must be a string,
 |  bytes, or bytearray instance representing an integer literal in the
 |  given base.  The literal can be preceded by &#39;+&#39; or &#39;-&#39; and be surrounded
 |  by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
 |  Base 0 means to interpret the base from the string as an integer literal.
 |  &gt;&gt;&gt; int(&#39;0b100&#39;, base=0)
 |  4
 |  
 |  Built-in subclasses:
 |      bool
 |  
 |  Methods defined here:
 |  
 |  __abs__(self, /)
 |      abs(self)
 |  
 |  __add__(self, value, /)
 |      Return self+value.
 |  
 |  __and__(self, value, /)
 |      Return self&amp;value.
 |  
 |  __bool__(self, /)
 |      self != 0
 |  
 |  __ceil__(...)
 |      Ceiling of an Integral returns itself.
 |  
 |  __divmod__(self, value, /)
 |      Return divmod(self, value).
 |  
 |  __eq__(self, value, /)
 |      Return self==value.
 |  
 |  __float__(self, /)
 |      float(self)
 |  
 |  __floor__(...)
 |      Flooring an Integral returns itself.
 |  
 |  __floordiv__(self, value, /)
 |      Return self//value.
 |  
 |  __format__(self, format_spec, /)
 |      Default object formatter.
 |  
 |  __ge__(self, value, /)
 |      Return self&gt;=value.
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __getnewargs__(self, /)
 |  
 |  __gt__(self, value, /)
 |      Return self&gt;value.
 |  
 |  __hash__(self, /)
 |      Return hash(self).
 |  
 |  __index__(self, /)
 |      Return self converted to an integer, if self is suitable for use as an index into a list.
 |  
 |  __int__(self, /)
 |      int(self)
 |  
 |  __invert__(self, /)
 |      ~self
 |  
 |  __le__(self, value, /)
 |      Return self&lt;=value.
 |  
 |  __lshift__(self, value, /)
 |      Return self&lt;&lt;value.
 |  
 |  __lt__(self, value, /)
 |      Return self&lt;value.
 |  
 |  __mod__(self, value, /)
 |      Return self%value.
 |  
 |  __mul__(self, value, /)
 |      Return self*value.
 |  
 |  __ne__(self, value, /)
 |      Return self!=value.
 |  
 |  __neg__(self, /)
 |      -self
 |  
 |  __or__(self, value, /)
 |      Return self|value.
 |  
 |  __pos__(self, /)
 |      +self
 |  
 |  __pow__(self, value, mod=None, /)
 |      Return pow(self, value, mod).
 |  
 |  __radd__(self, value, /)
 |      Return value+self.
 |  
 |  __rand__(self, value, /)
 |      Return value&amp;self.
 |  
 |  __rdivmod__(self, value, /)
 |      Return divmod(value, self).
 |  
 |  __repr__(self, /)
 |      Return repr(self).
 |  
 |  __rfloordiv__(self, value, /)
 |      Return value//self.
 |  
 |  __rlshift__(self, value, /)
 |      Return value&lt;&lt;self.
 |  
 |  __rmod__(self, value, /)
 |      Return value%self.
 |  
 |  __rmul__(self, value, /)
 |      Return value*self.
 |  
 |  __ror__(self, value, /)
 |      Return value|self.
 |  
 |  __round__(...)
 |      Rounding an Integral returns itself.
 |      Rounding with an ndigits argument also returns an integer.
 |  
 |  __rpow__(self, value, mod=None, /)
 |      Return pow(value, self, mod).
 |  
 |  __rrshift__(self, value, /)
 |      Return value&gt;&gt;self.
 |  
 |  __rshift__(self, value, /)
 |      Return self&gt;&gt;value.
 |  
 |  __rsub__(self, value, /)
 |      Return value-self.
 |  
 |  __rtruediv__(self, value, /)
 |      Return value/self.
 |  
 |  __rxor__(self, value, /)
 |      Return value^self.
 |  
 |  __sizeof__(self, /)
 |      Returns size in memory, in bytes.
 |  
 |  __sub__(self, value, /)
 |      Return self-value.
 |  
 |  __truediv__(self, value, /)
 |      Return self/value.
 |  
 |  __trunc__(...)
 |      Truncating an Integral returns itself.
 |  
 |  __xor__(self, value, /)
 |      Return self^value.
 |  
 |  as_integer_ratio(self, /)
 |      Return integer ratio.
 |      
 |      Return a pair of integers, whose ratio is exactly equal to the original int
 |      and with a positive denominator.
 |      
 |      &gt;&gt;&gt; (10).as_integer_ratio()
 |      (10, 1)
 |      &gt;&gt;&gt; (-10).as_integer_ratio()
 |      (-10, 1)
 |      &gt;&gt;&gt; (0).as_integer_ratio()
 |      (0, 1)
 |  
 |  bit_length(self, /)
 |      Number of bits necessary to represent self in binary.
 |      
 |      &gt;&gt;&gt; bin(37)
 |      &#39;0b100101&#39;
 |      &gt;&gt;&gt; (37).bit_length()
 |      6
 |  
 |  conjugate(...)
 |      Returns self, the complex conjugate of any int.
 |  
 |  to_bytes(self, /, length, byteorder, *, signed=False)
 |      Return an array of bytes representing an integer.
 |      
 |      length
 |        Length of bytes object to use.  An OverflowError is raised if the
 |        integer is not representable with the given number of bytes.
 |      byteorder
 |        The byte order used to represent the integer.  If byteorder is &#39;big&#39;,
 |        the most significant byte is at the beginning of the byte array.  If
 |        byteorder is &#39;little&#39;, the most significant byte is at the end of the
 |        byte array.  To request the native byte order of the host system, use
 |        `sys.byteorder&#39; as the byte order value.
 |      signed
 |        Determines whether two&#39;s complement is used to represent the integer.
 |        If signed is False and a negative integer is given, an OverflowError
 |        is raised.
 |  
 |  ----------------------------------------------------------------------
 |  Class methods defined here:
 |  
 |  from_bytes(bytes, byteorder, *, signed=False) from builtins.type
 |      Return the integer represented by the given array of bytes.
 |      
 |      bytes
 |        Holds the array of bytes to convert.  The argument must either
 |        support the buffer protocol or be an iterable object producing bytes.
 |        Bytes and bytearray are examples of built-in objects that support the
 |        buffer protocol.
 |      byteorder
 |        The byte order used to represent the integer.  If byteorder is &#39;big&#39;,
 |        the most significant byte is at the beginning of the byte array.  If
 |        byteorder is &#39;little&#39;, the most significant byte is at the end of the
 |        byte array.  To request the native byte order of the host system, use
 |        `sys.byteorder&#39; as the byte order value.
 |      signed
 |        Indicates whether two&#39;s complement is used to represent the integer.
 |  
 |  ----------------------------------------------------------------------
 |  Static methods defined here:
 |  
 |  __new__(*args, **kwargs) from builtins.type
 |      Create and return a new object.  See help(type) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  denominator
 |      the denominator of a rational number in lowest terms
 |  
 |  imag
 |      the imaginary part of a complex number
 |  
 |  numerator
 |      the numerator of a rational number in lowest terms
 |  
 |  real
 |      the real part of a complex number</code></pre>
<p>将一个数字，字符串或字节串转换为整数。参数说明：</p>
<ul>
<li>不给参数返回整数 0。</li>
<li>参数 x 为数字时，不能有参数 base，且数字不能是复数。浮点数将取整。</li>
<li>参数 x 为字符串或字节串，参数 base 可选，默认按十进制转换，否则按照 base 指定进制转换。</li>
<li>base 取值范围为 0 和 2~36。</li>
<li>base 取 0 将按照参数 x 的字面量来精确解释。取其他数字则需符合相应进制规则。</li>
<li>字符串或字节串不能是浮点数形式；前面可以有正负号；前后可以有空格，中间则不能有空格。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">type</span>(<span class="built_in">int</span>)</span><br></pre></td></tr></table></figure>




<pre><code>type</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">int</span>()</span><br></pre></td></tr></table></figure>




<pre><code>0</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">int</span>(<span class="number">3.18e01</span>), <span class="built_in">int</span>(<span class="number">10</span>), <span class="built_in">int</span>(<span class="number">0x10</span>)</span><br></pre></td></tr></table></figure>




<pre><code>(31, 10, 16)</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">int</span>(<span class="string">&#x27; -10 &#x27;</span>), <span class="built_in">int</span>(<span class="string">b&#x27; +10&#x27;</span>)</span><br></pre></td></tr></table></figure>




<pre><code>(-10, 10)</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">int</span>(<span class="string">&#x27;10&#x27;</span>,<span class="number">2</span>), <span class="built_in">int</span>(<span class="string">&#x27;10&#x27;</span>,<span class="number">8</span>), <span class="built_in">int</span>(<span class="string">&#x27;z&#x27;</span>,<span class="number">36</span>)</span><br></pre></td></tr></table></figure>




<pre><code>(2, 8, 35)</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">int</span>(<span class="string">&#x27;001&#x27;</span>), <span class="built_in">int</span>(<span class="string">&#x27;0b10&#x27;</span>,<span class="number">0</span>)</span><br></pre></td></tr></table></figure>




<pre><code>(1, 2)</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">int</span>(<span class="string">&#x27;001&#x27;</span>,<span class="number">0</span>) <span class="comment"># 001 不是合法的整数</span></span><br></pre></td></tr></table></figure>


<pre><code>---------------------------------------------------------------------------

ValueError                                Traceback (most recent call last)

&lt;ipython-input-12-1cf9048a8c3e&gt; in &lt;module&gt;
----&gt; 1 int(&#39;001&#39;,0)


ValueError: invalid literal for int() with base 0: &#39;001&#39;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">int</span>(<span class="string">&#x27;9&#x27;</span>, <span class="number">8</span>) <span class="comment"># 8 进制没有 9</span></span><br></pre></td></tr></table></figure>


<pre><code>---------------------------------------------------------------------------

ValueError                                Traceback (most recent call last)

&lt;ipython-input-13-3558097bd025&gt; in &lt;module&gt;
----&gt; 1 int(&#39;9&#39;, 8)


ValueError: invalid literal for int() with base 8: &#39;9&#39;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">int</span>(<span class="string">&#x27;3.14&#x27;</span>) <span class="comment"># 不能是浮点数形式</span></span><br></pre></td></tr></table></figure>


<pre><code>---------------------------------------------------------------------------

ValueError                                Traceback (most recent call last)

&lt;ipython-input-14-1456603af047&gt; in &lt;module&gt;
----&gt; 1 int(&#39;3.14&#39;)


ValueError: invalid literal for int() with base 10: &#39;3.14&#39;</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/11_built-in_function/31_input-b37f4564f79e/</url>
    <content><![CDATA[<h2 id="input-接受输入返回字符串"><a href="#input-接受输入返回字符串" class="headerlink" title="input() 接受输入返回字符串"></a>input() 接受输入返回字符串</h2><p>内置函数 input()，Python 官方文档描述如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">help</span>(<span class="built_in">input</span>)</span><br></pre></td></tr></table></figure>

<pre><code>Help on method raw_input in module ipykernel.kernelbase:

raw_input(prompt=&#39;&#39;) method of ipykernel.ipkernel.IPythonKernel instance
    Forward raw_input to frontends

    Raises
    ------
    StdinNotImplentedError if active frontend doesn&#39;t support stdin.</code></pre>
<p>如果存在 prompt 实参，则作为提示信息输出。接下来，该函数将输入转换为字符串并返回。无输入则返回空字符串。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">input</span>(<span class="string">&#x27;输入提示：&#x27;</span>)</span><br></pre></td></tr></table></figure>

<pre><code>输入提示： 1+1





&#39;1+1&#39;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">input</span>(<span class="string">&#x27;输入提示：&#x27;</span>)</span><br></pre></td></tr></table></figure>

<pre><code>输入提示： 





&#39;&#39;</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/11_built-in_function/30_id-df37995c8494/</url>
    <content><![CDATA[<h2 id="id-返回对象的唯一标识"><a href="#id-返回对象的唯一标识" class="headerlink" title="id() 返回对象的唯一标识"></a>id() 返回对象的唯一标识</h2><p>内置函数 id()，Python 官方文档描述如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">help</span>(<span class="built_in">id</span>)</span><br></pre></td></tr></table></figure>

<pre><code>Help on built-in function id in module builtins:

id(obj, /)
    Return the identity of an object.

    This is guaranteed to be unique among simultaneously existing objects.
    (CPython uses the object&#39;s memory address.)</code></pre>
<p>返回对象的唯一标识。该标识是一个整数，在此对象的生命周期中保证是唯一且恒定的。</p>
<p>CPython 中该标识是对象的内存地址。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">id</span>(<span class="number">1</span>), <span class="built_in">id</span>(<span class="number">1.0</span>)</span><br></pre></td></tr></table></figure>




<pre><code>(140736642126656, 2785998726512)</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> == <span class="number">1.0</span></span><br></pre></td></tr></table></figure>




<pre><code>True</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 两个变量引用了同一个值为 1 的对象</span></span><br><span class="line">a = <span class="number">1</span></span><br><span class="line">b = <span class="built_in">int</span>(<span class="string">&#x27;01&#x27;</span>)</span><br><span class="line"><span class="built_in">id</span>(a), <span class="built_in">id</span>(b)</span><br></pre></td></tr></table></figure>




<pre><code>(140736642126656, 140736642126656)</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 两个值为 1000 的不同对象</span></span><br><span class="line">a = <span class="number">1000</span></span><br><span class="line">b = <span class="number">1000</span></span><br><span class="line"><span class="built_in">id</span>(a), <span class="built_in">id</span>(b)</span><br></pre></td></tr></table></figure>




<pre><code>(2785998745552, 2785998745360)</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 可变对象改变值，还是同一个对象</span></span><br><span class="line">_list = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">print(<span class="built_in">id</span>(_list),_list)</span><br><span class="line"><span class="keyword">del</span> _list[:]</span><br><span class="line">print(<span class="built_in">id</span>(_list),_list)</span><br></pre></td></tr></table></figure>

<pre><code>2785999307336 [1, 2, 3]
2785999307336 []</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/11_built-in_function/29_hex-220f8b030da8/</url>
    <content><![CDATA[<h2 id="hex-整数的十六进制形式"><a href="#hex-整数的十六进制形式" class="headerlink" title="hex() 整数的十六进制形式"></a>hex() 整数的十六进制形式</h2><p>内置函数 hex()，Python 官方文档描述如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">help</span>(<span class="built_in">hex</span>)</span><br></pre></td></tr></table></figure>

<pre><code>Help on built-in function hex in module builtins:

hex(number, /)
    Return the hexadecimal representation of an integer.

    &gt;&gt;&gt; hex(12648430)
    &#39;0xc0ffee&#39;</code></pre>
<p>将整数转换为以 <code>0x</code> 为前缀的小写十六进制整数的字符串形式。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">hex</span>(<span class="number">123</span>)</span><br></pre></td></tr></table></figure>




<pre><code>&#39;0x7b&#39;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">0x7b</span></span><br></pre></td></tr></table></figure>




<pre><code>123</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/11_built-in_function/28_help-c726e5b1f0bf/</url>
    <content><![CDATA[<h2 id="help-启动帮助系统"><a href="#help-启动帮助系统" class="headerlink" title="help 启动帮助系统"></a>help 启动帮助系统</h2><p>内置函数（帮助系统）help，Python 官方文档描述如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">help</span>(<span class="built_in">help</span>)</span><br></pre></td></tr></table></figure>

<pre><code>Help on _Helper in module _sitebuiltins object:

class _Helper(builtins.object)
 |  Define the builtin &#39;help&#39;.
 |  
 |  This is a wrapper around pydoc.help that provides a helpful message
 |  when &#39;help&#39; is typed at the Python interactive prompt.
 |  
 |  Calling help() at the Python prompt starts an interactive help session.
 |  Calling help(thing) prints help for the python object &#39;thing&#39;.
 |  
 |  Methods defined here:
 |  
 |  __call__(self, *args, **kwds)
 |      Call self as a function.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)</code></pre>
<p>启动内置的帮助系统（此函数主要在交互式中使用）。</p>
<p>如果没有实参，解释器控制台里会启动交互式帮助系统。</p>
<p>如果实参是一个字符串，则在模块、函数、类、方法、关键字或文档主题中搜索该字符串，并在控制台上打印帮助信息。</p>
<p>如果实参是其他任意对象，则会生成该对象的帮助页。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">type</span>(<span class="built_in">help</span>)</span><br></pre></td></tr></table></figure>




<pre><code>_sitebuiltins._Helper</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">help</span>()</span><br></pre></td></tr></table></figure>


<pre><code>Welcome to Python 3.8&#39;s help utility!

If this is your first time using Python, you should definitely check out
the tutorial on the Internet at https://docs.python.org/3.8/tutorial/.

Enter the name of any module, keyword, or topic to get help on writing
Python programs and using Python modules.  To quit this help utility and
return to the interpreter, just type &quot;quit&quot;.

To get a list of available modules, keywords, symbols, or topics, type
&quot;modules&quot;, &quot;keywords&quot;, &quot;symbols&quot;, or &quot;topics&quot;.  Each module also comes
with a one-line summary of what it does; to list the modules whose name
or summary contain a given string such as &quot;spam&quot;, type &quot;modules spam&quot;.



help&gt;  print


Help on built-in function print in module builtins:

print(...)
    print(value, ..., sep=&#39; &#39;, end=&#39;\n&#39;, file=sys.stdout, flush=False)

    Prints the values to a stream, or to sys.stdout by default.
    Optional keyword arguments:
    file:  a file-like object (stream); defaults to the current sys.stdout.
    sep:   string inserted between values, default a space.
    end:   string appended after the last value, default a newline.
    flush: whether to forcibly flush the stream.



help&gt;  q



You are now leaving help and returning to the Python interpreter.
If you want to ask for help on a particular object directly from the
interpreter, you can type &quot;help(object)&quot;.  Executing &quot;help(&#39;string&#39;)&quot;
has the same effect as typing a particular string at the help&gt; prompt.</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">help</span>(<span class="string">&#x27;list.append&#x27;</span>)</span><br></pre></td></tr></table></figure>

<pre><code>Help on method_descriptor in list:

list.append = append(self, object, /)
    Append object to the end of the list.</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">help</span>(<span class="built_in">list</span>.append)</span><br></pre></td></tr></table></figure>

<pre><code>Help on method_descriptor:

append(self, object, /)
    Append object to the end of the list.</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/11_built-in_function/27_hash-3366d3144b1b/</url>
    <content><![CDATA[<h2 id="hash-返回对象的哈希值"><a href="#hash-返回对象的哈希值" class="headerlink" title="hash() 返回对象的哈希值"></a>hash() 返回对象的哈希值</h2><p>内置函数 hash()，Python 官方文档描述如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">help</span>(<span class="built_in">hash</span>)</span><br></pre></td></tr></table></figure>

<pre><code>Help on built-in function hash in module builtins:

hash(obj, /)
    Return the hash value for the given object.

    Two objects that compare equal must also have the same hash value, but the
    reverse is not necessarily true.</code></pre>
<p>返回对象的哈希值（如果它有的话）。哈希值是整数。它们在集合或字典查找元素时用来快速比较集合的元素或字典的键。相同大小的数字有相同的哈希值。</p>
<p>可哈希对象必须具有相同的哈希值比较结果才会相同。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">hash</span>(<span class="number">1</span>) == <span class="built_in">hash</span>(<span class="number">1.0</span>) == <span class="built_in">hash</span>(<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>




<pre><code>True</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> == <span class="number">1.0</span> == <span class="literal">True</span></span><br></pre></td></tr></table></figure>




<pre><code>True</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">hash</span>(<span class="string">&#x27;abc&#x27;</span>)</span><br></pre></td></tr></table></figure>




<pre><code>2812132477407752679</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">hash</span>((<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>))</span><br></pre></td></tr></table></figure>




<pre><code>529344067295497451</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">hash</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br></pre></td></tr></table></figure>


<pre><code>---------------------------------------------------------------------------

TypeError                                 Traceback (most recent call last)

&lt;ipython-input-5-35e31e935e9e&gt; in &lt;module&gt;
----&gt; 1 hash([1,2,3])


TypeError: unhashable type: &#39;list&#39;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">hash</span>((<span class="number">1</span>,<span class="number">2</span>))</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/11_built-in_function/26_hasattr-2fe988f3f1f4/</url>
    <content><![CDATA[<h2 id="hasattr-是对象的属性吗？"><a href="#hasattr-是对象的属性吗？" class="headerlink" title="hasattr() 是对象的属性吗？"></a>hasattr() 是对象的属性吗？</h2><p>内置函数 hasattr()，Python 官方文档描述如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">help</span>(<span class="built_in">hasattr</span>)</span><br></pre></td></tr></table></figure>

<pre><code>Help on built-in function hasattr in module builtins:

hasattr(obj, name, /)
    Return whether the object has an attribute with the given name.

    This is done by calling getattr(obj, name) and catching AttributeError.</code></pre>
<p>该函数实参是一个对象和一个字符串。如果字符串是对象的属性之一的名称，则返回 True，否则返回 False。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">hasattr</span>(<span class="string">&#x27;abc&#x27;</span>, <span class="string">&#x27;join&#x27;</span>)</span><br></pre></td></tr></table></figure>




<pre><code>True</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line">    y = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">hasattr</span>(A, <span class="string">&#x27;y&#x27;</span>)</span><br></pre></td></tr></table></figure>




<pre><code>True</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/11_built-in_function/25_globals-d77884b40f6b/</url>
    <content><![CDATA[<h2 id="globals-返回全局变量字典"><a href="#globals-返回全局变量字典" class="headerlink" title="globals() 返回全局变量字典"></a>globals() 返回全局变量字典</h2><p>内置函数 globals()，Python 官方文档描述如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">help</span>(<span class="built_in">globals</span>)</span><br></pre></td></tr></table></figure>

<pre><code>Help on built-in function globals in module builtins:

globals()
    Return the dictionary containing the current scope&#39;s global variables.

    NOTE: Updates to this dictionary *will* affect name lookups in the current
    global scope and vice-versa.</code></pre>
<p>返回包含当前作用域的全局变量字典。这总是当前模块的字典（在函数或方法中，不是调用它的模块，而是定义它的模块）。</p>
<p>更新此字典 <em>将</em> 影响当前全局范围内的名称查找，反之亦然。</p>
<p>globals() 和 locals() 函数各自返回当前的全局和本地字典，因此可以将它们传递给 eval() 或 exec() 来使用。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">globals</span>()</span><br></pre></td></tr></table></figure>




<pre><code>&#123;&#39;__name__&#39;: &#39;__main__&#39;,
 &#39;__doc__&#39;: &#39;Automatically created module for IPython interactive environment&#39;,
 &#39;__package__&#39;: None,
 &#39;__loader__&#39;: None,
 &#39;__spec__&#39;: None,
 &#39;__builtin__&#39;: &lt;module &#39;builtins&#39; (built-in)&gt;,
 &#39;__builtins__&#39;: &lt;module &#39;builtins&#39; (built-in)&gt;,
 &#39;_ih&#39;: [&#39;&#39;, &#39;help(globals)&#39;, &#39;globals()&#39;],
 &#39;_oh&#39;: &#123;&#125;,
 &#39;_dh&#39;: [&#39;D:\\Jupyter\\xuecn_books\\books\\xue_python_kp\\11_built-in_function&#39;],
 &#39;In&#39;: [&#39;&#39;, &#39;help(globals)&#39;, &#39;globals()&#39;],
 &#39;Out&#39;: &#123;&#125;,
 &#39;get_ipython&#39;: &lt;bound method InteractiveShell.get_ipython of &lt;ipykernel.zmqshell.ZMQInteractiveShell object at 0x000001E15E70D748&gt;&gt;,
 &#39;exit&#39;: &lt;IPython.core.autocall.ZMQExitAutocall at 0x1e160f63978&gt;,
 &#39;quit&#39;: &lt;IPython.core.autocall.ZMQExitAutocall at 0x1e160f63978&gt;,
 &#39;_&#39;: &#39;&#39;,
 &#39;__&#39;: &#39;&#39;,
 &#39;___&#39;: &#39;&#39;,
 &#39;_i&#39;: &#39;help(globals)&#39;,
 &#39;_ii&#39;: &#39;&#39;,
 &#39;_iii&#39;: &#39;&#39;,
 &#39;_i1&#39;: &#39;help(globals)&#39;,
 &#39;_i2&#39;: &#39;globals()&#39;&#125;</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/11_built-in_function/24_getattr-327d52b4e7d1/</url>
    <content><![CDATA[<h2 id="getattr-获取对象的属性"><a href="#getattr-获取对象的属性" class="headerlink" title="getattr() 获取对象的属性"></a>getattr() 获取对象的属性</h2><p>内置函数 getattr()，Python 官方文档描述如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">help</span>(<span class="built_in">getattr</span>)</span><br></pre></td></tr></table></figure>

<pre><code>Help on built-in function getattr in module builtins:

getattr(...)
    getattr(object, name[, default]) -&gt; value

    Get a named attribute from an object; getattr(x, &#39;y&#39;) is equivalent to x.y.
    When a default argument is given, it is returned when the attribute doesn&#39;t
    exist; without it, an exception is raised in that case.</code></pre>
<p>返回对象给定的属性名指向的值。name 必须是字符串。如果该字符串是对象的属性名称之一，则返回该属性的值。例如，<code>getattr(x, &#39;y&#39;)</code> 等同于 <code>x.y</code>。如果指定的属性不存在，且提供了 default 值，则返回它，否则触发 AttributeError。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">getattr</span>(<span class="number">1</span>,<span class="string">&#x27;imag&#x27;</span>)</span><br></pre></td></tr></table></figure>




<pre><code>0</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">getattr</span>(<span class="number">1</span>,<span class="string">&#x27;bool&#x27;</span>,<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>




<pre><code>True</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">getattr</span>(<span class="number">1</span>,<span class="string">&#x27;bool&#x27;</span>)</span><br></pre></td></tr></table></figure>


<pre><code>---------------------------------------------------------------------------

AttributeError                            Traceback (most recent call last)

&lt;ipython-input-6-524bb2b35e58&gt; in &lt;module&gt;
----&gt; 1 getattr(1,&#39;bool&#39;)


AttributeError: &#39;int&#39; object has no attribute &#39;bool&#39;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line">    y = <span class="number">1</span></span><br><span class="line">x = A()</span><br><span class="line">x.y</span><br></pre></td></tr></table></figure>




<pre><code>1</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">getattr</span>(x,<span class="string">&#x27;y&#x27;</span>)</span><br></pre></td></tr></table></figure>




<pre><code>1</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/11_built-in_function/23_frozenset-23eeb469f641/</url>
    <content><![CDATA[<h2 id="frozenset-创建不可变集合"><a href="#frozenset-创建不可变集合" class="headerlink" title="frozenset 创建不可变集合"></a>frozenset 创建不可变集合</h2><p>内置函数（类）frozenset，Python 官方文档描述如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">help</span>(<span class="built_in">frozenset</span>)</span><br></pre></td></tr></table></figure>

<pre><code>Help on class frozenset in module builtins:

class frozenset(object)
 |  frozenset() -&gt; empty frozenset object
 |  frozenset(iterable) -&gt; frozenset object
 |  
 |  Build an immutable unordered collection of unique elements.
 |  
 |  Methods defined here:
 |  
 |  __and__(self, value, /)
 |      Return self&amp;value.
 |  
 |  __contains__(...)
 |      x.__contains__(y) &lt;==&gt; y in x.
 |  
 |  __eq__(self, value, /)
 |      Return self==value.
 |  
 |  __ge__(self, value, /)
 |      Return self&gt;=value.
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __gt__(self, value, /)
 |      Return self&gt;value.
 |  
 |  __hash__(self, /)
 |      Return hash(self).
 |  
 |  __iter__(self, /)
 |      Implement iter(self).
 |  
 |  __le__(self, value, /)
 |      Return self&lt;=value.
 |  
 |  __len__(self, /)
 |      Return len(self).
 |  
 |  __lt__(self, value, /)
 |      Return self&lt;value.
 |  
 |  __ne__(self, value, /)
 |      Return self!=value.
 |  
 |  __or__(self, value, /)
 |      Return self|value.
 |  
 |  __rand__(self, value, /)
 |      Return value&amp;self.
 |  
 |  __reduce__(...)
 |      Return state information for pickling.
 |  
 |  __repr__(self, /)
 |      Return repr(self).
 |  
 |  __ror__(self, value, /)
 |      Return value|self.
 |  
 |  __rsub__(self, value, /)
 |      Return value-self.
 |  
 |  __rxor__(self, value, /)
 |      Return value^self.
 |  
 |  __sizeof__(...)
 |      S.__sizeof__() -&gt; size of S in memory, in bytes
 |  
 |  __sub__(self, value, /)
 |      Return self-value.
 |  
 |  __xor__(self, value, /)
 |      Return self^value.
 |  
 |  copy(...)
 |      Return a shallow copy of a set.
 |  
 |  difference(...)
 |      Return the difference of two or more sets as a new set.
 |      
 |      (i.e. all elements that are in this set but not the others.)
 |  
 |  intersection(...)
 |      Return the intersection of two sets as a new set.
 |      
 |      (i.e. all elements that are in both sets.)
 |  
 |  isdisjoint(...)
 |      Return True if two sets have a null intersection.
 |  
 |  issubset(...)
 |      Report whether another set contains this set.
 |  
 |  issuperset(...)
 |      Report whether this set contains another set.
 |  
 |  symmetric_difference(...)
 |      Return the symmetric difference of two sets as a new set.
 |      
 |      (i.e. all elements that are in exactly one of the sets.)
 |  
 |  union(...)
 |      Return the union of sets as a new set.
 |      
 |      (i.e. all elements that are in either set.)
 |  
 |  ----------------------------------------------------------------------
 |  Static methods defined here:
 |  
 |  __new__(*args, **kwargs) from builtins.type
 |      Create and return a new object.  See help(type) for accurate signature.</code></pre>
<p>将可迭代对象转换为集合，返回一个新的 frozenset 集合对象。可迭代对象为空，或不传参数，得到一个空集合。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">type</span>(<span class="built_in">frozenset</span>)</span><br></pre></td></tr></table></figure>




<pre><code>type</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">frozenset</span>()</span><br></pre></td></tr></table></figure>




<pre><code>frozenset()</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">frozenset</span>([])</span><br></pre></td></tr></table></figure>




<pre><code>frozenset()</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">frozenset</span>(<span class="string">&#x27;0123&#x27;</span>)</span><br></pre></td></tr></table></figure>




<pre><code>frozenset(&#123;&#39;0&#39;, &#39;1&#39;, &#39;2&#39;, &#39;3&#39;&#125;)</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">frozenset</span>(&#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">1</span>,<span class="string">&#x27;b&#x27;</span>:<span class="number">2</span>&#125;)</span><br></pre></td></tr></table></figure>




<pre><code>frozenset(&#123;&#39;a&#39;, &#39;b&#39;&#125;)</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/11_built-in_function/22_format-409d172a13f3/</url>
    <content><![CDATA[<h2 id="format-格式化"><a href="#format-格式化" class="headerlink" title="format() 格式化"></a>format() 格式化</h2><p>内置函数 format()，Python 官方文档描述如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">help</span>(<span class="built_in">format</span>)</span><br></pre></td></tr></table></figure>

<pre><code>Help on built-in function format in module builtins:

format(value, format_spec=&#39;&#39;, /)
    Return value.__format__(format_spec)

    format_spec defaults to the empty string.
    See the Format Specification Mini-Language section of help(&#39;FORMATTING&#39;) for
    details.</code></pre>
<p>将 value 转换为 format_spec 控制的 “格式化” 表示。format_spec 的解释取决于 value 实参的类型，但是大多数内置类型使用标准格式化语法：格式化迷你语言。详见 <a href="https://xue.cn/hub/reader?bookId=64&path=xue_python_kp/02_string/25_str.format.ipynb">str.format 格式化</a>。</p>
<p>默认的 format_spec 是一个空字符串，它通常和调用 str(value) 的结果相同。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">format</span>(<span class="string">&#x27;嗨&#x27;</span>,<span class="string">&#x27;&gt;10&#x27;</span>)</span><br></pre></td></tr></table></figure>




<pre><code>&#39;         嗨&#39;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">format</span>(<span class="string">&#x27;嗨&#x27;</span>,<span class="string">&#x27;~^10&#x27;</span>)</span><br></pre></td></tr></table></figure>




<pre><code>&#39;~~~~嗨~~~~~&#39;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">format</span>(<span class="number">1</span>,<span class="string">&#x27;05&#x27;</span>)</span><br></pre></td></tr></table></figure>




<pre><code>&#39;00001&#39;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">format</span>(<span class="number">3.14</span>,<span class="string">&#x27;.3f&#x27;</span>)</span><br></pre></td></tr></table></figure>




<pre><code>&#39;3.140&#39;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">format</span>(<span class="number">123456789</span>,<span class="string">&#x27;_&#x27;</span>)</span><br></pre></td></tr></table></figure>




<pre><code>&#39;123_456_789&#39;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">format</span>(<span class="number">123456789</span>,<span class="string">&#x27;.2e&#x27;</span>)</span><br></pre></td></tr></table></figure>




<pre><code>&#39;1.23e+08&#39;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">format</span>(<span class="number">123456789</span>)</span><br></pre></td></tr></table></figure>




<pre><code>&#39;123456789&#39;</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/11_built-in_function/21_float-a182ef4146c6/</url>
    <content><![CDATA[<h2 id="float-创建浮点数"><a href="#float-创建浮点数" class="headerlink" title="float 创建浮点数"></a>float 创建浮点数</h2><p>内置函数（类）float，Python 官方文档描述如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">help</span>(<span class="built_in">float</span>)</span><br></pre></td></tr></table></figure>

<pre><code>Help on class float in module builtins:

class float(object)
 |  float(x=0, /)
 |  
 |  Convert a string or number to a floating point number, if possible.
 |  
 |  Methods defined here:
 |  
 |  __abs__(self, /)
 |      abs(self)
 |  
 |  __add__(self, value, /)
 |      Return self+value.
 |  
 |  __bool__(self, /)
 |      self != 0
 |  
 |  __divmod__(self, value, /)
 |      Return divmod(self, value).
 |  
 |  __eq__(self, value, /)
 |      Return self==value.
 |  
 |  __float__(self, /)
 |      float(self)
 |  
 |  __floordiv__(self, value, /)
 |      Return self//value.
 |  
 |  __format__(self, format_spec, /)
 |      Formats the float according to format_spec.
 |  
 |  __ge__(self, value, /)
 |      Return self&gt;=value.
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __getnewargs__(self, /)
 |  
 |  __gt__(self, value, /)
 |      Return self&gt;value.
 |  
 |  __hash__(self, /)
 |      Return hash(self).
 |  
 |  __int__(self, /)
 |      int(self)
 |  
 |  __le__(self, value, /)
 |      Return self&lt;=value.
 |  
 |  __lt__(self, value, /)
 |      Return self&lt;value.
 |  
 |  __mod__(self, value, /)
 |      Return self%value.
 |  
 |  __mul__(self, value, /)
 |      Return self*value.
 |  
 |  __ne__(self, value, /)
 |      Return self!=value.
 |  
 |  __neg__(self, /)
 |      -self
 |  
 |  __pos__(self, /)
 |      +self
 |  
 |  __pow__(self, value, mod=None, /)
 |      Return pow(self, value, mod).
 |  
 |  __radd__(self, value, /)
 |      Return value+self.
 |  
 |  __rdivmod__(self, value, /)
 |      Return divmod(value, self).
 |  
 |  __repr__(self, /)
 |      Return repr(self).
 |  
 |  __rfloordiv__(self, value, /)
 |      Return value//self.
 |  
 |  __rmod__(self, value, /)
 |      Return value%self.
 |  
 |  __rmul__(self, value, /)
 |      Return value*self.
 |  
 |  __round__(self, ndigits=None, /)
 |      Return the Integral closest to x, rounding half toward even.
 |      
 |      When an argument is passed, work like built-in round(x, ndigits).
 |  
 |  __rpow__(self, value, mod=None, /)
 |      Return pow(value, self, mod).
 |  
 |  __rsub__(self, value, /)
 |      Return value-self.
 |  
 |  __rtruediv__(self, value, /)
 |      Return value/self.
 |  
 |  __str__(self, /)
 |      Return str(self).
 |  
 |  __sub__(self, value, /)
 |      Return self-value.
 |  
 |  __truediv__(self, value, /)
 |      Return self/value.
 |  
 |  __trunc__(self, /)
 |      Return the Integral closest to x between 0 and x.
 |  
 |  as_integer_ratio(self, /)
 |      Return integer ratio.
 |      
 |      Return a pair of integers, whose ratio is exactly equal to the original float
 |      and with a positive denominator.
 |      
 |      Raise OverflowError on infinities and a ValueError on NaNs.
 |      
 |      &gt;&gt;&gt; (10.0).as_integer_ratio()
 |      (10, 1)
 |      &gt;&gt;&gt; (0.0).as_integer_ratio()
 |      (0, 1)
 |      &gt;&gt;&gt; (-.25).as_integer_ratio()
 |      (-1, 4)
 |  
 |  conjugate(self, /)
 |      Return self, the complex conjugate of any float.
 |  
 |  hex(self, /)
 |      Return a hexadecimal representation of a floating-point number.
 |      
 |      &gt;&gt;&gt; (-0.1).hex()
 |      &#39;-0x1.999999999999ap-4&#39;
 |      &gt;&gt;&gt; 3.14159.hex()
 |      &#39;0x1.921f9f01b866ep+1&#39;
 |  
 |  is_integer(self, /)
 |      Return True if the float is an integer.
 |  
 |  ----------------------------------------------------------------------
 |  Class methods defined here:
 |  
 |  __getformat__(typestr, /) from builtins.type
 |      You probably don&#39;t want to use this function.
 |      
 |        typestr
 |          Must be &#39;double&#39; or &#39;float&#39;.
 |      
 |      It exists mainly to be used in Python&#39;s test suite.
 |      
 |      This function returns whichever of &#39;unknown&#39;, &#39;IEEE, big-endian&#39; or &#39;IEEE,
 |      little-endian&#39; best describes the format of floating point numbers used by the
 |      C type named by typestr.
 |  
 |  __set_format__(typestr, fmt, /) from builtins.type
 |      You probably don&#39;t want to use this function.
 |      
 |        typestr
 |          Must be &#39;double&#39; or &#39;float&#39;.
 |        fmt
 |          Must be one of &#39;unknown&#39;, &#39;IEEE, big-endian&#39; or &#39;IEEE, little-endian&#39;,
 |          and in addition can only be one of the latter two if it appears to
 |          match the underlying C reality.
 |      
 |      It exists mainly to be used in Python&#39;s test suite.
 |      
 |      Override the automatic determination of C-level floating point type.
 |      This affects how floats are converted to and from binary strings.
 |  
 |  fromhex(string, /) from builtins.type
 |      Create a floating-point number from a hexadecimal string.
 |      
 |      &gt;&gt;&gt; float.fromhex(&#39;0x1.ffffp10&#39;)
 |      2047.984375
 |      &gt;&gt;&gt; float.fromhex(&#39;-0x1p-1074&#39;)
 |      -5e-324
 |  
 |  ----------------------------------------------------------------------
 |  Static methods defined here:
 |  
 |  __new__(*args, **kwargs) from builtins.type
 |      Create and return a new object.  See help(type) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  imag
 |      the imaginary part of a complex number
 |  
 |  real
 |      the real part of a complex number</code></pre>
<p>返回从数字或字符串 x 生成的浮点数。</p>
<p>如果实参是字符串:</p>
<ul>
<li>它必须是包含十进制数字的字符串;</li>
<li>通常是 Python 整数或浮点数的字符串形式；</li>
<li>也可以是 ‘NaN’（非数字）、表示正负无穷大的字符串（”Infinity” 或 “inf”）。字母大小写随意；</li>
<li>字符串前后可以有空白字符。</li>
</ul>
<p>如果实参是整数或浮点数，则返回具有相同值（在 Python 浮点精度范围内）的浮点数。如果实参在 Python 浮点精度范围外，则会触发OverflowError。</p>
<p>如果没有实参，则返回 0.0 。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">type</span>(<span class="built_in">float</span>)</span><br></pre></td></tr></table></figure>




<pre><code>type</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">float</span>()</span><br></pre></td></tr></table></figure>




<pre><code>0.0</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">float</span>(<span class="number">1</span>)</span><br></pre></td></tr></table></figure>




<pre><code>1.0</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">float</span>(-  <span class="number">1.0</span>)</span><br></pre></td></tr></table></figure>




<pre><code>-1.0</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">float</span>(<span class="string">&#x27; -1.0 \n&#x27;</span>)</span><br></pre></td></tr></table></figure>




<pre><code>-1.0</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">float</span>(<span class="string">&#x27; 01_2.1_4 &#x27;</span>)</span><br></pre></td></tr></table></figure>




<pre><code>12.14</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">float</span>(<span class="string">&#x27;0001&#x27;</span>)</span><br></pre></td></tr></table></figure>




<pre><code>1.0</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">float</span>(<span class="string">&#x27;3.14e02&#x27;</span>)</span><br></pre></td></tr></table></figure>




<pre><code>314.0</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">float</span>(<span class="string">&#x27;-naN&#x27;</span>)</span><br></pre></td></tr></table></figure>




<pre><code>nan</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">float</span>(<span class="string">&#x27;-inf&#x27;</span>)</span><br></pre></td></tr></table></figure>




<pre><code>-inf</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/11_built-in_function/20_filter-5deb5c69d4e0/</url>
    <content><![CDATA[<h2 id="filter-真值元素筛选"><a href="#filter-真值元素筛选" class="headerlink" title="filter 真值元素筛选"></a>filter 真值元素筛选</h2><p>内置函数（类）filter，Python 官方文档描述如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">help</span>(<span class="built_in">filter</span>)</span><br></pre></td></tr></table></figure>

<pre><code>Help on class filter in module builtins:

class filter(object)
 |  filter(function or None, iterable) --&gt; filter object
 |  
 |  Return an iterator yielding those items of iterable for which function(item)
 |  is true. If function is None, return the items that are true.
 |  
 |  Methods defined here:
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __iter__(self, /)
 |      Implement iter(self).
 |  
 |  __next__(self, /)
 |      Implement next(self).
 |  
 |  __reduce__(...)
 |      Return state information for pickling.
 |  
 |  ----------------------------------------------------------------------
 |  Static methods defined here:
 |  
 |  __new__(*args, **kwargs) from builtins.type
 |      Create and return a new object.  See help(type) for accurate signature.</code></pre>
<p>返回可迭代对象（iterable）中那些传递给函数 function 计算之后，布尔值仍然为真的元素组成的迭代器。</p>
<p>如果 function 是 None，则会假设它是一个身份函数，即 iterable<br>中所有布尔值为假的元素会被移除。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">type</span>(<span class="built_in">filter</span>)</span><br></pre></td></tr></table></figure>




<pre><code>type</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">f = <span class="built_in">filter</span>(<span class="literal">None</span>,[<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>])</span><br><span class="line"><span class="built_in">list</span>(f)</span><br></pre></td></tr></table></figure>




<pre><code>[1, 2, 1]</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">f = <span class="built_in">filter</span>(<span class="keyword">lambda</span> x: x<span class="number">-1</span>, [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>])</span><br><span class="line"><span class="built_in">list</span>(f)</span><br></pre></td></tr></table></figure>




<pre><code>[0, 2]</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">list</span>(<span class="built_in">filter</span>(<span class="literal">None</span>,<span class="string">&#x27;0120&#x27;</span>))</span><br></pre></td></tr></table></figure>




<pre><code>[&#39;0&#39;, &#39;1&#39;, &#39;2&#39;, &#39;0&#39;]</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">list</span>(<span class="built_in">filter</span>(<span class="built_in">int</span>,<span class="string">&#x27;0120&#x27;</span>))</span><br></pre></td></tr></table></figure>




<pre><code>[&#39;1&#39;, &#39;2&#39;]</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/11_built-in_function/19_exec-124cb5381bb4/</url>
    <content><![CDATA[<h2 id="exec-解析字符串或代码并求值"><a href="#exec-解析字符串或代码并求值" class="headerlink" title="exec() 解析字符串或代码并求值"></a>exec() 解析字符串或代码并求值</h2><p>内置函数 exec()，Python 官方文档描述如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">help</span>(<span class="built_in">exec</span>)</span><br></pre></td></tr></table></figure>

<pre><code>Help on built-in function exec in module builtins:

exec(source, globals=None, locals=None, /)
    Execute the given source in the context of globals and locals.

    The source may be a string representing one or more Python statements
    or a code object as returned by compile().
    The globals must be a dictionary and locals can be any mapping,
    defaulting to the current globals and locals.
    If only globals is given, locals defaults to it.</code></pre>
<p>这个函数支持动态执行 Python 代码。source 必须是字符串或者代码对象。</p>
<p>如果是字符串，那么该字符串将被解析为一系列 Python 语句并执行（除非发生语法错误）。</p>
<p>如果是代码对象，它将被直接执行。</p>
<p>该函数返回值为 None。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(exec(<span class="string">&#x27;&#123;1 + 1&#125;&#x27;</span>))</span><br></pre></td></tr></table></figure>

<pre><code>None</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = <span class="string">&#x27;for i in range(3):print(i)&#x27;</span></span><br><span class="line">code = <span class="built_in">compile</span>(s,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;exec&#x27;</span>)</span><br><span class="line">exec(code)</span><br></pre></td></tr></table></figure>

<pre><code>0
1
2</code></pre>
<p>参数 globals 和 locals 作为 source 的全局和局部命名空间。如果省略 locals 字典则其默认值为 globals 字典。如果两个字典同时省略，则表达式执行时会使用 eval() 被调用的环境中的全局和局部名称。</p>
<p>如果 globals 字典存在且不包含以 <code>__builtins__</code> 为键的值，则将为该键插入对内建 builtins 模块字典的引用。因此，在将执行的代码传递给 exec() 之前，可以通过将自己的 <code>__builtins__</code> 字典插入到 globals 中来控制可以使用哪些内置代码。</p>
<p>globals 实参必须是一个字典。locals 可以是任何映射对象。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = <span class="number">1</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span>():</span></span><br><span class="line">    x = <span class="number">2</span></span><br><span class="line">    code = <span class="string">&quot;for i in range(x):print(i)&quot;</span></span><br><span class="line">    exec(code,&#123;<span class="string">&#x27;x&#x27;</span>:<span class="number">3</span>&#125;,&#123;<span class="string">&#x27;x&#x27;</span>:<span class="number">4</span>&#125;)</span><br><span class="line">f()</span><br></pre></td></tr></table></figure>

<pre><code>0
1
2
3</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = <span class="number">1</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span>():</span></span><br><span class="line">    x = <span class="number">2</span></span><br><span class="line">    code = <span class="string">&quot;for i in range(x):print(i)&quot;</span></span><br><span class="line">    exec(code,&#123;<span class="string">&#x27;x&#x27;</span>:<span class="number">3</span>&#125;)</span><br><span class="line">f()</span><br></pre></td></tr></table></figure>

<pre><code>0
1
2</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = <span class="number">1</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span>():</span></span><br><span class="line">    x = <span class="number">2</span></span><br><span class="line">    code = <span class="string">&quot;for i in range(x):print(i)&quot;</span></span><br><span class="line">    exec(code)</span><br><span class="line">f()</span><br></pre></td></tr></table></figure>

<pre><code>0
1</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/11_built-in_function/18_eval-85cd8d0d95d1/</url>
    <content><![CDATA[<h2 id="eval-解析字符串或代码并求值"><a href="#eval-解析字符串或代码并求值" class="headerlink" title="eval() 解析字符串或代码并求值"></a>eval() 解析字符串或代码并求值</h2><p>内置函数 eval()，Python 官方文档描述如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">help</span>(<span class="built_in">eval</span>)</span><br></pre></td></tr></table></figure>

<pre><code>Help on built-in function eval in module builtins:

eval(source, globals=None, locals=None, /)
    Evaluate the given source in the context of globals and locals.

    The source may be a string representing a Python expression
    or a code object as returned by compile().
    The globals must be a dictionary and locals can be any mapping,
    defaulting to the current globals and locals.
    If only globals is given, locals defaults to it.</code></pre>
<p>source 参数接受字符串（会作为一个 Python 表达式）或代码对象（可通过 compile() 创建），然后解析并求值，返回求值结果。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">eval</span>(<span class="string">&#x27;&#123;1 + 1&#125;&#x27;</span>)</span><br></pre></td></tr></table></figure>




<pre><code>&#123;2&#125;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = <span class="string">&#x27;for i in range(3):print(i)&#x27;</span></span><br><span class="line">code = <span class="built_in">compile</span>(s,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;exec&#x27;</span>)</span><br><span class="line"><span class="built_in">eval</span>(code)</span><br></pre></td></tr></table></figure>

<pre><code>0
1
2</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">eval</span>(<span class="string">&quot;__import__(&#x27;math&#x27;).sqrt(3**2+4**2)&quot;</span>)</span><br></pre></td></tr></table></figure>




<pre><code>5.0</code></pre>
<p>参数 globals 和 locals 作为 source 的全局和局部命名空间。如果省略 locals 字典则其默认值为 globals 字典。如果两个字典同时省略，则表达式执行时会使用 eval() 被调用的环境中的全局和局部名称。</p>
<p>如果 globals 字典存在且不包含以 <code>__builtins__</code> 为键的值，则会在解析 source 之前插入以此为键的对内置模块 builtins 的引用。这意味着 source 通常具有对标准 builtins 模块的完全访问权限且受限的环境会被传播。</p>
<p>globals 实参必须是一个字典。locals 可以是任何映射对象。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = <span class="number">3</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span>():</span></span><br><span class="line">    y = <span class="number">4</span></span><br><span class="line">    code = <span class="string">&quot;__import__(&#x27;math&#x27;).sqrt(x**2+y**2)&quot;</span></span><br><span class="line">    z = <span class="built_in">eval</span>(code,&#123;<span class="string">&#x27;x&#x27;</span>:<span class="number">5</span>&#125;,&#123;<span class="string">&#x27;y&#x27;</span>:<span class="number">12</span>&#125;)</span><br><span class="line">    print(<span class="string">f&#x27;x=<span class="subst">&#123;x&#125;</span>, y=<span class="subst">&#123;y&#125;</span>, z=<span class="subst">&#123;z&#125;</span>&#x27;</span>)</span><br><span class="line">f()</span><br></pre></td></tr></table></figure>

<pre><code>x=3, y=4, z=13.0</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = <span class="number">3</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span>():</span></span><br><span class="line">    y = <span class="number">4</span></span><br><span class="line">    code = <span class="string">&quot;__import__(&#x27;math&#x27;).sqrt(x**2+y**2)&quot;</span></span><br><span class="line">    z = <span class="built_in">eval</span>(code,&#123;<span class="string">&#x27;x&#x27;</span>:<span class="number">5</span>,<span class="string">&#x27;y&#x27;</span>:<span class="number">12</span>&#125;)</span><br><span class="line">    print(<span class="string">f&#x27;x=<span class="subst">&#123;x&#125;</span>, y=<span class="subst">&#123;y&#125;</span>, z=<span class="subst">&#123;z&#125;</span>&#x27;</span>)</span><br><span class="line">f()</span><br></pre></td></tr></table></figure>

<pre><code>x=3, y=4, z=13.0</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = <span class="number">3</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span>():</span></span><br><span class="line">    y = <span class="number">4</span></span><br><span class="line">    code = <span class="string">&quot;__import__(&#x27;math&#x27;).sqrt(x**2+y**2)&quot;</span></span><br><span class="line">    z = <span class="built_in">eval</span>(code)</span><br><span class="line">    print(<span class="string">f&#x27;x=<span class="subst">&#123;x&#125;</span>, y=<span class="subst">&#123;y&#125;</span>, z=<span class="subst">&#123;z&#125;</span>&#x27;</span>)</span><br><span class="line">f()</span><br></pre></td></tr></table></figure>

<pre><code>x=3, y=4, z=5.0</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/11_built-in_function/17_enumerate-7ced91028de0/</url>
    <content><![CDATA[<h2 id="enumerate-枚举"><a href="#enumerate-枚举" class="headerlink" title="enumerate 枚举"></a>enumerate 枚举</h2><p>内置函数（类）enumerate，Python 官方文档描述如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">help</span>(<span class="built_in">enumerate</span>)</span><br></pre></td></tr></table></figure>

<pre><code>Help on class enumerate in module builtins:

class enumerate(object)
 |  enumerate(iterable, start=0)
 |  
 |  Return an enumerate object.
 |  
 |    iterable
 |      an object supporting iteration
 |  
 |  The enumerate object yields pairs containing a count (from start, which
 |  defaults to zero) and a value yielded by the iterable argument.
 |  
 |  enumerate is useful for obtaining an indexed list:
 |      (0, seq[0]), (1, seq[1]), (2, seq[2]), ...
 |  
 |  Methods defined here:
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __iter__(self, /)
 |      Implement iter(self).
 |  
 |  __next__(self, /)
 |      Implement next(self).
 |  
 |  __reduce__(...)
 |      Return state information for pickling.
 |  
 |  ----------------------------------------------------------------------
 |  Static methods defined here:
 |  
 |  __new__(*args, **kwargs) from builtins.type
 |      Create and return a new object.  See help(type) for accurate signature.</code></pre>
<p>返回一个可迭代对象（iterable）的枚举对象。枚举对象是一个迭代器，迭代出来是一个个元组，里面包含一个计数值（从 start 开始，默认为 0）和通过迭代 iterable 获得的值。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">type</span>(<span class="built_in">enumerate</span>)</span><br></pre></td></tr></table></figure>




<pre><code>type</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">e = <span class="built_in">enumerate</span>(&#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">1</span>,<span class="string">&#x27;b&#x27;</span>:<span class="number">2</span>,<span class="string">&#x27;c&#x27;</span>:<span class="number">3</span>&#125;)</span><br><span class="line">e</span><br></pre></td></tr></table></figure>




<pre><code>&lt;enumerate at 0x200ccb71240&gt;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">next</span>(e)</span><br></pre></td></tr></table></figure>




<pre><code>(0, &#39;a&#39;)</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> e:</span><br><span class="line">    print(i)</span><br></pre></td></tr></table></figure>

<pre><code>(1, &#39;b&#39;)
(2, &#39;c&#39;)</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">e = <span class="built_in">enumerate</span>(<span class="string">&#x27;abc&#x27;</span>, <span class="number">1</span>)</span><br><span class="line"><span class="built_in">list</span>(e)</span><br></pre></td></tr></table></figure>




<pre><code>[(1, &#39;a&#39;), (2, &#39;b&#39;), (3, &#39;c&#39;)]</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/11_built-in_function/16_divmod-090d4fef2340/</url>
    <content><![CDATA[<h2 id="divmod-求两个数的商和余"><a href="#divmod-求两个数的商和余" class="headerlink" title="divmod() 求两个数的商和余"></a>divmod() 求两个数的商和余</h2><p>内置函数 divmod()，Python 官方文档描述如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">help</span>(<span class="built_in">divmod</span>)</span><br></pre></td></tr></table></figure>

<pre><code>Help on built-in function divmod in module builtins:

divmod(x, y, /)
    Return the tuple (x//y, x%y).  Invariant: div*y + mod == x.</code></pre>
<p>它将两个（非复数）数字作为实参，返回两个数字的（商,余数）元组。对于混合操作数类型，适用二元算术运算符的规则。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">divmod</span>(<span class="number">1</span>,<span class="number">2</span>)</span><br></pre></td></tr></table></figure>




<pre><code>(0, 1)</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">divmod</span>(<span class="number">3.14</span>, <span class="number">2</span>)</span><br></pre></td></tr></table></figure>




<pre><code>(1.0, 1.1400000000000001)</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/11_built-in_function/15_dir-820417c91bd7/</url>
    <content><![CDATA[<h2 id="dir-返回对象属性列表"><a href="#dir-返回对象属性列表" class="headerlink" title="dir() 返回对象属性列表"></a>dir() 返回对象属性列表</h2><p>内置函数 dir()，Python 官方文档描述如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">help</span>(<span class="built_in">dir</span>)</span><br></pre></td></tr></table></figure>

<pre><code>Help on built-in function dir in module builtins:

dir(...)
    dir([object]) -&gt; list of strings

    If called without an argument, return the names in the current scope.
    Else, return an alphabetized list of names comprising (some of) the attributes
    of the given object, and of attributes reachable from it.
    If the object supplies a method named __dir__, it will be used; otherwise
    the default dir() logic is used and returns:
      for a module object: the module&#39;s attributes.
      for a class object:  its attributes, and recursively the attributes
        of its bases.
      for any other object: its attributes, its class&#39;s attributes, and
        recursively the attributes of its class&#39;s base classes.</code></pre>
<p>如果没有实参，则返回当前作用域中的名称列表。如果有实参，它会尝试返回该对象的有效属性列表。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">dir</span>()</span><br></pre></td></tr></table></figure>




<pre><code>[&#39;In&#39;,
 &#39;Out&#39;,
 &#39;_&#39;,
 &#39;__&#39;,
 &#39;___&#39;,
 &#39;__builtin__&#39;,
 &#39;__builtins__&#39;,
 &#39;__doc__&#39;,
 &#39;__loader__&#39;,
 &#39;__name__&#39;,
 &#39;__package__&#39;,
 &#39;__spec__&#39;,
 &#39;_dh&#39;,
 &#39;_i&#39;,
 &#39;_i1&#39;,
 &#39;_i2&#39;,
 &#39;_ih&#39;,
 &#39;_ii&#39;,
 &#39;_iii&#39;,
 &#39;_oh&#39;,
 &#39;exit&#39;,
 &#39;get_ipython&#39;,
 &#39;quit&#39;]</code></pre>
<p>如果对象有一个名为 <code>__dir__()</code> 的方法，那么该方法将被调用，并且必须返回一个属性列表。这允许实现自定义 dir() 来报告它的属性。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__dir__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> [<span class="string">&#x27;area&#x27;</span>, <span class="string">&#x27;perimeter&#x27;</span>, <span class="string">&#x27;location&#x27;</span>]</span><br><span class="line">a = A()</span><br><span class="line"><span class="built_in">dir</span>(a)</span><br></pre></td></tr></table></figure>




<pre><code>[&#39;area&#39;, &#39;location&#39;, &#39;perimeter&#39;]</code></pre>
<p>如果对象不提供 <code>__dir__()</code>，默认的 dir() 机制对不同类型的对象行为不同，它会试图返回最相关而不是最全的信息：</p>
<ul>
<li>如果对象是模块对象，则列表包含模块的属性名称;</li>
<li>如果对象是类对象，则列表包含它们的属性名称，并且递归查找所有基类的属性;</li>
<li>如果对象是实例对象，则列表包含实例的属性名称，它的类的属性名称，并且递归查找它的类的所有基类的属性。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="built_in">dir</span>(string)</span><br></pre></td></tr></table></figure>




<pre><code>[&#39;Formatter&#39;,
 &#39;Template&#39;,
 &#39;_ChainMap&#39;,
 &#39;_TemplateMetaclass&#39;,
 &#39;__all__&#39;,
 &#39;__builtins__&#39;,
 &#39;__cached__&#39;,
 &#39;__doc__&#39;,
 &#39;__file__&#39;,
 &#39;__loader__&#39;,
 &#39;__name__&#39;,
 &#39;__package__&#39;,
 &#39;__spec__&#39;,
 &#39;_re&#39;,
 &#39;_string&#39;,
 &#39;ascii_letters&#39;,
 &#39;ascii_lowercase&#39;,
 &#39;ascii_uppercase&#39;,
 &#39;capwords&#39;,
 &#39;digits&#39;,
 &#39;hexdigits&#39;,
 &#39;octdigits&#39;,
 &#39;printable&#39;,
 &#39;punctuation&#39;,
 &#39;whitespace&#39;]</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">dir</span>(<span class="built_in">int</span>)</span><br></pre></td></tr></table></figure>




<pre><code>[&#39;__abs__&#39;,
 &#39;__add__&#39;,
 &#39;__and__&#39;,
 &#39;__bool__&#39;,
 &#39;__ceil__&#39;,
 &#39;__class__&#39;,
 &#39;__delattr__&#39;,
 &#39;__dir__&#39;,
 &#39;__divmod__&#39;,
 &#39;__doc__&#39;,
 &#39;__eq__&#39;,
 &#39;__float__&#39;,
 &#39;__floor__&#39;,
 &#39;__floordiv__&#39;,
 &#39;__format__&#39;,
 &#39;__ge__&#39;,
 &#39;__getattribute__&#39;,
 &#39;__getnewargs__&#39;,
 &#39;__gt__&#39;,
 &#39;__hash__&#39;,
 &#39;__index__&#39;,
 &#39;__init__&#39;,
 &#39;__init_subclass__&#39;,
 &#39;__int__&#39;,
 &#39;__invert__&#39;,
 &#39;__le__&#39;,
 &#39;__lshift__&#39;,
 &#39;__lt__&#39;,
 &#39;__mod__&#39;,
 &#39;__mul__&#39;,
 &#39;__ne__&#39;,
 &#39;__neg__&#39;,
 &#39;__new__&#39;,
 &#39;__or__&#39;,
 &#39;__pos__&#39;,
 &#39;__pow__&#39;,
 &#39;__radd__&#39;,
 &#39;__rand__&#39;,
 &#39;__rdivmod__&#39;,
 &#39;__reduce__&#39;,
 &#39;__reduce_ex__&#39;,
 &#39;__repr__&#39;,
 &#39;__rfloordiv__&#39;,
 &#39;__rlshift__&#39;,
 &#39;__rmod__&#39;,
 &#39;__rmul__&#39;,
 &#39;__ror__&#39;,
 &#39;__round__&#39;,
 &#39;__rpow__&#39;,
 &#39;__rrshift__&#39;,
 &#39;__rshift__&#39;,
 &#39;__rsub__&#39;,
 &#39;__rtruediv__&#39;,
 &#39;__rxor__&#39;,
 &#39;__setattr__&#39;,
 &#39;__sizeof__&#39;,
 &#39;__str__&#39;,
 &#39;__sub__&#39;,
 &#39;__subclasshook__&#39;,
 &#39;__truediv__&#39;,
 &#39;__trunc__&#39;,
 &#39;__xor__&#39;,
 &#39;bit_length&#39;,
 &#39;conjugate&#39;,
 &#39;denominator&#39;,
 &#39;from_bytes&#39;,
 &#39;imag&#39;,
 &#39;numerator&#39;,
 &#39;real&#39;,
 &#39;to_bytes&#39;]</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">dir</span>(<span class="number">1</span>)</span><br></pre></td></tr></table></figure>




<pre><code>[&#39;__abs__&#39;,
 &#39;__add__&#39;,
 &#39;__and__&#39;,
 &#39;__bool__&#39;,
 &#39;__ceil__&#39;,
 &#39;__class__&#39;,
 &#39;__delattr__&#39;,
 &#39;__dir__&#39;,
 &#39;__divmod__&#39;,
 &#39;__doc__&#39;,
 &#39;__eq__&#39;,
 &#39;__float__&#39;,
 &#39;__floor__&#39;,
 &#39;__floordiv__&#39;,
 &#39;__format__&#39;,
 &#39;__ge__&#39;,
 &#39;__getattribute__&#39;,
 &#39;__getnewargs__&#39;,
 &#39;__gt__&#39;,
 &#39;__hash__&#39;,
 &#39;__index__&#39;,
 &#39;__init__&#39;,
 &#39;__init_subclass__&#39;,
 &#39;__int__&#39;,
 &#39;__invert__&#39;,
 &#39;__le__&#39;,
 &#39;__lshift__&#39;,
 &#39;__lt__&#39;,
 &#39;__mod__&#39;,
 &#39;__mul__&#39;,
 &#39;__ne__&#39;,
 &#39;__neg__&#39;,
 &#39;__new__&#39;,
 &#39;__or__&#39;,
 &#39;__pos__&#39;,
 &#39;__pow__&#39;,
 &#39;__radd__&#39;,
 &#39;__rand__&#39;,
 &#39;__rdivmod__&#39;,
 &#39;__reduce__&#39;,
 &#39;__reduce_ex__&#39;,
 &#39;__repr__&#39;,
 &#39;__rfloordiv__&#39;,
 &#39;__rlshift__&#39;,
 &#39;__rmod__&#39;,
 &#39;__rmul__&#39;,
 &#39;__ror__&#39;,
 &#39;__round__&#39;,
 &#39;__rpow__&#39;,
 &#39;__rrshift__&#39;,
 &#39;__rshift__&#39;,
 &#39;__rsub__&#39;,
 &#39;__rtruediv__&#39;,
 &#39;__rxor__&#39;,
 &#39;__setattr__&#39;,
 &#39;__sizeof__&#39;,
 &#39;__str__&#39;,
 &#39;__sub__&#39;,
 &#39;__subclasshook__&#39;,
 &#39;__truediv__&#39;,
 &#39;__trunc__&#39;,
 &#39;__xor__&#39;,
 &#39;bit_length&#39;,
 &#39;conjugate&#39;,
 &#39;denominator&#39;,
 &#39;from_bytes&#39;,
 &#39;imag&#39;,
 &#39;numerator&#39;,
 &#39;real&#39;,
 &#39;to_bytes&#39;]</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/11_built-in_function/14_dict-8c6227f0ee7f/</url>
    <content><![CDATA[<h2 id="dict-创建字典"><a href="#dict-创建字典" class="headerlink" title="dict 创建字典"></a>dict 创建字典</h2><p>内置函数（类）dict，Python 官方文档描述如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">help</span>(<span class="built_in">dict</span>)</span><br></pre></td></tr></table></figure>

<pre><code>Help on class dict in module builtins:

class dict(object)
 |  dict() -&gt; new empty dictionary
 |  dict(mapping) -&gt; new dictionary initialized from a mapping object&#39;s
 |      (key, value) pairs
 |  dict(iterable) -&gt; new dictionary initialized as if via:
 |      d = &#123;&#125;
 |      for k, v in iterable:
 |          d[k] = v
 |  dict(**kwargs) -&gt; new dictionary initialized with the name=value pairs
 |      in the keyword argument list.  For example:  dict(one=1, two=2)
 |  
 |  Methods defined here:
 |  
 |  __contains__(self, key, /)
 |      True if the dictionary has the specified key, else False.
 |  
 |  __delitem__(self, key, /)
 |      Delete self[key].
 |  
 |  __eq__(self, value, /)
 |      Return self==value.
 |  
 |  __ge__(self, value, /)
 |      Return self&gt;=value.
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __getitem__(...)
 |      x.__getitem__(y) &lt;==&gt; x[y]
 |  
 |  __gt__(self, value, /)
 |      Return self&gt;value.
 |  
 |  __init__(self, /, *args, **kwargs)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __iter__(self, /)
 |      Implement iter(self).
 |  
 |  __le__(self, value, /)
 |      Return self&lt;=value.
 |  
 |  __len__(self, /)
 |      Return len(self).
 |  
 |  __lt__(self, value, /)
 |      Return self&lt;value.
 |  
 |  __ne__(self, value, /)
 |      Return self!=value.
 |  
 |  __repr__(self, /)
 |      Return repr(self).
 |  
 |  __setitem__(self, key, value, /)
 |      Set self[key] to value.
 |  
 |  __sizeof__(...)
 |      D.__sizeof__() -&gt; size of D in memory, in bytes
 |  
 |  clear(...)
 |      D.clear() -&gt; None.  Remove all items from D.
 |  
 |  copy(...)
 |      D.copy() -&gt; a shallow copy of D
 |  
 |  get(self, key, default=None, /)
 |      Return the value for key if key is in the dictionary, else default.
 |  
 |  items(...)
 |      D.items() -&gt; a set-like object providing a view on D&#39;s items
 |  
 |  keys(...)
 |      D.keys() -&gt; a set-like object providing a view on D&#39;s keys
 |  
 |  pop(...)
 |      D.pop(k[,d]) -&gt; v, remove specified key and return the corresponding value.
 |      If key is not found, d is returned if given, otherwise KeyError is raised
 |  
 |  popitem(...)
 |      D.popitem() -&gt; (k, v), remove and return some (key, value) pair as a
 |      2-tuple; but raise KeyError if D is empty.
 |  
 |  setdefault(self, key, default=None, /)
 |      Insert key with a value of default if key is not in the dictionary.
 |      
 |      Return the value for key if key is in the dictionary, else default.
 |  
 |  update(...)
 |      D.update([E, ]**F) -&gt; None.  Update D from dict/iterable E and F.
 |      If E is present and has a .keys() method, then does:  for k in E: D[k] = E[k]
 |      If E is present and lacks a .keys() method, then does:  for k, v in E: D[k] = v
 |      In either case, this is followed by: for k in F:  D[k] = F[k]
 |  
 |  values(...)
 |      D.values() -&gt; an object providing a view on D&#39;s values
 |  
 |  ----------------------------------------------------------------------
 |  Class methods defined here:
 |  
 |  fromkeys(iterable, value=None, /) from builtins.type
 |      Create a new dictionary with keys from iterable and values set to value.
 |  
 |  ----------------------------------------------------------------------
 |  Static methods defined here:
 |  
 |  __new__(*args, **kwargs) from builtins.type
 |      Create and return a new object.  See help(type) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  __hash__ = None</code></pre>
<p>创建一个新字典。参数说明：</p>
<ul>
<li>不传参数创建空字典；</li>
<li>传递一个映射对象；</li>
<li>传递一个可迭代对象；</li>
<li>传递关键字参数。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">type</span>(<span class="built_in">dict</span>)</span><br></pre></td></tr></table></figure>




<pre><code>type</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">dict</span>()</span><br></pre></td></tr></table></figure>




<pre><code>&#123;&#125;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">dict</span>(&#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">1</span>&#125;)</span><br></pre></td></tr></table></figure>




<pre><code>&#123;&#39;a&#39;: 1&#125;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d = <span class="built_in">zip</span>(<span class="string">&#x27;abc&#x27;</span>,[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line"><span class="built_in">dict</span>(d)</span><br></pre></td></tr></table></figure>




<pre><code>&#123;&#39;a&#39;: 1, &#39;b&#39;: 2, &#39;c&#39;: 3&#125;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">dict</span>([(<span class="string">&#x27;a&#x27;</span>, <span class="number">1</span>), (<span class="string">&#x27;b&#x27;</span>, <span class="number">2</span>)])</span><br></pre></td></tr></table></figure>




<pre><code>&#123;&#39;a&#39;: 1, &#39;b&#39;: 2&#125;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">dict</span>(a=<span class="number">1</span>,b=<span class="number">2</span>)</span><br></pre></td></tr></table></figure>




<pre><code>&#123;&#39;a&#39;: 1, &#39;b&#39;: 2&#125;</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/11_built-in_function/13_delattr-e928b9eee226/</url>
    <content><![CDATA[<h2 id="delattr-删除对象属性"><a href="#delattr-删除对象属性" class="headerlink" title="delattr() 删除对象属性"></a>delattr() 删除对象属性</h2><p>内置函数 delattr()，Python 官方文档描述如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">help</span>(<span class="built_in">delattr</span>)</span><br></pre></td></tr></table></figure>

<pre><code>Help on built-in function delattr in module builtins:

delattr(obj, name, /)
    Deletes the named attribute from the given object.

    delattr(x, &#39;y&#39;) is equivalent to ``del x.y&#39;&#39;</code></pre>
<p>实参是一个对象和一个字符串。该字符串必须是对象的某个属性。如果对象允许，该函数将删除指定的属性。<code>delattr(x, &#39;y&#39;)</code> 等价于 <code>del x.y</code>。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line">    y = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">x = A</span><br><span class="line">x.y</span><br></pre></td></tr></table></figure>




<pre><code>0</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">delattr</span>(x,<span class="string">&#x27;y&#x27;</span>)</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x.y</span><br></pre></td></tr></table></figure>


<pre><code>---------------------------------------------------------------------------

AttributeError                            Traceback (most recent call last)

&lt;ipython-input-12-3552434a3e61&gt; in &lt;module&gt;
----&gt; 1 x.y


AttributeError: type object &#39;A&#39; has no attribute &#39;y&#39;</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/11_built-in_function/12_complex-a80ba0438a1c/</url>
    <content><![CDATA[<h2 id="complex-创建复数"><a href="#complex-创建复数" class="headerlink" title="complex 创建复数"></a>complex 创建复数</h2><p>内置函数（类）complex，Python 官方文档描述如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">help</span>(<span class="built_in">complex</span>)</span><br></pre></td></tr></table></figure>

<pre><code>Help on class complex in module builtins:

class complex(object)
 |  complex(real=0, imag=0)
 |  
 |  Create a complex number from a real part and an optional imaginary part.
 |  
 |  This is equivalent to (real + imag*1j) where imag defaults to 0.
 |  
 |  Methods defined here:
 |  
 |  __abs__(self, /)
 |      abs(self)
 |  
 |  __add__(self, value, /)
 |      Return self+value.
 |  
 |  __bool__(self, /)
 |      self != 0
 |  
 |  __divmod__(self, value, /)
 |      Return divmod(self, value).
 |  
 |  __eq__(self, value, /)
 |      Return self==value.
 |  
 |  __float__(self, /)
 |      float(self)
 |  
 |  __floordiv__(self, value, /)
 |      Return self//value.
 |  
 |  __format__(...)
 |      complex.__format__() -&gt; str
 |      
 |      Convert to a string according to format_spec.
 |  
 |  __ge__(self, value, /)
 |      Return self&gt;=value.
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __getnewargs__(...)
 |  
 |  __gt__(self, value, /)
 |      Return self&gt;value.
 |  
 |  __hash__(self, /)
 |      Return hash(self).
 |  
 |  __int__(self, /)
 |      int(self)
 |  
 |  __le__(self, value, /)
 |      Return self&lt;=value.
 |  
 |  __lt__(self, value, /)
 |      Return self&lt;value.
 |  
 |  __mod__(self, value, /)
 |      Return self%value.
 |  
 |  __mul__(self, value, /)
 |      Return self*value.
 |  
 |  __ne__(self, value, /)
 |      Return self!=value.
 |  
 |  __neg__(self, /)
 |      -self
 |  
 |  __pos__(self, /)
 |      +self
 |  
 |  __pow__(self, value, mod=None, /)
 |      Return pow(self, value, mod).
 |  
 |  __radd__(self, value, /)
 |      Return value+self.
 |  
 |  __rdivmod__(self, value, /)
 |      Return divmod(value, self).
 |  
 |  __repr__(self, /)
 |      Return repr(self).
 |  
 |  __rfloordiv__(self, value, /)
 |      Return value//self.
 |  
 |  __rmod__(self, value, /)
 |      Return value%self.
 |  
 |  __rmul__(self, value, /)
 |      Return value*self.
 |  
 |  __rpow__(self, value, mod=None, /)
 |      Return pow(value, self, mod).
 |  
 |  __rsub__(self, value, /)
 |      Return value-self.
 |  
 |  __rtruediv__(self, value, /)
 |      Return value/self.
 |  
 |  __sub__(self, value, /)
 |      Return self-value.
 |  
 |  __truediv__(self, value, /)
 |      Return self/value.
 |  
 |  conjugate(...)
 |      complex.conjugate() -&gt; complex
 |      
 |      Return the complex conjugate of its argument. (3-4j).conjugate() == 3+4j.
 |  
 |  ----------------------------------------------------------------------
 |  Static methods defined here:
 |  
 |  __new__(*args, **kwargs) from builtins.type
 |      Create and return a new object.  See help(type) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  imag
 |      the imaginary part of a complex number
 |  
 |  real
 |      the real part of a complex number</code></pre>
<p>返回值为 real + imag*1j 的复数，或将字符串或数字转换为复数。</p>
<ul>
<li>如果第一个形参是字符串，则它被解释为一个复数，并且函数调用时必须没有第二个形参。</li>
<li>第二个形参不能是字符串。</li>
<li>每个实参都可以是任意的数值类型（包括复数）。</li>
<li>如果省略了 imag，则默认值为零，构造函数会像 int 和 float 一样进行数值转换。</li>
<li>如果两个实参都省略，则返回 0j。</li>
<li>当从字符串转换时，字符串在 + 或 - 的周围必须不能有空格。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">type</span>(<span class="built_in">complex</span>)</span><br></pre></td></tr></table></figure>




<pre><code>type</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">complex</span>(<span class="string">&#x27;1&#x27;</span>)</span><br></pre></td></tr></table></figure>




<pre><code>(1+0j)</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">complex</span>(<span class="string">&#x27;1+2j&#x27;</span>)</span><br></pre></td></tr></table></figure>




<pre><code>(1+2j)</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">complex</span>(<span class="number">1j</span>, <span class="number">2j</span>)</span><br></pre></td></tr></table></figure>




<pre><code>(-2+1j)</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">complex</span>(<span class="number">1j</span>)</span><br></pre></td></tr></table></figure>




<pre><code>1j</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">complex</span>()</span><br></pre></td></tr></table></figure>




<pre><code>0j</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">complex</span>(<span class="string">&#x27;1 + 2j&#x27;</span>)</span><br></pre></td></tr></table></figure>


<pre><code>---------------------------------------------------------------------------

ValueError                                Traceback (most recent call last)

&lt;ipython-input-7-fd0fa4b53d7c&gt; in &lt;module&gt;
----&gt; 1 complex(&#39;1 + 2j&#39;)


ValueError: complex() arg is a malformed string</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/11_built-in_function/11_compile-fa483b43b6fd/</url>
    <content><![CDATA[<h2 id="compile-创建代码对象"><a href="#compile-创建代码对象" class="headerlink" title="compile() 创建代码对象"></a>compile() 创建代码对象</h2><p>内置函数 compile()，Python 官方文档描述如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">help</span>(<span class="built_in">compile</span>)</span><br></pre></td></tr></table></figure>

<pre><code>Help on built-in function compile in module builtins:

compile(source, filename, mode, flags=0, dont_inherit=False, optimize=-1)
    Compile source into a code object that can be executed by exec() or eval().

    The source code may represent a Python module, statement or expression.
    The filename will be used for run-time error messages.
    The mode must be &#39;exec&#39; to compile a module, &#39;single&#39; to compile a
    single (interactive) statement, or &#39;eval&#39; to compile an expression.
    The flags argument, if present, controls which future statements influence
    the compilation of the code.
    The dont_inherit argument, if true, stops the compilation inheriting
    the effects of any future statements in effect in the code calling
    compile; if absent or false these statements do influence the compilation,
    in addition to any features explicitly specified.</code></pre>
<p>将 source 编译成代码或 AST 对象。代码对象可以被 exec() 或 eval() 执行。</p>
<p>参数说明：</p>
<ul>
<li>source，要编译的资源，可以是字符串、字节或 AST 对象。</li>
<li>filename，源所来自的文件的名称。如果代码不需要从文件中读取，可以传入一些可辨识的值（经常会使用字符串）。</li>
<li>mode，指定了编译代码必须用的模式。如果 source 是语句序列，可以是 ‘exec’；如果是单一表达式，可以是 ‘eval’；如果是单个交互式语句，可以是 ‘single’。</li>
<li>flags    和 dont-inherit，控制在编译 source 时要用到哪个 future 语句。</li>
<li>optimize，指定编译器的优化级别；默认值 -1 选择与解释器的 -O 选项相同的优化级别。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">source = <span class="string">&#x27;for i in range(3):print(i)&#x27;</span></span><br><span class="line">code = <span class="built_in">compile</span>(source,<span class="string">&#x27;null&#x27;</span>,<span class="string">&#x27;exec&#x27;</span>)</span><br><span class="line">code</span><br></pre></td></tr></table></figure>




<pre><code>&lt;code object &lt;module&gt; at 0x000001E999B07780, file &quot;null&quot;, line 1&gt;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">exec(code)</span><br></pre></td></tr></table></figure>

<pre><code>0
1
2</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">eval</span>(code)</span><br></pre></td></tr></table></figure>

<pre><code>0
1
2</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/11_built-in_function/10_classmethod-97e7b4b5c29e/</url>
    <content><![CDATA[<h2 id="classmethod-封装函数为类方法"><a href="#classmethod-封装函数为类方法" class="headerlink" title="classmethod 封装函数为类方法"></a>classmethod 封装函数为类方法</h2><p>内置函数（类）classmethod，Python 官方文档描述如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">help</span>(<span class="built_in">classmethod</span>)</span><br></pre></td></tr></table></figure>

<pre><code>Help on class classmethod in module builtins:

class classmethod(object)
 |  classmethod(function) -&gt; method
 |  
 |  Convert a function to be a class method.
 |  
 |  A class method receives the class as implicit first argument,
 |  just like an instance method receives the instance.
 |  To declare a class method, use this idiom:
 |  
 |    class C:
 |        @classmethod
 |        def f(cls, arg1, arg2, ...):
 |            ...
 |  
 |  It can be called either on the class (e.g. C.f()) or on an instance
 |  (e.g. C().f()).  The instance is ignored except for its class.
 |  If a class method is called for a derived class, the derived class
 |  object is passed as the implied first argument.
 |  
 |  Class methods are different than C++ or Java static methods.
 |  If you want those, see the staticmethod builtin.
 |  
 |  Methods defined here:
 |  
 |  __get__(self, instance, owner, /)
 |      Return an attribute of instance, which is of type owner.
 |  
 |  __init__(self, /, *args, **kwargs)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Static methods defined here:
 |  
 |  __new__(*args, **kwargs) from builtins.type
 |      Create and return a new object.  See help(type) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |  
 |  __func__
 |  
 |  __isabstractmethod__</code></pre>
<p>把一个函数封装成类方法。一个类方法把类自己作为第一个实参，就像一个实例方法把实例自己作为第一个实参。</p>
<p>可将函数作为参数来声明类方法，但请用习惯的装饰器形式（@classmethod）来声明类方法。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">type</span>(<span class="built_in">classmethod</span>)</span><br></pre></td></tr></table></figure>




<pre><code>type</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line">    print_itself = <span class="built_in">classmethod</span>(<span class="built_in">print</span>)</span><br><span class="line"></span><br><span class="line">A.print_itself()</span><br></pre></td></tr></table></figure>

<pre><code>&lt;class &#39;__main__.A&#39;&gt;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">print_itself</span>(<span class="params">cls</span>):</span></span><br><span class="line">        print(cls)</span><br><span class="line"></span><br><span class="line">A.print_itself()</span><br></pre></td></tr></table></figure>

<pre><code>&lt;class &#39;__main__.A&#39;&gt;</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/11_built-in_function/09_chr-3fd8004de4b1/</url>
    <content><![CDATA[<h2 id="chr-返回-Unicode-码位值对应字符"><a href="#chr-返回-Unicode-码位值对应字符" class="headerlink" title="chr() 返回 Unicode 码位值对应字符"></a>chr() 返回 Unicode 码位值对应字符</h2><p>内置函数 chr()，Python 官方文档描述如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">help</span>(<span class="built_in">chr</span>)</span><br></pre></td></tr></table></figure>

<pre><code>Help on built-in function chr in module builtins:

chr(i, /)
    Return a Unicode string of one character with ordinal i; 0 &lt;= i &lt;= 0x10ffff.</code></pre>
<p>返回 Unicode 码位对应的字符的字符串格式。码位范围是 0~1114111（16 进制表示是 0x10FFFF），超过这个范围，会触发 ValueError 异常。该函数是 ord() 的逆函数。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">chr</span>(<span class="number">97</span>)</span><br></pre></td></tr></table></figure>




<pre><code>&#39;a&#39;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ord</span>(<span class="string">&#x27;a&#x27;</span>)</span><br></pre></td></tr></table></figure>




<pre><code>97</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">chr</span>(<span class="number">1114111</span>)</span><br></pre></td></tr></table></figure>




<pre><code>&#39;\U0010ffff&#39;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">chr</span>(<span class="number">1114112</span>)</span><br></pre></td></tr></table></figure>


<pre><code>---------------------------------------------------------------------------

ValueError                                Traceback (most recent call last)

&lt;ipython-input-5-4857faf08086&gt; in &lt;module&gt;
----&gt; 1 chr(1114112)


ValueError: chr() arg not in range(0x110000)</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/11_built-in_function/08_callable-a68c42feeee0/</url>
    <content><![CDATA[<h2 id="callable-是可调用对象？"><a href="#callable-是可调用对象？" class="headerlink" title="callable() 是可调用对象？"></a>callable() 是可调用对象？</h2><p>内置函数 callable()，Python 官方文档描述如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">help</span>(<span class="built_in">callable</span>)</span><br></pre></td></tr></table></figure>

<pre><code>Help on built-in function callable in module builtins:

callable(obj, /)
    Return whether the object is callable (i.e., some kind of function).

    Note that classes are callable, as are instances of classes with a
    __call__() method.</code></pre>
<p>如果 obj 是可调用对象就返回 True，否则返回 False。如果返回 True，调用仍可能失败，但如果返回 False，则调用将肯定不会成功。</p>
<p>函数、方法、类以及实现了 <code>__call__()</code> 方法的类的实例是可调用的。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">callable</span>(<span class="number">1</span>)</span><br></pre></td></tr></table></figure>




<pre><code>False</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">callable</span>(<span class="built_in">int</span>)</span><br></pre></td></tr></table></figure>




<pre><code>True</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Myint</span>(<span class="params"><span class="built_in">int</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">num = Myint(<span class="number">1</span>)</span><br><span class="line">num</span><br></pre></td></tr></table></figure>




<pre><code>1</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">callable</span>(num)</span><br></pre></td></tr></table></figure>




<pre><code>True</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">callable</span>(<span class="keyword">lambda</span>: <span class="number">1</span>)</span><br></pre></td></tr></table></figure>




<pre><code>True</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/11_built-in_function/07_bytes-491a3d680bf4/</url>
    <content><![CDATA[<h2 id="bytes-创建-bytes-对象"><a href="#bytes-创建-bytes-对象" class="headerlink" title="bytes 创建 bytes 对象"></a>bytes 创建 bytes 对象</h2><p>内置函数（类）bytes，Python 官方文档描述如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">help</span>(<span class="built_in">bytes</span>)</span><br></pre></td></tr></table></figure>

<pre><code>Help on class bytes in module builtins:

class bytes(object)
 |  bytes(iterable_of_ints) -&gt; bytes
 |  bytes(string, encoding[, errors]) -&gt; bytes
 |  bytes(bytes_or_buffer) -&gt; immutable copy of bytes_or_buffer
 |  bytes(int) -&gt; bytes object of size given by the parameter initialized with null bytes
 |  bytes() -&gt; empty bytes object
 |  
 |  Construct an immutable array of bytes from:
 |    - an iterable yielding integers in range(256)
 |    - a text string encoded using the specified encoding
 |    - any object implementing the buffer API.
 |    - an integer
 |  
 |  Methods defined here:
 |  
 |  __add__(self, value, /)
 |      Return self+value.
 |  
 |  __contains__(self, key, /)
 |      Return key in self.
 |  
 |  __eq__(self, value, /)
 |      Return self==value.
 |  
 |  __ge__(self, value, /)
 |      Return self&gt;=value.
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __getitem__(self, key, /)
 |      Return self[key].
 |  
 |  __getnewargs__(...)
 |  
 |  __gt__(self, value, /)
 |      Return self&gt;value.
 |  
 |  __hash__(self, /)
 |      Return hash(self).
 |  
 |  __iter__(self, /)
 |      Implement iter(self).
 |  
 |  __le__(self, value, /)
 |      Return self&lt;=value.
 |  
 |  __len__(self, /)
 |      Return len(self).
 |  
 |  __lt__(self, value, /)
 |      Return self&lt;value.
 |  
 |  __mod__(self, value, /)
 |      Return self%value.
 |  
 |  __mul__(self, value, /)
 |      Return self*value.
 |  
 |  __ne__(self, value, /)
 |      Return self!=value.
 |  
 |  __repr__(self, /)
 |      Return repr(self).
 |  
 |  __rmod__(self, value, /)
 |      Return value%self.
 |  
 |  __rmul__(self, value, /)
 |      Return value*self.
 |  
 |  __str__(self, /)
 |      Return str(self).
 |  
 |  capitalize(...)
 |      B.capitalize() -&gt; copy of B
 |      
 |      Return a copy of B with only its first character capitalized (ASCII)
 |      and the rest lower-cased.
 |  
 |  center(...)
 |      B.center(width[, fillchar]) -&gt; copy of B
 |      
 |      Return B centered in a string of length width.  Padding is
 |      done using the specified fill character (default is a space).
 |  
 |  count(...)
 |      B.count(sub[, start[, end]]) -&gt; int
 |      
 |      Return the number of non-overlapping occurrences of subsection sub in
 |      bytes B[start:end].  Optional arguments start and end are interpreted
 |      as in slice notation.
 |  
 |  decode(self, /, encoding=&#39;utf-8&#39;, errors=&#39;strict&#39;)
 |      Decode the bytes using the codec registered for encoding.
 |      
 |      encoding
 |        The encoding with which to decode the bytes.
 |      errors
 |        The error handling scheme to use for the handling of decoding errors.
 |        The default is &#39;strict&#39; meaning that decoding errors raise a
 |        UnicodeDecodeError. Other possible values are &#39;ignore&#39; and &#39;replace&#39;
 |        as well as any other name registered with codecs.register_error that
 |        can handle UnicodeDecodeErrors.
 |  
 |  endswith(...)
 |      B.endswith(suffix[, start[, end]]) -&gt; bool
 |      
 |      Return True if B ends with the specified suffix, False otherwise.
 |      With optional start, test B beginning at that position.
 |      With optional end, stop comparing B at that position.
 |      suffix can also be a tuple of bytes to try.
 |  
 |  expandtabs(...)
 |      B.expandtabs(tabsize=8) -&gt; copy of B
 |      
 |      Return a copy of B where all tab characters are expanded using spaces.
 |      If tabsize is not given, a tab size of 8 characters is assumed.
 |  
 |  find(...)
 |      B.find(sub[, start[, end]]) -&gt; int
 |      
 |      Return the lowest index in B where subsection sub is found,
 |      such that sub is contained within B[start,end].  Optional
 |      arguments start and end are interpreted as in slice notation.
 |      
 |      Return -1 on failure.
 |  
 |  hex(...)
 |      B.hex() -&gt; string
 |      
 |      Create a string of hexadecimal numbers from a bytes object.
 |      Example: b&#39;\xb9\x01\xef&#39;.hex() -&gt; &#39;b901ef&#39;.
 |  
 |  index(...)
 |      B.index(sub[, start[, end]]) -&gt; int
 |      
 |      Return the lowest index in B where subsection sub is found,
 |      such that sub is contained within B[start,end].  Optional
 |      arguments start and end are interpreted as in slice notation.
 |      
 |      Raises ValueError when the subsection is not found.
 |  
 |  isalnum(...)
 |      B.isalnum() -&gt; bool
 |      
 |      Return True if all characters in B are alphanumeric
 |      and there is at least one character in B, False otherwise.
 |  
 |  isalpha(...)
 |      B.isalpha() -&gt; bool
 |      
 |      Return True if all characters in B are alphabetic
 |      and there is at least one character in B, False otherwise.
 |  
 |  isascii(...)
 |      B.isascii() -&gt; bool
 |      
 |      Return True if B is empty or all characters in B are ASCII,
 |      False otherwise.
 |  
 |  isdigit(...)
 |      B.isdigit() -&gt; bool
 |      
 |      Return True if all characters in B are digits
 |      and there is at least one character in B, False otherwise.
 |  
 |  islower(...)
 |      B.islower() -&gt; bool
 |      
 |      Return True if all cased characters in B are lowercase and there is
 |      at least one cased character in B, False otherwise.
 |  
 |  isspace(...)
 |      B.isspace() -&gt; bool
 |      
 |      Return True if all characters in B are whitespace
 |      and there is at least one character in B, False otherwise.
 |  
 |  istitle(...)
 |      B.istitle() -&gt; bool
 |      
 |      Return True if B is a titlecased string and there is at least one
 |      character in B, i.e. uppercase characters may only follow uncased
 |      characters and lowercase characters only cased ones. Return False
 |      otherwise.
 |  
 |  isupper(...)
 |      B.isupper() -&gt; bool
 |      
 |      Return True if all cased characters in B are uppercase and there is
 |      at least one cased character in B, False otherwise.
 |  
 |  join(self, iterable_of_bytes, /)
 |      Concatenate any number of bytes objects.
 |      
 |      The bytes whose method is called is inserted in between each pair.
 |      
 |      The result is returned as a new bytes object.
 |      
 |      Example: b&#39;.&#39;.join([b&#39;ab&#39;, b&#39;pq&#39;, b&#39;rs&#39;]) -&gt; b&#39;ab.pq.rs&#39;.
 |  
 |  ljust(...)
 |      B.ljust(width[, fillchar]) -&gt; copy of B
 |      
 |      Return B left justified in a string of length width. Padding is
 |      done using the specified fill character (default is a space).
 |  
 |  lower(...)
 |      B.lower() -&gt; copy of B
 |      
 |      Return a copy of B with all ASCII characters converted to lowercase.
 |  
 |  lstrip(self, bytes=None, /)
 |      Strip leading bytes contained in the argument.
 |      
 |      If the argument is omitted or None, strip leading  ASCII whitespace.
 |  
 |  partition(self, sep, /)
 |      Partition the bytes into three parts using the given separator.
 |      
 |      This will search for the separator sep in the bytes. If the separator is found,
 |      returns a 3-tuple containing the part before the separator, the separator
 |      itself, and the part after it.
 |      
 |      If the separator is not found, returns a 3-tuple containing the original bytes
 |      object and two empty bytes objects.
 |  
 |  replace(self, old, new, count=-1, /)
 |      Return a copy with all occurrences of substring old replaced by new.
 |      
 |        count
 |          Maximum number of occurrences to replace.
 |          -1 (the default value) means replace all occurrences.
 |      
 |      If the optional argument count is given, only the first count occurrences are
 |      replaced.
 |  
 |  rfind(...)
 |      B.rfind(sub[, start[, end]]) -&gt; int
 |      
 |      Return the highest index in B where subsection sub is found,
 |      such that sub is contained within B[start,end].  Optional
 |      arguments start and end are interpreted as in slice notation.
 |      
 |      Return -1 on failure.
 |  
 |  rindex(...)
 |      B.rindex(sub[, start[, end]]) -&gt; int
 |      
 |      Return the highest index in B where subsection sub is found,
 |      such that sub is contained within B[start,end].  Optional
 |      arguments start and end are interpreted as in slice notation.
 |      
 |      Raise ValueError when the subsection is not found.
 |  
 |  rjust(...)
 |      B.rjust(width[, fillchar]) -&gt; copy of B
 |      
 |      Return B right justified in a string of length width. Padding is
 |      done using the specified fill character (default is a space)
 |  
 |  rpartition(self, sep, /)
 |      Partition the bytes into three parts using the given separator.
 |      
 |      This will search for the separator sep in the bytes, starting at the end. If
 |      the separator is found, returns a 3-tuple containing the part before the
 |      separator, the separator itself, and the part after it.
 |      
 |      If the separator is not found, returns a 3-tuple containing two empty bytes
 |      objects and the original bytes object.
 |  
 |  rsplit(self, /, sep=None, maxsplit=-1)
 |      Return a list of the sections in the bytes, using sep as the delimiter.
 |      
 |        sep
 |          The delimiter according which to split the bytes.
 |          None (the default value) means split on ASCII whitespace characters
 |          (space, tab, return, newline, formfeed, vertical tab).
 |        maxsplit
 |          Maximum number of splits to do.
 |          -1 (the default value) means no limit.
 |      
 |      Splitting is done starting at the end of the bytes and working to the front.
 |  
 |  rstrip(self, bytes=None, /)
 |      Strip trailing bytes contained in the argument.
 |      
 |      If the argument is omitted or None, strip trailing ASCII whitespace.
 |  
 |  split(self, /, sep=None, maxsplit=-1)
 |      Return a list of the sections in the bytes, using sep as the delimiter.
 |      
 |      sep
 |        The delimiter according which to split the bytes.
 |        None (the default value) means split on ASCII whitespace characters
 |        (space, tab, return, newline, formfeed, vertical tab).
 |      maxsplit
 |        Maximum number of splits to do.
 |        -1 (the default value) means no limit.
 |  
 |  splitlines(self, /, keepends=False)
 |      Return a list of the lines in the bytes, breaking at line boundaries.
 |      
 |      Line breaks are not included in the resulting list unless keepends is given and
 |      true.
 |  
 |  startswith(...)
 |      B.startswith(prefix[, start[, end]]) -&gt; bool
 |      
 |      Return True if B starts with the specified prefix, False otherwise.
 |      With optional start, test B beginning at that position.
 |      With optional end, stop comparing B at that position.
 |      prefix can also be a tuple of bytes to try.
 |  
 |  strip(self, bytes=None, /)
 |      Strip leading and trailing bytes contained in the argument.
 |      
 |      If the argument is omitted or None, strip leading and trailing ASCII whitespace.
 |  
 |  swapcase(...)
 |      B.swapcase() -&gt; copy of B
 |      
 |      Return a copy of B with uppercase ASCII characters converted
 |      to lowercase ASCII and vice versa.
 |  
 |  title(...)
 |      B.title() -&gt; copy of B
 |      
 |      Return a titlecased version of B, i.e. ASCII words start with uppercase
 |      characters, all remaining cased characters have lowercase.
 |  
 |  translate(self, table, /, delete=b&#39;&#39;)
 |      Return a copy with each character mapped by the given translation table.
 |      
 |        table
 |          Translation table, which must be a bytes object of length 256.
 |      
 |      All characters occurring in the optional argument delete are removed.
 |      The remaining characters are mapped through the given translation table.
 |  
 |  upper(...)
 |      B.upper() -&gt; copy of B
 |      
 |      Return a copy of B with all ASCII characters converted to uppercase.
 |  
 |  zfill(...)
 |      B.zfill(width) -&gt; copy of B
 |      
 |      Pad a numeric string B with zeros on the left, to fill a field
 |      of the specified width.  B is never truncated.
 |  
 |  ----------------------------------------------------------------------
 |  Class methods defined here:
 |  
 |  fromhex(string, /) from builtins.type
 |      Create a bytes object from a string of hexadecimal numbers.
 |      
 |      Spaces between two numbers are accepted.
 |      Example: bytes.fromhex(&#39;B9 01EF&#39;) -&gt; b&#39;\\xb9\\x01\\xef&#39;.
 |  
 |  ----------------------------------------------------------------------
 |  Static methods defined here:
 |  
 |  __new__(*args, **kwargs) from builtins.type
 |      Create and return a new object.  See help(type) for accurate signature.
 |  
 |  maketrans(frm, to, /)
 |      Return a translation table useable for the bytes or bytearray translate method.
 |      
 |      The returned table will be one where each byte in frm is mapped to the byte at
 |      the same position in to.
 |      
 |      The bytes objects frm and to must be of the same length.</code></pre>
<p>返回一个新的二进制序列 bytes 对象。参数可以是：</p>
<ul>
<li>0~255 的整数组成的可迭代类型</li>
<li>字符串，并指定编码格式 encoding</li>
<li>与缓冲区接口一致的对象</li>
<li>整数</li>
<li>或者不传参数</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">type</span>(<span class="built_in">bytes</span>)</span><br></pre></td></tr></table></figure>




<pre><code>type</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">bytes</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br></pre></td></tr></table></figure>




<pre><code>b&#39;\x01\x02\x03&#39;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">bytes</span>(<span class="string">&#x27;嗨&#x27;</span>, <span class="string">&#x27;utf-8&#x27;</span>)</span><br></pre></td></tr></table></figure>




<pre><code>b&#39;\xe5\x97\xa8&#39;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">bytes</span>(<span class="number">3</span>)</span><br></pre></td></tr></table></figure>




<pre><code>b&#39;\x00\x00\x00&#39;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">bytes</span>()</span><br></pre></td></tr></table></figure>




<pre><code>b&#39;&#39;</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/11_built-in_function/06_bool-667e158f4a29/</url>
    <content><![CDATA[<h2 id="bool-返回对象的布尔值"><a href="#bool-返回对象的布尔值" class="headerlink" title="bool 返回对象的布尔值"></a>bool 返回对象的布尔值</h2><p>内置函数（类） bool，Python 官方文档描述如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">help</span>(<span class="built_in">bool</span>)</span><br></pre></td></tr></table></figure>

<pre><code>Help on class bool in module builtins:

class bool(int)
 |  bool(x) -&gt; bool
 |  
 |  Returns True when the argument x is true, False otherwise.
 |  The builtins True and False are the only two instances of the class bool.
 |  The class bool is a subclass of the class int, and cannot be subclassed.
 |  
 |  Method resolution order:
 |      bool
 |      int
 |      object
 |  
 |  Methods defined here:
 |  
 |  __and__(self, value, /)
 |      Return self&amp;value.
 |  
 |  __or__(self, value, /)
 |      Return self|value.
 |  
 |  __rand__(self, value, /)
 |      Return value&amp;self.
 |  
 |  __repr__(self, /)
 |      Return repr(self).
 |  
 |  __ror__(self, value, /)
 |      Return value|self.
 |  
 |  __rxor__(self, value, /)
 |      Return value^self.
 |  
 |  __str__(self, /)
 |      Return str(self).
 |  
 |  __xor__(self, value, /)
 |      Return self^value.
 |  
 |  ----------------------------------------------------------------------
 |  Static methods defined here:
 |  
 |  __new__(*args, **kwargs) from builtins.type
 |      Create and return a new object.  See help(type) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from int:
 |  
 |  __abs__(self, /)
 |      abs(self)
 |  
 |  __add__(self, value, /)
 |      Return self+value.
 |  
 |  __bool__(self, /)
 |      self != 0
 |  
 |  __ceil__(...)
 |      Ceiling of an Integral returns itself.
 |  
 |  __divmod__(self, value, /)
 |      Return divmod(self, value).
 |  
 |  __eq__(self, value, /)
 |      Return self==value.
 |  
 |  __float__(self, /)
 |      float(self)
 |  
 |  __floor__(...)
 |      Flooring an Integral returns itself.
 |  
 |  __floordiv__(self, value, /)
 |      Return self//value.
 |  
 |  __format__(self, format_spec, /)
 |      Default object formatter.
 |  
 |  __ge__(self, value, /)
 |      Return self&gt;=value.
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __getnewargs__(self, /)
 |  
 |  __gt__(self, value, /)
 |      Return self&gt;value.
 |  
 |  __hash__(self, /)
 |      Return hash(self).
 |  
 |  __index__(self, /)
 |      Return self converted to an integer, if self is suitable for use as an index into a list.
 |  
 |  __int__(self, /)
 |      int(self)
 |  
 |  __invert__(self, /)
 |      ~self
 |  
 |  __le__(self, value, /)
 |      Return self&lt;=value.
 |  
 |  __lshift__(self, value, /)
 |      Return self&lt;&lt;value.
 |  
 |  __lt__(self, value, /)
 |      Return self&lt;value.
 |  
 |  __mod__(self, value, /)
 |      Return self%value.
 |  
 |  __mul__(self, value, /)
 |      Return self*value.
 |  
 |  __ne__(self, value, /)
 |      Return self!=value.
 |  
 |  __neg__(self, /)
 |      -self
 |  
 |  __pos__(self, /)
 |      +self
 |  
 |  __pow__(self, value, mod=None, /)
 |      Return pow(self, value, mod).
 |  
 |  __radd__(self, value, /)
 |      Return value+self.
 |  
 |  __rdivmod__(self, value, /)
 |      Return divmod(value, self).
 |  
 |  __rfloordiv__(self, value, /)
 |      Return value//self.
 |  
 |  __rlshift__(self, value, /)
 |      Return value&lt;&lt;self.
 |  
 |  __rmod__(self, value, /)
 |      Return value%self.
 |  
 |  __rmul__(self, value, /)
 |      Return value*self.
 |  
 |  __round__(...)
 |      Rounding an Integral returns itself.
 |      Rounding with an ndigits argument also returns an integer.
 |  
 |  __rpow__(self, value, mod=None, /)
 |      Return pow(value, self, mod).
 |  
 |  __rrshift__(self, value, /)
 |      Return value&gt;&gt;self.
 |  
 |  __rshift__(self, value, /)
 |      Return self&gt;&gt;value.
 |  
 |  __rsub__(self, value, /)
 |      Return value-self.
 |  
 |  __rtruediv__(self, value, /)
 |      Return value/self.
 |  
 |  __sizeof__(self, /)
 |      Returns size in memory, in bytes.
 |  
 |  __sub__(self, value, /)
 |      Return self-value.
 |  
 |  __truediv__(self, value, /)
 |      Return self/value.
 |  
 |  __trunc__(...)
 |      Truncating an Integral returns itself.
 |  
 |  bit_length(self, /)
 |      Number of bits necessary to represent self in binary.
 |      
 |      &gt;&gt;&gt; bin(37)
 |      &#39;0b100101&#39;
 |      &gt;&gt;&gt; (37).bit_length()
 |      6
 |  
 |  conjugate(...)
 |      Returns self, the complex conjugate of any int.
 |  
 |  to_bytes(self, /, length, byteorder, *, signed=False)
 |      Return an array of bytes representing an integer.
 |      
 |      length
 |        Length of bytes object to use.  An OverflowError is raised if the
 |        integer is not representable with the given number of bytes.
 |      byteorder
 |        The byte order used to represent the integer.  If byteorder is &#39;big&#39;,
 |        the most significant byte is at the beginning of the byte array.  If
 |        byteorder is &#39;little&#39;, the most significant byte is at the end of the
 |        byte array.  To request the native byte order of the host system, use
 |        `sys.byteorder&#39; as the byte order value.
 |      signed
 |        Determines whether two&#39;s complement is used to represent the integer.
 |        If signed is False and a negative integer is given, an OverflowError
 |        is raised.
 |  
 |  ----------------------------------------------------------------------
 |  Class methods inherited from int:
 |  
 |  from_bytes(bytes, byteorder, *, signed=False) from builtins.type
 |      Return the integer represented by the given array of bytes.
 |      
 |      bytes
 |        Holds the array of bytes to convert.  The argument must either
 |        support the buffer protocol or be an iterable object producing bytes.
 |        Bytes and bytearray are examples of built-in objects that support the
 |        buffer protocol.
 |      byteorder
 |        The byte order used to represent the integer.  If byteorder is &#39;big&#39;,
 |        the most significant byte is at the beginning of the byte array.  If
 |        byteorder is &#39;little&#39;, the most significant byte is at the end of the
 |        byte array.  To request the native byte order of the host system, use
 |        `sys.byteorder&#39; as the byte order value.
 |      signed
 |        Indicates whether two&#39;s complement is used to represent the integer.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from int:
 |  
 |  denominator
 |      the denominator of a rational number in lowest terms
 |  
 |  imag
 |      the imaginary part of a complex number
 |  
 |  numerator
 |      the numerator of a rational number in lowest terms
 |  
 |  real
 |      the real part of a complex number</code></pre>
<p>返回对象 x 的布尔值。省略 x 则返回 False。对象的真值、假值规则如下：</p>
<p>一个对象在默认情况下均被视为真值，除非当该对象被调用时其所属类定义了 <code>__bool__()</code> 方法且返回 False 或是定义了 <code>__len__()</code> 方法且返回零。</p>
<p>下面基本完整地列出了会被视为假值的内置对象:</p>
<ul>
<li>被定义为假值的常量: None 和 False。</li>
<li>任何数值类型的零: 0, 0.0, 0j, Decimal(0), Fraction(0, 1)</li>
<li>空的序列和多项集: ‘’, (), [], {}, set(), range(0)</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">type</span>(<span class="built_in">bool</span>)</span><br></pre></td></tr></table></figure>




<pre><code>type</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">bool</span>()</span><br></pre></td></tr></table></figure>




<pre><code>False</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">bool</span>(<span class="literal">None</span>)</span><br></pre></td></tr></table></figure>




<pre><code>False</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">bool</span>(<span class="string">&#x27;0&#x27;</span>)</span><br></pre></td></tr></table></figure>




<pre><code>True</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">bool</span>(<span class="string">&#x27; &#x27;</span>)</span><br></pre></td></tr></table></figure>




<pre><code>True</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/11_built-in_function/05_bin-d4461ae49b7b/</url>
    <content><![CDATA[<h2 id="bin-整数的二进制形式"><a href="#bin-整数的二进制形式" class="headerlink" title="bin() 整数的二进制形式"></a>bin() 整数的二进制形式</h2><p>内置函数 bin()，Python 官方文档描述如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">help</span>(<span class="built_in">bin</span>)</span><br></pre></td></tr></table></figure>

<pre><code>Help on built-in function bin in module builtins:

bin(number, /)
    Return the binary representation of an integer.

    &gt;&gt;&gt; bin(2796202)
    &#39;0b1010101010101010101010&#39;</code></pre>
<p>返回给定整数的二进制表示形式的字符串。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">bin</span>(<span class="number">123</span>)</span><br></pre></td></tr></table></figure>




<pre><code>&#39;0b1111011&#39;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">0b1111011</span></span><br></pre></td></tr></table></figure>




<pre><code>123</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/11_built-in_function/04_ascii-a7ee61566ce1/</url>
    <content><![CDATA[<h2 id="ascii-返回对象的可打印字符串"><a href="#ascii-返回对象的可打印字符串" class="headerlink" title="ascii() 返回对象的可打印字符串"></a>ascii() 返回对象的可打印字符串</h2><p>内置函数 ascii()，Python 官方文档描述如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">help</span>(<span class="built_in">ascii</span>)</span><br></pre></td></tr></table></figure>

<pre><code>Help on built-in function ascii in module builtins:

ascii(obj, /)
    Return an ASCII-only representation of an object.

    As repr(), return a string containing a printable representation of an
    object, but escape the non-ASCII characters in the string returned by
    repr() using \\x, \\u or \\U escapes. This generates a string similar
    to that returned by repr() in Python 2.</code></pre>
<p>就像函数 repr()，返回一个对象可打印的字符串，但是非 ASCII 编码的字符，会使用 \x、\u 和 \U 来转义。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ascii</span>(<span class="number">123</span>)</span><br></pre></td></tr></table></figure>




<pre><code>&#39;123&#39;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ascii</span>(<span class="literal">None</span>)</span><br></pre></td></tr></table></figure>




<pre><code>&#39;None&#39;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ascii</span>(<span class="string">&#x27;python&#x27;</span>)</span><br></pre></td></tr></table></figure>




<pre><code>&quot;&#39;python&#39;&quot;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ascii</span>(<span class="string">&#x27;嗨&#x27;</span>)</span><br></pre></td></tr></table></figure>




<pre><code>&quot;&#39;\\u55e8&#39;&quot;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">repr</span>(<span class="string">&#x27;嗨&#x27;</span>)</span><br></pre></td></tr></table></figure>




<pre><code>&quot;&#39;嗨&#39;&quot;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;\u55e8&#x27;</span> <span class="comment"># 16 位十六进制数 55e8 码位的字符</span></span><br></pre></td></tr></table></figure>




<pre><code>&#39;嗨&#39;</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/11_built-in_function/03_any-5b9f3aa9609e/</url>
    <content><![CDATA[<h2 id="any-有一个元素布尔值为真？"><a href="#any-有一个元素布尔值为真？" class="headerlink" title="any() 有一个元素布尔值为真？"></a>any() 有一个元素布尔值为真？</h2><p>内置函数 any()，Python 官方文档描述如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">help</span>(<span class="built_in">any</span>)</span><br></pre></td></tr></table></figure>

<pre><code>Help on built-in function any in module builtins:

any(iterable, /)
    Return True if bool(x) is True for any x in the iterable.

    If the iterable is empty, return False.</code></pre>
<p>如果可迭代对象（iterable）的任一元素为真值则返回 True。如果可迭代对象为空，返回 False。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">any</span>([<span class="number">0</span>,<span class="number">1</span>])</span><br></pre></td></tr></table></figure>




<pre><code>True</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">any</span>((<span class="literal">None</span>, [], <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">1</span>)))</span><br></pre></td></tr></table></figure>




<pre><code>False</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/11_built-in_function/02_all-38e9fced3291/</url>
    <content><![CDATA[<h2 id="all-所有元素布尔值为真？"><a href="#all-所有元素布尔值为真？" class="headerlink" title="all() 所有元素布尔值为真？"></a>all() 所有元素布尔值为真？</h2><p>内置函数 all()，Python 官方文档描述如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">help</span>(<span class="built_in">all</span>)</span><br></pre></td></tr></table></figure>

<pre><code>Help on built-in function all in module builtins:

all(iterable, /)
    Return True if bool(x) is True for all values x in the iterable.

    If the iterable is empty, return True.</code></pre>
<p>如果可迭代对象（iterable）的所有元素均为真值（或可迭代对象为空）则返回 True 。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">all</span>(<span class="string">&#x27;0123&#x27;</span>) <span class="comment"># 字符串 &#x27;0&#x27; 是真值</span></span><br></pre></td></tr></table></figure>




<pre><code>True</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">all</span>([<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br></pre></td></tr></table></figure>




<pre><code>False</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">all</span>(&#123;&#125;)</span><br></pre></td></tr></table></figure>




<pre><code>True</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">all</span>(&#123;<span class="number">1</span>:[], <span class="number">2</span>:<span class="number">0</span> &#125;)</span><br></pre></td></tr></table></figure>




<pre><code>True</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/11_built-in_function/01_abs-d7a32f9fd8ac/</url>
    <content><![CDATA[<h2 id="abs-数字取绝对值"><a href="#abs-数字取绝对值" class="headerlink" title="abs() 数字取绝对值"></a>abs() 数字取绝对值</h2><p>内置函数 abs()，Python 官方文档描述如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">help</span>(<span class="built_in">abs</span>)</span><br></pre></td></tr></table></figure>

<pre><code>Help on built-in function abs in module builtins:

abs(x, /)
    Return the absolute value of the argument.</code></pre>
<p>返回一个数的绝对值，参数可以是整数、浮点数或任何实现了 <code>__abs__()</code> 的对象。如果参数是一<br>个复数，则返回它的模。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">abs</span>(<span class="number">-1</span>)</span><br></pre></td></tr></table></figure>




<pre><code>1</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">abs</span>(<span class="number">-3.14</span>)</span><br></pre></td></tr></table></figure>




<pre><code>3.14</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">abs</span>(<span class="number">3</span>+<span class="number">4j</span>)</span><br></pre></td></tr></table></figure>




<pre><code>5.0</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/10_statement/20_nonlocal-79fb030052f1/</url>
    <content><![CDATA[<h2 id="nonlocal-语句"><a href="#nonlocal-语句" class="headerlink" title="nonlocal 语句"></a>nonlocal 语句</h2><p>nonlocal 语句会使得所列出的名称指向在它之前<strong>已经存在</strong>的，<strong>和它最近</strong>并且<strong>在包含它的作用域中绑定</strong>，<strong>除全局变量以外</strong>的变量。</p>
<p>这种功能很重要，因为绑定的默认行为是先搜索局部命名空间。这个语句允许被封装的代码重新绑定局部作用域以外且非全局（模块）作用域当中的变量。</p>
<p>举例如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="string">&#x27;全局&#x27;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span>():</span></span><br><span class="line">    a = <span class="string">&#x27;f&#x27;</span> <span class="comment"># f 中已经存在的 a, 包含 f2</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f1</span>():</span></span><br><span class="line">        a = <span class="string">&#x27;f1&#x27;</span> <span class="comment"># f1 中的局部变量</span></span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f2</span>():</span></span><br><span class="line">        <span class="keyword">nonlocal</span> a <span class="comment"># 和他最近且包含的是 &#x27;f&#x27;</span></span><br><span class="line">        a = <span class="string">&#x27;f2&#x27;</span></span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f3</span>():</span></span><br><span class="line">        <span class="keyword">global</span> a</span><br><span class="line">        a = <span class="string">&#x27;f3&#x27;</span></span><br><span class="line">    <span class="comment"># 调用 f1 不改变 a = &#x27;f&#x27;    </span></span><br><span class="line">    f1() </span><br><span class="line">    print(a)</span><br><span class="line">    <span class="comment"># 调用 f2, nonlocal 将 a = &#x27;f&#x27; 重新绑定为 a = &#x27;f2&#x27;</span></span><br><span class="line">    f2() </span><br><span class="line">    print(a)</span><br><span class="line">    <span class="comment"># 调用 f3, global 将 a 声明为全局变量，</span></span><br><span class="line">    <span class="comment"># 并将 a = &#x27;全局&#x27; 重新绑定为 a = &#x27;f3&#x27; </span></span><br><span class="line">    <span class="comment"># 但在 f 这个局部中，a 仍然是 &#x27;f2&#x27;</span></span><br><span class="line">    f3()</span><br><span class="line">    print(a)</span><br><span class="line"></span><br><span class="line">f() <span class="comment"># 调用 f 使绑定都生效</span></span><br><span class="line">print(a)</span><br></pre></td></tr></table></figure>

<pre><code>f
f2
f2
f3</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 不存在不可以绑定</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span>():</span></span><br><span class="line">    <span class="keyword">nonlocal</span> a </span><br><span class="line">    a = <span class="number">1</span></span><br><span class="line">f()</span><br></pre></td></tr></table></figure>


<pre><code>  File &quot;&lt;ipython-input-3-3706e217f701&gt;&quot;, line 2
    nonlocal a
    ^
SyntaxError: no binding for nonlocal &#39;a&#39; found</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 不是包含它的作用域，不可以绑定</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span>():</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f1</span>():</span></span><br><span class="line">        a = <span class="number">0</span></span><br><span class="line">    f1()</span><br><span class="line">    <span class="keyword">nonlocal</span> a </span><br><span class="line">    a = <span class="number">1</span></span><br><span class="line">f()</span><br></pre></td></tr></table></figure>


<pre><code>  File &quot;&lt;ipython-input-4-a036260d029b&gt;&quot;, line 5
    nonlocal a
    ^
SyntaxError: no binding for nonlocal &#39;a&#39; found</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 全局变量，不可以绑定</span></span><br><span class="line">a = <span class="number">0</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span>():</span></span><br><span class="line">    <span class="keyword">nonlocal</span> a </span><br><span class="line">    a = <span class="number">1</span></span><br><span class="line">f()</span><br></pre></td></tr></table></figure>


<pre><code>  File &quot;&lt;ipython-input-5-87297c0b0eeb&gt;&quot;, line 4
    nonlocal a
    ^
SyntaxError: no binding for nonlocal &#39;a&#39; found</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/10_statement/19_global-e3e8ec73605d/</url>
    <content><![CDATA[<h2 id="global-语句"><a href="#global-语句" class="headerlink" title="global 语句"></a>global 语句</h2><p>global 语句作用于整个当前代码块，它后面所列出的标识符将被解读为全局变量。</p>
<p>在 global 语句中列出的名称不得在同一代码块内该 global 语句之前的位置中使用。</p>
<p>当前的实现虽然并未强制要求，但在 global 语句中列出的名称不得被定义为正式形参，不也得出现于 for 循环的控制目标、class 定义、函数定义、import 语句 或 变量标注之中。</p>
<p>举例如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span>():</span></span><br><span class="line">    a = <span class="number">0</span></span><br><span class="line">    </span><br><span class="line">f() <span class="comment"># 调用函数，对 a 赋值</span></span><br><span class="line">a <span class="comment"># a 是局部变量，不可访问</span></span><br></pre></td></tr></table></figure>


<pre><code>---------------------------------------------------------------------------

NameError                                 Traceback (most recent call last)

&lt;ipython-input-5-251a24e05273&gt; in &lt;module&gt;
      3 
      4 f() # 调用函数，对 a 赋值
----&gt; 5 a # a 是局部变量，不可访问


NameError: name &#39;a&#39; is not defined</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span>():</span></span><br><span class="line">    <span class="keyword">global</span> a <span class="comment"># 将 a 声明为全局变量</span></span><br><span class="line">    a = <span class="number">0</span></span><br><span class="line">f() <span class="comment"># 调用函数，对 a 赋值</span></span><br><span class="line">print(a) <span class="comment"># a 已经是全局变量</span></span><br><span class="line"><span class="keyword">del</span> a</span><br></pre></td></tr></table></figure>

<pre><code>0</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span>():</span></span><br><span class="line">    a = <span class="number">1</span> <span class="comment"># 同一代码块中，不可在 global 前使用</span></span><br><span class="line">    <span class="keyword">global</span> a <span class="comment"># 将 a 声明为全局变量</span></span><br><span class="line">    a = <span class="number">0</span></span><br></pre></td></tr></table></figure>


<pre><code>  File &quot;&lt;ipython-input-9-51bc7826eb42&gt;&quot;, line 3
    global a # 将 a 声明为全局变量
    ^
SyntaxError: name &#39;a&#39; is assigned to before global declaration</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="number">1</span> <span class="comment"># 与 global 不在一个代码块</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span>():</span></span><br><span class="line">    <span class="keyword">global</span> a, b <span class="comment"># 将 a, b 声明为全局变量</span></span><br><span class="line">    a = <span class="number">0</span> <span class="comment"># a 被重新赋值</span></span><br><span class="line">    b = <span class="number">1</span></span><br><span class="line">f() <span class="comment"># 调用函数，对 b 赋值，对 a 重新赋值</span></span><br><span class="line">print(a,b)</span><br><span class="line"><span class="keyword">del</span> a,b</span><br></pre></td></tr></table></figure>

<pre><code>0 1</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/10_statement/18_import-ab6e2344b614/</url>
    <content><![CDATA[<h2 id="import-导入语句"><a href="#import-导入语句" class="headerlink" title="import 导入语句"></a>import 导入语句</h2><p>import 语句用于从模块中导入子模块，类，函数等。语法大致有三种：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 第一种</span><br><span class="line">import module as name, module as name, ...</span><br><span class="line"></span><br><span class="line"># 第二种</span><br><span class="line"># import 之后可以置于一个元组</span><br><span class="line">from module import identifier as name, identifier as name, ...</span><br><span class="line"></span><br><span class="line"># 第三种</span><br><span class="line">from module import *</span><br></pre></td></tr></table></figure>

<p>模块 <code>module</code> 可以是高层级到低层级用属性表示法引用的模块，例如 <code>pandas.core.series</code>。</p>
<p><code>as</code> 及其后的别名 <code>name</code> 是可选的。</p>
<p>语句可以导入单个或多个对象，用逗号分隔实际是多个子句。</p>
<p>第一种导入方法，如果成功获取到模块，则可以通过以下方式之一在 import 语句所在命名空间中使用它：</p>
<ul>
<li>如果被导入模块是最高层级模块，模块名被绑定；</li>
<li>如果导入的模块不是最高层级的模块，则该模块的最高层级模块名被绑定，该模块必须使用完整限定名访问；</li>
<li>如果有 as，则 as 之后的别名被绑定，模块名不绑定。</li>
</ul>
<p>如果没有指定模块，引发 ModuleNotFoundError。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas</span><br><span class="line">pandas</span><br></pre></td></tr></table></figure>




<pre><code>&lt;module &#39;pandas&#39; from &#39;F:\\anaconda\\lib\\site-packages\\pandas\\__init__.py&#39;&gt;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">del</span> pandas</span><br><span class="line"><span class="keyword">import</span> pandas.core.series</span><br><span class="line">pandas, pandas.core, pandas.core.series</span><br></pre></td></tr></table></figure>




<pre><code>(&lt;module &#39;pandas&#39; from &#39;F:\\anaconda\\lib\\site-packages\\pandas\\__init__.py&#39;&gt;,
 &lt;module &#39;pandas.core&#39; from &#39;F:\\anaconda\\lib\\site-packages\\pandas\\core\\__init__.py&#39;&gt;,
 &lt;module &#39;pandas.core.series&#39; from &#39;F:\\anaconda\\lib\\site-packages\\pandas\\core\\series.py&#39;&gt;)</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">series <span class="comment"># 必须完成限定名访问</span></span><br></pre></td></tr></table></figure>


<pre><code>---------------------------------------------------------------------------

NameError                                 Traceback (most recent call last)

&lt;ipython-input-6-2859777d6f2b&gt; in &lt;module&gt;
----&gt; 1 series


NameError: name &#39;series&#39; is not defined</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">del</span> pandas</span><br><span class="line"><span class="keyword">import</span> pandas.core.series <span class="keyword">as</span> pds</span><br><span class="line">pds</span><br></pre></td></tr></table></figure>




<pre><code>&lt;module &#39;pandas.core.series&#39; from &#39;F:\\anaconda\\lib\\site-packages\\pandas\\core\\series.py&#39;&gt;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pandas <span class="comment"># 只能使用别名访问</span></span><br></pre></td></tr></table></figure>


<pre><code>---------------------------------------------------------------------------

NameError                                 Traceback (most recent call last)

&lt;ipython-input-8-609b6d5922fb&gt; in &lt;module&gt;
----&gt; 1 pandas


NameError: name &#39;pandas&#39; is not defined</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span>():</span></span><br><span class="line">    <span class="keyword">import</span> pandas <span class="comment"># 局部命名空间导入</span></span><br><span class="line">pandas <span class="comment"># 全局命名空间不能访问</span></span><br></pre></td></tr></table></figure>


<pre><code>---------------------------------------------------------------------------

NameError                                 Traceback (most recent call last)

&lt;ipython-input-10-0b76d1984901&gt; in &lt;module&gt;
      1 def f():
      2     import pandas # 局部命名空间导入
----&gt; 3 pandas


NameError: name &#39;pandas&#39; is not defined</code></pre>
<p>第二种导入方法，如果成功获取到模块，from 之后的模块名不会被绑定，对于 import 子句导入的属性或子模块，如果有 as 子句，则只能使用其指定的别名使用它，否则使用该属性或子模块的名称 identifier 使用它。</p>
<p>如果属性或子模块不存在，或不能导入，引发 ImportError。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pandas.core <span class="keyword">import</span> base</span><br><span class="line">base</span><br></pre></td></tr></table></figure>




<pre><code>&lt;module &#39;pandas.core.base&#39; from &#39;F:\\anaconda\\lib\\site-packages\\pandas\\core\\base.py&#39;&gt;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pandas.core <span class="comment"># 只导入了该模块下的子模块 base</span></span><br></pre></td></tr></table></figure>


<pre><code>---------------------------------------------------------------------------

NameError                                 Traceback (most recent call last)

&lt;ipython-input-2-37462de79a89&gt; in &lt;module&gt;
----&gt; 1 pandas.core


NameError: name &#39;pandas&#39; is not defined</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 导入多个可置于元组中</span></span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> (random <span class="keyword">as</span> r1,</span><br><span class="line">                    randint <span class="keyword">as</span> r2,)</span><br><span class="line">r1, r2</span><br></pre></td></tr></table></figure>




<pre><code>(&lt;function Random.random()&gt;,
 &lt;bound method Random.randint of &lt;random.Random object at 0x000001E531A14580&gt;&gt;)</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># pandas 下没有 base，导入错误</span></span><br><span class="line"><span class="keyword">from</span> pandas <span class="keyword">import</span> base </span><br></pre></td></tr></table></figure>


<pre><code>---------------------------------------------------------------------------

ImportError                               Traceback (most recent call last)

&lt;ipython-input-7-7903c4949085&gt; in &lt;module&gt;
----&gt; 1 from pandas import base


ImportError: cannot import name &#39;base&#39; from &#39;pandas&#39; (F:\anaconda\lib\site-packages\pandas\__init__.py)</code></pre>
<p>第三种导入方法，则在模块中定义的全部公有名称都将绑定到 import 语句所在的命名空间。</p>
<p>公有名称是由在模块的命名空间中检测一个名为 <code>__all__</code> 的变量来确定的；如果 <code>__all__</code> 没有被定义，则公有名称的集合将包含模块的命名空间中找到的所有不以下划线字符 <code>_</code> 打头的名称。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> *</span><br><span class="line">randint</span><br></pre></td></tr></table></figure>




<pre><code>&lt;bound method Random.randint of &lt;random.Random object at 0x0000025E1DCC8180&gt;&gt;</code></pre>
<p>当指定要导入哪个模块时，你不必指定模块的绝对名称。当一个模块或包被包含在另一个包之中时，可以在同一个最高层级包中进行相对导入，而不必提及包名称。</p>
<p>通过在 from 之后指定的模块或包中使用前缀点号，你可以在不指定确切名称的情况下指明在<strong>当前包</strong>层级结构中要上溯多少级。一个前缀点号表示是执行导入的模块所在的当前包，两个点号表示上溯一个包层级。三个点号表示上溯两级，依此类推。例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package&#x2F;</span><br><span class="line">    __init__.py</span><br><span class="line">    subpackage1&#x2F;</span><br><span class="line">        __init__.py</span><br><span class="line">        moduleX.py</span><br><span class="line">        moduleY.py</span><br><span class="line">    subpackage2&#x2F;</span><br><span class="line">        __init__.py</span><br><span class="line">        moduleZ.py</span><br><span class="line">    moduleA.py</span><br></pre></td></tr></table></figure>
<p>假设当前位置是 <code> subpackage1/moduleX.py</code>，则：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from .moduleY import spam</span><br><span class="line">from . import moduleY</span><br><span class="line">from ..subpackage1 import moduleY</span><br><span class="line">from ..subpackage2.moduleZ import eggs</span><br><span class="line">from ..moduleA import foo</span><br></pre></td></tr></table></figure>
<p>都是有效的。</p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/10_statement/17_assert-ed895b705780/</url>
    <content><![CDATA[<h2 id="assert-语句"><a href="#assert-语句" class="headerlink" title="assert 语句"></a>assert 语句</h2><p>assert 语句是在程序中插入调试性断言的简便方式。在表达式条件为 False 的时候触发异常。</p>
<p>简单形式为：<code>assert expression</code>。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">assert</span> <span class="number">1</span> + <span class="number">1</span> == <span class="number">2</span></span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">assert</span> <span class="number">1</span> + <span class="number">1</span> != <span class="number">2</span></span><br></pre></td></tr></table></figure>


<pre><code>---------------------------------------------------------------------------

AssertionError                            Traceback (most recent call last)

&lt;ipython-input-2-5cd89e6dd50b&gt; in &lt;module&gt;
----&gt; 1 assert 1 + 1 != 2


AssertionError: </code></pre>
<p>扩展形式为：<code>assert expression1, expression2</code>。expression2 通常是提示信息。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">assert</span> <span class="number">1</span> + <span class="number">1</span> != <span class="number">2</span>, <span class="string">&#x27;计算错误&#x27;</span></span><br></pre></td></tr></table></figure>


<pre><code>---------------------------------------------------------------------------

AssertionError                            Traceback (most recent call last)

&lt;ipython-input-7-3b85a53ff241&gt; in &lt;module&gt;
----&gt; 1 assert 1 + 1 != 2, &#39;计算错误&#39;


AssertionError: 计算错误</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">assert</span> i % <span class="number">2</span> == <span class="number">0</span>, <span class="string">f&#x27;<span class="subst">&#123;i&#125;</span>是奇数&#x27;</span></span><br><span class="line">        print(i)</span><br><span class="line">    <span class="keyword">except</span> AssertionError <span class="keyword">as</span> a:</span><br><span class="line">        print(a)</span><br></pre></td></tr></table></figure>

<pre><code>0
1是奇数
2
3是奇数
4</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/10_statement/16_with-6a18f128f90a/</url>
    <content><![CDATA[<h2 id="with-语句"><a href="#with-语句" class="headerlink" title="with 语句"></a>with 语句</h2><p>with 语句用于包装代码块的执行，代码块带有使用上下文管理器定义的函数或方法。语法如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">with expression as target, expression as target, ...:</span><br><span class="line">    suite</span><br></pre></td></tr></table></figure>

<p>带有一个表达式 expression 的 with 语句的执行过程如下:</p>
<ol>
<li>对上下文表达式求值以获得一个上下文管理器。</li>
<li>载入上下文管理器的 <code>__enter__()</code> 以便后续使用。</li>
<li>载入上下文管理器的 <code>__exit__()</code> 以便后续使用。</li>
<li>发起调用上下文管理器的 <code>__enter__()</code> 方法。</li>
<li>如果 with 语句中包含目标 target，来自 <code>__enter__()</code> 的返回值将被赋值给它。</li>
<li>执行语句体。</li>
<li>发起调用上下文管理器的 <code>__exit__()</code> 方法。</li>
</ol>
<p>with 语句会保证如果 <code>__enter__()</code> 方法返回时未发生错误，则 <code>__exit__()</code> 将总是被调用。因此，如果在对目标赋值期间发生错误，则会将其视为在语句体内部发生的错误。</p>
<p>如果语句体的退出是由异常导致的，则其类型、值和回溯信息将被作为参数传递给 <code>__exit__()</code>。否则的话，将提供三个 None 参数（相当于无异常地退出）。</p>
<p>如果语句体的退出是由异常导致的，并且来自 <code>__exit__()</code> 方法的返回值为真，则该异常会被抑制，并会继续执行 with 语句之后的语句。如果返回值为假，则该异常会被重新引发（<code>__exit__()</code> 方法不应该重新引发被传入的异常，这是调用者的责任）。</p>
<p>如果语句体由于异常以外的任何原因退出，则来自 <code>__exit__()</code> 的返回值会被忽略，并会在该类退出正常的发生位置继续执行。</p>
<p>以下代码:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">with EXPRESSION as TARGET:</span><br><span class="line">    SUITE</span><br></pre></td></tr></table></figure>

<p>在语义上等价于:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">manager &#x3D; (EXPRESSION)</span><br><span class="line">enter &#x3D; type(manager).__enter__</span><br><span class="line">exit &#x3D; type(manager).__exit__</span><br><span class="line">value &#x3D; enter(manager)</span><br><span class="line">hit_except &#x3D; False # False 表示正常执行</span><br><span class="line"></span><br><span class="line">try:</span><br><span class="line">    TARGET &#x3D; value</span><br><span class="line">    SUITE</span><br><span class="line">except:</span><br><span class="line">    hit_except &#x3D; True # 发生了异常</span><br><span class="line">    # 忽略或抑制异常，继续退出；或退出并引发异常</span><br><span class="line">    if not exit(manager, *sys.exc_info()):</span><br><span class="line">        raise</span><br><span class="line">finally:</span><br><span class="line">    if not hit_except: # 正常执行</span><br><span class="line">        # 正常退出</span><br><span class="line">        exit(manager, None, None, None)</span><br></pre></td></tr></table></figure>

<p>可见使用 with 语句，无论有没有发生异常，都会 “清理” 程序（保存和恢复各种全局状态，锁定和解锁资源，关闭打开的文件等等）。</p>
<p>有多个表达式，则会视作存在多个 with 语句嵌套来处理多个上下文管理器:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">with A() as a, B() as b:</span><br><span class="line">    SUITE</span><br><span class="line"></span><br><span class="line"># 在语义上等价于:</span><br><span class="line">with A() as a:</span><br><span class="line">    with B() as b:</span><br><span class="line">        SUITE</span><br></pre></td></tr></table></figure>

<p>with 语句常用来打开文件而不需要显式地关闭文件：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;../11_built-in_function/test.txt&#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    print(f.read())</span><br></pre></td></tr></table></figure>

<pre><code>xue.cn

自学是门手艺</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 相当于</span></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;../11_built-in_function/test.txt&#x27;</span>,</span><br><span class="line">         <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">print(f.read())</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure>

<pre><code>xue.cn

自学是门手艺</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/10_statement/15_raise-eecf40bbbddf/</url>
    <content><![CDATA[<h2 id="raise-语句"><a href="#raise-语句" class="headerlink" title="raise 语句"></a>raise 语句</h2><p>raise 语句用来引发异常。语法如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">raise expression from expression</span><br></pre></td></tr></table></figure>

<p>如果不带表达式，raise 会重新引发当前作用域内最后一个激活的异常。如果当前作用域内没有激活的异常，将会引发 RuntimeError 来提示错误。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">raise</span></span><br></pre></td></tr></table></figure>


<pre><code>---------------------------------------------------------------------------

RuntimeError                              Traceback (most recent call last)

&lt;ipython-input-1-9c9a2cba73bf&gt; in &lt;module&gt;
----&gt; 1 raise


RuntimeError: No active exception to reraise</code></pre>
<p>raise 会将第一个表达式求值为异常对象。它必须为 BaseException 的子类或实例。如果它是一个类，当需要时会通过不带参数地实例化该类来获得异常的实例。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">type</span>(ZeroDivisionError)</span><br></pre></td></tr></table></figure>




<pre><code>type</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">raise</span> ZeroDivisionError <span class="comment"># 无提示信息</span></span><br></pre></td></tr></table></figure>


<pre><code>---------------------------------------------------------------------------

ZeroDivisionError                         Traceback (most recent call last)

&lt;ipython-input-2-798b08d1683c&gt; in &lt;module&gt;
----&gt; 1 raise ZeroDivisionError # 无提示信息


ZeroDivisionError: </code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">raise</span> ZeroDivisionError(<span class="string">&#x27;分母不能为 0&#x27;</span>) <span class="comment"># 自定义提示信息</span></span><br></pre></td></tr></table></figure>


<pre><code>---------------------------------------------------------------------------

ZeroDivisionError                         Traceback (most recent call last)

&lt;ipython-input-17-950b4accf1f2&gt; in &lt;module&gt;
----&gt; 1 raise ZeroDivisionError(&#39;分母不能为 0&#39;) # 自定义提示信息


ZeroDivisionError: 分母不能为 0</code></pre>
<p>from 子句用于异常串连：如果有该子句，则第二个表达式必须为另一个异常类或实例，它将被关联到所引发的异常:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">raise</span> IndexError(<span class="string">&quot;索引错误&quot;</span>) <span class="keyword">from</span> NameError(<span class="string">&#x27;名称错误&#x27;</span>)</span><br></pre></td></tr></table></figure>


<pre><code>---------------------------------------------------------------------------

NameError                                 Traceback (most recent call last)

NameError: 名称错误


The above exception was the direct cause of the following exception:


IndexError                                Traceback (most recent call last)

&lt;ipython-input-18-124f83b49e6f&gt; in &lt;module&gt;
----&gt; 1 raise IndexError(&quot;索引错误&quot;) from NameError(&#39;名称错误&#39;)


IndexError: 索引错误</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    print(<span class="number">1</span> / <span class="number">0</span>)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    <span class="keyword">raise</span> RuntimeError(<span class="string">&quot;Something bad happened&quot;</span>) <span class="keyword">from</span> e</span><br></pre></td></tr></table></figure>


<pre><code>---------------------------------------------------------------------------

ZeroDivisionError                         Traceback (most recent call last)

&lt;ipython-input-13-83aaca0b7e7f&gt; in &lt;module&gt;
      1 try:
----&gt; 2     print(1 / 0)
      3 except Exception as e:


ZeroDivisionError: division by zero


The above exception was the direct cause of the following exception:


RuntimeError                              Traceback (most recent call last)

&lt;ipython-input-13-83aaca0b7e7f&gt; in &lt;module&gt;
      2     print(1 / 0)
      3 except Exception as e:
----&gt; 4     raise RuntimeError(&quot;Something bad happened&quot;) from e


RuntimeError: Something bad happened</code></pre>
<p>如果一个异常在异常处理器或 finally 中被引发，类似的机制会隐式地发挥作用：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    print(<span class="number">1</span> / <span class="number">0</span>)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    <span class="keyword">raise</span> RuntimeError(<span class="string">&quot;Something bad happened&quot;</span>)</span><br></pre></td></tr></table></figure>


<pre><code>---------------------------------------------------------------------------

ZeroDivisionError                         Traceback (most recent call last)

&lt;ipython-input-16-5576c5c08e42&gt; in &lt;module&gt;
      1 try:
----&gt; 2     print(1 / 0)
      3 except:


ZeroDivisionError: division by zero


During handling of the above exception, another exception occurred:


RuntimeError                              Traceback (most recent call last)

&lt;ipython-input-16-5576c5c08e42&gt; in &lt;module&gt;
      2     print(1 / 0)
      3 except:
----&gt; 4     raise RuntimeError(&quot;Something bad happened&quot;)


RuntimeError: Something bad happened</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    print(<span class="number">1</span> / <span class="number">0</span>)</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    <span class="keyword">raise</span> RuntimeError(<span class="string">&quot;Something bad happened&quot;</span>)</span><br></pre></td></tr></table></figure>


<pre><code>---------------------------------------------------------------------------

ZeroDivisionError                         Traceback (most recent call last)

&lt;ipython-input-15-8b172672db5a&gt; in &lt;module&gt;
      1 try:
----&gt; 2     print(1 / 0)
      3 finally:


ZeroDivisionError: division by zero


During handling of the above exception, another exception occurred:


RuntimeError                              Traceback (most recent call last)

&lt;ipython-input-15-8b172672db5a&gt; in &lt;module&gt;
      2     print(1 / 0)
      3 finally:
----&gt; 4     raise RuntimeError(&quot;Something bad happened&quot;)


RuntimeError: Something bad happened</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/10_statement/14_try-eb35d8e7157e/</url>
    <content><![CDATA[<h2 id="try-语句"><a href="#try-语句" class="headerlink" title="try 语句"></a>try 语句</h2><p>try 语句可为一组语句指定异常处理器和/或清理代码。语法结构有两种如下。</p>
<ul>
<li><p>有 try 和 except 子句（可多个），以及可选的 else 和 finally 子句：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">try:</span><br><span class="line">    suite</span><br><span class="line">except expression as identifier:</span><br><span class="line">    suite</span><br><span class="line">else: # 可选</span><br><span class="line">    suite</span><br><span class="line">finally: # 可选</span><br><span class="line">    suite</span><br></pre></td></tr></table></figure>
</li>
<li><p>只有 try 和 finally 子句：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">try:</span><br><span class="line">    suite</span><br><span class="line">finally:</span><br><span class="line">    suite</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>except 子句之后的表达式（通常为异常）<code>expression</code>，关键字 <code>as</code> 以及指定的别名 <code>identifier</code> 都是可选的。</p>
<p>当 try 子句中没有发生异常时，没有异常处理器会被执行。当 try 子句中发生异常时，将启动对异常处理器的搜索。此搜索会依次检查 except 子句，直至找到与该异常相匹配的子句。</p>
<p>except 子句可指定一个或多个异常，如果与发生的异常 “兼容” 则该子句将匹配该异常。</p>
<ul>
<li>指定的异常如果是发生的异常所属的类或基类，则该子句将匹配该异常；</li>
<li>指定的异常可以置于一个元组，其中包含有与发生的异常 “兼容” 的异常，该子句将匹配该异常。</li>
</ul>
<p>当一个异常完全未被处理时，解释器会终止程序的执行。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        print(<span class="number">3</span>/i)</span><br><span class="line">    <span class="keyword">except</span> (ZeroDivisionError, AssertionError) <span class="keyword">as</span> e:</span><br><span class="line">        print(e)</span><br></pre></td></tr></table></figure>

<pre><code>division by zero
3.0
1.5</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        print(<span class="number">3</span>/i)</span><br><span class="line">    <span class="keyword">except</span> ZeroDivisionError:</span><br><span class="line">        print(<span class="string">f&#x27;i=<span class="subst">&#123;i&#125;</span>引发异常&#x27;</span>)</span><br></pre></td></tr></table></figure>

<pre><code>i=0引发异常
3.0
1.5</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">    print(<span class="number">3</span>/i)</span><br></pre></td></tr></table></figure>


<pre><code>---------------------------------------------------------------------------

ZeroDivisionError                         Traceback (most recent call last)

&lt;ipython-input-5-ddbcfc1a1b1b&gt; in &lt;module&gt;
      1 for i in range(3):
----&gt; 2     print(3/i)


ZeroDivisionError: division by zero</code></pre>
<p>如果存在无表达式的 except 子句，它必须是最后一个，它将匹配任何异常：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="number">3</span>/<span class="number">0</span></span><br><span class="line"><span class="keyword">except</span> NameError <span class="keyword">as</span> n:</span><br><span class="line">    print(n)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>

<p>如果没有 except 子句与异常相匹配，则会在周边代码和发起调用栈上继续搜索异常处理器，除非存在一个finally 子句正好引发了另一个异常。新引发的异常将导致旧异常的丢失:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span>():</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">3</span>/<span class="number">0</span></span><br><span class="line">    <span class="keyword">except</span> NameError <span class="keyword">as</span> n:</span><br><span class="line">        print(n)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    f()</span><br><span class="line"><span class="keyword">except</span> ZeroDivisionError <span class="keyword">as</span> z:</span><br><span class="line">    print(z)</span><br></pre></td></tr></table></figure>

<pre><code>division by zero</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span>():</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">3</span>/<span class="number">0</span></span><br><span class="line">    <span class="keyword">except</span> NameError <span class="keyword">as</span> n:</span><br><span class="line">        print(n)</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        name1</span><br><span class="line">        </span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    f()</span><br><span class="line"><span class="keyword">except</span> ZeroDivisionError <span class="keyword">as</span> z: <span class="comment"># 该异常已丢失</span></span><br><span class="line">    print(z)</span><br><span class="line"><span class="keyword">except</span> NameError <span class="keyword">as</span> n:</span><br><span class="line">    print(n)</span><br></pre></td></tr></table></figure>

<pre><code>name &#39;name1&#39; is not defined</code></pre>
<p>使用 as 将匹配的异常赋值给一个别名，才能在 except 子句之后引用它，并且它将在 except 子句结束时被清除：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        print(<span class="number">3</span>/i)</span><br><span class="line">    <span class="keyword">except</span> (ZeroDivisionError, AssertionError) <span class="keyword">as</span> e:</span><br><span class="line">        print(e)</span><br><span class="line">print(e)</span><br></pre></td></tr></table></figure>

<pre><code>division by zero
3.0
1.5



---------------------------------------------------------------------------

NameError                                 Traceback (most recent call last)

&lt;ipython-input-16-a87e190baccb&gt; in &lt;module&gt;
      4     except (ZeroDivisionError, AssertionError) as e:
      5         print(e)
----&gt; 6 print(e)


NameError: name &#39;e&#39; is not defined</code></pre>
<p>如果控制流离开 try 子句体时没有引发异常，并且没有执行 return, continue 或 break 语句，可选的 else 子句将被执行:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    print(<span class="string">&#x27;开始&#x27;</span>)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    print(<span class="string">&#x27;捕获&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">&#x27;结束&#x27;</span>)</span><br></pre></td></tr></table></figure>

<pre><code>开始
结束</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:    </span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        print(<span class="string">&#x27;开始&#x27;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        print(<span class="string">&#x27;捕获&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">&#x27;结束&#x27;</span>)</span><br></pre></td></tr></table></figure>

<pre><code>开始</code></pre>
<p>如果存在 finally，它用来指定一个 “清理” 处理程序。try，except 或 else 子句中发生任何未处理的异常，会被临时保存。finally 始终被执行，被保存的异常，它会在 finally 子句执行后被重新引发：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    print(<span class="number">3</span>/<span class="number">0</span>)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    name2</span><br><span class="line"><span class="keyword">else</span>: <span class="comment"># 未被执行</span></span><br><span class="line">    <span class="built_in">range</span>(<span class="number">3</span>)[<span class="number">5</span>]</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    print(<span class="string">&#x27;end&#x27;</span>)</span><br></pre></td></tr></table></figure>

<pre><code>end



---------------------------------------------------------------------------

ZeroDivisionError                         Traceback (most recent call last)

&lt;ipython-input-24-7d6fe0d94043&gt; in &lt;module&gt;
      1 try:
----&gt; 2     print(3/0)
      3 except:


ZeroDivisionError: division by zero


During handling of the above exception, another exception occurred:


NameError                                 Traceback (most recent call last)

&lt;ipython-input-24-7d6fe0d94043&gt; in &lt;module&gt;
      2     print(3/0)
      3 except:
----&gt; 4     name2
      5 else: # 未被执行
      6     range(3)[5]


NameError: name &#39;name2&#39; is not defined</code></pre>
<p>如果 finally 子句引发了另一个异常，被保存的异常会被设为新异常的上下文。如果 finally 子句执行了 return, break 或 continue 语句，则被保存的异常会被丢弃:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:    </span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        print(<span class="string">&#x27;开始&#x27;</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        print(<span class="string">&#x27;捕获&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">range</span>(<span class="number">3</span>)[<span class="number">5</span>]</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        print(<span class="number">3</span>/<span class="number">0</span>)</span><br></pre></td></tr></table></figure>

<pre><code>开始



---------------------------------------------------------------------------

IndexError                                Traceback (most recent call last)

&lt;ipython-input-25-1f272bfbd667&gt; in &lt;module&gt;
      6     else:
----&gt; 7         range(3)[5]
      8     finally:


IndexError: range object index out of range


During handling of the above exception, another exception occurred:


ZeroDivisionError                         Traceback (most recent call last)

&lt;ipython-input-25-1f272bfbd667&gt; in &lt;module&gt;
      7         range(3)[5]
      8     finally:
----&gt; 9         print(3/0)


ZeroDivisionError: division by zero</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:    </span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        print(<span class="string">&#x27;开始&#x27;</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        print(<span class="string">&#x27;捕获&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">range</span>(<span class="number">3</span>)[<span class="number">5</span>]</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure>

<pre><code>开始</code></pre>
<p>当 return, break 或 continue 语句在 finally 语句之前被执行时，finally 子语句也会 ‘在离开时’ 被执行:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:    </span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        print(<span class="string">&#x27;开始&#x27;</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        print(<span class="string">&#x27;捕获&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        print(<span class="string">&#x27;结束&#x27;</span>)</span><br></pre></td></tr></table></figure>

<pre><code>开始
结束</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span>():</span>    </span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;开始&#x27;</span></span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        print(<span class="string">&#x27;结束&#x27;</span>)</span><br><span class="line">f() <span class="comment"># 先执行 finally 再离开函数调用</span></span><br></pre></td></tr></table></figure>

<pre><code>结束





&#39;开始&#39;</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/10_statement/13_class-2c687901564b/</url>
    <content><![CDATA[<h2 id="class-定义类"><a href="#class-定义类" class="headerlink" title="class 定义类"></a>class 定义类</h2><p>class 语句用来定义类，语法如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@assignment_expression</span><br><span class="line">class classname(argument_list):</span><br><span class="line">    suite</span><br></pre></td></tr></table></figure>

<p>其中的装饰器 <code>@assignment_expression</code>，基类参数及圆括号 <code>(argument_list)</code> 是可选项。</p>
<p>类定义是一条可执行语句。它执行时会将类名称 classname 绑定到一个新建的类对象。</p>
<p>没有继承基类参数 argument_list 的类默认继承自基类 object。下列是一个必选参数定义的类，默认继承自 object:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建一个类名为 A 的类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span> <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">A.__bases__ <span class="comment"># 查看基类</span></span><br></pre></td></tr></table></figure>




<pre><code>(object,)</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建一个类 B 继承自 int 和 A</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>(<span class="params"><span class="built_in">int</span>, A</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">B.__bases__</span><br></pre></td></tr></table></figure>




<pre><code>(int, __main__.A)</code></pre>
<p>类也可以被装饰，就像装饰函数一样，装饰器表达式的求值规则与函数装饰器相同（详见 <a href="https://xue.cn/hub/reader?bookId=64&path=xue_python_kp/10_statement/10_def.ipynb">def 定义函数</a>）。结果随后会被绑定到类名称。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@str</span></span><br><span class="line"><span class="meta">@type</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span>:</span> <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">C</span><br></pre></td></tr></table></figure>




<pre><code>&quot;&lt;class &#39;type&#39;&gt;&quot;</code></pre>
<p>大致相当于：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span>:</span> <span class="keyword">pass</span></span><br><span class="line">C = <span class="built_in">str</span>(<span class="built_in">type</span>(C))</span><br><span class="line">C</span><br></pre></td></tr></table></figure>




<pre><code>&quot;&lt;class &#39;type&#39;&gt;&quot;</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/10_statement/12_yield-89555138e53d/</url>
    <content><![CDATA[<h2 id="yield-语句"><a href="#yield-语句" class="headerlink" title="yield 语句"></a>yield 语句</h2><p>yield 语句，仅在定义 <a href="https://xue.cn/hub/reader?bookId=64&path=xue_python_kp/12_function/09_generator.ipynb">生成器函数</a> 时使用，并且仅被用于生成器函数的函数体内部。语法如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yield from expression</span><br></pre></td></tr></table></figure>

<p><code>from</code> 和表达式 <code>expression</code> 是可选的，没有表达式默认是 None。</p>
<p>yield 语句整体也是一个可被求值的表达式语句，初始值也是默认 None，可通过 send 方法设置 yield 表达式的值。</p>
<p>在函数定义中使用 yield 使得该定义创建的是生成器函数而非普通函数。当一个生成器函数被调用的时候，它返回一个生成器迭代器。</p>
<p>yield from 相当于将一个可迭代对象 “拆包”，然后逐项被生成器迭代时使用。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建一个简单的生成器函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span>():</span></span><br><span class="line">    <span class="keyword">yield</span></span><br><span class="line">    </span><br><span class="line">print(f)</span><br><span class="line"><span class="comment"># 调用它获得一个生成器</span></span><br><span class="line">print(f())</span><br><span class="line"><span class="comment"># next() 函数迭代生成器获取表达式的值</span></span><br><span class="line">print(<span class="built_in">next</span>(f()))</span><br></pre></td></tr></table></figure>

<pre><code>&lt;function f at 0x00000157028A9598&gt;
&lt;generator object f at 0x000001570286CB88&gt;
None</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 获取并设置 yield 语句的值</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span>(<span class="params">n</span>):</span></span><br><span class="line">    x = <span class="keyword">yield</span> n</span><br><span class="line">    print(x)</span><br><span class="line">    </span><br><span class="line">g = f(<span class="number">1</span>)</span><br><span class="line">print(<span class="built_in">next</span>(g))</span><br><span class="line"><span class="comment"># 迭代结束，打印出 yield 语句 x 的初始值为 None</span></span><br><span class="line">print(<span class="built_in">next</span>(g,<span class="string">&#x27;end&#x27;</span>))</span><br></pre></td></tr></table></figure>

<pre><code>1
None
end</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 可通过 send 方法设置当前 yield 表达式的值</span></span><br><span class="line"><span class="comment"># 并返回生成器产生的下一个值</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span>(<span class="params">n</span>):</span></span><br><span class="line">    x = <span class="keyword">yield</span> n</span><br><span class="line">    print(<span class="string">f&#x27;yield 表达式的值为:<span class="subst">&#123;x&#125;</span>&#x27;</span>)</span><br><span class="line">    n += <span class="number">1</span></span><br><span class="line">    <span class="keyword">yield</span> n</span><br><span class="line">    </span><br><span class="line">g = f(<span class="number">0</span>)</span><br><span class="line"><span class="built_in">next</span>(g), g.send(<span class="number">10</span>)</span><br></pre></td></tr></table></figure>

<pre><code>yield 表达式的值为:10





(0, 1)</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span>(<span class="params">*args</span>):</span></span><br><span class="line">    <span class="keyword">yield</span> <span class="keyword">from</span> args</span><br><span class="line"></span><br><span class="line">g = f(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line"><span class="built_in">next</span>(g),<span class="built_in">next</span>(g),<span class="built_in">next</span>(g),<span class="built_in">next</span>(g,<span class="string">&#x27;end&#x27;</span>)</span><br></pre></td></tr></table></figure>




<pre><code>(1, 2, 3, &#39;end&#39;)</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span>(<span class="params">arg</span>):</span></span><br><span class="line">    <span class="keyword">yield</span> <span class="keyword">from</span> arg</span><br><span class="line"></span><br><span class="line">g = f(<span class="string">&#x27;123&#x27;</span>)</span><br><span class="line"><span class="built_in">next</span>(g),<span class="built_in">next</span>(g),<span class="built_in">next</span>(g),<span class="built_in">next</span>(g,<span class="string">&#x27;end&#x27;</span>)</span><br></pre></td></tr></table></figure>




<pre><code>(&#39;1&#39;, &#39;2&#39;, &#39;3&#39;, &#39;end&#39;)</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/10_statement/11_return-fe6dac1d73cd/</url>
    <content><![CDATA[<h2 id="return-语句"><a href="#return-语句" class="headerlink" title="return 语句"></a>return 语句</h2><p>return 在语法上只会出现于函数定义所嵌套的代码，不会出现于类定义所嵌套的代码。</p>
<p>如果提供了表达式，它将被求值，否则以 None 替代（类似省略 return 语句结果）。</p>
<p>return 会离开当前函数调用，并以表达式的值 (或 None) 作为返回值。</p>
<p>当 return 将控制流传出一个带有 finally 子句的 try 语句时，该 finally 子句会先被执行然后再真正离开该函数。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f2</span>():</span></span><br><span class="line">    x =<span class="number">1</span></span><br><span class="line">print(f2())</span><br></pre></td></tr></table></figure>

<pre><code>None</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span>():</span></span><br><span class="line">    x = <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">print(f1())</span><br></pre></td></tr></table></figure>

<pre><code>None</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># return 结束函数调用</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="keyword">return</span> x**<span class="number">2</span></span><br><span class="line">    print(<span class="string">&#x27;end&#x27;</span>) <span class="comment"># retrun 结束函数调用，不会被执行</span></span><br><span class="line">f(<span class="number">2</span>)</span><br></pre></td></tr></table></figure>




<pre><code>4</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># finally 总是被执行再结束函数调用</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">3</span>/x</span><br><span class="line">    <span class="keyword">except</span> ZeroDivisionError <span class="keyword">as</span> e:</span><br><span class="line">        print(e)</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        <span class="keyword">return</span> x, x**<span class="number">2</span></span><br><span class="line">f(<span class="number">0</span>),f(<span class="number">2</span>)</span><br></pre></td></tr></table></figure>

<pre><code>division by zero





((0, 0), (2, 4))</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/10_statement/10_def-e791a5a7d27f/</url>
    <content><![CDATA[<h2 id="def-定义函数"><a href="#def-定义函数" class="headerlink" title="def 定义函数"></a>def 定义函数</h2><p>def 语句是定义函数的语句。语法如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@assignment_expression</span><br><span class="line">def funcname(parameter_list) -&gt; expression:</span><br><span class="line">    suite</span><br></pre></td></tr></table></figure>

<p>其中的装饰器 <code>@assignment_expression</code>，形参 <code>parameter_list</code> 和标注 <code>-&gt; expression</code> 是可选项。</p>
<p>函数定义是一条可执行语句。它执行时会将函数名称 <code>funcname</code> 绑定到一个函数对象（函数可执行代码的包装器）。</p>
<p>例如，用必选项定义一个什么也不做的函数如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span>():</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">f</span><br></pre></td></tr></table></figure>




<pre><code>&lt;function __main__.f()&gt;</code></pre>
<p>一个函数定义可以被一个或多个装饰器表达式所包装。</p>
<p>装饰器必须是可调用对象，它会以该函数对象作为唯一参数被发起调用。</p>
<p>其返回值将被绑定到函数名称。多个装饰器会以嵌套方式被应用。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@str</span></span><br><span class="line"><span class="meta">@type</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span>():</span><span class="keyword">pass</span></span><br><span class="line">f</span><br></pre></td></tr></table></figure>




<pre><code>&quot;&lt;class &#39;function&#39;&gt;&quot;</code></pre>
<p>大致相当于：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span>():</span><span class="keyword">pass</span></span><br><span class="line">f = <span class="built_in">str</span>(<span class="built_in">type</span>(f))</span><br><span class="line">f</span><br></pre></td></tr></table></figure>




<pre><code>&quot;&lt;class &#39;function&#39;&gt;&quot;</code></pre>
<p>函数形参 <code>parameter_list</code> 详见 <a href="https://xue.cn/hub/reader?bookId=64&path=xue_python_kp/12_function/03_formal_parameter.ipynb">函数形参</a>。</p>
<p>函数标注 <code>-&gt; expression</code> 可以是任何表达式，标注对提高代码的可读性非常有用，看标注而不需要看代码上下文就大概知道代码的使用。例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 标注函数的参数和返回值类型</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span>(<span class="params">arg:<span class="built_in">int</span></span>) -&gt; list:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">list</span>(<span class="built_in">str</span>(arg))</span><br><span class="line">f(<span class="number">123</span>)</span><br></pre></td></tr></table></figure>




<pre><code>[&#39;1&#39;, &#39;2&#39;, &#39;3&#39;]</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/10_statement/09_pass-3eb78c2897cf/</url>
    <content><![CDATA[<h2 id="pass-语句"><a href="#pass-语句" class="headerlink" title="pass 语句"></a>pass 语句</h2><p>pass 是一个空操作 —— 当它被执行时，什么都不发生。</p>
<p>它适合当语法上需要一条语句但并不需要执行任何代码时用来临时占位，例如:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">pass</span></span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 什么也不做的函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span>():</span><span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 没有任何自定义属性的类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span><span class="keyword">pass</span></span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/10_statement/08_del-c6238c7d7891/</url>
    <content><![CDATA[<h2 id="del-语句"><a href="#del-语句" class="headerlink" title="del 语句"></a>del 语句</h2><p>del 语句用来删除名称的绑定，删除对象的属性引用 或 删除可抽取、切片的可变容器的元素。</p>
<p>删除名称绑定：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将值 (1,2) 绑定到名称 a, b, c</span></span><br><span class="line">a = b = c = (<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line"><span class="comment"># 删除名称 b, c</span></span><br><span class="line"><span class="keyword">del</span> b,c</span><br><span class="line">a</span><br></pre></td></tr></table></figure>




<pre><code>(1, 2)</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">b <span class="comment"># 名称 b 已被删除</span></span><br></pre></td></tr></table></figure>


<pre><code>---------------------------------------------------------------------------

NameError                                 Traceback (most recent call last)

&lt;ipython-input-27-9185c0ba25e7&gt; in &lt;module&gt;
----&gt; 1 b # 名称 b 已被删除


NameError: name &#39;b&#39; is not defined</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line">    x = y = <span class="number">1</span></span><br><span class="line">A.x, A.y</span><br></pre></td></tr></table></figure>




<pre><code>(1, 1)</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">del</span> A.y</span><br><span class="line">print(A.x)</span><br><span class="line">A.y <span class="comment"># 属性名称 y 已被删除，不可引用值 1</span></span><br></pre></td></tr></table></figure>

<pre><code>1



---------------------------------------------------------------------------

AttributeError                            Traceback (most recent call last)

&lt;ipython-input-29-8ed1b3e470b1&gt; in &lt;module&gt;
      1 del A.y
      2 print(A.x)
----&gt; 3 A.y # 属性名称 y 已被删除，不可引用值 1


AttributeError: type object &#39;A&#39; has no attribute &#39;y&#39;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 删除字典元素</span></span><br><span class="line">d = &#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">1</span>,<span class="string">&#x27;b&#x27;</span>:<span class="number">2</span>&#125;</span><br><span class="line"><span class="keyword">del</span> d[<span class="string">&#x27;a&#x27;</span>] <span class="comment"># 删除键为 &#x27;a&#x27; 的元素</span></span><br><span class="line">print(d)</span><br><span class="line">d[<span class="string">&#x27;a&#x27;</span>]</span><br></pre></td></tr></table></figure>

<pre><code>&#123;&#39;b&#39;: 2&#125;



---------------------------------------------------------------------------

KeyError                                  Traceback (most recent call last)

&lt;ipython-input-30-5d91a843f82e&gt; in &lt;module&gt;
      3 del d[&#39;a&#39;] # 删除键为 &#39;a&#39; 的元素
      4 print(d)
----&gt; 5 d[&#39;a&#39;]


KeyError: &#39;a&#39;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 删除列表切片</span></span><br><span class="line">_list = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"><span class="keyword">del</span> _list[::<span class="number">2</span>]</span><br><span class="line">_list</span><br></pre></td></tr></table></figure>




<pre><code>[2, 4]</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 删除列表切片</span></span><br><span class="line">_list = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"><span class="keyword">del</span> _list[:] <span class="comment"># 相当于 _list[:] = []</span></span><br><span class="line">_list</span><br></pre></td></tr></table></figure>




<pre><code>[]</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/10_statement/07_continue-9050d38cfc63/</url>
    <content><![CDATA[<h2 id="continue-语句"><a href="#continue-语句" class="headerlink" title="continue 语句"></a>continue 语句</h2><p>continue 在语法上只会出现于 for 或 while 循环所嵌套的代码中。</p>
<p>它会继续执行最近的外层循环的下一个轮次，或者在没有下一轮次时转往  else 子句执行。</p>
<p>当 continue 将控制流传出一个带有 finally 子句的 try 语句时，该  finally 子句会先被执行然后再真正开始循环的下一个轮次。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">        <span class="keyword">if</span> j == <span class="number">1</span>:</span><br><span class="line">            print(<span class="string">f&#x27;i=<span class="subst">&#123;i&#125;</span>,j=<span class="subst">&#123;j&#125;</span>&#x27;</span>)</span><br><span class="line">        <span class="keyword">continue</span></span><br></pre></td></tr></table></figure>

<pre><code>i=0,j=1
i=1,j=1
i=2,j=1</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">        <span class="keyword">if</span> j == <span class="number">2</span>:</span><br><span class="line">            print(<span class="string">f&#x27;i=<span class="subst">&#123;i&#125;</span>,j=<span class="subst">&#123;j&#125;</span>&#x27;</span>)</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">else</span>: <span class="comment"># 属于内层循环，每次内层循环结束都执行</span></span><br><span class="line">        print(<span class="string">&#x27;end&#x27;</span>)</span><br></pre></td></tr></table></figure>

<pre><code>i=0,j=2
end
i=1,j=2
end
i=2,j=2
end</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">        <span class="keyword">if</span> j == <span class="number">2</span>:</span><br><span class="line">            print(<span class="string">f&#x27;i=<span class="subst">&#123;i&#125;</span>,j=<span class="subst">&#123;j&#125;</span>&#x27;</span>)</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line"><span class="keyword">else</span>: <span class="comment"># 属于外层循环，外层循环结束才执行</span></span><br><span class="line">    print(<span class="string">&#x27;end&#x27;</span>)</span><br></pre></td></tr></table></figure>

<pre><code>i=0,j=2
i=1,j=2
i=2,j=2
end</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 引发异常直接跳过 continue</span></span><br><span class="line"><span class="comment"># 无异常则继续执行完 finally 才继续下一次循环</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        print(<span class="string">f&#x27;3/i=<span class="subst">&#123;<span class="number">3</span>/i&#125;</span>&#x27;</span>)</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">except</span> ZeroDivisionError <span class="keyword">as</span> e:</span><br><span class="line">        print(e)</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        print(<span class="string">f&#x27;i=<span class="subst">&#123;i&#125;</span>&#x27;</span>)</span><br><span class="line">    print(i) <span class="comment"># 无异常时被跳过</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">&#x27;end&#x27;</span>)</span><br></pre></td></tr></table></figure>

<pre><code>division by zero
i=0
0
3/i=3.0
i=1
3/i=1.5
i=2
end</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/10_statement/06_break-5805f154286d/</url>
    <content><![CDATA[<h2 id="break-语句"><a href="#break-语句" class="headerlink" title="break 语句"></a>break 语句</h2><p>break 在语法上只会出现于 for 或 while 循环所嵌套的代码。</p>
<p>它会终结最近的外层循环，如果循环有可选的 else 子句，也会跳过该子句。</p>
<p>如果一个 for 循环被 break 所终结，该循环的控制变量会保持其当前值。</p>
<p>当 break 将控制流传出一个带有 finally 子句的 try 语句时，该  finally 子句会先被执行然后再真正离开该循环。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">        <span class="keyword">if</span> i**<span class="number">2</span> == j:</span><br><span class="line">            print(<span class="string">f&#x27;i=<span class="subst">&#123;i&#125;</span>,j=<span class="subst">&#123;j&#125;</span>&#x27;</span>)</span><br><span class="line">print(<span class="string">f&#x27;i=<span class="subst">&#123;i&#125;</span>,j=<span class="subst">&#123;j&#125;</span>&#x27;</span>)            </span><br></pre></td></tr></table></figure>

<pre><code>i=0,j=0
i=1,j=1
i=2,j=4
i=5,j=5</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">        <span class="keyword">if</span> i**<span class="number">2</span> == j:</span><br><span class="line">            print(<span class="string">f&#x27;i=<span class="subst">&#123;i&#125;</span>,j=<span class="subst">&#123;j&#125;</span>&#x27;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">print(<span class="string">f&#x27;i=<span class="subst">&#123;i&#125;</span>,j=<span class="subst">&#123;j&#125;</span>&#x27;</span>)  </span><br></pre></td></tr></table></figure>

<pre><code>i=0,j=0
i=5,j=0</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">        <span class="keyword">if</span> i**<span class="number">2</span> == j:</span><br><span class="line">            print(<span class="string">f&#x27;i=<span class="subst">&#123;i&#125;</span>,j=<span class="subst">&#123;j&#125;</span>&#x27;</span>)</span><br><span class="line">        <span class="keyword">break</span> <span class="comment"># 控制内层循环</span></span><br><span class="line">    <span class="keyword">else</span>: <span class="comment"># 不会执行</span></span><br><span class="line">        print(<span class="string">f&#x27;i=<span class="subst">&#123;i&#125;</span>,j=<span class="subst">&#123;j&#125;</span>&#x27;</span>)  </span><br></pre></td></tr></table></figure>

<pre><code>i=0,j=0</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">        <span class="keyword">if</span> i**<span class="number">2</span> == j:</span><br><span class="line">            print(<span class="string">f&#x27;i=<span class="subst">&#123;i&#125;</span>,j=<span class="subst">&#123;j&#125;</span>&#x27;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="keyword">else</span>: <span class="comment"># 属于外层循环，会执行</span></span><br><span class="line">    print(<span class="string">f&#x27;i=<span class="subst">&#123;i&#125;</span>,j=<span class="subst">&#123;j&#125;</span>&#x27;</span>)  </span><br></pre></td></tr></table></figure>

<pre><code>i=0,j=0
i=5,j=0</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        print(<span class="string">f&#x27;3/i=<span class="subst">&#123;<span class="number">3</span>/i&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="keyword">except</span> ZeroDivisionError <span class="keyword">as</span> e:</span><br><span class="line">        print(e)</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        print(<span class="string">f&#x27;i=<span class="subst">&#123;i&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure>

<pre><code>division by zero
i=0
3/i=3.0
i=1
3/i=1.5
i=2
3/i=1.0
i=3
3/i=0.75
i=4</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 引发异常直接跳过 break</span></span><br><span class="line"><span class="comment"># 无异常则继续执行完 finally 才终止循环</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        print(<span class="string">f&#x27;3/i=<span class="subst">&#123;<span class="number">3</span>/i&#125;</span>&#x27;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">except</span> ZeroDivisionError <span class="keyword">as</span> e:</span><br><span class="line">        print(e)</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        print(<span class="string">f&#x27;i=<span class="subst">&#123;i&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure>

<pre><code>division by zero
i=0
3/i=3.0
i=1</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/10_statement/05_while-09f06b11db11/</url>
    <content><![CDATA[<h2 id="while-循环"><a href="#while-循环" class="headerlink" title="while 循环"></a>while 循环</h2><p>while 语句用于在表达式保持为真的情况下重复地执行。语法如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">while assignment_expression:</span><br><span class="line">    suite</span><br><span class="line">else: # 可选子句</span><br><span class="line">    suite</span><br></pre></td></tr></table></figure>

<p>对于简单语句可以写为一行，但不推荐。</p>
<p>这将重复地检验表达式，如果其值为真就执行其下的代码；表达式值为假则如果 else 子句存在就会被执行并终止循环。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> i &lt; <span class="number">3</span>: print(i); i += <span class="number">1</span></span><br></pre></td></tr></table></figure>

<pre><code>0
1
2</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> i &lt; <span class="number">3</span>: </span><br><span class="line">    print(i)</span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line"><span class="keyword">else</span>: <span class="comment"># i 为 3 时执行</span></span><br><span class="line">    print(<span class="string">f&#x27;i=<span class="subst">&#123;i&#125;</span>&#x27;</span>)</span><br><span class="line">    print(<span class="string">&#x27;end&#x27;</span>)</span><br></pre></td></tr></table></figure>

<pre><code>0
1
2
i=3
end</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/10_statement/04_for-97e3e9a1331f/</url>
    <content><![CDATA[<h2 id="for-循环"><a href="#for-循环" class="headerlink" title="for 循环"></a>for 循环</h2><p>for 语句用于对可迭代对象中的元素进行迭代。语法如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">for target_list in expression_list:</span><br><span class="line">    suite</span><br><span class="line">else: # 可选子句</span><br><span class="line">    suite</span><br></pre></td></tr></table></figure>

<p>对于简单语句可以写为一行，但不推荐。</p>
<p>表达式 expression_list 被求值一次，它应该产生一个可迭代对象。系统将为 expression_list 的结果创建一个迭代器，然后每一项会按标准赋值规则（详见见 <a href="https://xue.cn/hub/reader?bookId=64&path=xue_python_kp/10_statement/02_assignment.ipynb">赋值语句</a>）被依次赋值给 target_list，每赋值一次执行一次语句下的代码。</p>
<p>当所有项被耗尽时，else 子句如果存在将会被执行，并终止循环。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):print(i)</span><br></pre></td></tr></table></figure>

<pre><code>0
1
2</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">zip</span>(<span class="string">&#x27;123&#x27;</span>,<span class="string">&#x27;abc&#x27;</span>):</span><br><span class="line">    print(i)</span><br></pre></td></tr></table></figure>

<pre><code>(&#39;1&#39;, &#39;a&#39;)
(&#39;2&#39;, &#39;b&#39;)
(&#39;3&#39;, &#39;c&#39;)</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i,j <span class="keyword">in</span> <span class="built_in">zip</span>(<span class="string">&#x27;123&#x27;</span>,<span class="string">&#x27;abc&#x27;</span>):</span><br><span class="line">    print(<span class="string">f&#x27;<span class="subst">&#123;i&#125;</span>-&gt;<span class="subst">&#123;j&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">&#x27;end&#x27;</span>)</span><br></pre></td></tr></table></figure>

<pre><code>1-&gt;a
2-&gt;b
3-&gt;c
end</code></pre>
<p>for 循环会对 target_list 中的变量进行赋值。这将覆盖之前对这些变量的所有赋值，包括在 for 循环体中的赋值。</p>
<p>变量在循环结束时不会被删除，但如果序列为空，则它们根本不会被循环所赋值。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">i = <span class="string">&#x27;a&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">    print(i)</span><br><span class="line">print(i)</span><br></pre></td></tr></table></figure>

<pre><code>0
1
2
2</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>):</span><br><span class="line">    print(i)</span><br><span class="line">print(i)</span><br></pre></td></tr></table></figure>

<pre><code>2</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/10_statement/03_if-1b6634cd9967/</url>
    <content><![CDATA[<h2 id="if-条件判断"><a href="#if-条件判断" class="headerlink" title="if 条件判断"></a>if 条件判断</h2><p>if 语句用于有条件的执行。语法如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if assignment_expression:</span><br><span class="line">    suite</span><br><span class="line">elif assignment_expression: # 可选子句</span><br><span class="line">    suite</span><br><span class="line">... # 可以多个 elif</span><br><span class="line">else: #可选子句</span><br><span class="line">    suite</span><br></pre></td></tr></table></figure>
<p>对于简单语句，可以写为一行，但不推荐。</p>
<p>它通过对表达式逐个求值直至找到一个真值。然后执行该 if 语句或子句体下的代码，从而 if 语句的其他部分不会被执行或求值。</p>
<p>如果所有表达式均为假值，else 子句体如果存在就会被执行。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">    <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">0</span>:print(i)</span><br></pre></td></tr></table></figure>

<pre><code>0
2
4</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">    <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">        print(i)</span><br></pre></td></tr></table></figure>

<pre><code>0
2
4</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">i,j = <span class="number">0</span>,<span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> i &lt; <span class="number">0</span>: </span><br><span class="line">    print(i) <span class="comment"># 不执行</span></span><br><span class="line"><span class="keyword">elif</span> i == <span class="number">0</span>:</span><br><span class="line">    print(i) <span class="comment"># 执行，下面的则不再执行</span></span><br><span class="line"><span class="keyword">elif</span> j == <span class="number">1</span>:</span><br><span class="line">    print(j)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(i,j)</span><br></pre></td></tr></table></figure>

<pre><code>0</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">i,j = <span class="number">0</span>,<span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> i &lt; <span class="number">0</span>: </span><br><span class="line">    print(i) <span class="comment"># 不执行</span></span><br><span class="line"><span class="keyword">elif</span> i == <span class="number">1</span>:</span><br><span class="line">    print(i) <span class="comment"># 不执行</span></span><br><span class="line"><span class="keyword">elif</span> j == <span class="number">0</span>:</span><br><span class="line">    print(j) <span class="comment"># 不执行</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(i,j) <span class="comment"># 执行</span></span><br></pre></td></tr></table></figure>

<pre><code>0 1</code></pre>
<p>多个 if 语句连用，则分别判断，互不影响：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">i,j = <span class="number">0</span>,<span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> i &lt; <span class="number">0</span>: </span><br><span class="line">    print(i) <span class="comment"># 不执行</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(i,j) <span class="comment"># 执行</span></span><br><span class="line"><span class="keyword">if</span> i == <span class="number">0</span>:</span><br><span class="line">    print(i) <span class="comment"># 执行</span></span><br><span class="line"><span class="keyword">if</span> j == <span class="number">1</span>:</span><br><span class="line">    print(j) <span class="comment"># 执行</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(i,j) <span class="comment"># 不执行</span></span><br></pre></td></tr></table></figure>

<pre><code>0 1
0
1</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/10_statement/02_assignment-7fce53d8768e/</url>
    <content><![CDATA[<h2 id="赋值语句"><a href="#赋值语句" class="headerlink" title="赋值语句"></a>赋值语句</h2><p>赋值语句用于将名称绑定或重新绑定到特定值，以及修改属性或可变对象的成员项。</p>
<p>赋值语句使用赋值操作符和增强赋值操作符。详见 <a href="https://xue.cn/hub/reader?bookId=64&path=xue_python_kp/09_operator/01_operator_summary.ipynb">操作符概述</a>。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将值 1 绑定到变量 a</span></span><br><span class="line">a = <span class="number">1</span></span><br><span class="line">print(<span class="string">&#x27;a =&#x27;</span>, a)</span><br><span class="line"><span class="comment"># 变量 a 重新绑定值 &#x27;a&#x27;</span></span><br><span class="line">a = <span class="string">&#x27;a&#x27;</span></span><br><span class="line">print(<span class="string">&#x27;a =&#x27;</span>, a)</span><br></pre></td></tr></table></figure>

<pre><code>a = 1
a = a</code></pre>
<p>同时进行多个值多个名称绑定，值和名称数量要相等：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 一个名称时，右边为元组</span></span><br><span class="line">a = <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span></span><br><span class="line">a</span><br></pre></td></tr></table></figure>




<pre><code>(1, 2, 3, 4)</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 多个名称</span></span><br><span class="line">a,b,c,d = <span class="number">1</span>,[<span class="number">2</span>,<span class="number">3</span>],<span class="number">4</span>,<span class="number">5</span></span><br><span class="line"><span class="string">f&#x27;a=<span class="subst">&#123;a&#125;</span>,b=<span class="subst">&#123;b&#125;</span>,c=<span class="subst">&#123;c&#125;</span>,d=<span class="subst">&#123;d&#125;</span>&#x27;</span></span><br></pre></td></tr></table></figure>




<pre><code>&#39;a=1,b=[2, 3],c=4,d=5&#39;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 可迭代对象拆包，则需要更多名称</span></span><br><span class="line">a,b,c,d,e = <span class="number">1</span>,*[<span class="number">2</span>,<span class="number">3</span>],<span class="number">4</span>,<span class="number">5</span></span><br><span class="line"><span class="string">f&#x27;a=<span class="subst">&#123;a&#125;</span>,b=<span class="subst">&#123;b&#125;</span>,c=<span class="subst">&#123;c&#125;</span>,d=<span class="subst">&#123;d&#125;</span>,e=<span class="subst">&#123;e&#125;</span>&#x27;</span></span><br></pre></td></tr></table></figure>




<pre><code>&#39;a=1,b=2,c=3,d=4,e=5&#39;</code></pre>
<p>赋值一般左右两边一一对应 “同时” 赋值，但赋值给变量的多项集时可能不一样（例如列表的某一项）：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = [<span class="number">0</span>,<span class="number">1</span>]</span><br><span class="line">i = <span class="number">0</span></span><br><span class="line">i, x[i] = <span class="number">1</span>, <span class="number">2</span> </span><br><span class="line"><span class="string">f&#x27;x=<span class="subst">&#123;x&#125;</span>,i=<span class="subst">&#123;i&#125;</span>&#x27;</span></span><br></pre></td></tr></table></figure>




<pre><code>&#39;x=[0, 2],i=1&#39;</code></pre>
<p>修改属性或可变对象的成员项：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 新增属性</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line">    x = <span class="number">1</span></span><br><span class="line">a = A()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 右边的 a.x 是访问类属性</span></span><br><span class="line"><span class="comment"># 左边的 a.x 是新增实例属性, 值为类属性值 + 1</span></span><br><span class="line">a.x = a.x + <span class="number">1</span> </span><br><span class="line">a.x, A.x</span><br></pre></td></tr></table></figure>




<pre><code>(2, 1)</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 修改列表项</span></span><br><span class="line">a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">a[<span class="number">0</span>] = [<span class="number">0</span>,<span class="number">1</span>]</span><br><span class="line">a</span><br></pre></td></tr></table></figure>




<pre><code>[[0, 1], 2, 3]</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 修改或新增字典项</span></span><br><span class="line">d = &#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">1</span>&#125;</span><br><span class="line">d[<span class="string">&#x27;a&#x27;</span>] = <span class="number">10</span></span><br><span class="line">d[<span class="string">&#x27;b&#x27;</span>] = <span class="number">2</span></span><br><span class="line">d</span><br></pre></td></tr></table></figure>




<pre><code>&#123;&#39;a&#39;: 10, &#39;b&#39;: 2&#125;</code></pre>
<p>赋值操作符 <code>=</code>，可以进行连续赋值，绑定多个名称，但赋值语句非表达式语句，不能被求值，因此不能被括号包围或分隔：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = b = c = <span class="number">1</span></span><br><span class="line">a,b,c</span><br></pre></td></tr></table></figure>




<pre><code>(1, 1, 1)</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = (b = c = <span class="number">1</span>)</span><br></pre></td></tr></table></figure>


<pre><code>  File &quot;&lt;ipython-input-40-5dae496e91ce&gt;&quot;, line 1
    a = (b = c = 1)
           ^
SyntaxError: invalid syntax</code></pre>
<p>不可变容器的增强赋值操作，是重新绑定对象；可变容器的增强赋值操作是增、删、改成员项：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = <span class="string">&#x27;123&#x27;</span></span><br><span class="line">print(<span class="built_in">id</span>(s),s)</span><br><span class="line"><span class="comment"># 因为不可变，相当于新建了一个字符串 &#x27;1234&#x27; 重新绑定 s</span></span><br><span class="line">s += <span class="string">&#x27;4&#x27;</span> </span><br><span class="line">print(<span class="built_in">id</span>(s),s)</span><br></pre></td></tr></table></figure>

<pre><code>2371959191728 123
2371959179632 1234</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">l = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">print(<span class="built_in">id</span>(l),l)</span><br><span class="line"><span class="comment"># 可变，相当于在原列表 l 中增加元素 4</span></span><br><span class="line">l += [<span class="number">4</span>]</span><br><span class="line">print(<span class="built_in">id</span>(l),l)</span><br></pre></td></tr></table></figure>

<pre><code>2371958877312 [1, 2, 3]
2371958877312 [1, 2, 3, 4]</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">l = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">print(<span class="built_in">id</span>(l),l)</span><br><span class="line">l *= <span class="number">0</span> <span class="comment"># 清空列表</span></span><br><span class="line">print(<span class="built_in">id</span>(l),l)</span><br></pre></td></tr></table></figure>

<pre><code>2371958290048 [1, 2, 3]
2371958290048 []</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;</span><br><span class="line">print(<span class="built_in">id</span>(s),s)</span><br><span class="line">s |= &#123;<span class="number">0</span>&#125;</span><br><span class="line">print(<span class="built_in">id</span>(s),s)</span><br></pre></td></tr></table></figure>

<pre><code>2371958464800 &#123;1, 2, 3&#125;
2371958464800 &#123;0, 1, 2, 3&#125;</code></pre>
<p>带标注的赋值语句。单个语句中将变量或属性标注和可选的赋值语句合为一体。标注对提高代码的可读性非常有用，看标注而不需要看代码上下文就大概知道代码的使用。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 标注函数参数的类型及默认值</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span>(<span class="params">n:<span class="built_in">int</span>=<span class="number">1</span></span>):</span></span><br><span class="line">    print(<span class="string">&#x27;Hi&#x27;</span>*n)</span><br><span class="line">f(<span class="number">2</span>)</span><br></pre></td></tr></table></figure>

<pre><code>HiHi</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name: <span class="built_in">str</span> = <span class="string">&#x27;小张&#x27;</span></span><br><span class="line">name</span><br></pre></td></tr></table></figure>




<pre><code>&#39;小张&#39;</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/10_statement/01_expression-6a6334ec8d3d/</url>
    <content><![CDATA[<h2 id="表达式语句"><a href="#表达式语句" class="headerlink" title="表达式语句"></a>表达式语句</h2><p>语句分为简单语句和复合语句，简单语句由一个单独的逻辑行构成。多条简单语句可以存在于同一行内并以分号分隔。表达式语句属于简单语句。</p>
<p>表达式语句用于计算和写入值（大多是在交互模式下），或者调用一个过程 (过程就是不返回有意义结果的函数。在 Python 中，过程的返回值为 None)。</p>
<p>表达式语句会对指定的表达式进行求值。</p>
<p>在交互模式下，它会通过内置的 repr() 函数转换为一个字符串，该结果字符串将以单独一行的形式写入标准输出（例外情况是如果结果为 None，则该过程调用不产生任何输出）。</p>
<p>以下均是一个表达式语句（可包含多个表达式）：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;python&#x27;</span></span><br></pre></td></tr></table></figure>




<pre><code>&#39;python&#39;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure>




<pre><code>1</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">(a := <span class="number">1</span>) <span class="comment"># 3.8 新功能，赋值表达式</span></span><br></pre></td></tr></table></figure>




<pre><code>1</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a</span><br></pre></td></tr></table></figure>




<pre><code>1</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;a\n&#x27;</span>,<span class="string">f&#x27;b<span class="subst">&#123;<span class="number">1</span>&#125;</span>&#x27;</span> <span class="comment"># 两个表达式</span></span><br></pre></td></tr></table></figure>




<pre><code>(&#39;a\n&#39;, &#39;b1&#39;)</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> + <span class="number">2</span> * <span class="number">3</span> / <span class="number">5</span>, <span class="literal">True</span> <span class="keyword">and</span> <span class="literal">False</span> <span class="comment"># 两个表达式</span></span><br></pre></td></tr></table></figure>




<pre><code>(2.2, False)</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">lambda</span> x: x**<span class="number">2</span></span><br></pre></td></tr></table></figure>




<pre><code>&lt;function __main__.&lt;lambda&gt;(x)&gt;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">0</span> <span class="keyword">if</span> <span class="number">2</span>&gt;<span class="number">3</span> <span class="keyword">else</span> (<span class="number">1</span> <span class="keyword">if</span> <span class="number">5</span>&lt;<span class="number">6</span> <span class="keyword">else</span> <span class="number">2</span>)</span><br></pre></td></tr></table></figure>




<pre><code>1</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>] + [<span class="number">4</span>]</span><br></pre></td></tr></table></figure>




<pre><code>[1, 2, 3, 4]</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[].append(<span class="number">1</span>) <span class="comment"># 返回 None</span></span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[].append(<span class="number">1</span>) <span class="keyword">is</span> <span class="literal">None</span></span><br></pre></td></tr></table></figure>




<pre><code>True</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 返回值为 None，输出并不是表达式的值</span></span><br><span class="line">print(<span class="string">&#x27;非表达式的值&#x27;</span>)  <span class="keyword">is</span> <span class="literal">None</span></span><br></pre></td></tr></table></figure>

<pre><code>非表达式的值





True</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sum</span>(i <span class="keyword">for</span> i <span class="keyword">in</span> [<span class="number">3</span>,<span class="number">2</span>,<span class="number">5</span>])</span><br></pre></td></tr></table></figure>




<pre><code>10</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">list</span>(<span class="built_in">zip</span>(<span class="string">&#x27;abc&#x27;</span>,[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]))[<span class="number">1</span>:]</span><br></pre></td></tr></table></figure>




<pre><code>[(&#39;b&#39;, 2), (&#39;c&#39;, 3)]</code></pre>
<p>用分号分隔多个表达式语句，输出最后一个的值。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>; print(<span class="string">&#x27;非表达式的值&#x27;</span>); <span class="number">1</span> + <span class="number">2</span> * <span class="number">3</span> / <span class="number">5</span>, <span class="literal">True</span> <span class="keyword">and</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure>

<pre><code>非表达式的值





(2.2, False)</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/09_operator/04_special-c20014a80160/</url>
    <content><![CDATA[<h2 id="操作符特殊用法"><a href="#操作符特殊用法" class="headerlink" title="操作符特殊用法"></a>操作符特殊用法</h2><p>容器类的内置类型，通常对操作符定义了自己特有的的操作行为。</p>
<ul>
<li><code>*</code> 操作符，除了数字运算的 乘，还可以用来将可迭代对象拆包。拆包之后置于元组，列表，集合中，或作为参数传递给函数：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;*&#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>:<span class="number">2</span>&#125;&#125;</span><br></pre></td></tr></table></figure>




<pre><code>&#123;&#39;a&#39;, &#39;b&#39;&#125;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(*<span class="string">&#x27;abc&#x27;</span>, sep=<span class="string">&#x27;-&#x27;</span>)</span><br></pre></td></tr></table></figure>

<pre><code>a-b-c</code></pre>
<ul>
<li><code>+</code>，<code>+=</code>，<code>*</code>，<code>*=</code> 可用来对序列类型进行拼接，重复拼接或拼接并赋值（range 类型除外）。由于列表是可变对象，<code>+=</code> 和 <code>*=</code> 在操作列表时，是用来更新列表。具体详见 <a href="https://xue.cn/hub/reader?bookId=64&path=xue_python_kp/03_list/04_list_operator.ipynb">列表操作符</a>。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;d-&#x27;</span> + <span class="string">&#x27;abc&#x27;</span>*<span class="number">2</span></span><br></pre></td></tr></table></figure>




<pre><code>&#39;d-abcabc&#39;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = [<span class="number">1</span>]*<span class="number">2</span></span><br><span class="line">a += [<span class="number">2</span>]</span><br><span class="line">a</span><br></pre></td></tr></table></figure>




<pre><code>[1, 1, 2]</code></pre>
<ul>
<li><p>操作符 <code>**</code>，<code>|</code> 和 <code>|=</code> 可以用来操作字典。具体详见 <a href="https://xue.cn/hub/reader?bookId=64&path=xue_python_kp/07_dictionary/14_operator.ipynb">字典操作符</a>。</p>
</li>
<li><p>操作符 <code>&gt;</code>，<code>&lt;</code>，<code>&gt;=</code>，<code>&lt;=</code> 可对集合进行子集或超集比较；<code>|</code>，<code>&amp;</code>，<code>-</code>，<code>^</code> 可求集合的并集，交集，差集，对称差集；<code>|=</code>，<code>&amp;=</code>，<code>-=</code>，<code>^=</code> 可用来更新集合。具体详见集合知识点。</p>
</li>
<li><p>操作符 <code>%</code> 可以用来格式化字符串，而在<strong>格式化迷你语言</strong>中，定义了非常多的有特殊意义操作符。具体详见 <a href="https://xue.cn/hub/reader?bookId=64&path=xue_python_kp/02_string/25_str.format.ipynb">str.format 格式化</a> 和 <a href="https://xue.cn/hub/reader?bookId=64&path=xue_python_kp/02_string/28_string_operators.ipynb">字符串操作符</a>。</p>
</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/09_operator/03_precedence-a98e83593b53/</url>
    <content><![CDATA[<h2 id="操作符优先级"><a href="#操作符优先级" class="headerlink" title="操作符优先级"></a>操作符优先级</h2><p>Python 表达式语句中操作符的优先顺序从最低优先级（最后绑定）到最高优先级（最先绑定）如下：</p>
<ul>
<li><code>:=</code> 赋值表达式</li>
<li><code>lambda</code> lambda 表达式</li>
<li><code>if -- else</code> 条件表达式</li>
<li><code>or</code> 布尔逻辑或 OR</li>
<li><code>and</code> 布尔逻辑与 AND</li>
<li><code>not x</code> 布尔逻辑非 NOT</li>
<li><code>in</code>, <code>not in</code>, <code>is</code>, <code>is not</code>, <code>&lt;</code>, <code>&lt;=</code>, <code>&gt;</code>, <code>&gt;=</code>, <code>!=</code>, <code>==</code> 比较运算</li>
<li><code>|</code> 按位或 OR</li>
<li><code>^</code> 按位异或 XOR</li>
<li><code>&amp;</code> 按位与 AND</li>
<li><code>&lt;&lt;</code>, <code>&gt;&gt;</code> 移位</li>
<li><code>+</code>, <code>-</code> 加和减</li>
<li><code>*</code>, <code>/</code>, <code>//</code>, <code>%</code> 乘，矩阵乘，除，整除，取余</li>
<li><code>+x</code>, <code>-x</code>, <code>~x</code> 正，负，按位非 NOT</li>
<li><code>**</code> 乘方（右边的先绑定）</li>
<li><code>await x</code>  await 表达式</li>
<li><code>x[index]</code>, <code>x[index:index]</code>, <code>x(arguments...)</code>, <code>x.attribute</code>  抽取，切片，调用，属性引用</li>
<li><code>(expressions...)</code>, <code>[expressions...]</code>, <code>&#123;key: value...&#125;</code>, <code>&#123;expressions...&#125;</code> 绑定或加圆括号的表达式，列表显示，字典显示，集合显示</li>
</ul>
<p>一个表达式语句中可以有多个上述操作符，最终返回一个值（包括返回值为 None 的函数调用）。</p>
<p>而赋值语句中的赋值操作符 <code>=</code>，<code>+=</code>，<code>-=</code>，<code>*=</code>，<code>/=</code>，<code>//=</code>，<code>%=</code>，<code>&amp;=</code>，<code>|=</code>，<code>^=</code>，<code>&gt;&gt;=</code>，<code>&lt;&lt;=</code>，<code>**=</code>，在操作符中优先级最低，它右边表达式的值计算完之后，才最后绑定到左边的名称。</p>
<p>举例如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">value = <span class="built_in">int</span>(<span class="string">&#x27;2&#x27;</span>)**(<span class="number">-1</span>) == <span class="number">2</span>/(<span class="number">3</span>+<span class="number">1</span>)</span><br><span class="line">value</span><br></pre></td></tr></table></figure>




<pre><code>True</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">int</span>(<span class="string">&#x27;2&#x27;</span>)**(<span class="number">-1</span>) == <span class="number">2</span>/(<span class="number">3</span>+<span class="number">1</span>)</span><br></pre></td></tr></table></figure>




<pre><code>True</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[].append(<span class="number">1</span>) <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">and</span> <span class="keyword">not</span> <span class="number">1</span> - <span class="number">1</span></span><br></pre></td></tr></table></figure>




<pre><code>True</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">value = <span class="number">1</span> <span class="keyword">if</span> <span class="string">&#x27;a&#x27;</span> <span class="keyword">in</span> <span class="string">&#x27;a b c&#x27;</span>.split()[<span class="number">1</span>:<span class="number">3</span>] <span class="keyword">else</span> <span class="number">2</span></span><br><span class="line">value</span><br></pre></td></tr></table></figure>




<pre><code>2</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">value **= <span class="number">3</span> + <span class="number">2</span> * <span class="number">1</span></span><br><span class="line">value</span><br></pre></td></tr></table></figure>




<pre><code>32</code></pre>
<p>操作符 <code>=</code> 可以用来连续赋值：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = b = c = <span class="number">1</span></span><br><span class="line">a,b,c</span><br></pre></td></tr></table></figure>




<pre><code>(1, 1, 1)</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/09_operator/02_compare-d3f8d643e3b8/</url>
    <content><![CDATA[<h2 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h2><p>比较运算符有 <code>&lt;</code>，<code>&gt;</code>，<code>&lt;=</code>，<code>&gt;=</code>，<code>==</code>，<code>!=</code>，<code>in</code>，<code>not in</code>，<code>is</code>，<code>is not</code>。</p>
<p>运算符 <code>&lt;</code>，<code>&gt;</code>，<code>&gt;=</code>，<code>&lt;=</code>，<code>==</code> 和 <code>!=</code> 比较两个对象的值，<code>&lt;</code>，<code>&gt;</code>，<code>&gt;=</code> 和 <code>&lt;=</code> 称为次序比较；<code>==</code> 和 <code>!=</code> 称为一致性比较。</p>
<p>由于所有类型都是 object 的（直接或间接）子类型，它们都从 object 继承了默认的比较行为，一致性比较是默认的比较行为，因此可在任何对象之间进行。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="literal">False</span> == <span class="number">0</span> != <span class="string">&#x27;a&#x27;</span> != <span class="built_in">int</span> != &#123;&#125;</span><br></pre></td></tr></table></figure>




<pre><code>True</code></pre>
<p>对象的值在 Python 中是一个相当抽象的概念：</p>
<ul>
<li>对象的值并没有一个规范的访问方法；</li>
<li>对象的值并不要求具有特定的构建方式，例如由其全部数据属性组成等；</li>
<li>比较运算符实现了一个特定的对象的值概念，可以认为正是通过实现对象比较，间接地定义了对象的值。</li>
</ul>
<p>主要内置类型的比较行为：</p>
<p>1，数字类型内部可跨类型比较，按数学（算法）规则正确进行比较且不会有精度损失。但复数不支持次序比较。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="literal">True</span> == <span class="number">1</span> == <span class="number">1.0</span></span><br></pre></td></tr></table></figure>




<pre><code>True</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">3.14</span> &lt; <span class="number">3</span></span><br></pre></td></tr></table></figure>




<pre><code>False</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">0</span> &gt;= <span class="number">0j</span></span><br></pre></td></tr></table></figure>


<pre><code>---------------------------------------------------------------------------

TypeError                                 Traceback (most recent call last)

&lt;ipython-input-6-df80cad0b1a4&gt; in &lt;module&gt;
----&gt; 1 0 &gt;= 0j


TypeError: &#39;&gt;=&#39; not supported between instances of &#39;int&#39; and &#39;complex&#39;</code></pre>
<p>2，字符串使用其字符的 Unicode 码位数字值依次进行比较，某个字符比较出大小即停止。如果一个字符串包含另一个，较短的排前面。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ord</span>(<span class="string">&#x27;a&#x27;</span>), <span class="built_in">ord</span>(<span class="string">&#x27;b&#x27;</span>), <span class="built_in">ord</span>(<span class="string">&#x27;c&#x27;</span>)</span><br></pre></td></tr></table></figure>




<pre><code>(97, 98, 99)</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;a&#x27;</span> == <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;a&#x27;</span> == <span class="string">&#x27;c&#x27;</span></span><br></pre></td></tr></table></figure>




<pre><code>(True, False)</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;ab&#x27;</span> &lt; <span class="string">&#x27;ac&#x27;</span></span><br></pre></td></tr></table></figure>




<pre><code>True</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;abc&#x27;</span> &gt; <span class="string">&#x27;ab&#x27;</span></span><br></pre></td></tr></table></figure>




<pre><code>True</code></pre>
<p>3，序列（列表，元组，range 实例）只能进行类型内部比较。跨类型一致性比较结果将是不相等，跨类型次序比较将引发 TypeError。range 不支持次序比较。</p>
<p>比较时按顺序对相应元素进行逐个比较，某个元素比较出大小即停止。如果一个序列元素包含另一个，较短的排前面。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">(<span class="number">1</span>,<span class="number">2</span>) == [<span class="number">1</span>,<span class="number">2</span>]</span><br></pre></td></tr></table></figure>




<pre><code>False</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[<span class="number">1</span>,<span class="number">2</span>] == [<span class="number">1</span>,<span class="number">2</span>]</span><br></pre></td></tr></table></figure>




<pre><code>True</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[<span class="number">1</span>,<span class="number">4</span>] &gt; [<span class="number">1</span>,<span class="number">3</span>,<span class="number">7</span>]</span><br></pre></td></tr></table></figure>




<pre><code>True</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[<span class="number">1</span>,<span class="number">4</span>] &lt; [<span class="number">1</span>,<span class="number">4</span>,<span class="number">7</span>]</span><br></pre></td></tr></table></figure>




<pre><code>True</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">(<span class="number">1</span>,<span class="number">2</span>) &gt;= [<span class="number">1</span>,<span class="number">2</span>]</span><br></pre></td></tr></table></figure>


<pre><code>---------------------------------------------------------------------------

TypeError                                 Traceback (most recent call last)

&lt;ipython-input-22-cb12354bca8e&gt; in &lt;module&gt;
----&gt; 1 (1,2) &gt;= [1,2]


TypeError: &#39;&gt;=&#39; not supported between instances of &#39;tuple&#39; and &#39;list&#39;</code></pre>
<p>4， 两个字典若要相等，必须当且仅当它们具有相同的 键值对。次序比较将引发 TypeError。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;<span class="number">1</span>:<span class="number">1</span>&#125; == &#123;<span class="literal">True</span>:<span class="number">1.0</span>&#125;</span><br></pre></td></tr></table></figure>




<pre><code>True</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;<span class="number">1</span>:<span class="number">1</span>&#125; &lt;= &#123;<span class="literal">True</span>:<span class="number">1.0</span>&#125;</span><br></pre></td></tr></table></figure>


<pre><code>---------------------------------------------------------------------------

TypeError                                 Traceback (most recent call last)

&lt;ipython-input-24-a13e7674e543&gt; in &lt;module&gt;
----&gt; 1 &#123;1:1&#125; &lt;= &#123;True:1.0&#125;


TypeError: &#39;&lt;=&#39; not supported between instances of &#39;dict&#39; and &#39;dict&#39;</code></pre>
<p>5，集合 (set 或 frozenset 的实例) 可进行类型内部和跨类型的比较。</p>
<p>它们将比较运算符定义为子集和超集检测，具体详见集合知识点。这类关系没有定义完全排序。相应地，集合不适宜作为依赖于完全排序的函数的参数。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;<span class="number">1</span>,<span class="number">2</span>&#125; == <span class="built_in">frozenset</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>])</span><br></pre></td></tr></table></figure>




<pre><code>True</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;<span class="number">3</span>,<span class="number">1</span>&#125; &gt; &#123;<span class="number">1</span>,<span class="number">2</span>&#125;</span><br></pre></td></tr></table></figure>




<pre><code>False</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sorted</span>([&#123;<span class="number">3</span>&#125;,&#123;<span class="number">1</span>&#125;,&#123;<span class="number">2</span>&#125;])</span><br></pre></td></tr></table></figure>




<pre><code>[&#123;3&#125;, &#123;1&#125;, &#123;2&#125;]</code></pre>
<p>运算符 <code>in</code> 和 <code>not in</code> 用于成员检测。如果 x 是 s 的成员则 <code>x in s</code> 求值为 True，否则为 False。<code>x not in s</code> 返回 <code>x in s</code> 取反后的值。</p>
<p>所有内置序列和集合类型以及字典都支持此运算，对于字典来说 in 检测其是否有给定的键。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;a&#x27;</span> <span class="keyword">in</span> <span class="string">&#x27;abc&#x27;</span></span><br></pre></td></tr></table></figure>




<pre><code>True</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;abc&#x27;</span> <span class="keyword">in</span> <span class="string">&#x27;abbc&#x27;</span></span><br></pre></td></tr></table></figure>




<pre><code>False</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> <span class="keyword">in</span> [<span class="number">1</span>,<span class="number">2</span>]</span><br></pre></td></tr></table></figure>




<pre><code>True</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[<span class="number">1</span>] <span class="keyword">in</span> [<span class="number">1</span>,<span class="number">2</span>]</span><br></pre></td></tr></table></figure>




<pre><code>False</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;a&#x27;</span> <span class="keyword">in</span> &#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">1</span>&#125;</span><br></pre></td></tr></table></figure>




<pre><code>True</code></pre>
<p>运算符 <code>is</code> 和 <code>is not</code> 用于检测对象的标识号：当且仅当 x 和 y 是同一对象时 <code>x is y</code> 为真。一个对象的标识号可使用 id() 函数来确定。<code>x is not y</code> 会产生相反的逻辑值。 </p>
<p>默认的一致性比较是基于对象的标识号。<code>x is y</code> 就意味着 <code>x == y</code>。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="number">1</span></span><br><span class="line">b = <span class="number">1</span></span><br><span class="line">a <span class="keyword">is</span> b, a == b</span><br></pre></td></tr></table></figure>




<pre><code>(True, True)</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = (<span class="number">1</span>,<span class="number">3</span>)</span><br><span class="line">b = (<span class="number">1</span>,<span class="number">3</span>)</span><br><span class="line">a <span class="keyword">is</span> b, a == b</span><br></pre></td></tr></table></figure>




<pre><code>(False, True)</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/09_operator/01_operator_summary-b1897c05dd00/</url>
    <content><![CDATA[<h2 id="操作符概述"><a href="#操作符概述" class="headerlink" title="操作符概述"></a>操作符概述</h2><p>操作符可分为<strong>运算符</strong>（operators）和<strong>分隔符</strong>（delimiters）。</p>
<p>运算符有：</p>
<ul>
<li>数字运算符</li>
</ul>
<p><code>+</code>，<code>-</code>，<code>*</code>，<code>**</code>，<code>/</code>，<code>//</code>，<code>%</code>，详细用法见 <a href="https://xue.cn/hub/reader?bookId=64&path=xue_python_kp/01_numeric/06_number_operations.ipynb">数字运算</a>。</p>
<ul>
<li>整数按位运算符</li>
</ul>
<p><code>&lt;&lt;</code>，<code>&gt;&gt;</code>，<code>&amp;</code>，<code>|</code>，<code>^</code>，<code>~</code>，详细用法见 <a href="https://xue.cn/hub/reader?bookId=64&path=xue_python_kp/01_numeric/02_int.ipynb">整数及其位运算</a>。</p>
<ul>
<li>比较运算符</li>
</ul>
<p><code>&lt;</code>，<code>&gt;</code>，<code>&lt;=</code>，<code>&gt;=</code>，<code>==</code>，<code>!=</code>，<code>in</code>，<code>not in</code>，<code>is</code>，<code>is not</code>，详细用法见 <a href="https://xue.cn/hub/reader?bookId=64&path=xue_python_kp/09_operator/02_compare.ipynb">比较运算符</a>。</p>
<ul>
<li>布尔运算符</li>
</ul>
<p><code>and</code>，<code>or</code>，<code>not</code>，详细用法见 <a href="https://xue.cn/hub/reader?bookId=64&path=xue_python_kp/01_numeric/03_bool.ipynb">布尔值及布尔运算</a>。</p>
<ul>
<li>赋值运算符 <code>:=</code></li>
</ul>
<p>Python 3.8 新增，将右边的表达式赋值给左边的变量， 同时返回表达式的值。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">(a := <span class="number">1</span>+<span class="number">1</span>)</span><br></pre></td></tr></table></figure>




<pre><code>2</code></pre>
<p>运算符还分为一元运算符和二元运算符，一元运算符运算一个对象（操作数），二元运算符运算两个。一元运算符有 <code>+</code>（正数），<code>-</code>（负数），<code>~</code>（整数按位取反）和 <code>not</code>（布尔运算 非）。<code>if ... else ...</code> 有时称作三元运算符。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">-1</span>, +<span class="number">2</span>, ~<span class="number">3</span>, <span class="keyword">not</span> <span class="number">4</span></span><br></pre></td></tr></table></figure>




<pre><code>(-1, 2, -4, False)</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> + <span class="number">2</span> - <span class="number">3</span> * <span class="number">4</span> <span class="comment"># 二元运算符加、减和乘</span></span><br></pre></td></tr></table></figure>




<pre><code>-9</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="literal">True</span> <span class="keyword">if</span> <span class="number">2</span> &gt; <span class="number">3</span> <span class="keyword">else</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure>




<pre><code>False</code></pre>
<p>分隔符有：</p>
<p><code>(</code>，<code>)</code>，<code>[</code>，<code>]</code>，<code>&#123;</code>，<code>&#125;</code>，<code>,</code>，<code>:</code>，<code>.</code>，<code>;</code>，<code>=</code>，<code>+=</code>，<code>-=</code>，<code>*=</code>，<code>/=</code>，<code>//=</code>，<code>%=</code>，<code>&amp;=</code>，<code>|=</code>，<code>^=</code>，<code>&gt;&gt;=</code>，<code>&lt;&lt;=</code>，<code>**=</code></p>
<p>部分分隔符用法举例：</p>
<p>圆括号绑定表达式，或元组显示，方括号用来对序列进行索引、切片取值或列表显示，花括号字典显示或集合显示</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">3</span> * (<span class="number">1</span> + <span class="number">2</span>) * (<span class="number">1</span>,)</span><br></pre></td></tr></table></figure>




<pre><code>(1, 1, 1, 1, 1, 1, 1, 1, 1)</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>][<span class="number">1</span>:<span class="number">3</span>]</span><br></pre></td></tr></table></figure>




<pre><code>[2, 3]</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">&#x27;列表&#x27;</span>:[], <span class="string">&#x27;集合&#x27;</span>:&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;&#125;</span><br></pre></td></tr></table></figure>




<pre><code>&#123;&#39;列表&#39;: [], &#39;集合&#39;: &#123;1, 2, 3&#125;&#125;</code></pre>
<p>上述分隔符 <code>=</code> 为赋值操作符，之后的操作符为增强赋值操作符，将名称绑定（或重新绑定）到特定值，以及修改属性或可变对象的成员项。 详见 <a href="https://xue.cn/hub/reader?bookId=64&path=xue_python_kp/10_statement/02_assignment.ipynb">赋值语句</a>。</p>
<p>假设将值 value1 绑定到名称 name，<code>name = value1</code>，则 <code>name += value2</code> 的结果相当于 <code>name = name + value2</code>，其他操作符类似。</p>
<p>举例如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="number">1</span></span><br><span class="line">a += <span class="number">1</span></span><br><span class="line">a</span><br></pre></td></tr></table></figure>




<pre><code>2</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">b = <span class="number">17</span></span><br><span class="line">b |= <span class="number">5</span></span><br><span class="line">b</span><br></pre></td></tr></table></figure>




<pre><code>21</code></pre>
<p>除了运算符和分隔符，还有 <code>&#39;</code>，<code>&quot;</code>，<code>\</code>，<code>#</code> 字符，作为其他字符的组成部分时具有特殊含义，或是对词法分析器有重要意义。</p>
<p><code>&#39;</code>，<code>&quot;</code>，<code>\</code>，详见 <a href="https://xue.cn/hub/reader?bookId=64&path=xue_python_kp/02_string/01_string.ipynb">字符串概述</a> 和 <a href="https://xue.cn/hub/reader?bookId=64&path=xue_python_kp/02_string/03_escape_character.ipynb">转义字符</a>。</p>
<p><code>#</code> 通常用来注释代码，但不能包含在字符串中，注释在语法分析中会被忽略：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 这是注释</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string"># hello world</span></span><br><span class="line"><span class="string"># hello python</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>




<pre><code>&#39;\n# hello world\n# hello python\n&#39;</code></pre>
<p>操作符除了常规的用法，操作不同的数据类型，相应的数据类型可能定义了特定的操作规则；在特定的应用场景，也有着特殊的用法。详见 <a href="https://xue.cn/hub/reader?bookId=64&path=xue_python_kp/09_operator/04_special.ipynb">操作符特殊用法</a></p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/08_other_types/03_other_types-64cb73ee4853/</url>
    <content><![CDATA[<h2 id="其他内置类型"><a href="#其他内置类型" class="headerlink" title="其他内置类型"></a>其他内置类型</h2><p>内置类型除了数字类型，布尔类型，序列类型，集合类型，映射类型，迭代器类型，解释器支持的还有一些其他种类的对象。这些对象大都仅支持一两种操作。</p>
<h3 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h3><p>模块唯一的特殊操作是属性访问: <code>m.name</code>，这里 m 为一个模块而 name 为定义在 m 的符号表中的一个属性的名称。模块属性可以被赋值。import 语句严格来说也是对模块对象的一种操作。关于模块有详细的知识点介绍。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">type</span>(math)</span><br></pre></td></tr></table></figure>




<pre><code>module</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line">math.pi</span><br></pre></td></tr></table></figure>




<pre><code>3.141592653589793</code></pre>
<h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><p>函数对象是通过函数定义创建的。对函数对象的唯一操作是调用它: func(argument-list)。</p>
<p>实际上存在两种不同的函数对象：内置函数和用户自定义函数。两者支持同样的操作（调用函数），但实现方式不同，因此对象类型也不同。关于函数有详细的知识点介绍。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="string">&#x27;abc&#x27;</span>) <span class="comment"># 调用函数</span></span><br></pre></td></tr></table></figure>

<pre><code>abc</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">type</span>(<span class="built_in">print</span>)</span><br></pre></td></tr></table></figure>




<pre><code>builtin_function_or_method</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span>():</span><span class="keyword">pass</span> <span class="comment"># 自定义函数</span></span><br><span class="line"><span class="built_in">type</span>(f)</span><br></pre></td></tr></table></figure>




<pre><code>function</code></pre>
<h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><p>方法是在类中定义，使用属性表示法来调用的函数。关于方法有详细的知识点介绍。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">type</span>(<span class="built_in">list</span>.append)</span><br></pre></td></tr></table></figure>




<pre><code>method_descriptor</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">type</span>([].append)</span><br></pre></td></tr></table></figure>




<pre><code>builtin_function_or_method</code></pre>
<h3 id="代码对象"><a href="#代码对象" class="headerlink" title="代码对象"></a>代码对象</h3><p>代码对象可由内置的 <a href="https://xue.cn/hub/reader?bookId=64&path=xue_python_kp/11_built-in_function/11_compile.ipynb">compile()</a> 函数返回，也可通过从函数对象的 <code>__code__</code> 属性从中提取。</p>
<p>可将代码对象（而非源码字符串）传给 <a href="https://xue.cn/hub/reader?bookId=64&path=xue_python_kp/11_built-in_function/19_exec.ipynb">exec()</a> 或 <a href="https://xue.cn/hub/reader?bookId=64&path=xue_python_kp/11_built-in_function/18_eval.ipynb">eval()</a> 内置函数来执行或求值。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span>():</span></span><br><span class="line">    print(<span class="string">&#x27;代码对象&#x27;</span>)</span><br><span class="line">code = f.__code__</span><br><span class="line"><span class="built_in">type</span>(code)</span><br></pre></td></tr></table></figure>




<pre><code>code</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">exec(code)</span><br></pre></td></tr></table></figure>

<pre><code>代码对象</code></pre>
<h3 id="类型对象"><a href="#类型对象" class="headerlink" title="类型对象"></a>类型对象</h3><p>类型对象表示各种对象类型。对象的类型可通过内置函数 <a href="https://xue.cn/hub/reader?bookId=64&path=xue_python_kp">type()</a> 来获取。类型没有特殊的操作。标准库模块 types 定义了所有标准内置类型的名称。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">type</span>(<span class="built_in">int</span>), <span class="built_in">type</span>(<span class="built_in">list</span>)</span><br></pre></td></tr></table></figure>




<pre><code>(type, type)</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">type</span>(<span class="number">1</span>), <span class="built_in">type</span>([])</span><br></pre></td></tr></table></figure>




<pre><code>(int, list)</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/08_other_types/02_comprehension-fb08381d8126/</url>
    <content><![CDATA[<h2 id="生成器表达式和推导式"><a href="#生成器表达式和推导式" class="headerlink" title="生成器表达式和推导式"></a>生成器表达式和推导式</h2><p>生成器表达式和列表推导式非常相似，区别就是将方括号换成了小括号。</p>
<p>生成器表达式返回的是一个生成器迭代器 generator。表达式会产生一系列值，可使用内置函数 <a href="https://xue.cn/hub/reader?bookId=64&path=xue_python_kp/11_built-in_function/42_next.ipynb">next()</a> 逐一获取，或使用 for 循环遍历。</p>
<p>生成器迭代器中的元素，仅供一次性使用，而且可以要多少取多少，它会记住你取了多少，取到了哪里。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">(i*i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>))</span><br></pre></td></tr></table></figure>




<pre><code>&lt;generator object &lt;genexpr&gt; at 0x00000271080FBC00&gt;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">g = (i*i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>))</span><br><span class="line"><span class="built_in">type</span>(g)</span><br></pre></td></tr></table></figure>




<pre><code>generator</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">next</span>(g), <span class="built_in">next</span>(g)</span><br></pre></td></tr></table></figure>




<pre><code>(0, 1)</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> g:</span><br><span class="line">    print(i)</span><br></pre></td></tr></table></figure>

<pre><code>4
9
16</code></pre>
<p>这种表达式被设计用于生成器将立即被外层函数所使用的情况。生成器表达式相比完整的生成器更紧凑但较不灵活，相比等效的列表推导式则更为节省内存。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sum</span>(i*i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>))</span><br></pre></td></tr></table></figure>




<pre><code>30</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">list</span>(i*i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>))</span><br></pre></td></tr></table></figure>




<pre><code>[0, 1, 4, 9, 16]</code></pre>
<p>除了列表推导式和生成器表达式，集合和字典也可使用类似的推导式。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;i*<span class="number">2</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="string">&#x27;abac&#x27;</span>&#125;</span><br></pre></td></tr></table></figure>




<pre><code>&#123;&#39;aa&#39;, &#39;bb&#39;, &#39;cc&#39;&#125;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;i:j <span class="keyword">for</span> i,j <span class="keyword">in</span> <span class="built_in">zip</span>(<span class="string">&#x27;abc&#x27;</span>,(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>))&#125;</span><br></pre></td></tr></table></figure>




<pre><code>&#123;&#39;a&#39;: 1, &#39;b&#39;: 2, &#39;c&#39;: 3&#125;</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/08_other_types/01_none-c7adf7553441/</url>
    <content><![CDATA[<h2 id="空值-None"><a href="#空值-None" class="headerlink" title="空值 None"></a>空值 None</h2><p>空值 None，就是空对象的值，此对象会由没有显式地设置返回值的函数返回。None 是个内置名称，空对象求值，什么也不会发生。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="literal">None</span></span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">help</span>(<span class="literal">None</span>)</span><br></pre></td></tr></table></figure>

<pre><code>Help on NoneType object:

class NoneType(object)
 |  Methods defined here:
 |  
 |  __bool__(self, /)
 |      self != 0
 |  
 |  __repr__(self, /)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Static methods defined here:
 |  
 |  __new__(*args, **kwargs) from builtins.type
 |      Create and return a new object.  See help(type) for accurate signature.</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 没有返回值的列表方法</span></span><br><span class="line">a = [].append(<span class="number">1</span>)</span><br><span class="line">a</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将 a 打印出来，将打印内置名称 None</span></span><br><span class="line">print(a)</span><br></pre></td></tr></table></figure>

<pre><code>None</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/07_dictionary/14_operator-ae2f15f20e3e/</url>
    <content><![CDATA[<h2 id="字典操作符"><a href="#字典操作符" class="headerlink" title="字典操作符"></a>字典操作符</h2><p>字典不可以使用比较大小的操作符 <code>&lt;</code>, <code>&lt;=</code>, <code>&gt;=</code> 和 <code>&gt;</code>，会引发 TypeError。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;<span class="number">1</span>:<span class="number">1</span>&#125; &lt; &#123;<span class="number">2</span>:<span class="number">2</span>&#125;</span><br></pre></td></tr></table></figure>


<pre><code>---------------------------------------------------------------------------

TypeError                                 Traceback (most recent call last)

&lt;ipython-input-1-8ea82599b938&gt; in &lt;module&gt;
----&gt; 1 &#123;1:1&#125; &lt; &#123;2:2&#125;


TypeError: &#39;&lt;&#39; not supported between instances of &#39;dict&#39; and &#39;dict&#39;</code></pre>
<p>字典比较相等时，当且仅当 键值对 都相等时才相等。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;<span class="number">1</span>:<span class="number">1.0</span>, <span class="number">2</span>:<span class="number">2</span>&#125; == &#123;<span class="number">2</span>:<span class="number">2</span>, <span class="literal">True</span>:<span class="number">1</span>&#125;</span><br></pre></td></tr></table></figure>




<pre><code>True</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;<span class="number">1</span>:<span class="string">&#x27;1&#x27;</span>, <span class="number">2</span>:<span class="number">2</span>&#125; == &#123;<span class="number">2</span>:<span class="number">2</span>, <span class="number">1</span>:<span class="number">1</span>&#125;</span><br></pre></td></tr></table></figure>




<pre><code>False</code></pre>
<p>字典可以使用 <code>**</code> 操作符进行拆包，拆包后置于新字典中，可以用来更新字典；或拆包后作为关键字参数传递给函数。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>:<span class="number">2</span>, **&#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">10</span>&#125;&#125;</span><br></pre></td></tr></table></figure>




<pre><code>&#123;&#39;a&#39;: 10, &#39;b&#39;: 2&#125;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d = &#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>:<span class="number">2</span>&#125;</span><br><span class="line"><span class="string">&#x27;a=&#123;a&#125;,b=&#123;b&#125;&#x27;</span>.<span class="built_in">format</span>(**d)</span><br></pre></td></tr></table></figure>




<pre><code>&#39;a=1,b=2&#39;</code></pre>
<p>Python 3.9 新版，实现了两个操作符 <code>|</code> 和 <code>|=</code>：</p>
<ul>
<li>d | other</li>
</ul>
<p>合并 d 和 other 中的键和值来创建一个新的字典，两者必须都是字典。当 d 和 other 有相同键时，other 的值优先。</p>
<ul>
<li>d |= other</li>
</ul>
<p>用 other 的键和值更新字典 d ，other 可以是映射（mapping）或可迭代对象（iterable）的键值对。当 d 和 other 有相同键时，other 的值优先。</p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/07_dictionary/13_loop_through-6dabf88bbee9/</url>
    <content><![CDATA[<h2 id="字典遍历"><a href="#字典遍历" class="headerlink" title="字典遍历"></a>字典遍历</h2><p>字典是可迭代对象，可以遍历字典的元素。由于字典元素是 键值对，遍历比较特殊。</p>
<p>如果未指定遍历对象，默认遍历字典的键。很多函数将字典作为可迭代对象处理时，也是如此。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d = &#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">1</span>, <span class="string">&#x27;c&#x27;</span>:<span class="number">3</span>, <span class="string">&#x27;b&#x27;</span>:<span class="number">2</span>&#125;</span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> d:</span><br><span class="line">    print(k)</span><br></pre></td></tr></table></figure>

<pre><code>a
c
b</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">list</span>(d)</span><br></pre></td></tr></table></figure>




<pre><code>[&#39;a&#39;, &#39;c&#39;, &#39;b&#39;]</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sorted</span>(d)</span><br></pre></td></tr></table></figure>




<pre><code>[&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">max</span>(d)</span><br></pre></td></tr></table></figure>




<pre><code>&#39;c&#39;</code></pre>
<p>可以利用字典的视图指定遍历字典的键（默认就是遍历键，可以省略），值 或是 键值对。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d = &#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">1</span>, <span class="string">&#x27;c&#x27;</span>:<span class="number">3</span>, <span class="string">&#x27;b&#x27;</span>:<span class="number">2</span>&#125;</span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> d.keys(): <span class="comment"># 可以不用视图</span></span><br><span class="line">    print(k)</span><br></pre></td></tr></table></figure>

<pre><code>a
c
b</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d = &#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">1</span>, <span class="string">&#x27;c&#x27;</span>:<span class="number">3</span>, <span class="string">&#x27;b&#x27;</span>:<span class="number">2</span>&#125;</span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> d.values(): </span><br><span class="line">    print(k)</span><br></pre></td></tr></table></figure>

<pre><code>1
3
2</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d = &#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">1</span>, <span class="string">&#x27;c&#x27;</span>:<span class="number">3</span>, <span class="string">&#x27;b&#x27;</span>:<span class="number">2</span>&#125;</span><br><span class="line"><span class="keyword">for</span> k,v <span class="keyword">in</span> d.items(): </span><br><span class="line">    print(k,v)</span><br></pre></td></tr></table></figure>

<pre><code>a 1
c 3
b 2</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 按值排序后再遍历</span></span><br><span class="line">d = &#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">1</span>, <span class="string">&#x27;c&#x27;</span>:<span class="number">3</span>, <span class="string">&#x27;b&#x27;</span>:<span class="number">2</span>&#125;</span><br><span class="line"><span class="keyword">for</span> k,v <span class="keyword">in</span> <span class="built_in">sorted</span>(d.items(),key=<span class="keyword">lambda</span> x:x[<span class="number">1</span>]): </span><br><span class="line">    print(k,v)</span><br></pre></td></tr></table></figure>

<pre><code>a 1
b 2
c 3</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/07_dictionary/12_dict.update-3f3d274296c7/</url>
    <content><![CDATA[<h2 id="dict-update-更新字典"><a href="#dict-update-更新字典" class="headerlink" title="dict.update 更新字典"></a>dict.update 更新字典</h2><p>字典方法 dict.update()，Python 官方文档描述如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">help</span>(<span class="built_in">dict</span>.update)</span><br></pre></td></tr></table></figure>

<pre><code>Help on method_descriptor:

update(...)
    D.update([E, ]**F) -&gt; None.  Update D from dict/iterable E and F.
    If E is present and has a .keys() method, then does:  for k in E: D[k] = E[k]
    If E is present and lacks a .keys() method, then does:  for k, v in E: D[k] = v
    In either case, this is followed by: for k in F:  D[k] = F[k]</code></pre>
<p>更新字典，键相同，则覆盖原有的值，不同，则增加 键值对 元素。有下列几种情况：</p>
<ul>
<li>以字典更新字典：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d = &#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>:<span class="number">2</span>&#125;</span><br><span class="line">d.update(&#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">10</span>, <span class="string">&#x27;c&#x27;</span>:<span class="number">3</span>&#125;)</span><br><span class="line">d</span><br></pre></td></tr></table></figure>




<pre><code>&#123;&#39;a&#39;: 10, &#39;b&#39;: 2, &#39;c&#39;: 3&#125;</code></pre>
<ul>
<li>以可迭代对象更新字典：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d = &#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>:<span class="number">2</span>&#125;</span><br><span class="line">d.update([(<span class="string">&#x27;a&#x27;</span>,<span class="number">10</span>),[<span class="string">&#x27;c&#x27;</span>,<span class="number">3</span>]])</span><br><span class="line">d</span><br></pre></td></tr></table></figure>




<pre><code>&#123;&#39;a&#39;: 10, &#39;b&#39;: 2, &#39;c&#39;: 3&#125;</code></pre>
<ul>
<li>以关键字参数更新字典：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d = &#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>:<span class="number">2</span>&#125;</span><br><span class="line">d.update(a=<span class="number">10</span>, c=<span class="number">3</span>)</span><br><span class="line">d</span><br></pre></td></tr></table></figure>




<pre><code>&#123;&#39;a&#39;: 10, &#39;b&#39;: 2, &#39;c&#39;: 3&#125;</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/07_dictionary/11_dict.setdefault-3804c7a2ead0/</url>
    <content><![CDATA[<h2 id="dict-setdefault-获取或插入元素"><a href="#dict-setdefault-获取或插入元素" class="headerlink" title="dict.setdefault 获取或插入元素"></a>dict.setdefault 获取或插入元素</h2><p>字典方法 dict.setdefault()，Python 官方文档描述如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">help</span>(<span class="built_in">dict</span>.setdefault)</span><br></pre></td></tr></table></figure>

<pre><code>Help on method_descriptor:

setdefault(self, key, default=None, /)
    Insert key with a value of default if key is not in the dictionary.

    Return the value for key if key is in the dictionary, else default.</code></pre>
<p>如果字典存在键 key，则返回它的值；如果 key 不存在，则插入 key，以 default（默认 None）作为它的值，并返回。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d = &#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>:<span class="number">2</span>&#125;</span><br><span class="line">d.setdefault(<span class="string">&#x27;a&#x27;</span>)</span><br></pre></td></tr></table></figure>




<pre><code>1</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d.setdefault(<span class="string">&#x27;c&#x27;</span>, <span class="number">3</span>)</span><br></pre></td></tr></table></figure>




<pre><code>3</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d</span><br></pre></td></tr></table></figure>




<pre><code>&#123;&#39;a&#39;: 1, &#39;b&#39;: 2, &#39;c&#39;: 3&#125;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d.setdefault(<span class="string">&#x27;c&#x27;</span>, <span class="number">4</span>) <span class="comment"># 如果存在，并不会再次设置</span></span><br></pre></td></tr></table></figure>




<pre><code>3</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d</span><br></pre></td></tr></table></figure>




<pre><code>&#123;&#39;a&#39;: 1, &#39;b&#39;: 2, &#39;c&#39;: 3&#125;</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/07_dictionary/10_dict.clear-fdccb262f538/</url>
    <content><![CDATA[<h2 id="dict-clear-清空字典元素"><a href="#dict-clear-清空字典元素" class="headerlink" title="dict.clear 清空字典元素"></a>dict.clear 清空字典元素</h2><p>字典方法 dict.clear()，Python 官方文档描述如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">help</span>(<span class="built_in">dict</span>.clear)</span><br></pre></td></tr></table></figure>

<pre><code>Help on method_descriptor:

clear(...)
    D.clear() -&gt; None.  Remove all items from D.</code></pre>
<p>清空字典元素。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d = &#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>:<span class="number">2</span>&#125;</span><br><span class="line">d.clear()</span><br><span class="line">d</span><br></pre></td></tr></table></figure>




<pre><code>&#123;&#125;</code></pre>
<p>该方法是一个过程，返回值为 None。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d = &#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>:<span class="number">2</span>&#125;</span><br><span class="line">print(d.clear())</span><br></pre></td></tr></table></figure>

<pre><code>None</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/07_dictionary/09_dict.fromkeys-a252e4e7bd88/</url>
    <content><![CDATA[<h2 id="dict-fromkeys-创建字典"><a href="#dict-fromkeys-创建字典" class="headerlink" title="dict.fromkeys 创建字典"></a>dict.fromkeys 创建字典</h2><p>字典的方法 fromkeys，Python 官方文档描述如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">help</span>(<span class="built_in">dict</span>.fromkeys)</span><br></pre></td></tr></table></figure>

<pre><code>Help on built-in function fromkeys:

fromkeys(iterable, value=None, /) method of builtins.type instance
    Create a new dictionary with keys from iterable and values set to value.</code></pre>
<p>使用可迭代对象 iterable 中的元素作为字典的键，value 为值（默认是 None）创建字典。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">dict</span>.fromkeys(<span class="string">&#x27;123&#x27;</span>)</span><br></pre></td></tr></table></figure>




<pre><code>&#123;&#39;1&#39;: None, &#39;2&#39;: None, &#39;3&#39;: None&#125;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">dict</span>.fromkeys([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>], <span class="number">0</span>)</span><br></pre></td></tr></table></figure>




<pre><code>&#123;1: 0, 2: 0, 3: 0&#125;</code></pre>
<p>可迭代对象中不能包含不可哈希对象：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">dict</span>.fromkeys([[<span class="number">1</span>],<span class="number">2</span>,<span class="number">3</span>], <span class="number">0</span>)</span><br></pre></td></tr></table></figure>


<pre><code>---------------------------------------------------------------------------

TypeError                                 Traceback (most recent call last)

&lt;ipython-input-6-470a0d0c77b4&gt; in &lt;module&gt;
----&gt; 1 dict.fromkeys([[1],2,3], 0)


TypeError: unhashable type: &#39;list&#39;</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/07_dictionary/08_dict.popitem-87675bf59a05/</url>
    <content><![CDATA[<h2 id="dict-popitem-删除元素并返回键值对"><a href="#dict-popitem-删除元素并返回键值对" class="headerlink" title="dict.popitem 删除元素并返回键值对"></a>dict.popitem 删除元素并返回键值对</h2><p>字典方法 dict.popitem()，Python 官方文档描述如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">help</span>(<span class="built_in">dict</span>.popitem)</span><br></pre></td></tr></table></figure>

<pre><code>Help on method_descriptor:

popitem(self, /)
    Remove and return a (key, value) pair as a 2-tuple.

    Pairs are returned in LIFO (last-in, first-out) order.
    Raises KeyError if the dict is empty.</code></pre>
<p>按 后进先出 的原则，删除字典的元素，并以 (key, value) 元组返回。如果字典为空，则引发 KeyError。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d = &#123;<span class="number">2</span>:<span class="number">2</span>,<span class="number">1</span>:<span class="number">1</span>&#125;</span><br><span class="line">d.popitem()</span><br></pre></td></tr></table></figure>




<pre><code>(1, 1)</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d = &#123;&#125;</span><br><span class="line">d[<span class="number">1</span>] = <span class="number">1</span></span><br><span class="line">d[<span class="number">3</span>] = <span class="number">3</span></span><br><span class="line">d[<span class="number">2</span>] = <span class="number">2</span></span><br><span class="line">d[<span class="number">3</span>] = <span class="number">30</span> <span class="comment"># 更新并不改变元素插入顺序</span></span><br><span class="line">d.popitem(),d.popitem(),d.popitem()</span><br></pre></td></tr></table></figure>




<pre><code>((2, 2), (3, 30), (1, 1))</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d = &#123;&#125;</span><br><span class="line">d.popitem()</span><br></pre></td></tr></table></figure>


<pre><code>---------------------------------------------------------------------------

KeyError                                  Traceback (most recent call last)

&lt;ipython-input-13-3d5a99fd0340&gt; in &lt;module&gt;
      1 d = &#123;&#125;
----&gt; 2 d.popitem()


KeyError: &#39;popitem(): dictionary is empty&#39;</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/07_dictionary/07_dict.pop-34c04582c3ba/</url>
    <content><![CDATA[<h2 id="dict-pop-删除元素并返回值"><a href="#dict-pop-删除元素并返回值" class="headerlink" title="dict.pop 删除元素并返回值"></a>dict.pop 删除元素并返回值</h2><p>字典方法 dict.pop()，Python 官方文档描述如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">help</span>(<span class="built_in">dict</span>.pop)</span><br></pre></td></tr></table></figure>

<pre><code>Help on method_descriptor:

pop(...)
    D.pop(k[,d]) -&gt; v, remove specified key and return the corresponding value.
    If key is not found, d is returned if given, otherwise KeyError is raised</code></pre>
<p>如果字典的键 k 存在，则移除 k 对应的 键值对，并返回 值；</p>
<p>如果 k 不存在，但指定了可选参数 d，则返回 d；</p>
<p>如果 k 不存在且未指定 d，则引发 KeyError。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d = &#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>:<span class="number">2</span>&#125;</span><br><span class="line">d.pop(<span class="string">&#x27;a&#x27;</span>)</span><br></pre></td></tr></table></figure>




<pre><code>1</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d = &#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>:<span class="number">2</span>&#125;</span><br><span class="line">d.pop(<span class="string">&#x27;c&#x27;</span>, <span class="number">3</span>)</span><br></pre></td></tr></table></figure>




<pre><code>3</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d = &#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>:<span class="number">2</span>&#125;</span><br><span class="line">d.pop(<span class="string">&#x27;c&#x27;</span>)</span><br></pre></td></tr></table></figure>


<pre><code>---------------------------------------------------------------------------

KeyError                                  Traceback (most recent call last)

&lt;ipython-input-4-1e5ab2c0b86c&gt; in &lt;module&gt;
      1 d = &#123;&#39;a&#39;:1, &#39;b&#39;:2&#125;
----&gt; 2 d.pop(&#39;c&#39;)


KeyError: &#39;c&#39;</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/07_dictionary/06_dict.copy-863adee0d3b5/</url>
    <content><![CDATA[<h2 id="dict-copy-浅拷贝"><a href="#dict-copy-浅拷贝" class="headerlink" title="dict.copy 浅拷贝"></a>dict.copy 浅拷贝</h2><p>字典方法 dict.copy()，Python 官方文档描述如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">help</span>(<span class="built_in">dict</span>.copy)</span><br></pre></td></tr></table></figure>

<pre><code>Help on method_descriptor:

copy(...)
    D.copy() -&gt; a shallow copy of D</code></pre>
<p>返回字典的一个浅拷贝。字典是可变对象，浅拷贝将创建一个新字典，但如果字典中某个 键值对 的值是可变对象，则是同一个对象的多次引用。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d = &#123;<span class="string">&#x27;a&#x27;</span>:[<span class="number">1</span>,<span class="number">2</span>], <span class="string">&#x27;b&#x27;</span>:<span class="number">3</span>&#125;</span><br><span class="line">print(<span class="built_in">id</span>(d), d)</span><br><span class="line">d1 = d.copy()</span><br><span class="line">print(<span class="built_in">id</span>(d1), d1)</span><br></pre></td></tr></table></figure>

<pre><code>2276967660712 &#123;&#39;a&#39;: [1, 2], &#39;b&#39;: 3&#125;
2276967660784 &#123;&#39;a&#39;: [1, 2], &#39;b&#39;: 3&#125;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 同一个对象的多次引用</span></span><br><span class="line"><span class="built_in">id</span>(d[<span class="string">&#x27;a&#x27;</span>]), <span class="built_in">id</span>(d1[<span class="string">&#x27;a&#x27;</span>])</span><br></pre></td></tr></table></figure>




<pre><code>(2276966678024, 2276966678024)</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 改变一个都会改变</span></span><br><span class="line">d[<span class="string">&#x27;a&#x27;</span>].extend(<span class="string">&#x27;34&#x27;</span>)</span><br><span class="line">print(d)</span><br><span class="line">print(d1)</span><br></pre></td></tr></table></figure>

<pre><code>&#123;&#39;a&#39;: [1, 2, &#39;3&#39;, &#39;4&#39;], &#39;b&#39;: 3&#125;
&#123;&#39;a&#39;: [1, 2, &#39;3&#39;, &#39;4&#39;], &#39;b&#39;: 3&#125;</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/07_dictionary/05_dict.get-626864b9ba1d/</url>
    <content><![CDATA[<h2 id="dict-get-获取某个键的值"><a href="#dict-get-获取某个键的值" class="headerlink" title="dict.get 获取某个键的值"></a>dict.get 获取某个键的值</h2><p>字典方法 dict.get()，Python 官方文档描述如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">help</span>(<span class="built_in">dict</span>.get)</span><br></pre></td></tr></table></figure>

<pre><code>Help on method_descriptor:

get(self, key, default=None, /)
    Return the value for key if key is in the dictionary, else default.</code></pre>
<p>获取字典的项目，如果 key 存在于字典中则返回 key 的值，否则返回 default 指定的值，默认为 None。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d = &#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>:<span class="number">2</span>&#125;</span><br><span class="line">d.get(<span class="string">&#x27;a&#x27;</span>)</span><br></pre></td></tr></table></figure>




<pre><code>1</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(d.get(<span class="string">&#x27;c&#x27;</span>))</span><br></pre></td></tr></table></figure>

<pre><code>None</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d.get(<span class="string">&#x27;c&#x27;</span>, <span class="number">3</span>)</span><br></pre></td></tr></table></figure>




<pre><code>3</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/07_dictionary/04_dict.items-480fc927f532/</url>
    <content><![CDATA[<h2 id="dict-items-键值对视图"><a href="#dict-items-键值对视图" class="headerlink" title="dict.items 键值对视图"></a>dict.items 键值对视图</h2><p>字典方法 dict.items()，Python 官方文档描述如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">help</span>(<span class="built_in">dict</span>.items)</span><br></pre></td></tr></table></figure>

<pre><code>Help on method_descriptor:

items(...)
    D.items() -&gt; a set-like object providing a view on D&#39;s items</code></pre>
<p>返回字典的 (键,值) 元组组成的动态视图。字典的视图支持成员检测，可以被迭代。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d = &#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>:<span class="number">2</span>&#125;</span><br><span class="line">d_view = d.items()</span><br><span class="line">print(d_view)</span><br><span class="line">d[<span class="string">&#x27;c&#x27;</span>] = <span class="number">3</span> <span class="comment"># 添加元素，视图也动态变化</span></span><br><span class="line">print(d_view)</span><br></pre></td></tr></table></figure>

<pre><code>dict_items([(&#39;a&#39;, 1), (&#39;b&#39;, 2)])
dict_items([(&#39;a&#39;, 1), (&#39;b&#39;, 2), (&#39;c&#39;, 3)])</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">(<span class="string">&#x27;a&#x27;</span>, <span class="number">1</span>) <span class="keyword">in</span> d_view</span><br></pre></td></tr></table></figure>




<pre><code>True</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[k*j <span class="keyword">for</span> k, j <span class="keyword">in</span> d_view]</span><br></pre></td></tr></table></figure>




<pre><code>[&#39;a&#39;, &#39;bb&#39;, &#39;ccc&#39;]</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/07_dictionary/03_dict.values-e337ca43dcd4/</url>
    <content><![CDATA[<h2 id="dict-values-值视图"><a href="#dict-values-值视图" class="headerlink" title="dict.values 值视图"></a>dict.values 值视图</h2><p>字典方法 dict.values()，Python 官方文档描述如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">help</span>(<span class="built_in">dict</span>.values)</span><br></pre></td></tr></table></figure>

<pre><code>Help on method_descriptor:

values(...)
    D.values() -&gt; an object providing a view on D&#39;s values</code></pre>
<p>返回由字典的值组成的动态视图。字典的视图支持成员检测，可以被迭代。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d = &#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>:<span class="number">2</span>&#125;</span><br><span class="line">d_view = d.values()</span><br><span class="line">print(d_view)</span><br><span class="line">d[<span class="string">&#x27;c&#x27;</span>] = <span class="number">3</span> <span class="comment"># 添加元素，视图也动态变化</span></span><br><span class="line">print(d_view)</span><br></pre></td></tr></table></figure>

<pre><code>dict_values([1, 2])
dict_values([1, 2, 3])</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> <span class="keyword">in</span> d_view</span><br></pre></td></tr></table></figure>




<pre><code>True</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[i <span class="keyword">for</span> i <span class="keyword">in</span> d_view]</span><br></pre></td></tr></table></figure>




<pre><code>[1, 2, 3]</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/07_dictionary/02_dict.keys-ca12e9665e6b/</url>
    <content><![CDATA[<h2 id="dict-keys-键视图"><a href="#dict-keys-键视图" class="headerlink" title="dict.keys 键视图"></a>dict.keys 键视图</h2><p>字典方法 dict.keys()，Python 官方文档描述如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">help</span>(<span class="built_in">dict</span>.keys)</span><br></pre></td></tr></table></figure>

<pre><code>Help on method_descriptor:

keys(...)
    D.keys() -&gt; a set-like object providing a view on D&#39;s keys</code></pre>
<p>返回一个由字典的键组成的动态视图。字典的视图支持成员检测，可以被迭代。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d = &#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>:<span class="number">2</span>&#125;</span><br><span class="line">d.keys()</span><br></pre></td></tr></table></figure>




<pre><code>dict_keys([&#39;a&#39;, &#39;b&#39;])</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;a&#x27;</span> <span class="keyword">in</span> d.keys()</span><br></pre></td></tr></table></figure>




<pre><code>True</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">list</span>(d.keys())</span><br></pre></td></tr></table></figure>




<pre><code>[&#39;a&#39;, &#39;b&#39;]</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d = &#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>:<span class="number">2</span>&#125;</span><br><span class="line">d_view = d.keys()</span><br><span class="line">print(d_view)</span><br><span class="line">d[<span class="string">&#x27;c&#x27;</span>] = <span class="number">3</span> <span class="comment"># 添加元素，视图也动态变化</span></span><br><span class="line">print(d_view)</span><br></pre></td></tr></table></figure>

<pre><code>dict_keys([&#39;a&#39;, &#39;b&#39;])
dict_keys([&#39;a&#39;, &#39;b&#39;, &#39;c&#39;])</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/07_dictionary/01_dict-ecd2b0f97836/</url>
    <content><![CDATA[<h2 id="字典概述"><a href="#字典概述" class="headerlink" title="字典概述"></a>字典概述</h2><p>字典属于映射类型，将可哈希对象映射到任意对象，可哈希对象为字典的键，映射的对象为键对应的条目（值）。因此：</p>
<ul>
<li>键必须是可哈希且唯一的；</li>
<li>值可以是任意对象（此处 值 仅指键对应的条目）。</li>
</ul>
<p>所以字典的键必须是可哈希对象，例如字符串，元组（不能包含不可哈希对象）；哈希值相等的对象作为字典的键会被当作一个键。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">&#x27;1&#x27;</span>:<span class="number">1</span>, (<span class="number">1</span>,<span class="number">2</span>):<span class="number">2</span>, <span class="number">1</span>:<span class="number">3</span>, <span class="literal">True</span>:<span class="number">4</span>&#125;</span><br></pre></td></tr></table></figure>




<pre><code>&#123;&#39;1&#39;: 1, (1, 2): 2, 1: 4&#125;</code></pre>
<p>字典是目前唯一的标准映射类型。其类型为 dict。空字典用一对花括号表示。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">type</span>(&#123;&#125;)</span><br></pre></td></tr></table></figure>




<pre><code>dict</code></pre>
<p>字典可以通过花括号包含逗号分隔的 键值对 来创建，也可以用内置函数 <a href="https://xue.cn/hub/reader?bookId=64&path=xue_python_kp/11_built-in_function/14_dict.ipynb">dict()</a> 来创建。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>:<span class="number">2</span>&#125;</span><br></pre></td></tr></table></figure>




<pre><code>&#123;&#39;a&#39;: 1, &#39;b&#39;: 2&#125;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">dict</span>(a=<span class="number">1</span>,b=<span class="number">2</span>)</span><br></pre></td></tr></table></figure>




<pre><code>&#123;&#39;a&#39;: 1, &#39;b&#39;: 2&#125;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">dict</span>(<span class="built_in">zip</span>([<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>],(<span class="number">1</span>,<span class="number">2</span>)))</span><br></pre></td></tr></table></figure>




<pre><code>&#123;&#39;a&#39;: 1, &#39;b&#39;: 2&#125;</code></pre>
<p>字典是可变对象，可以通过键，来获取对应的项，或更新、添加项。获取项时，键不存在则引发 KeyError。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 获取</span></span><br><span class="line">d = &#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">1</span>&#125;</span><br><span class="line">d[<span class="string">&#x27;a&#x27;</span>]</span><br></pre></td></tr></table></figure>




<pre><code>1</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 更新</span></span><br><span class="line">d[<span class="string">&#x27;a&#x27;</span>] = [<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line">d</span><br></pre></td></tr></table></figure>




<pre><code>&#123;&#39;a&#39;: [1, 2]&#125;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 键不存在则添加项</span></span><br><span class="line">d[<span class="string">&#x27;b&#x27;</span>] = &#123;<span class="number">1</span>,<span class="number">2</span>&#125;</span><br><span class="line">d</span><br></pre></td></tr></table></figure>




<pre><code>&#123;&#39;a&#39;: [1, 2], &#39;b&#39;: &#123;1, 2&#125;&#125;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d[<span class="string">&#x27;c&#x27;</span>]</span><br></pre></td></tr></table></figure>


<pre><code>---------------------------------------------------------------------------

KeyError                                  Traceback (most recent call last)

&lt;ipython-input-9-05ba6e0488c7&gt; in &lt;module&gt;
----&gt; 1 d[&#39;c&#39;]


KeyError: &#39;c&#39;</code></pre>
<p>字典的元素（键值对）是按哈希值来存储的，没有序列类型的双向索引操作，但字典会保留元素插入时的顺序，更新不会改变插入顺序。而且使用 popitem 方法删除元素是按<strong>后进先出</strong>原则删除。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d = &#123;&#125;</span><br><span class="line">d[<span class="number">3</span>] = <span class="number">3</span></span><br><span class="line">d[<span class="number">1</span>] = <span class="number">1</span></span><br><span class="line">d[<span class="number">2</span>] = <span class="number">2</span></span><br><span class="line">d</span><br></pre></td></tr></table></figure>




<pre><code>&#123;3: 3, 1: 1, 2: 2&#125;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d[<span class="number">1</span>] = <span class="number">10</span></span><br><span class="line">d</span><br></pre></td></tr></table></figure>




<pre><code>&#123;3: 3, 1: 10, 2: 2&#125;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d.popitem(),d.popitem(),d.popitem()</span><br></pre></td></tr></table></figure>




<pre><code>((2, 2), (1, 10), (3, 3))</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/06_set/18_set.clear-b31d42e2b343/</url>
    <content><![CDATA[<h2 id="set-clear-清空集合元素"><a href="#set-clear-清空集合元素" class="headerlink" title="set.clear 清空集合元素"></a>set.clear 清空集合元素</h2><p>集合方法 set.clear()，Python 官方文档描述如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">help</span>(<span class="built_in">set</span>.clear)</span><br></pre></td></tr></table></figure>

<pre><code>Help on method_descriptor:

clear(...)
    Remove all elements from this set.</code></pre>
<p>清空集合所有元素。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = &#123;<span class="number">1</span>,<span class="number">2</span>&#125;</span><br><span class="line">a.clear()</span><br><span class="line">a</span><br></pre></td></tr></table></figure>




<pre><code>set()</code></pre>
<p>该方法是一个过程，就地修改集合，返回值为 None。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = &#123;<span class="number">1</span>,<span class="number">2</span>&#125;</span><br><span class="line">b = a.clear()</span><br><span class="line">print(b)</span><br></pre></td></tr></table></figure>

<pre><code>None</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/06_set/17_set.pop-a68a78e5d51c/</url>
    <content><![CDATA[<h2 id="set-pop-删除元素并返回"><a href="#set-pop-删除元素并返回" class="headerlink" title="set.pop 删除元素并返回"></a>set.pop 删除元素并返回</h2><p>集合方法 set.pop()，Python 官方文档描述如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">help</span>(<span class="built_in">set</span>.pop)</span><br></pre></td></tr></table></figure>

<pre><code>Help on method_descriptor:

pop(...)
    Remove and return an arbitrary set element.
    Raises KeyError if the set is empty.</code></pre>
<p>集合中删除任意一个元素，并返回它。如果集合为空，引发 KeyError。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = &#123;<span class="number">1</span>,<span class="number">2</span>&#125;</span><br><span class="line">a.pop()</span><br></pre></td></tr></table></figure>




<pre><code>1</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a</span><br></pre></td></tr></table></figure>




<pre><code>&#123;2&#125;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set</span>().pop()</span><br></pre></td></tr></table></figure>


<pre><code>---------------------------------------------------------------------------

KeyError                                  Traceback (most recent call last)

&lt;ipython-input-6-db3bab0ab3b8&gt; in &lt;module&gt;
----&gt; 1 set().pop()


KeyError: &#39;pop from an empty set&#39;</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/06_set/16_set.discard-5f7c6113f3f1/</url>
    <content><![CDATA[<h2 id="set-discard-删除元素"><a href="#set-discard-删除元素" class="headerlink" title="set.discard 删除元素"></a>set.discard 删除元素</h2><p>集合方法 set.discard()，Python 官方文档描述如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">help</span>(<span class="built_in">set</span>.discard)</span><br></pre></td></tr></table></figure>

<pre><code>Help on method_descriptor:

discard(...)
    Remove an element from a set if it is a member.

    If the element is not a member, do nothing.</code></pre>
<p>从集合中删除一个指定元素，元素不存在没有任何影响。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = &#123;<span class="number">1</span>,<span class="number">2</span>&#125;</span><br><span class="line">a.discard(<span class="number">1</span>)</span><br><span class="line">a</span><br></pre></td></tr></table></figure>




<pre><code>&#123;2&#125;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = &#123;<span class="number">1</span>,<span class="number">2</span>&#125;</span><br><span class="line">a.discard(<span class="number">3</span>)</span><br><span class="line">a</span><br></pre></td></tr></table></figure>




<pre><code>&#123;1, 2&#125;</code></pre>
<p>该方法是一个过程，就地修改集合，返回值为 None。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = &#123;<span class="number">1</span>,<span class="number">2</span>&#125;</span><br><span class="line">b = a.discard(<span class="number">1</span>)</span><br><span class="line">print(b)</span><br></pre></td></tr></table></figure>

<pre><code>None</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/06_set/15_set.remove-661693a1608e/</url>
    <content><![CDATA[<h2 id="set-remove-删除元素"><a href="#set-remove-删除元素" class="headerlink" title="set.remove 删除元素"></a>set.remove 删除元素</h2><p>集合方法 set.remove()，Python 官方文档描述如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">help</span>(<span class="built_in">set</span>.remove)</span><br></pre></td></tr></table></figure>

<pre><code>Help on method_descriptor:

remove(...)
    Remove an element from a set; it must be a member.

    If the element is not a member, raise a KeyError.</code></pre>
<p>删除一个指定元素，删除元素不存在则引发 KeyError。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = &#123;<span class="number">1</span>,<span class="number">2</span>&#125;</span><br><span class="line">a.remove(<span class="number">1</span>)</span><br><span class="line">a</span><br></pre></td></tr></table></figure>




<pre><code>&#123;2&#125;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = &#123;<span class="number">1</span>,<span class="number">2</span>&#125;</span><br><span class="line">a.remove(<span class="number">3</span>)</span><br><span class="line">a</span><br></pre></td></tr></table></figure>


<pre><code>---------------------------------------------------------------------------

KeyError                                  Traceback (most recent call last)

&lt;ipython-input-3-d0f57d460301&gt; in &lt;module&gt;
      1 a = &#123;1,2&#125;
----&gt; 2 a.remove(3)
      3 a


KeyError: 3</code></pre>
<p>该方法是一个过程，就地修改集合，返回值为 None。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = &#123;<span class="number">1</span>,<span class="number">2</span>&#125;</span><br><span class="line">b = a.remove(<span class="number">1</span>)</span><br><span class="line">print(b)</span><br></pre></td></tr></table></figure>

<pre><code>None</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/06_set/14_set.add-59f536d6bd0c/</url>
    <content><![CDATA[<h2 id="set-add-添加元素"><a href="#set-add-添加元素" class="headerlink" title="set.add 添加元素"></a>set.add 添加元素</h2><p>集合方法 set.add()，Python 官方文档描述如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">help</span>(<span class="built_in">set</span>.add)</span><br></pre></td></tr></table></figure>

<pre><code>Help on method_descriptor:

add(...)
    Add an element to a set.

    This has no effect if the element is already present.</code></pre>
<p>集合中增加一个元素，如果元素已经存在，没有任何影响。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = &#123;<span class="number">1</span>,<span class="number">2</span>&#125;</span><br><span class="line">a.add(<span class="number">3</span>)</span><br><span class="line">a</span><br></pre></td></tr></table></figure>




<pre><code>&#123;1, 2, 3&#125;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = &#123;<span class="number">1</span>,<span class="number">2</span>&#125;</span><br><span class="line">a.add(<span class="number">1</span>)</span><br><span class="line">a</span><br></pre></td></tr></table></figure>




<pre><code>&#123;1, 2&#125;</code></pre>
<p>该方法是一个过程，就地修改集合，返回值为 None。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = &#123;<span class="number">1</span>,<span class="number">2</span>&#125;</span><br><span class="line">b = a.add(<span class="number">3</span>)</span><br><span class="line">print(b)</span><br></pre></td></tr></table></figure>

<pre><code>None</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/06_set/13_set.symmetric_difference_update-780c8b074599/</url>
    <content><![CDATA[<h2 id="set-other-对称差集更新"><a href="#set-other-对称差集更新" class="headerlink" title="set ^= other 对称差集更新"></a>set ^= other 对称差集更新</h2><p>集合的对称差集更新操作，相当于集合方法 set.symmetric_difference_update，其文档描述如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">help</span>(<span class="built_in">set</span>.symmetric_difference_update)</span><br></pre></td></tr></table></figure>

<pre><code>Help on method_descriptor:

symmetric_difference_update(...)
    Update a set with the symmetric difference of itself and another.</code></pre>
<p>更新集合，只保留两个集合中非共同部分。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;</span><br><span class="line">a.symmetric_difference_update([<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>])</span><br><span class="line">a</span><br></pre></td></tr></table></figure>




<pre><code>&#123;1, 4&#125;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;</span><br><span class="line">a ^= &#123;<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;</span><br><span class="line">a</span><br></pre></td></tr></table></figure>




<pre><code>&#123;1, 4&#125;</code></pre>
<p>该方法是一个过程，就地修改集合，返回值为 None。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;</span><br><span class="line">b = a.symmetric_difference_update([<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>])</span><br><span class="line">print(b)</span><br></pre></td></tr></table></figure>

<pre><code>None</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/06_set/12_set.difference_update-5e83d9b6937a/</url>
    <content><![CDATA[<h2 id="set-difference-update-差集更新"><a href="#set-difference-update-差集更新" class="headerlink" title="set.difference_update 差集更新"></a>set.difference_update 差集更新</h2><p>集合方法 set.difference_update()，Python 官方文档描述如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">help</span>(<span class="built_in">set</span>.difference_update)</span><br></pre></td></tr></table></figure>

<pre><code>Help on method_descriptor:

difference_update(...)
    Remove all elements of another set from this set.</code></pre>
<p>该方法接收任意的位置参数，更新集合，移除在其他集合中也存在的元素。相当于 a -= b | …（a，b 是集合），但方法的参数可以是可迭代对象。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;</span><br><span class="line">a.difference_update((<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>),[<span class="number">4</span>,<span class="number">5</span>])</span><br><span class="line">a</span><br></pre></td></tr></table></figure>




<pre><code>&#123;2&#125;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;</span><br><span class="line">a -= &#123;<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>&#125; | &#123;<span class="number">4</span>,<span class="number">5</span>&#125;</span><br><span class="line">a</span><br></pre></td></tr></table></figure>




<pre><code>&#123;2&#125;</code></pre>
<p>该方法是一个过程，就地修改集合，返回值为 None。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;</span><br><span class="line">b = a.difference_update([<span class="number">4</span>,<span class="number">5</span>])</span><br><span class="line">print(b)</span><br></pre></td></tr></table></figure>

<pre><code>None</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/06_set/11_set.intersection_update-a7e6afd9ad65/</url>
    <content><![CDATA[<h2 id="set-intersection-update-交集更新"><a href="#set-intersection-update-交集更新" class="headerlink" title="set.intersection_update 交集更新"></a>set.intersection_update 交集更新</h2><p>集合方法 set.intersection_update()，Python 官方文档描述如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">help</span>(<span class="built_in">set</span>.intersection_update)</span><br></pre></td></tr></table></figure>

<pre><code>Help on method_descriptor:

intersection_update(...)
    Update a set with the intersection of itself and another.</code></pre>
<p>该方法接收任意的位置参数，更新集合，只保留在其他所有集合中都存在的元素。相当于 a &amp;= b &amp; …（a，b 是集合），但方法的参数可以是可迭代对象。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;</span><br><span class="line">a.intersection_update((<span class="number">1</span>,<span class="number">2</span>,<span class="number">5</span>),&#123;<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>&#125;)</span><br><span class="line">a</span><br></pre></td></tr></table></figure>




<pre><code>&#123;1&#125;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;</span><br><span class="line">a &amp;= &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">5</span>&#125; &amp; &#123;<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>&#125;</span><br><span class="line">a</span><br></pre></td></tr></table></figure>




<pre><code>&#123;1&#125;</code></pre>
<p>该方法是一个过程，就地修改集合，返回值为 None。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;</span><br><span class="line">b = a.intersection_update()</span><br><span class="line">print(b)</span><br></pre></td></tr></table></figure>

<pre><code>None</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/06_set/10_set.update-fcf185224aca/</url>
    <content><![CDATA[<h2 id="set-update-合并更新"><a href="#set-update-合并更新" class="headerlink" title="set.update 合并更新"></a>set.update 合并更新</h2><p>集合方法 set.update()，Python 官方文档描述如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">help</span>(<span class="built_in">set</span>.update)</span><br></pre></td></tr></table></figure>

<pre><code>Help on method_descriptor:

update(...)
    Update a set with the union of itself and others.</code></pre>
<p>该方法接收任意的位置参数，将其他集合的元素合并到一个集合中。相当于 a |= b | … （a，b 是集合），但方法的参数可以是可迭代对象。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = &#123;<span class="number">1</span>,<span class="number">2</span>&#125;</span><br><span class="line">a.update([<span class="number">3</span>],(<span class="number">4</span>,<span class="number">5</span>))</span><br><span class="line">a</span><br></pre></td></tr></table></figure>




<pre><code>&#123;1, 2, 3, 4, 5&#125;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = &#123;<span class="number">1</span>,<span class="number">2</span>&#125;</span><br><span class="line">a |= &#123;<span class="number">3</span>&#125; | &#123;<span class="number">4</span>,<span class="number">5</span>&#125;</span><br><span class="line">a</span><br></pre></td></tr></table></figure>




<pre><code>&#123;1, 2, 3, 4, 5&#125;</code></pre>
<p>该方法是一个过程，就地修改集合，返回值为 None。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = &#123;<span class="number">1</span>,<span class="number">2</span>&#125;</span><br><span class="line">b = a.update([<span class="number">3</span>],(<span class="number">4</span>,<span class="number">5</span>))</span><br><span class="line">print(b)</span><br></pre></td></tr></table></figure>

<pre><code>None</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/06_set/09_set.copy-fdfd1739b562/</url>
    <content><![CDATA[<h2 id="set-copy-浅拷贝"><a href="#set-copy-浅拷贝" class="headerlink" title="set.copy 浅拷贝"></a>set.copy 浅拷贝</h2><p>集合方法 set.copy()，Python 官方文档描述如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">help</span>(<span class="built_in">set</span>.copy)</span><br></pre></td></tr></table></figure>

<pre><code>Help on method_descriptor:

copy(...)
    Return a shallow copy of a set.</code></pre>
<p>返回集合的一个浅拷贝。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = &#123;<span class="number">1</span>,<span class="number">2</span>&#125;</span><br><span class="line">print(<span class="built_in">id</span>(a),a)</span><br><span class="line">b = a.copy()</span><br><span class="line"><span class="built_in">id</span>(b),b</span><br></pre></td></tr></table></figure>

<pre><code>2091426558696 &#123;1, 2&#125;





(2091426559368, &#123;1, 2&#125;)</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/06_set/08_set.symmetric_difference-015a8d234608/</url>
    <content><![CDATA[<h2 id="set-symmetric-difference-对称差"><a href="#set-symmetric-difference-对称差" class="headerlink" title="set.symmetric_difference 对称差"></a>set.symmetric_difference 对称差</h2><p>集合方法 set.symmetric_difference()，Python 官方文档描述如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">help</span>(<span class="built_in">set</span>.symmetric_difference)</span><br></pre></td></tr></table></figure>

<pre><code>Help on method_descriptor:

symmetric_difference(...)
    Return the symmetric difference of two sets as a new set.

    (i.e. all elements that are in exactly one of the sets.)</code></pre>
<p>返回两个集合中非共同元素组成的新集合。相当于 a ^ b（a，b 是集合），但方法的参数可以是可迭代对象。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;.symmetric_difference([<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>])</span><br></pre></td></tr></table></figure>




<pre><code>&#123;1, 4&#125;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125; ^ &#123;<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;</span><br></pre></td></tr></table></figure>




<pre><code>&#123;1, 4&#125;</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/06_set/07_set.difference-77375525d729/</url>
    <content><![CDATA[<h2 id="set-difference-差集"><a href="#set-difference-差集" class="headerlink" title="set.difference 差集"></a>set.difference 差集</h2><p>集合方法 set.difference()，Python 官方文档描述如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">help</span>(<span class="built_in">set</span>.difference)</span><br></pre></td></tr></table></figure>

<pre><code>Help on method_descriptor:

difference(...)
    Return the difference of two or more sets as a new set.

    (i.e. all elements that are in this set but not the others.)</code></pre>
<p>该方法接收任意的位置参数，返回一个集合在其他所有集合中都不存在的元素组成的新集合。相当于 a - b - … （a，b 是集合），但方法的参数可以是可迭代对象。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;.difference((<span class="number">2</span>,<span class="number">1</span>,<span class="number">5</span>),&#123;<span class="number">6</span>,<span class="number">2</span>,<span class="number">4</span>&#125;)</span><br></pre></td></tr></table></figure>




<pre><code>&#123;3&#125;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125; - &#123;<span class="number">2</span>,<span class="number">1</span>,<span class="number">5</span>&#125; - &#123;<span class="number">6</span>,<span class="number">2</span>,<span class="number">4</span>&#125;</span><br></pre></td></tr></table></figure>




<pre><code>&#123;3&#125;</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/06_set/06_set.intersection-e146aaa2077d/</url>
    <content><![CDATA[<h2 id="set-intersection-交集"><a href="#set-intersection-交集" class="headerlink" title="set.intersection 交集"></a>set.intersection 交集</h2><p>集合方法 set.intersection()，Python 官方文档描述如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">help</span>(<span class="built_in">set</span>.intersection)</span><br></pre></td></tr></table></figure>

<pre><code>Help on method_descriptor:

intersection(...)
    Return the intersection of two sets as a new set.

    (i.e. all elements that are in both sets.)</code></pre>
<p>该方法接收任意的位置参数，返回一个所有集合中共有的元素组成的新集合。相当于 a &amp; b &amp; … （a，b 是集合），但方法中的参数可以是可迭代对象。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;.intersection(&#123;<span class="number">3</span>,<span class="number">4</span>&#125;,[<span class="number">1</span>,<span class="number">5</span>,<span class="number">3</span>])</span><br></pre></td></tr></table></figure>




<pre><code>&#123;3&#125;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125; &amp; &#123;<span class="number">3</span>,<span class="number">4</span>&#125; &amp; &#123;<span class="number">1</span>,<span class="number">5</span>,<span class="number">3</span>&#125;</span><br></pre></td></tr></table></figure>




<pre><code>&#123;3&#125;</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/06_set/05_set.union-790db07409c6/</url>
    <content><![CDATA[<h2 id="set-union-并集"><a href="#set-union-并集" class="headerlink" title="set.union 并集"></a>set.union 并集</h2><p>集合方法 set.union()，Python 官方文档描述如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">help</span>(<span class="built_in">set</span>.union)</span><br></pre></td></tr></table></figure>

<pre><code>Help on method_descriptor:

union(...)
    Return the union of sets as a new set.

    (i.e. all elements that are in either set.)</code></pre>
<p>该方法接收任意的位置参数，返回一个所有集合的元素组成的新集合。相当于 a | b | … （a，b 是集合），但方法中的参数可以是可迭代对象。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;<span class="number">1</span>&#125;.union([<span class="number">2</span>],(<span class="number">3</span>,<span class="number">4</span>))</span><br></pre></td></tr></table></figure>




<pre><code>&#123;1, 2, 3, 4&#125;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;<span class="number">1</span>&#125; | &#123;<span class="number">2</span>&#125; | &#123;<span class="number">3</span>,<span class="number">4</span>&#125;</span><br></pre></td></tr></table></figure>




<pre><code>&#123;1, 2, 3, 4&#125;</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/06_set/04_set.issuperset-2f8e8004700a/</url>
    <content><![CDATA[<h2 id="set-issuperset-是超集吗？"><a href="#set-issuperset-是超集吗？" class="headerlink" title="set.issuperset 是超集吗？"></a>set.issuperset 是超集吗？</h2><p>集合方法 set.issuperset()，Python 官方文档描述如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">help</span>(<span class="built_in">set</span>.issuperset)</span><br></pre></td></tr></table></figure>

<pre><code>Help on method_descriptor:

issuperset(...)
    Report whether this set contains another set.</code></pre>
<p>检查一个集合是否是另一个集合的超集。相当于 a &gt;= b（a，b 是两个集合），但方法中的参数可以是可迭代对象。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;<span class="number">1</span>,<span class="number">2</span>&#125;.issuperset(&#123;<span class="literal">True</span>:<span class="string">&#x27;1&#x27;</span>,<span class="number">2</span>:<span class="string">&#x27;2&#x27;</span>&#125;)</span><br></pre></td></tr></table></figure>




<pre><code>True</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125; &gt;= &#123;<span class="literal">True</span>,<span class="number">2</span>&#125;</span><br></pre></td></tr></table></figure>




<pre><code>True</code></pre>
<p>对于真超集，使用 <code>&gt;</code> 进行检查：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125; &gt; &#123;<span class="literal">True</span>,<span class="number">2</span>&#125;</span><br></pre></td></tr></table></figure>




<pre><code>True</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;<span class="number">1</span>,<span class="number">2</span>&#125; &gt; &#123;<span class="literal">True</span>,<span class="number">2</span>&#125;</span><br></pre></td></tr></table></figure>




<pre><code>False</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/06_set/03_set.issubset-ac04e75aad34/</url>
    <content><![CDATA[<h2 id="set-issubset-是子集吗？"><a href="#set-issubset-是子集吗？" class="headerlink" title="set.issubset 是子集吗？"></a>set.issubset 是子集吗？</h2><p>集合方法 set.issubset()，Python 官方文档描述如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">help</span>(<span class="built_in">set</span>.issubset)</span><br></pre></td></tr></table></figure>

<pre><code>Help on method_descriptor:

issubset(...)
    Report whether another set contains this set.</code></pre>
<p>检查一个集合中的元素，是否都在另一个集合中。相当于 a &lt;= b（a，b 是两个集合），但方法中的参数可以是可迭代对象。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;<span class="number">1</span>,<span class="number">2</span>&#125;.issubset([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br></pre></td></tr></table></figure>




<pre><code>True</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;<span class="number">1</span>,<span class="number">2</span>&#125; &lt;= &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;</span><br></pre></td></tr></table></figure>




<pre><code>True</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;<span class="number">1</span>,<span class="number">2</span>&#125;.issubset((<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>))</span><br></pre></td></tr></table></figure>




<pre><code>True</code></pre>
<p>该方法检查是否是子集，而对于真子集，可以使用 <code>&lt;</code> 进行检查：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;<span class="number">1</span>,<span class="number">2</span>&#125; &lt; &#123;<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>&#125;</span><br></pre></td></tr></table></figure>




<pre><code>False</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;<span class="number">1</span>,<span class="number">2</span>&#125; &lt; &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;</span><br></pre></td></tr></table></figure>




<pre><code>True</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/06_set/02_set.isdisjoint-3e2088f07888/</url>
    <content><![CDATA[<h2 id="set-isdisjoint-交集为空吗？"><a href="#set-isdisjoint-交集为空吗？" class="headerlink" title="set.isdisjoint 交集为空吗？"></a>set.isdisjoint 交集为空吗？</h2><p>集合方法 set.isdisjoint()，Python 官方文档描述如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">help</span>(<span class="built_in">set</span>.isdisjoint)</span><br></pre></td></tr></table></figure>

<pre><code>Help on method_descriptor:

isdisjoint(...)
    Return True if two sets have a null intersection.</code></pre>
<p>两个集合的交集为空，则返回 True。方法中的参数可以是可迭代对象。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;<span class="number">1</span>,<span class="number">2</span>&#125;.isdisjoint([<span class="number">1</span>,<span class="number">2</span>])</span><br></pre></td></tr></table></figure>




<pre><code>False</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;<span class="number">1</span>,<span class="number">2</span>&#125;.isdisjoint([<span class="number">3</span>,<span class="number">4</span>])</span><br></pre></td></tr></table></figure>




<pre><code>True</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;<span class="number">1</span>,<span class="number">2</span>&#125;.isdisjoint(<span class="string">&#x27;12&#x27;</span>) <span class="comment"># 参数是字符串而非数字</span></span><br></pre></td></tr></table></figure>




<pre><code>True</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/06_set/01_set-0ac8a008ad26/</url>
    <content><![CDATA[<h2 id="集合概述"><a href="#集合概述" class="headerlink" title="集合概述"></a>集合概述</h2><p>集合是由具有唯一性的可哈希对象（一个对象的哈希值如果在其生命周期内绝不改变）组成的无序多项集。</p>
<p>目前有两种内置集合类型，set 和 frozenset，前者是可变类型，后者是不可变类型。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">type</span>(&#123;<span class="number">1</span>&#125;), <span class="built_in">type</span>(<span class="built_in">frozenset</span>())</span><br></pre></td></tr></table></figure>




<pre><code>(set, frozenset)</code></pre>
<p>因为一对花括号表示字典而非集合，所以创建空集合必须使用构造函数 <a href="https://xue.cn/hub/reader?bookId=64&path=xue_python_kp/11_built-in_function/54_set.ipynb">set()</a> 和 <a href="https://xue.cn/hub/reader?bookId=64&path=xue_python_kp/11_built-in_function/23_frozenset.ipynb">frozenset()</a> 来表示。两个内置函数还可将可迭代对象转换为集合：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">type</span>(&#123;&#125;), <span class="built_in">set</span>(), <span class="built_in">frozenset</span>()</span><br></pre></td></tr></table></figure>




<pre><code>(dict, set(), frozenset())</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set</span>(<span class="string">&#x27;121&#x27;</span>), <span class="built_in">frozenset</span>(<span class="string">&#x27;112&#x27;</span>)</span><br></pre></td></tr></table></figure>




<pre><code>(&#123;&#39;1&#39;, &#39;2&#39;&#125;, frozenset(&#123;&#39;1&#39;, &#39;2&#39;&#125;))</code></pre>
<p>构造 set 集合还可以直接使用一对花括号包含元素，元素之间用逗号隔开：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>&#125;</span><br></pre></td></tr></table></figure>




<pre><code>&#123;1, 2&#125;</code></pre>
<p>集合的元素必须是可哈希的，例如字符串，元组（不能包含不可哈希对象，例如元组里有列表）；也是唯一的，同时存在多个哈希值相等的元素，只保留一个。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="built_in">hash</span>(<span class="literal">False</span>),<span class="built_in">hash</span>(<span class="number">0</span>))</span><br></pre></td></tr></table></figure>

<pre><code>0 0</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">&#x27;12&#x27;</span>, (<span class="number">1</span>,<span class="number">2</span>), <span class="literal">False</span>, <span class="number">0</span>&#125;</span><br></pre></td></tr></table></figure>




<pre><code>&#123;(1, 2), &#39;12&#39;, False&#125;</code></pre>
<p>set 类型集合是可变类型，没有哈希值，不可作为集合的元素或字典的键，而 frozenset 类型的集合可以：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;<span class="built_in">frozenset</span>([<span class="number">1</span>,<span class="number">2</span>])&#125;</span><br></pre></td></tr></table></figure>




<pre><code>&#123;frozenset(&#123;1, 2&#125;)&#125;</code></pre>
<p>两种类型集合可进行比较，并集，交集，差集，对称差集操作：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;<span class="number">1</span>,<span class="number">2</span>&#125; == <span class="built_in">frozenset</span>(&#123;<span class="number">1</span>,<span class="number">2</span>&#125;)</span><br></pre></td></tr></table></figure>




<pre><code>True</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;<span class="number">1</span>,<span class="number">2</span>&#125; | <span class="built_in">frozenset</span>(&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;)</span><br></pre></td></tr></table></figure>




<pre><code>&#123;1, 2, 3&#125;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">frozenset</span>(&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;) ^ &#123;<span class="number">1</span>,<span class="number">2</span>&#125;</span><br></pre></td></tr></table></figure>




<pre><code>frozenset(&#123;3&#125;)</code></pre>
<p>set 类型是可变的，还可进行元素增、删、改，等操作，而 frozenset 类型不可以：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="built_in">set</span>()</span><br><span class="line">print(<span class="built_in">id</span>(a))</span><br><span class="line"><span class="comment"># a 增加元素 1</span></span><br><span class="line">a.add(<span class="number">1</span>)</span><br><span class="line">print(<span class="built_in">id</span>(a),a)</span><br><span class="line"><span class="comment"># 将一个集合并入 a</span></span><br><span class="line">a |= <span class="built_in">frozenset</span>(&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;)</span><br><span class="line">print(<span class="built_in">id</span>(a),a)</span><br><span class="line"><span class="comment"># 清空集合 a</span></span><br><span class="line">a.clear()</span><br><span class="line">print(<span class="built_in">id</span>(a),a)</span><br></pre></td></tr></table></figure>

<pre><code>2029775797832
2029775797832 &#123;1&#125;
2029775797832 &#123;1, 2, 3&#125;
2029775797832 set()</code></pre>
<p>集合是按哈希值对元素进行储存，而不是按顺序，因此集合没有索引和切片操作。搜索元素时，由于是通过哈希值匹配，集合比序列类型效率高。</p>
<p>由于集合仅定义了部分排序（子集关系），比较大小的排序并无定义。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;<span class="number">2</span>,<span class="number">1</span>,<span class="number">5</span>&#125; &gt; &#123;<span class="number">2</span>,<span class="number">5</span>&#125;</span><br></pre></td></tr></table></figure>




<pre><code>True</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = [&#123;<span class="number">2</span>,<span class="number">1</span>,<span class="number">5</span>&#125;,&#123;<span class="number">9</span>&#125;,&#123;<span class="number">6</span>&#125;,&#123;<span class="number">2</span>,<span class="number">5</span>&#125;]</span><br><span class="line">a.sort() </span><br><span class="line">a</span><br></pre></td></tr></table></figure>




<pre><code>[&#123;1, 2, 5&#125;, &#123;9&#125;, &#123;6&#125;, &#123;2, 5&#125;]</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/05_sequence/04_common_operations-d633fd2df6c3/</url>
    <content><![CDATA[<h2 id="序列通用操作"><a href="#序列通用操作" class="headerlink" title="序列通用操作"></a>序列通用操作</h2><p>序列类型有许多通用的操作，在各个知识点都有详细的介绍，下面将他们综合起来比较。</p>
<p>序列类型都可以使用操作符 <code>+</code> 进行拼接，使用 <code>+=</code> 拼接并赋值（range 除外），但对于可变序列类型，使用 <code>+=</code> 是原地修改：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = [<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line">print(<span class="built_in">id</span>(a))</span><br><span class="line">a += [<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"><span class="built_in">id</span>(a), a</span><br></pre></td></tr></table></figure>

<pre><code>2612604344328





(2612604344328, [1, 2, 3, 4])</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;12&#x27;</span>+<span class="string">&#x27;34&#x27;</span>, [<span class="number">1</span>,<span class="number">2</span>]+[<span class="number">3</span>,<span class="number">4</span>], (<span class="number">1</span>,<span class="number">2</span>)+(<span class="number">3</span>,<span class="number">4</span>)</span><br></pre></td></tr></table></figure>




<pre><code>(&#39;1234&#39;, [1, 2, 3, 4], (1, 2, 3, 4))</code></pre>
<p>序列类型都可以使用操作符 <code>*</code> 进行重复并拼接，使用 <code>*=</code> 拼接并赋值（range 除外），但对于可变序列类型，使用 <code>*=</code> 是原地修改：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;1&#x27;</span>*<span class="number">2</span>, <span class="number">2</span>*[<span class="number">1</span>], (<span class="number">1</span>,)*<span class="number">2</span></span><br></pre></td></tr></table></figure>




<pre><code>(&#39;11&#39;, [1, 1], (1, 1))</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = [<span class="number">1</span>]</span><br><span class="line">print(<span class="built_in">id</span>(a))</span><br><span class="line">a *= <span class="number">2</span></span><br><span class="line"><span class="built_in">id</span>(a), a</span><br></pre></td></tr></table></figure>

<pre><code>2612603190024





(2612603190024, [1, 1])</code></pre>
<p>序列类型都可以使用 <code>*</code> 进行拆包，拆包之后需要包含在列表，元组，集合中，或用于函数传参：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[*(<span class="number">1</span>,<span class="number">2</span>)], (*[<span class="number">1</span>,<span class="number">2</span>],), &#123;*<span class="built_in">range</span>(<span class="number">1</span>,<span class="number">3</span>)&#125;</span><br></pre></td></tr></table></figure>




<pre><code>([1, 2], (1, 2), &#123;1, 2&#125;)</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(*<span class="string">&#x27;123&#x27;</span>)</span><br></pre></td></tr></table></figure>

<pre><code>1 2 3</code></pre>
<p>序列类型都可以使用索引或切片操作取值，但对于可变序列类型，还可以使用索引或切片操作进行内容的增、删、改：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="string">&#x27;1234&#x27;</span></span><br><span class="line">b = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">c = (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line">d = <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">5</span>)</span><br><span class="line">a[<span class="number">0</span>], b[<span class="number">0</span>], c[<span class="number">0</span>], d[<span class="number">0</span>]</span><br></pre></td></tr></table></figure>




<pre><code>(&#39;1&#39;, 1, 1, 1)</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a[<span class="number">1</span>:<span class="number">3</span>], b[<span class="number">1</span>:<span class="number">3</span>], c[<span class="number">1</span>:<span class="number">3</span>], d[<span class="number">1</span>:<span class="number">3</span>]</span><br></pre></td></tr></table></figure>




<pre><code>(&#39;23&#39;, [2, 3], (2, 3), range(2, 4))</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">b[<span class="number">1</span>:<span class="number">3</span>] = <span class="string">&#x27;abc&#x27;</span></span><br><span class="line">b</span><br></pre></td></tr></table></figure>




<pre><code>[1, &#39;a&#39;, &#39;b&#39;, &#39;c&#39;, 4]</code></pre>
<p>序列类型都有方法 index 和 count，但字符串和字节串的 count 方法可以指定范围（具体详见各知识点的方法）：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;1234&#x27;</span>.index(<span class="string">&#x27;23&#x27;</span>),\</span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>].index(<span class="number">2</span>),\</span><br><span class="line"><span class="built_in">range</span>(<span class="number">1</span>,<span class="number">4</span>).index(<span class="number">2</span>)</span><br></pre></td></tr></table></figure>




<pre><code>(1, 1, 1)</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;1231&#x27;</span>.count(<span class="string">&#x27;1&#x27;</span>,<span class="number">1</span>,<span class="number">3</span>),\</span><br><span class="line">(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>).count(<span class="number">1</span>)</span><br></pre></td></tr></table></figure>




<pre><code>(0, 2)</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/05_sequence/03_index_slice-5601c0662ae0/</url>
    <content><![CDATA[<h2 id="序列索引和切片"><a href="#序列索引和切片" class="headerlink" title="序列索引和切片"></a>序列索引和切片</h2><p>序列类型都可以使用下标进行索引或切片取值，这是序列类型通用操作。可变序列类型比较特殊，例如列表，可以利用索引或切片进行元素增、删、改，详见 <a href="https://xue.cn/hub/reader?bookId=64&path=xue_python_kp/03_list/03_list_indexes_and_slices.ipynb">列表的索引和切片</a>。</p>
<p>下标从前往后，则以 0 开始，从后往前，则从 -1 开始，双向索引：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;)</span><br><span class="line">  0    1    2    3</span><br><span class="line"> -4   -3   -2   -1</span><br></pre></td></tr></table></figure>

<p>下标索引，直接取出对应索引下的值，超出范围则报错：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">a[<span class="number">10</span>]</span><br></pre></td></tr></table></figure>


<pre><code>---------------------------------------------------------------------------

IndexError                                Traceback (most recent call last)

&lt;ipython-input-18-5680bb375980&gt; in &lt;module&gt;
      1 a = [1,2,3,4]
----&gt; 2 a[10]


IndexError: list index out of range</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">a[<span class="number">0</span>], a[<span class="number">-2</span>]</span><br></pre></td></tr></table></figure>




<pre><code>(1, 3)</code></pre>
<p>下标切片取值规则：[起始:结束:步长]，不包含结束。</p>
<ul>
<li>没有指定起始，则默认为 0；</li>
<li>没有指定结束则默认到最后一个元素结束；</li>
<li>下标可以双向混合使用；</li>
<li>没有指定步长，则默认为 1；</li>
<li>步长为负数，则反向取值，-1 开始。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>]</span><br><span class="line">a[:<span class="number">3</span>]</span><br></pre></td></tr></table></figure>




<pre><code>[1, 2, 3]</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>]</span><br><span class="line">a[<span class="number">3</span>:]</span><br></pre></td></tr></table></figure>




<pre><code>[4, 5, 6, 7]</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>]</span><br><span class="line">a[<span class="number">1</span>:<span class="number">-3</span>], a[<span class="number">-6</span>:<span class="number">4</span>]</span><br></pre></td></tr></table></figure>




<pre><code>([2, 3, 4], [2, 3, 4])</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>]</span><br><span class="line">a[::<span class="number">2</span>]</span><br></pre></td></tr></table></figure>




<pre><code>[1, 3, 5, 7]</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>]</span><br><span class="line">a[::<span class="number">-2</span>] <span class="comment"># 默认 -1 开始取</span></span><br></pre></td></tr></table></figure>




<pre><code>[7, 5, 3, 1]</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>]</span><br><span class="line">a[<span class="number">0</span>:<span class="number">7</span>:<span class="number">-2</span>]</span><br></pre></td></tr></table></figure>




<pre><code>[]</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>]</span><br><span class="line">a[<span class="number">-1</span>:<span class="number">0</span>:<span class="number">-2</span>]</span><br></pre></td></tr></table></figure>




<pre><code>[7, 5, 3]</code></pre>
<p>切片范围可以无限大，范围内没有元素，则得到空的容器：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>]</span><br><span class="line">a[<span class="number">5</span>:<span class="number">100</span>], a[<span class="number">1</span>:<span class="number">1</span>], a[<span class="number">5</span>:<span class="number">-10</span>]</span><br></pre></td></tr></table></figure>




<pre><code>([6, 7], [], [])</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/05_sequence/02_range-114ca2ad46d8/</url>
    <content><![CDATA[<h2 id="range-对象"><a href="#range-对象" class="headerlink" title="range 对象"></a>range 对象</h2><p>range 对象是一个整数等差数列，用内置函数 <a href="https://xue.cn/hub/reader?bookId=64&path=xue_python_kp/11_built-in_function/50_range.ipynb">range()</a> 构造得到，类型是 range：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">type</span>(<span class="built_in">range</span>(<span class="number">3</span>))</span><br></pre></td></tr></table></figure>




<pre><code>range</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">range</span>(<span class="number">-1</span>,<span class="number">5</span>,<span class="number">2</span>)</span><br></pre></td></tr></table></figure>




<pre><code>range(-1, 5, 2)</code></pre>
<p>range 通常用于在 for 循环中循环指定的次数：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">    print(<span class="string">&#x27;重要的事情说三遍&#x27;</span>)</span><br></pre></td></tr></table></figure>

<pre><code>重要的事情说三遍
重要的事情说三遍
重要的事情说三遍</code></pre>
<p>range 对象可以指定起始值（默认 0），结束值（不包含），和等差数列的公差（默认 1）。</p>
<p>指定一个大于 0 的值则默认从 0 开始，公差为 1，到指定值之前一个整数结束：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">5</span>))</span><br></pre></td></tr></table></figure>




<pre><code>[0, 1, 2, 3, 4]</code></pre>
<p>因为公差默认为 1，指定一个小于等于 0 的值则得到空 range：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">-5</span>))</span><br></pre></td></tr></table></figure>




<pre><code>[]</code></pre>
<p>起始值，结束值，公差都指定，则得到相应等差数列：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">1</span>,<span class="number">5</span>))</span><br></pre></td></tr></table></figure>




<pre><code>[1, 2, 3, 4]</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">1</span>,<span class="number">-5</span>,<span class="number">-1</span>))</span><br></pre></td></tr></table></figure>




<pre><code>[1, 0, -1, -2, -3, -4]</code></pre>
<p>range 类型相比常规 list 或 tuple，优势在于一个 range 对象总是占用固定的（较小）内存，不论其所表示的范围有多大。因为 range 类型只保存了 start, stop 和 step 值，并会根据需要计算具体单项或子范围的值。</p>
<p>除了拆包可以使用操作符<code>*</code>，range 对象不可以像列表，元组等一样，使用 <code>+</code>，<code>*</code>，<code>+=</code>，<code>*=</code>进行拼接或重复：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">(*<span class="built_in">range</span>(<span class="number">3</span>),)</span><br></pre></td></tr></table></figure>




<pre><code>(0, 1, 2)</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/05_sequence/01_sequence-1471877459de/</url>
    <content><![CDATA[<h2 id="序列类型概述"><a href="#序列类型概述" class="headerlink" title="序列类型概述"></a>序列类型概述</h2><p>序列类型有列表，元组，range，字符串，字节串等。之所以称为序列类型，因为它们中的元素是按顺序排列的，可以使用下标索引或切片取值。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">b = <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span></span><br><span class="line">c = <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">4</span>)</span><br><span class="line">d = <span class="string">&#x27;123&#x27;</span></span><br><span class="line">e = <span class="string">b&#x27;123&#x27;</span></span><br><span class="line">a[<span class="number">0</span>],b[<span class="number">0</span>],c[<span class="number">0</span>],d[<span class="number">0</span>],e[<span class="number">0</span>]</span><br></pre></td></tr></table></figure>




<pre><code>(1, 1, 1, &#39;1&#39;, 49)</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">chr</span>(<span class="number">49</span>) <span class="comment"># 字节串索引取到的是 Unicode 码位值</span></span><br></pre></td></tr></table></figure>




<pre><code>&#39;1&#39;</code></pre>
<p>序列类型又分为可变和不可变两种，列表是可变序列类型，元组，range，字符串，字节串是不可变序列类型。不可变序列类型普遍实现而可变序列类型未实现的唯一操作就是对 hash() 内置函数的支持。</p>
<p>这种支持允许不可变类型，例如元组被用作字典的键，以及存储在集合中。</p>
<p>尝试对包含有不可哈希值的不可变序列进行哈希运算将会导致 TypeError。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">hash</span>((<span class="number">1</span>,<span class="number">2</span>)), <span class="built_in">hash</span>(<span class="string">&#x27;12&#x27;</span>)</span><br></pre></td></tr></table></figure>




<pre><code>(-3550055125485641917, -480100434937186025)</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;(<span class="number">1</span>,<span class="number">2</span>), <span class="string">&#x27;12&#x27;</span>&#125;</span><br></pre></td></tr></table></figure>




<pre><code>&#123;(1, 2), &#39;12&#39;&#125;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;([<span class="number">1</span>,<span class="number">2</span>],<span class="number">3</span>),<span class="number">4</span>&#125;</span><br></pre></td></tr></table></figure>


<pre><code>---------------------------------------------------------------------------

TypeError                                 Traceback (most recent call last)

&lt;ipython-input-10-b847264454c5&gt; in &lt;module&gt;
----&gt; 1 &#123;([1,2],3),4&#125;


TypeError: unhashable type: &#39;list&#39;</code></pre>
<p>可变序列类型，可以就地进行元素的增、删、改，而不可变序列类型不可以，有时看起来像，但其实是创建了新对象：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a, b = [<span class="number">1</span>,<span class="number">2</span>], (<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line">print(<span class="built_in">id</span>(a),<span class="built_in">id</span>(b))</span><br><span class="line">a += [<span class="number">3</span>] <span class="comment"># 将元素 3 加入列表中，相当于 a.extend([3])</span></span><br><span class="line">b += (<span class="number">3</span>,) <span class="comment"># 将元组 b 与元组 (3,) 拼接赋值给 b</span></span><br><span class="line">print(a,b)</span><br><span class="line">print(<span class="built_in">id</span>(a), <span class="built_in">id</span>(b))</span><br></pre></td></tr></table></figure>

<pre><code>2058115879744 2058115232576
[1, 2, 3] (1, 2, 3)
2058115879744 2058115884416</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/04_tuple/04_operator-47a8e27ae1cd/</url>
    <content><![CDATA[<h2 id="元组操作符"><a href="#元组操作符" class="headerlink" title="元组操作符"></a>元组操作符</h2><p>元组可以使用 <code>+</code> 拼接，拼接后按原来的顺序排列：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">(<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>) + (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br></pre></td></tr></table></figure>




<pre><code>(4, 5, 6, 1, 2, 3)</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span> + <span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span></span><br></pre></td></tr></table></figure>




<pre><code>(1, 2, 7, 5, 6)</code></pre>
<p><code>+</code> 操作符可以与 <code>=</code> 连用，拼接同时赋值，元组是不可变的，该操作是创建了一个新元组：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span></span><br><span class="line">print(<span class="built_in">id</span>(a))</span><br><span class="line">a += <span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span></span><br><span class="line"><span class="built_in">id</span>(a), a</span><br></pre></td></tr></table></figure>

<pre><code>2741588191344





(2741587773864, (1, 2, 3, 4, 5, 6))</code></pre>
<p>元组还可使用 <code>*</code> 进行 n 次重复拼接：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">(<span class="number">1</span>,)*<span class="number">3</span></span><br></pre></td></tr></table></figure>




<pre><code>(1, 1, 1)</code></pre>
<p>当 n 小于 1 时，得到空元组：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)*<span class="number">0</span></span><br></pre></td></tr></table></figure>




<pre><code>()</code></pre>
<p>元组中的元素如果是可变对象，<code>*</code> 重复拼接后，可变对象的性质同 <a href="https://xue.cn/hub/reader?bookId=64&path=xue_python_kp/03_list/04_list_operator.ipynb">列表操作符</a> 知识点一样，仍然是同一个对象的多次引用：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = ([],)</span><br><span class="line">b = a*<span class="number">3</span></span><br><span class="line"><span class="comment"># 在元组 a 的第一个元素中加入 1</span></span><br><span class="line">a[<span class="number">0</span>].append(<span class="number">1</span>)</span><br><span class="line">b</span><br></pre></td></tr></table></figure>




<pre><code>([1], [1], [1])</code></pre>
<p>同列表一样可以用 <code>*=</code>，重复拼接并赋值：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="number">1</span>,</span><br><span class="line">a *= <span class="number">3</span></span><br><span class="line">a</span><br></pre></td></tr></table></figure>




<pre><code>(1, 1, 1)</code></pre>
<p>元组是可迭代对象，所以可以用 <code>*</code> 将元组拆包：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;*(<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)&#125;</span><br></pre></td></tr></table></figure>




<pre><code>&#123;1, 2, 3&#125;</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/04_tuple/03_tuple.index-99eeab7a2d0c/</url>
    <content><![CDATA[<h2 id="tuple-index-查找元素索引"><a href="#tuple-index-查找元素索引" class="headerlink" title="tuple.index 查找元素索引"></a>tuple.index 查找元素索引</h2><p>元组方法 tuple.index()，Python 官方文档描述如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">help</span>(<span class="built_in">tuple</span>.index)</span><br></pre></td></tr></table></figure>

<pre><code>Help on method_descriptor:

index(self, value, start=0, stop=9223372036854775807, /)
    Return first index of value.

    Raises ValueError if the value is not present.</code></pre>
<p>返回列表中第一个值为 value 的元素从零开始的索引。如果没有这样的元素将会抛出 ValueError 异常。</p>
<p>可选参数 start 和 stop 是切片符号，用于将搜索限制为元组的特定子序列。返回的是相对于整个序列开始计算的索引，而不是相对于 start 参数。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">1</span>).index(<span class="number">1</span>)</span><br></pre></td></tr></table></figure>




<pre><code>0</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">1</span>).index(<span class="number">1</span>,<span class="number">1</span>)</span><br></pre></td></tr></table></figure>




<pre><code>4</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">1</span>).index(<span class="number">1</span>,<span class="number">1</span>,<span class="number">3</span>)</span><br></pre></td></tr></table></figure>


<pre><code>---------------------------------------------------------------------------

ValueError                                Traceback (most recent call last)

&lt;ipython-input-4-c6a812394eea&gt; in &lt;module&gt;
----&gt; 1 (1,2,3,4,1).index(1,1,3)


ValueError: tuple.index(x): x not in tuple</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/04_tuple/02_tuple.count-f0a6842a8d99/</url>
    <content><![CDATA[<h2 id="tuple-count-统计元素出现次数"><a href="#tuple-count-统计元素出现次数" class="headerlink" title="tuple.count 统计元素出现次数"></a>tuple.count 统计元素出现次数</h2><p>元组方法 tuple.count()，Python 官方文档描述如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">help</span>(<span class="built_in">tuple</span>.count)</span><br></pre></td></tr></table></figure>

<pre><code>Help on method_descriptor:

count(self, value, /)
    Return number of occurrences of value.</code></pre>
<p>返回值为 value 的元素在元组中的出现次数。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">(<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">3</span>).count(<span class="number">1</span>)</span><br></pre></td></tr></table></figure>




<pre><code>2</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">(<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">3</span>).count(<span class="number">4</span>)</span><br></pre></td></tr></table></figure>




<pre><code>0</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/04_tuple/01_tuple-0698666df6a8/</url>
    <content><![CDATA[<h2 id="元组概述"><a href="#元组概述" class="headerlink" title="元组概述"></a>元组概述</h2><p>元组是不可变序列，通常用一对小括号包围元素，元素之间逗号隔开。元组的元素可以是任何对象。元组类型是 tuple：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">type</span>((<span class="number">1</span>,<span class="number">2</span>,[<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;2&#x27;</span>]))</span><br></pre></td></tr></table></figure>




<pre><code>tuple</code></pre>
<p>空元组用一对圆括号表示：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">()</span><br></pre></td></tr></table></figure>




<pre><code>()</code></pre>
<p>单元组后面必须有一个逗号:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">(<span class="number">1</span>,)</span><br></pre></td></tr></table></figure>




<pre><code>(1,)</code></pre>
<p>除了空元组，括号可以省略，因为决定生成元组的其实是逗号而不是圆括号，圆括号是可选的，但元组是更大的表达式的一部分或会产生语法歧义的情况，括号不能省略：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>,</span><br></pre></td></tr></table></figure>




<pre><code>(1,)</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>, <span class="number">1</span>+<span class="number">1</span>, (<span class="string">&#x27;单元组&#x27;</span>,)</span><br></pre></td></tr></table></figure>




<pre><code>(1, 2, (&#39;单元组&#39;,))</code></pre>
<p>内置函数 <a href="https://xue.cn/hub/reader?bookId=64&path=xue_python_kp/11_built-in_function/62_tuple.ipynb">tuple()</a> 用来构造元组：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">tuple</span>(), <span class="built_in">tuple</span>(<span class="string">&#x27;123&#x27;</span>)</span><br></pre></td></tr></table></figure>




<pre><code>((), (&#39;1&#39;, &#39;2&#39;, &#39;3&#39;))</code></pre>
<p>当元组中包含可变对象（例如列表）时，元组本身不可变（不能增、删、改元组本身的元素），但包含的可变对象仍然具有它的可变性质及其操作，此时的元组不能再作为集合的元素或字典的键：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = ([<span class="number">1</span>,<span class="number">2</span>],<span class="number">3</span>,<span class="number">3</span>)</span><br><span class="line">print(<span class="built_in">id</span>(a))</span><br><span class="line"><span class="keyword">del</span> a[<span class="number">0</span>][:]</span><br><span class="line"><span class="built_in">id</span>(a), a</span><br></pre></td></tr></table></figure>

<pre><code>2207053762176





(2207053762176, ([], 3, 3))</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;a&#125;</span><br></pre></td></tr></table></figure>


<pre><code>---------------------------------------------------------------------------

TypeError                                 Traceback (most recent call last)

&lt;ipython-input-14-29dfa031a339&gt; in &lt;module&gt;
----&gt; 1 &#123;a&#125;


TypeError: unhashable type: &#39;list&#39;</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/03_list/15_list.clear-36c42c6f6c90/</url>
    <content><![CDATA[<h2 id="list-clear-删除所有元素"><a href="#list-clear-删除所有元素" class="headerlink" title="list.clear 删除所有元素"></a>list.clear 删除所有元素</h2><p>列表方法 list.clear()，Python 官方文档描述如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">help</span>(<span class="built_in">list</span>.clear)</span><br></pre></td></tr></table></figure>

<pre><code>Help on method_descriptor:

clear(self, /)
    Remove all items from list.</code></pre>
<p>删除列表中所有的元素。相当于 del a[:]（a 是列表）。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">_list = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">_list.clear()</span><br><span class="line">_list</span><br></pre></td></tr></table></figure>




<pre><code>[]</code></pre>
<p>del a[:] 是删除列表 a 中的所有元素，和 a 的浅拷贝无关：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">b = a[:]</span><br><span class="line"><span class="keyword">del</span> a[:]</span><br><span class="line">a, b</span><br></pre></td></tr></table></figure>




<pre><code>([], [1, 2, 3])</code></pre>
<p>该方法是一个过程 (过程就是不返回有意义结果的函数；在 Python 中，过程的返回值为 None), 直接对原列表进行修改：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">_list = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">a = _list.clear()</span><br><span class="line">print(a)</span><br></pre></td></tr></table></figure>

<pre><code>None</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/03_list/14_list.copy-459819b69520/</url>
    <content><![CDATA[<h2 id="list-copy-列表的一个浅拷贝"><a href="#list-copy-列表的一个浅拷贝" class="headerlink" title="list.copy 列表的一个浅拷贝"></a>list.copy 列表的一个浅拷贝</h2><p>列表方法 list.copy()，Python 官方文档描述如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">help</span>(<span class="built_in">list</span>.copy)</span><br></pre></td></tr></table></figure>

<pre><code>Help on method_descriptor:

copy(self, /)
    Return a shallow copy of the list.</code></pre>
<p>返回列表的一个浅拷贝。相当于 a[:]（a 是一个列表）。浅拷贝得到新的列表，列表中有可变对象时，浅拷贝中的可变对象元素，是原列表中同一个对象的多次引用。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list_1 = [[<span class="number">1</span>],<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">list_2 = list_1.copy()</span><br><span class="line">print(list_2)</span><br><span class="line"><span class="built_in">id</span>(list_1),<span class="built_in">id</span>(list_2)</span><br></pre></td></tr></table></figure>

<pre><code>[[1], 2, 3]





(2622792783240, 2622792782728)</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 同一个对象</span></span><br><span class="line"><span class="built_in">id</span>(list_1[<span class="number">0</span>]), <span class="built_in">id</span>(list_2[<span class="number">0</span>])</span><br></pre></td></tr></table></figure>




<pre><code>(2622792782792, 2622792782792)</code></pre>
<p>改变其中一个都会跟着改变：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list_1[<span class="number">0</span>][:] = <span class="string">&#x27;abc&#x27;</span></span><br><span class="line">list_1, list_2</span><br></pre></td></tr></table></figure>




<pre><code>([[&#39;a&#39;, &#39;b&#39;, &#39;c&#39;], 2, 3], [[&#39;a&#39;, &#39;b&#39;, &#39;c&#39;], 2, 3])</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/03_list/13_list.index-bd54bbbbeab4/</url>
    <content><![CDATA[<h2 id="list-index-查找最小索引"><a href="#list-index-查找最小索引" class="headerlink" title="list.index 查找最小索引"></a>list.index 查找最小索引</h2><p>列表方法 list.index()，Python 官方文档描述如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">help</span>(<span class="built_in">list</span>.index)</span><br></pre></td></tr></table></figure>

<pre><code>Help on method_descriptor:

index(self, value, start=0, stop=9223372036854775807, /)
    Return first index of value.

    Raises ValueError if the value is not present.</code></pre>
<p>返回列表中第一个值为 value 的元素从零开始的索引。如果没有这样的元素将会抛出 ValueError 异常。</p>
<p>可选参数 start 和 stop 是切片符号，用于将搜索限制为列表的特定子序列。返回的是相对于整个序列开始计算的索引，而不是相对于 start 参数。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">_list = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">3</span>]</span><br><span class="line">_list.index(<span class="number">3</span>)</span><br></pre></td></tr></table></figure>




<pre><code>2</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">_list.index(<span class="number">3</span>,<span class="number">1</span>,<span class="number">4</span>)</span><br></pre></td></tr></table></figure>




<pre><code>2</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">_list.index(<span class="number">3</span>,<span class="number">4</span>,<span class="number">10</span>)</span><br></pre></td></tr></table></figure>




<pre><code>4</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">_list.index(<span class="number">3</span>,<span class="number">5</span>,<span class="number">10</span>)</span><br></pre></td></tr></table></figure>


<pre><code>---------------------------------------------------------------------------

ValueError                                Traceback (most recent call last)

&lt;ipython-input-6-3e258cbffc85&gt; in &lt;module&gt;
----&gt; 1 _list.index(3,5,10)


ValueError: 3 is not in list</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/03_list/12_list.count-393923f676fe/</url>
    <content><![CDATA[<h2 id="list-count-统计元素出现次数"><a href="#list-count-统计元素出现次数" class="headerlink" title="list.count 统计元素出现次数"></a>list.count 统计元素出现次数</h2><p>列表方法 list.count()，Python 官方文档描述如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">help</span>(<span class="built_in">list</span>.count)</span><br></pre></td></tr></table></figure>

<pre><code>Help on method_descriptor:

count(self, value, /)
    Return number of occurrences of value.</code></pre>
<p>返回元素 value 在列表中出现的次数，没有出现为 0。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">_list = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>]</span><br><span class="line">_list.count(<span class="number">1</span>), _list.count([<span class="number">1</span>])</span><br></pre></td></tr></table></figure>




<pre><code>(2, 0)</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/03_list/11_list.remove-43ca38edc680/</url>
    <content><![CDATA[<h2 id="list-remove-移除一个元素"><a href="#list-remove-移除一个元素" class="headerlink" title="list.remove 移除一个元素"></a>list.remove 移除一个元素</h2><p>列表方法 list.remove()，Python 官方文档描述如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">help</span>(<span class="built_in">list</span>.remove)</span><br></pre></td></tr></table></figure>

<pre><code>Help on method_descriptor:

remove(self, value, /)
    Remove first occurrence of value.

    Raises ValueError if the value is not present.</code></pre>
<p>移除列表中第一个值为 value 的元素。如果没有这样的元素，则抛出 ValueError 异常。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">_list = [<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">_list.remove(<span class="number">3</span>)</span><br><span class="line">_list</span><br></pre></td></tr></table></figure>




<pre><code>[1, 2, 3]</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">_list.remove(<span class="number">4</span>)</span><br></pre></td></tr></table></figure>


<pre><code>---------------------------------------------------------------------------

ValueError                                Traceback (most recent call last)

&lt;ipython-input-3-5747ddae04fe&gt; in &lt;module&gt;
----&gt; 1 _list.remove(4)


ValueError: list.remove(x): x not in list</code></pre>
<p>该方法是一个过程 (过程就是不返回有意义结果的函数；在 Python 中，过程的返回值为 None), 直接对原列表进行修改：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">_list = [<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">a = _list.remove(<span class="number">3</span>)</span><br><span class="line">print(a)</span><br></pre></td></tr></table></figure>

<pre><code>None</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/03_list/10_list.pop-04e66c513dc8/</url>
    <content><![CDATA[<h2 id="list-pop-删除元素并返回"><a href="#list-pop-删除元素并返回" class="headerlink" title="list.pop 删除元素并返回"></a>list.pop 删除元素并返回</h2><p>列表方法 list.pop()，Python 官方文档描述如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">help</span>(<span class="built_in">list</span>.pop)</span><br></pre></td></tr></table></figure>

<pre><code>Help on method_descriptor:

pop(self, index=-1, /)
    Remove and return item at index (default last).

    Raises IndexError if list is empty or index is out of range.</code></pre>
<p>删除列表中给定位置的元素并返回它。如果没有给定位置，list.pop() 将会删除并返回列表中的最后一个元素。给定位置超出范围，抛出 IndexError 错误。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">_list = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">_list.pop()</span><br></pre></td></tr></table></figure>




<pre><code>4</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">_list</span><br></pre></td></tr></table></figure>




<pre><code>[1, 2, 3]</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">_list.pop(<span class="number">0</span>)</span><br></pre></td></tr></table></figure>




<pre><code>1</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">_list</span><br></pre></td></tr></table></figure>




<pre><code>[2, 3]</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">_list.pop(<span class="number">5</span>)</span><br></pre></td></tr></table></figure>


<pre><code>---------------------------------------------------------------------------

IndexError                                Traceback (most recent call last)

&lt;ipython-input-4-efa5a84417c8&gt; in &lt;module&gt;
----&gt; 1 _list.pop(5)


IndexError: pop index out of range</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/03_list/09_list.reverse-c137ebb0bd15/</url>
    <content><![CDATA[<h2 id="list-reverse-反转列表中元素"><a href="#list-reverse-反转列表中元素" class="headerlink" title="list.reverse 反转列表中元素"></a>list.reverse 反转列表中元素</h2><p>列表方法 list.reverse()，Python 官方文档描述如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">help</span>(<span class="built_in">list</span>.reverse)</span><br></pre></td></tr></table></figure>

<pre><code>Help on method_descriptor:

reverse(self, /)
    Reverse *IN PLACE*.</code></pre>
<p>反转列表中的元素。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">_list = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">_list.reverse()</span><br><span class="line">_list</span><br></pre></td></tr></table></figure>




<pre><code>[3, 2, 1]</code></pre>
<p>该方法是一个过程 (过程就是不返回有意义结果的函数；在 Python 中，过程的返回值为 None), 直接对原列表进行修改：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">_list = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">a = _list.reverse()</span><br><span class="line">print(a)</span><br></pre></td></tr></table></figure>

<pre><code>None</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/03_list/08_list.sort-c23d2f03bc13/</url>
    <content><![CDATA[<h2 id="list-sort-对列表原地排序"><a href="#list-sort-对列表原地排序" class="headerlink" title="list.sort 对列表原地排序"></a>list.sort 对列表原地排序</h2><p>列表方法 list.sort()，Python 官方文档描述如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">help</span>(<span class="built_in">list</span>.sort)</span><br></pre></td></tr></table></figure>

<pre><code>Help on method_descriptor:

sort(self, /, *, key=None, reverse=False)
    Sort the list in ascending order and return None.

    The sort is in-place (i.e. the list itself is modified) and stable (i.e. the
    order of two equal elements is maintained).

    If a key function is given, apply it once to each list item and sort them,
    ascending or descending, according to their function values.

    The reverse flag can be set to sort in descending order.</code></pre>
<p>此方法会对列表进行原地排序，只使用 <code>&lt;</code> 来进行各项间比较。异常不会被屏蔽——如果有任何比较操作失败，整个排序操作将失败（而列表可能会处于被部分修改的状态）。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">_list = [<span class="number">2</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">1</span>,<span class="string">&#x27;5&#x27;</span>]</span><br><span class="line">_list.sort()</span><br></pre></td></tr></table></figure>


<pre><code>---------------------------------------------------------------------------

TypeError                                 Traceback (most recent call last)

&lt;ipython-input-2-87abda0b5baf&gt; in &lt;module&gt;
      1 _list = [2,3,6,1,&#39;5&#39;]
----&gt; 2 _list.sort()


TypeError: &#39;&lt;&#39; not supported between instances of &#39;str&#39; and &#39;int&#39;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">_list</span><br></pre></td></tr></table></figure>




<pre><code>[1, 2, 3, 6, &#39;5&#39;]</code></pre>
<p>sort() 接受两个仅限以关键字形式传入的参数 (仅限关键字参数):</p>
<ul>
<li>key 指定带有一个参数的函数，应用于列表中的每一个元素，按求值之后的大小，对原列表进行排序。默认值 None 表示直接对列表项排序。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">_list = [<span class="number">-3</span>,<span class="number">2</span>,<span class="number">-5</span>,<span class="number">1</span>,<span class="number">4</span>]</span><br><span class="line">_list.sort(key=<span class="built_in">abs</span>)</span><br><span class="line">_list</span><br></pre></td></tr></table></figure>




<pre><code>[1, 2, -3, 4, -5]</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">_list.sort()</span><br><span class="line">_list</span><br></pre></td></tr></table></figure>




<pre><code>[-5, -3, 1, 2, 4]</code></pre>
<ul>
<li>reverse 为一个布尔值。如果设为 True，则每个列表元素将按反向顺序比较进行排序。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">_list = [<span class="number">-3</span>,<span class="number">2</span>,<span class="number">-5</span>,<span class="number">1</span>,<span class="number">4</span>]</span><br><span class="line">_list.sort(reverse=<span class="literal">True</span>)</span><br><span class="line">_list</span><br></pre></td></tr></table></figure>




<pre><code>[4, 2, 1, -3, -5]</code></pre>
<p>当对较大的列表排序时，此方法会原地修改该序列以保证空间经济性。因此它并不会返回排序后的序列。</p>
<p>sort() 方法确保是稳定的——如果一个排序确保不会改变比较结果相等的元素的相对顺序就称其为稳定的。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">_list = [<span class="number">1</span>,<span class="string">&#x27;1.0&#x27;</span>,<span class="number">2</span>,<span class="string">&#x27;1&#x27;</span>]</span><br><span class="line">_list.sort(key=<span class="built_in">float</span>)</span><br><span class="line">_list</span><br></pre></td></tr></table></figure>




<pre><code>[1, &#39;1.0&#39;, &#39;1&#39;, 2]</code></pre>
<p>该方法是一个过程 (过程就是不返回有意义结果的函数；在 Python 中，过程的返回值为 None), 直接对原列表进行修改：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">_list = [<span class="number">5</span>,<span class="number">1</span>,<span class="number">4</span>]</span><br><span class="line">a = _list.sort()</span><br><span class="line">print(a)</span><br></pre></td></tr></table></figure>

<pre><code>None</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/03_list/07_list.insert-cc0ca6da5a02/</url>
    <content><![CDATA[<h2 id="list-insert-插入一个元素"><a href="#list-insert-插入一个元素" class="headerlink" title="list.insert 插入一个元素"></a>list.insert 插入一个元素</h2><p>列表方法 list.insert()，Python 官方文档描述如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">help</span>(<span class="built_in">list</span>.insert)</span><br></pre></td></tr></table></figure>

<pre><code>Help on method_descriptor:

insert(self, index, object, /)
    Insert object before index.</code></pre>
<p>在给定的位置插入一个元素。第一个参数是要插入的元素的索引，所以 a.insert(0, x) 插入列表头部，a.insert(len(a), x) 等同于 a.append(x)（a 是一个列表）。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">_list = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">_list.insert(<span class="number">0</span>,<span class="number">0</span>)</span><br><span class="line">_list</span><br></pre></td></tr></table></figure>




<pre><code>[0, 1, 2, 3]</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">_list.insert(<span class="built_in">len</span>(_list),[<span class="number">4</span>])</span><br><span class="line">_list</span><br></pre></td></tr></table></figure>




<pre><code>[0, 1, 2, 3, [4]]</code></pre>
<p>该方法是一个过程 (过程就是不返回有意义结果的函数；在 Python 中，过程的返回值为 None), 直接对原列表进行修改：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">_list = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">a = _list.insert(<span class="number">0</span>,<span class="number">0</span>)</span><br><span class="line">print(a)</span><br></pre></td></tr></table></figure>

<pre><code>None</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/03_list/06_list.extend-c71f589ad848/</url>
    <content><![CDATA[<h2 id="list-extend-加入可迭代对象中元素"><a href="#list-extend-加入可迭代对象中元素" class="headerlink" title="list.extend 加入可迭代对象中元素"></a>list.extend 加入可迭代对象中元素</h2><p>列表方法 list.extend()，Python 官方文档描述如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">help</span>(<span class="built_in">list</span>.extend)</span><br></pre></td></tr></table></figure>

<pre><code>Help on method_descriptor:

extend(self, iterable, /)
    Extend list by appending elements from the iterable.</code></pre>
<p>使用可迭代对象中的所有元素来扩展列表。相当于 a[len(a):] = iterable（a 是一个列表）。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">_list = [<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line">_list.extend(<span class="string">&#x27;abc&#x27;</span>)</span><br><span class="line">_list</span><br></pre></td></tr></table></figure>




<pre><code>[1, 2, &#39;a&#39;, &#39;b&#39;, &#39;c&#39;]</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">_list.extend(<span class="built_in">range</span>(<span class="number">2</span>))</span><br><span class="line">_list</span><br></pre></td></tr></table></figure>




<pre><code>[1, 2, &#39;a&#39;, &#39;b&#39;, &#39;c&#39;, 0, 1]</code></pre>
<p>该方法是一个过程 (过程就是不返回有意义结果的函数；在 Python 中，过程的返回值为 None), 直接对原列表进行修改：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">_list = [<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line">a = _list.extend(<span class="string">&#x27;abc&#x27;</span>)</span><br><span class="line">print(a)</span><br></pre></td></tr></table></figure>

<pre><code>None</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/03_list/05_list.append-58508ba35cab/</url>
    <content><![CDATA[<h2 id="list-append-添加一个元素"><a href="#list-append-添加一个元素" class="headerlink" title="list.append 添加一个元素"></a>list.append 添加一个元素</h2><p>列表方法 list.append()，Python 官方文档描述如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">help</span>(<span class="built_in">list</span>.append)</span><br></pre></td></tr></table></figure>

<pre><code>Help on method_descriptor:

append(self, object, /)
    Append object to the end of the list.</code></pre>
<p>在列表的末尾添加<strong>一个</strong>元素。相当于 a[len(a):] = [x]（a 是一个列表）。添加的元素可以是任何对象。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">_list = [<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line">_list.append(<span class="string">&#x27;abc&#x27;</span>)</span><br><span class="line">_list.append(<span class="built_in">list</span>.append)</span><br><span class="line">_list</span><br></pre></td></tr></table></figure>




<pre><code>[1, 2, &#39;abc&#39;, &lt;method &#39;append&#39; of &#39;list&#39; objects&gt;]</code></pre>
<p>该方法是一个过程 (过程就是不返回有意义结果的函数；在 Python 中，过程的返回值为 None), 直接对原列表进行修改：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">_list = []</span><br><span class="line">a = _list.append(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">print(a)</span><br></pre></td></tr></table></figure>

<pre><code>None</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/03_list/04_list_operator-5d89570fc46a/</url>
    <content><![CDATA[<h2 id="列表操作符"><a href="#列表操作符" class="headerlink" title="列表操作符"></a>列表操作符</h2><p>列表可以使用 <a href="https://xue.cn/hub/reader?bookId=64&path=xue_python_kp/09_operator/02_compare.ipynb">比较运算符</a>，但比较运算符对数据通用，单独用一个知识点讲解。该知识点介绍有列表自己特性的操作符 <code>+</code> 和 <code>*</code>。</p>
<h3 id="操作符"><a href="#操作符" class="headerlink" title="操作符 +"></a>操作符 +</h3><p>操作符 <code>+</code>，可以让两个列表元素顺序不变地合并到一个新的列表中：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list_1 = [<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line">list_2 = [<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">list_1 + list_2, list_2 + list_1</span><br></pre></td></tr></table></figure>




<pre><code>([1, 2, 3, 4], [3, 4, 1, 2])</code></pre>
<p>操作符 <code>+</code> 还可以与赋值操作符 <code>=</code> 连用，将一个列表中的元素，加到另一个列表中（相当于 list.extend()），而不创建一个新列表：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list_1 = [<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line">list_2 = [<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">print(<span class="built_in">id</span>(list_1))</span><br><span class="line">list_1 += list_2</span><br><span class="line"><span class="built_in">id</span>(list_1), list_1</span><br></pre></td></tr></table></figure>

<pre><code>2893532728008





(2893532728008, [1, 2, 3, 4])</code></pre>
<h3 id="操作符-1"><a href="#操作符-1" class="headerlink" title="操作符 *"></a>操作符 *</h3><p>操作符 <code>*</code>，可以将列表中的元素重复 n 次，得到一个新列表：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list_1 = [<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line">list_2 = list_1*<span class="number">2</span></span><br><span class="line">print(<span class="built_in">id</span>(list_1),<span class="built_in">id</span>(list_2))</span><br><span class="line">list_2</span><br></pre></td></tr></table></figure>

<pre><code>2893532600136 2893532727432





[1, 2, 1, 2]</code></pre>
<p><strong>注意：</strong>如果列表中有可变对象，重复 n 次后，可变对象是同一个对象的多次引用，改变一个，都会跟着改变。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list_1 = [[<span class="number">0</span>]]</span><br><span class="line">list_2 = list_1*<span class="number">3</span></span><br><span class="line">print(list_2)</span><br><span class="line">list_1[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span></span><br><span class="line">list_2</span><br></pre></td></tr></table></figure>

<pre><code>[[0], [0], [0]]





[[1], [1], [1]]</code></pre>
<p>操作符 <code>*</code>，还可以与赋值操作符 <code>=</code> 连用，用一个列表的元素重复 n 次来扩充它自身，而不创建新列表：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">_list = [<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line">print(<span class="built_in">id</span>(_list))</span><br><span class="line">_list *= <span class="number">2</span></span><br><span class="line"><span class="built_in">id</span>(_list), _list</span><br></pre></td></tr></table></figure>

<pre><code>2893532727624





(2893532727624, [1, 2, 1, 2])</code></pre>
<p>当 n 小于 1 时，则得到空列表：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]*<span class="number">0</span></span><br></pre></td></tr></table></figure>




<pre><code>[]</code></pre>
<p>列表是可迭代对象，<code>*</code> 可以将列表拆包：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(*[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br></pre></td></tr></table></figure>

<pre><code>1 2 3</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/03_list/03_list_indexes_and_slices-7ea73d16e47d/</url>
    <content><![CDATA[<h2 id="列表的索引和切片"><a href="#列表的索引和切片" class="headerlink" title="列表的索引和切片"></a>列表的索引和切片</h2><p>列表是序列类型中的可变类型，它的索引和切片操作，和通用的序列操作比较，有许多不一样的地方，主要体现在利用索引和切片对列表元素进行增、删、改。</p>
<p>索引和切片是序列类型通用操作，详细的规则和用法，见<a href="https://xue.cn/hub/reader?bookId=64&path=xue_python_kp/05_sequence/03_index_slice.ipynb">序列索引和切片</a>。</p>
<p>列表可以利用索引替换某一个元素：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">_list = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">_list[<span class="number">1</span>] = <span class="number">0</span></span><br><span class="line">_list</span><br></pre></td></tr></table></figure>




<pre><code>[1, 0, 3]</code></pre>
<p>利用切片将切片中的元素替换为可迭代对象中的元素：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">_list = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">_list[<span class="number">1</span>:<span class="number">3</span>] = <span class="string">&#x27;123&#x27;</span></span><br><span class="line">_list</span><br></pre></td></tr></table></figure>




<pre><code>[1, &#39;1&#39;, &#39;2&#39;, &#39;3&#39;]</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 该替换,切片长度和可迭代对象长度必须相等</span></span><br><span class="line">_list = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">_list[<span class="number">1</span>:<span class="number">5</span>:<span class="number">2</span>] = <span class="string">&#x27;24&#x27;</span></span><br><span class="line">_list</span><br></pre></td></tr></table></figure>




<pre><code>[1, &#39;2&#39;, 3, &#39;4&#39;, 5]</code></pre>
<p>需要注意，替换并没有改变原来的列表对象：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list_1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">print(<span class="built_in">id</span>(list_1),list_1)</span><br><span class="line">list_1[<span class="number">2</span>] = <span class="number">0</span></span><br><span class="line">print(<span class="built_in">id</span>(list_1),list_1)</span><br><span class="line">list_1[:] = <span class="built_in">range</span>(<span class="number">5</span>)</span><br><span class="line">print(<span class="built_in">id</span>(list_1),list_1)</span><br><span class="line">list_1[::<span class="number">2</span>] = (<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>)</span><br><span class="line">print(<span class="built_in">id</span>(list_1),list_1)</span><br></pre></td></tr></table></figure>

<pre><code>2065281773704 [1, 2, 3]
2065281773704 [1, 2, 0]
2065281773704 [0, 1, 2, 3, 4]
2065281773704 [&#39;a&#39;, 1, &#39;b&#39;, 3, &#39;c&#39;]</code></pre>
<p>可以利用切片在列表中任意位置插入数据片段：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">_list = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="comment"># 在前面插入两个 0</span></span><br><span class="line">_list[:<span class="number">0</span>] = (<span class="number">0</span>,<span class="number">0</span>)</span><br><span class="line">print(_list)</span><br><span class="line"><span class="comment"># 在索引为 2 的元素前面插入 &#x27;a&#x27;,&#x27;b&#x27;</span></span><br><span class="line">_list[<span class="number">2</span>:<span class="number">2</span>] = [<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>]</span><br><span class="line">_list</span><br></pre></td></tr></table></figure>

<pre><code>[0, 0, 1, 2, 3]





[0, 0, &#39;a&#39;, &#39;b&#39;, 1, 2, 3]</code></pre>
<p>列由切片浅拷贝列表，生成新的列表，但列表中有可变对象时，新列表中的可变对象和对应的原来列表中的可变对象是同一个对象的多次引用：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list_1 = [[<span class="number">1</span>,<span class="number">2</span>],<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">list_2 = list_1[:]</span><br><span class="line">print(<span class="string">&#x27;原列表：&#x27;</span>,<span class="built_in">id</span>(list_1),<span class="string">&#x27;新列表：&#x27;</span>,<span class="built_in">id</span>(list_2))</span><br><span class="line">print(<span class="string">&#x27;原列表中的可变对象：&#x27;</span>,</span><br><span class="line">      <span class="built_in">id</span>(list_1[<span class="number">0</span>]),</span><br><span class="line">      <span class="string">&#x27;\n新列表中对应的可变对象：&#x27;</span>,<span class="built_in">id</span>(list_2[<span class="number">0</span>]))</span><br></pre></td></tr></table></figure>

<pre><code>原列表： 2065281774536 新列表： 2065281774664
原列表中的可变对象： 2065281383112 
新列表中对应的可变对象： 2065281383112</code></pre>
<p>改变其中一个，都会跟着改变。需要注意区分修改列表中元素的元素，和修改列表元素的区别：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list_1[<span class="number">0</span>][<span class="number">0</span>] = <span class="string">&#x27;a&#x27;</span></span><br><span class="line">print(list_1, list_2)</span><br><span class="line">list_1[<span class="number">0</span>] = <span class="string">&#x27;a&#x27;</span></span><br><span class="line">print(list_1, list_2)</span><br></pre></td></tr></table></figure>

<pre><code>[[&#39;a&#39;, 2], 3, 4] [[&#39;a&#39;, 2], 3, 4]
[&#39;a&#39;, 3, 4] [[&#39;a&#39;, 2], 3, 4]</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/03_list/02_list_comprehension-9a270c39ca05/</url>
    <content><![CDATA[<h2 id="列表推导式"><a href="#列表推导式" class="headerlink" title="列表推导式"></a>列表推导式</h2><p>列表推导式提供了一个更简单的创建列表的方法。常见的用法是把某种操作应用于序列或可迭代对象的每个元素上，然后使用其结果来创建列表，或者通过满足某些特定条件元素来创建子序列。</p>
<p>对比下列两种创建数值平方列表的方式：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">squares = []</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">    squares.append(x**<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">print(squares)</span><br><span class="line">print(x) <span class="comment"># 产生了一个变量 x </span></span><br></pre></td></tr></table></figure>

<pre><code>[0, 1, 4, 9, 16]
4</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">squares = [y**<span class="number">2</span> <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>)]</span><br><span class="line">print(squares)</span><br><span class="line">print(y) <span class="comment"># 没有多余变量 y</span></span><br></pre></td></tr></table></figure>

<pre><code>[0, 1, 4, 9, 16]



---------------------------------------------------------------------------

NameError                                 Traceback (most recent call last)

&lt;ipython-input-3-c81791cbad54&gt; in &lt;module&gt;
      1 squares = [y**2 for y in range(5)]
      2 print(squares)
----&gt; 3 print(y) #


NameError: name &#39;y&#39; is not defined</code></pre>
<p>我们发现，列表推导式简洁漂亮、易读，不会产生多余的变量而可能带来副作用。</p>
<h2 id="列表推导式示例"><a href="#列表推导式示例" class="headerlink" title="列表推导式示例:"></a>列表推导式示例:</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[(x, y) <span class="keyword">for</span> x <span class="keyword">in</span> [<span class="number">1</span>,<span class="number">2</span>] <span class="keyword">for</span> y <span class="keyword">in</span> [<span class="number">1</span>,<span class="number">3</span>] <span class="keyword">if</span> x != y]</span><br></pre></td></tr></table></figure>




<pre><code>[(1, 3), (2, 1), (2, 3)]</code></pre>
<p>相当于：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">_list = []</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> [<span class="number">1</span>,<span class="number">2</span>]:</span><br><span class="line">    <span class="keyword">for</span> y <span class="keyword">in</span> [<span class="number">1</span>,<span class="number">3</span>]:</span><br><span class="line">        <span class="keyword">if</span> x != y:</span><br><span class="line">            _list.append((x,y))</span><br><span class="line">_list</span><br></pre></td></tr></table></figure>




<pre><code>[(1, 3), (2, 1), (2, 3)]</code></pre>
<p>列表推导式可以使用复杂的表达式和嵌套函数：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> pi</span><br><span class="line">[<span class="built_in">str</span>(<span class="built_in">round</span>(pi, i)) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">4</span>)]</span><br></pre></td></tr></table></figure>




<pre><code>[&#39;3.1&#39;, &#39;3.14&#39;, &#39;3.142&#39;]</code></pre>
<p>嵌套的列表推导式：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">matrix = [[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">          [<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>]]</span><br><span class="line">[[row[i] <span class="keyword">for</span> row <span class="keyword">in</span> matrix] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>)]</span><br></pre></td></tr></table></figure>




<pre><code>[[1, 5], [2, 6], [3, 7]]</code></pre>
<p>相当于：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">matrix = [[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">          [<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>]]</span><br><span class="line">_list = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">    lst = []</span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> matrix:</span><br><span class="line">        lst.append(row[i])</span><br><span class="line">    _list.append(lst)</span><br><span class="line">_list</span><br></pre></td></tr></table></figure>




<pre><code>[[1, 5], [2, 6], [3, 7]]</code></pre>
<p>判断语句在前的列表推导式：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[<span class="literal">True</span> <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">0</span> <span class="keyword">else</span> <span class="literal">False</span> <span class="keyword">for</span> i <span class="keyword">in</span> [<span class="number">1</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">9</span>]]</span><br></pre></td></tr></table></figure>




<pre><code>[False, True, False, False]</code></pre>
<p>相当于：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">_list = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> [<span class="number">1</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">9</span>]:</span><br><span class="line">    <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">        _list.append(<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        _list.append(<span class="literal">False</span>)</span><br><span class="line">_list</span><br></pre></td></tr></table></figure>




<pre><code>[False, True, False, False]</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/03_list/01_list-9161859c273b/</url>
    <content><![CDATA[<h2 id="列表概述"><a href="#列表概述" class="headerlink" title="列表概述"></a>列表概述</h2><p>列表对象 list 是高级数据结构的一种，通过方括号括起、逗号分隔的一组值得到。类型是 list。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">type</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br></pre></td></tr></table></figure>




<pre><code>list</code></pre>
<p>列表是可变序列，通常用于存放同类项目的集合。但没做限制，可以存放任意对象。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[<span class="number">1</span>,<span class="string">&#x27;a&#x27;</span>,<span class="built_in">int</span>]</span><br></pre></td></tr></table></figure>




<pre><code>[1, &#39;a&#39;, int]</code></pre>
<p>列表是可变的，分别创建两个值相同的列表，一定是不同的对象；而同一个列表对象中的元素是可以改变的：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a, b = [<span class="number">1</span>,<span class="number">2</span>], [<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line">a == b</span><br></pre></td></tr></table></figure>




<pre><code>True</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">id</span>(a), <span class="built_in">id</span>(b)</span><br></pre></td></tr></table></figure>




<pre><code>(2004948061384, 2004947934152)</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a[<span class="number">0</span>] = <span class="string">&#x27;a&#x27;</span></span><br><span class="line">a, <span class="built_in">id</span>(a)</span><br></pre></td></tr></table></figure>




<pre><code>([&#39;a&#39;, 2], 2004948061384)</code></pre>
<p>列表创建方法有：直接用一对方括号表示；<a href="https://xue.cn/hub/reader?bookId=64&path=xue_python_kp/03_list/02_list_comprehension.ipynb">列表推导式</a>；或使用内建函数 <a href="https://xue.cn/hub/reader?bookId=64&path=xue_python_kp/11_built-in_function/37_list.ipynbb">list()</a>。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[], [<span class="number">1</span>,<span class="number">2</span>]</span><br></pre></td></tr></table></figure>




<pre><code>([], [1, 2])</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>)]</span><br></pre></td></tr></table></figure>




<pre><code>[0, 1, 2]</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">list</span>(<span class="string">&#x27;abc&#x27;</span>)</span><br></pre></td></tr></table></figure>




<pre><code>[&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]</code></pre>
<p>列表的所有切片都将得到一个新列表，这意味着以下切片操作会返回列表的一个浅拷贝:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list_1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">list_2 = list_1[:]</span><br><span class="line"><span class="built_in">id</span>(list_1), <span class="built_in">id</span>(list_2)</span><br></pre></td></tr></table></figure>




<pre><code>(2004947038600, 2004948064968)</code></pre>
<p>然而，列表可以利用切片改变自身的内容，列表仍然是原来的列表：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list_1[:] = <span class="string">&#x27;abc&#x27;</span></span><br><span class="line">list_1, <span class="built_in">id</span>(list_1)</span><br></pre></td></tr></table></figure>




<pre><code>([&#39;a&#39;, &#39;b&#39;, &#39;c&#39;], 2004947038600)</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/02_string/52_str.removesuffix-6cdcecb80238/</url>
    <content><![CDATA[<h2 id="str-removesuffix-移除后缀"><a href="#str-removesuffix-移除后缀" class="headerlink" title="str.removesuffix 移除后缀"></a>str.removesuffix 移除后缀</h2><p>字符串方法 str.removesuffix()。</p>
<p>3.9 版本新功能。</p>
<p>str.removesuffix(suffix, /)，如果字符串以 后缀字符串 suffix 结尾，并且后缀非空，返回 string[:-len(suffix)]，否则，返回原始字符串的副本。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;MiscTests&#x27;</span>.removesuffix(<span class="string">&#x27;Tests&#x27;</span>)</span><br><span class="line"><span class="string">&#x27;Misc&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;TmpDirMixin&#x27;</span>.removesuffix(<span class="string">&#x27;Tests&#x27;</span>)</span><br><span class="line"><span class="string">&#x27;TmpDirMixin&#x27;</span></span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/02_string/51_str.removeprefix-1befcb25734c/</url>
    <content><![CDATA[<h2 id="str-removeprefix-移除前缀"><a href="#str-removeprefix-移除前缀" class="headerlink" title="str.removeprefix  移除前缀"></a>str.removeprefix  移除前缀</h2><p>字符串方法 str.removeprefix()。</p>
<p>3.9 版本新功能。</p>
<p>str.removeprefix(prefix, /)，如果字符串以 前缀字符串 prefix 开头，返回 string[len(prefix):]，否则，返回原始字符串的副本。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;TestHook&#x27;</span>.removeprefix(<span class="string">&#x27;Test&#x27;</span>)</span><br><span class="line"><span class="string">&#x27;Hook&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;BaseTestCase&#x27;</span>.removeprefix(<span class="string">&#x27;Test&#x27;</span>)</span><br><span class="line"><span class="string">&#x27;BaseTestCase&#x27;</span></span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/02_string/50_str.isspace-58a99289b944/</url>
    <content><![CDATA[<h2 id="str-isspace-是空白字符？"><a href="#str-isspace-是空白字符？" class="headerlink" title="str.isspace 是空白字符？"></a>str.isspace 是空白字符？</h2><p>字符串方法 str.isspace()，Python 官方文档描述如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">help</span>(<span class="built_in">str</span>.isspace)</span><br></pre></td></tr></table></figure>

<pre><code>Help on method_descriptor:

isspace(self, /)
    Return True if the string is a whitespace string, False otherwise.

    A string is whitespace if all characters in the string are whitespace and there
    is at least one character in the string.</code></pre>
<p>如果字符串中只有空白字符且至少有一个字符则返回 True，否则返回 False。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;</span>.isspace()</span><br></pre></td></tr></table></figure>




<pre><code>False</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27; &#x27;</span>.isspace()</span><br></pre></td></tr></table></figure>




<pre><code>True</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;\n\t\r\f&#x27;</span>.isspace()</span><br></pre></td></tr></table></figure>




<pre><code>True</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27; \\&#x27;</span>.isspace()</span><br></pre></td></tr></table></figure>




<pre><code>False</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/02_string/49_str.isprintable-335a8a44deca/</url>
    <content><![CDATA[<h2 id="str-isprintable-是可打印字符？"><a href="#str-isprintable-是可打印字符？" class="headerlink" title="str.isprintable 是可打印字符？"></a>str.isprintable 是可打印字符？</h2><p>字符串方法 str.isprintable()，Python 官方文档描述如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">help</span>(<span class="built_in">str</span>.isprintable)</span><br></pre></td></tr></table></figure>

<pre><code>Help on method_descriptor:

isprintable(self, /)
    Return True if the string is printable, False otherwise.

    A string is printable if all of its characters are considered printable in
    repr() or if it is empty.</code></pre>
<p>如果字符串中所有字符均为可打印字符或字符串为空则返回 True，否则返回 False。</p>
<p>不可打印字符是在 Unicode 字符数据库中被定义为 ”Other” 或 ”Separator” 的字符，例外情况是 ASCII 空格字符 (0x20) 被视作可打印字符。</p>
<p>请注意在此语境下可打印字符是指当对一个字符串发起调用 repr() 时不必被转义的字符。它们与字符串写入 sys.stdout 或 sys.stderr 时所需的处理无关。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;</span>.isprintable()</span><br></pre></td></tr></table></figure>




<pre><code>True</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27; &#x27;</span>.isprintable()</span><br></pre></td></tr></table></figure>




<pre><code>True</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;\n&#x27;</span>.isprintable()</span><br></pre></td></tr></table></figure>




<pre><code>False</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;\python&#x27;</span>.isprintable()</span><br></pre></td></tr></table></figure>




<pre><code>True</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;py\thon&#x27;</span>.isprintable()</span><br></pre></td></tr></table></figure>




<pre><code>False</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/02_string/48_str.isidentifier-2e47d6ca1ec6/</url>
    <content><![CDATA[<h2 id="str-isidentifier-是有效标识符？"><a href="#str-isidentifier-是有效标识符？" class="headerlink" title="str.isidentifier 是有效标识符？"></a>str.isidentifier 是有效标识符？</h2><p>字符串方法 str.isidentifier()，Python 官方文档描述如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">help</span>(<span class="built_in">str</span>.isidentifier)</span><br></pre></td></tr></table></figure>

<pre><code>Help on method_descriptor:

isidentifier(self, /)
    Return True if the string is a valid Python identifier, False otherwise.

    Call keyword.iskeyword(s) to test whether string s is a reserved identifier,
    such as &quot;def&quot; or &quot;class&quot;.</code></pre>
<p>如果字符串是有效的标识符，返回 True，否则返回 False。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;</span>.isidentifier()</span><br></pre></td></tr></table></figure>




<pre><code>False</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;1mycode&#x27;</span>.isidentifier()</span><br></pre></td></tr></table></figure>




<pre><code>False</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;_mycode&#x27;</span>.isidentifier()</span><br></pre></td></tr></table></figure>




<pre><code>True</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;123&#x27;</span>.isidentifier()</span><br></pre></td></tr></table></figure>




<pre><code>False</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;_123&#x27;</span>.isidentifier()</span><br></pre></td></tr></table></figure>




<pre><code>True</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;变量名&#x27;</span>.isidentifier()</span><br></pre></td></tr></table></figure>




<pre><code>True</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;for&#x27;</span>.isidentifier()</span><br></pre></td></tr></table></figure>




<pre><code>True</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/02_string/47_str.isascii-a194a3e63c57/</url>
    <content><![CDATA[<h2 id="str-isascii-是-ASCII-字符？"><a href="#str-isascii-是-ASCII-字符？" class="headerlink" title="str.isascii 是 ASCII 字符？"></a>str.isascii 是 ASCII 字符？</h2><p>字符串方法 str.isascii()，Python 官方文档描述如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">help</span>(<span class="built_in">str</span>.isascii)</span><br></pre></td></tr></table></figure>

<pre><code>Help on method_descriptor:

isascii(self, /)
    Return True if all characters in the string are ASCII, False otherwise.

    ASCII characters have code points in the range U+0000-U+007F.
    Empty string is ASCII too.</code></pre>
<p>如果字符串为空或字符串中的所有字符都是 ASCII ，返回 True，否则返回 False。ASCII 字符的码点范围是 U+0000-U+007F。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;</span>.isascii()</span><br></pre></td></tr></table></figure>




<pre><code>True</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;python&#x27;</span>.isascii()</span><br></pre></td></tr></table></figure>




<pre><code>True</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;python.3&#x27;</span>.isascii()</span><br></pre></td></tr></table></figure>




<pre><code>True</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;嗨 python&#x27;</span>.isascii()</span><br></pre></td></tr></table></figure>




<pre><code>False</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/02_string/46_str.istitle-c99cce6950be/</url>
    <content><![CDATA[<h2 id="str-istitle-是标题字符串？"><a href="#str-istitle-是标题字符串？" class="headerlink" title="str.istitle 是标题字符串？"></a>str.istitle 是标题字符串？</h2><p>字符串方法 str.istitle()，Python 官方文档描述如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">help</span>(<span class="built_in">str</span>.istitle)</span><br></pre></td></tr></table></figure>

<pre><code>Help on method_descriptor:

istitle(self, /)
    Return True if the string is a title-cased string, False otherwise.

    In a title-cased string, upper- and title-case characters may only
    follow uncased characters and lowercase characters only cased ones.</code></pre>
<p>如果字符串中至少有一个字符且为标题字符串则返回 True，例如大写字符之后只能带非大写字符而小写字符必须有大写字符打头。否则返回 False。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;Abc Py&#x27;</span>.istitle()</span><br></pre></td></tr></table></figure>




<pre><code>True</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;嗨 A11&#x27;</span>.istitle()</span><br></pre></td></tr></table></figure>




<pre><code>True</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;嗨 Abc&#x27;</span>.istitle()</span><br></pre></td></tr></table></figure>




<pre><code>True</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;嗨 ABC&#x27;</span>.istitle()</span><br></pre></td></tr></table></figure>




<pre><code>False</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/02_string/45_str.isupper-3ce8c446a83b/</url>
    <content><![CDATA[<h2 id="str-isupper-是大写？"><a href="#str-isupper-是大写？" class="headerlink" title="str.isupper 是大写？"></a>str.isupper 是大写？</h2><p>字符串方法 str.isupper()，Python 官方文档描述如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">help</span>(<span class="built_in">str</span>.isupper)</span><br></pre></td></tr></table></figure>

<pre><code>Help on method_descriptor:

isupper(self, /)
    Return True if the string is an uppercase string, False otherwise.

    A string is uppercase if all cased characters in the string are uppercase and
    there is at least one cased character in the string.</code></pre>
<p>如果字符串中至少有一个区分大小写的字符且此类字符均为大写则返回 True，否则返回 False。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;Γ&#x27;</span>.isupper()</span><br></pre></td></tr></table></figure>




<pre><code>True</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;嗨 AB&#x27;</span>.isupper()</span><br></pre></td></tr></table></figure>




<pre><code>True</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;嗨 Ab&#x27;</span>.isupper()</span><br></pre></td></tr></table></figure>




<pre><code>False</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/02_string/44_str.islower-fff1c259645f/</url>
    <content><![CDATA[<h2 id="str-islower-是小写？"><a href="#str-islower-是小写？" class="headerlink" title="str.islower 是小写？"></a>str.islower 是小写？</h2><p>字符串方法 str.islower()，Python 官方文档描述如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">help</span>(<span class="built_in">str</span>.islower)</span><br></pre></td></tr></table></figure>

<pre><code>Help on method_descriptor:

islower(self, /)
    Return True if the string is a lowercase string, False otherwise.

    A string is lowercase if all cased characters in the string are lowercase and
    there is at least one cased character in the string.</code></pre>
<p>如果字符串中至少有一个区分大小写的字符且此类字符均为小写则返回 True，否则返回 False。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;嗨&#x27;</span>.islower()</span><br></pre></td></tr></table></figure>




<pre><code>False</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;嗨 Abc&#x27;</span>.islower()</span><br></pre></td></tr></table></figure>




<pre><code>False</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;嗨 abc&#x27;</span>.islower()</span><br></pre></td></tr></table></figure>




<pre><code>True</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/02_string/43_str.isnumeric-a6ef728632ba/</url>
    <content><![CDATA[<h2 id="str-isnumeric-是数值字符？"><a href="#str-isnumeric-是数值字符？" class="headerlink" title="str.isnumeric 是数值字符？"></a>str.isnumeric 是数值字符？</h2><p>字符串方法 str.isnumeric()，Python 官方文档描述如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">help</span>(<span class="built_in">str</span>.isnumeric)</span><br></pre></td></tr></table></figure>

<pre><code>Help on method_descriptor:

isnumeric(self, /)
    Return True if the string is a numeric string, False otherwise.

    A string is numeric if all characters in the string are numeric and there is at
    least one character in the string.</code></pre>
<p>如果字符串中至少有一个字符且所有字符均为数值字符则返回 True，否则返回 False。</p>
<p>数值字符包括数字字符，以及所有在 Unicode 中设置了数值特性属性的字符，例如 U+2155, VUL-GAR FRACTION ONE FIFTH。正式的定义为：数值字符就是具有特征属性值 Numeric_Type=Digit, Numeric_Type=Decimal 或 Numeric_Type=Numeric 的字符。</p>
<p>此处所指数字包括罗马数字，汉字数字等。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;②&#x27;</span>.isnumeric()</span><br></pre></td></tr></table></figure>




<pre><code>True</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;3.14&#x27;</span>.isnumeric()</span><br></pre></td></tr></table></figure>




<pre><code>False</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;5²&#x27;</span>.isnumeric()</span><br></pre></td></tr></table></figure>




<pre><code>True</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;Ⅷ&#x27;</span>.isnumeric()</span><br></pre></td></tr></table></figure>




<pre><code>True</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;一&#x27;</span>.isnumeric()</span><br></pre></td></tr></table></figure>




<pre><code>True</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;壹&#x27;</span>.isnumeric()</span><br></pre></td></tr></table></figure>




<pre><code>True</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/02_string/42_str.isdigit-2b227cd040e7/</url>
    <content><![CDATA[<h2 id="str-isdigit-是数字？"><a href="#str-isdigit-是数字？" class="headerlink" title="str.isdigit 是数字？"></a>str.isdigit 是数字？</h2><p>字符串方法 str.isdigit()，Python 官方文档描述如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">help</span>(<span class="built_in">str</span>.isdigit)</span><br></pre></td></tr></table></figure>

<pre><code>Help on method_descriptor:

isdigit(self, /)
    Return True if the string is a digit string, False otherwise.

    A string is a digit string if all characters in the string are digits and there
    is at least one character in the string.</code></pre>
<p>如果字符串中的所有字符都是数字，并且至少有一个字符，返回 True ，否则返回 False 。</p>
<p>数字包括十进制字符和需要特殊处理的数字，如兼容性上标数字。这包括了不能用来组成 10 进制数的数字，如 Kharosthi 数。严格地讲，数字是指属性值为 Numeric_Type=Digit 或 Numeric_Type=Decimal 的字符。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;一&#x27;</span>.isdigit()</span><br></pre></td></tr></table></figure>




<pre><code>False</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;3.14&#x27;</span>.isdigit()</span><br></pre></td></tr></table></figure>




<pre><code>False</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;１２３&#x27;</span>.isdigit()</span><br></pre></td></tr></table></figure>




<pre><code>True</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">b&#x27;123&#x27;</span>.isdigit()</span><br></pre></td></tr></table></figure>




<pre><code>True</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;5²&#x27;</span>.isdigit()</span><br></pre></td></tr></table></figure>




<pre><code>True</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/02_string/41_str.isdecimal-24a5f30d26fb/</url>
    <content><![CDATA[<h2 id="str-isdecimal-是十进制字符？"><a href="#str-isdecimal-是十进制字符？" class="headerlink" title="str.isdecimal 是十进制字符？"></a>str.isdecimal 是十进制字符？</h2><p>字符串方法 str.isdecimal()，Python 官方文档描述如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">help</span>(<span class="built_in">str</span>.isdecimal)</span><br></pre></td></tr></table></figure>

<pre><code>Help on method_descriptor:

isdecimal(self, /)
    Return True if the string is a decimal string, False otherwise.

    A string is a decimal string if all characters in the string are decimal and
    there is at least one character in the string.</code></pre>
<p>如果字符串中的所有字符都是十进制字符且该字符串至少有一个字符，则返回 True，否则返回 False。</p>
<p>十进制字符指那些可以用来组成 10 进制数字的字符。严格地讲，十进制字符是 Unicode 通用类别 ”Nd” 中的一个字符。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;</span>.isdecimal()</span><br></pre></td></tr></table></figure>




<pre><code>False</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;3.14&#x27;</span>.isdecimal()</span><br></pre></td></tr></table></figure>




<pre><code>False</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;０1２3&#x27;</span>.isdecimal()</span><br></pre></td></tr></table></figure>




<pre><code>True</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;5²&#x27;</span>.isdecimal()</span><br></pre></td></tr></table></figure>




<pre><code>False</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;python&#x27;</span>.isdecimal()</span><br></pre></td></tr></table></figure>




<pre><code>False</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">b&#x27;100&#x27;</span>.isdecimal()</span><br></pre></td></tr></table></figure>


<pre><code>---------------------------------------------------------------------------

AttributeError                            Traceback (most recent call last)

&lt;ipython-input-13-52e1682babfd&gt; in &lt;module&gt;
----&gt; 1 b&#39;100&#39;.isdecimal()


AttributeError: &#39;bytes&#39; object has no attribute &#39;isdecimal&#39;</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/02_string/40_str.isalpha-58cfcbd76ed6/</url>
    <content><![CDATA[<h2 id="str-isalpha-是字母（包括汉字等）？"><a href="#str-isalpha-是字母（包括汉字等）？" class="headerlink" title="str.isalpha 是字母（包括汉字等）？"></a>str.isalpha 是字母（包括汉字等）？</h2><p>字符串方法 str.isalpha()，Python 官方文档描述如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">help</span>(<span class="built_in">str</span>.isalpha)</span><br></pre></td></tr></table></figure>

<pre><code>Help on method_descriptor:

isalpha(self, /)
    Return True if the string is an alphabetic string, False otherwise.

    A string is alphabetic if all characters in the string are alphabetic and there
    is at least one character in the string.</code></pre>
<p>如果字符串中的所有字符都是字母，并且至少有一个字符，返回 True ，否则返回 False 。</p>
<p>字母字符是指那些在 Unicode 字符数据库中定义为 ”Letter” 的字符，即那些具有 ”Lm”、”Lt”、”Lu”、”Ll” 或 ”Lo” 之一的通用类别属性的字符。注意，这与 Unicode 标准中定义的 ”字母” 属性不同。</p>
<p>此处的字母包括汉字等。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;</span>.isalpha()</span><br></pre></td></tr></table></figure>




<pre><code>False</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;γ&#x27;</span>.isalpha()</span><br></pre></td></tr></table></figure>




<pre><code>True</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;嗨你好&#x27;</span>.isalpha()</span><br></pre></td></tr></table></figure>




<pre><code>True</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;嗨！你好&#x27;</span>.isalpha()</span><br></pre></td></tr></table></figure>




<pre><code>False</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/02_string/39_str.isalnum-f2f3f4a18054/</url>
    <content><![CDATA[<h2 id="str-isalnum-是字母或数字？"><a href="#str-isalnum-是字母或数字？" class="headerlink" title="str.isalnum 是字母或数字？"></a>str.isalnum 是字母或数字？</h2><p>字符串方法 str.isalnum()，Python 官方文档描述如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">help</span>(<span class="built_in">str</span>.isalnum)</span><br></pre></td></tr></table></figure>

<pre><code>Help on method_descriptor:

isalnum(self, /)
    Return True if the string is an alpha-numeric string, False otherwise.

    A string is alpha-numeric if all characters in the string are alpha-numeric and
    there is at least one character in the string.</code></pre>
<p>如果字符串中的所有字符都是字母或数字且至少有一个字符，则返回 True ，否则返回 False 。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;</span>.isalnum()</span><br></pre></td></tr></table></figure>




<pre><code>False</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;python123&#x27;</span>.isalnum()</span><br></pre></td></tr></table></figure>




<pre><code>True</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;python 123&#x27;</span>.isalnum()</span><br></pre></td></tr></table></figure>




<pre><code>False</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;γ&#x27;</span>.isalnum()</span><br></pre></td></tr></table></figure>




<pre><code>True</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/02_string/38_str.maketrans-6bb81f583c46/</url>
    <content><![CDATA[<h2 id="str-maketrans-生成转换表"><a href="#str-maketrans-生成转换表" class="headerlink" title="str.maketrans 生成转换表"></a>str.maketrans 生成转换表</h2><p>字符串方法 str.maketrans()，该方法是一个静态方法（没有 self），Python 官方文档描述如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">help</span>(<span class="built_in">str</span>.maketrans)</span><br></pre></td></tr></table></figure>

<pre><code>Help on built-in function maketrans:

maketrans(x, y=None, z=None, /)
    Return a translation table usable for str.translate().

    If there is only one argument, it must be a dictionary mapping Unicode
    ordinals (integers) or characters to Unicode ordinals, strings or None.
    Character keys will be then converted to ordinals.
    If there are two arguments, they must be strings of equal length, and
    in the resulting dictionary, each character in x will be mapped to the
    character at the same position in y. If there is a third argument, it
    must be a string, whose characters will be mapped to None in the result.</code></pre>
<p>返回一个可供 str.translate() 使用的转换对照表。</p>
<p>如果只有一个参数，则它必须是一个将 Unicode 码位序号（整数）或字符（长度为 1 的字符串）映射到 Unicode 码位序号、（任意长度的）字符串 或 None 的字典。字符键将会被转换为码位序号。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">str</span>.maketrans(&#123;<span class="number">97</span>:<span class="string">&#x27;123&#x27;</span>&#125;)</span><br></pre></td></tr></table></figure>




<pre><code>&#123;97: &#39;123&#39;&#125;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">str</span>.maketrans(&#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">97</span>&#125;)</span><br></pre></td></tr></table></figure>




<pre><code>&#123;97: 97&#125;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">str</span>.maketrans(&#123;<span class="string">&#x27;a&#x27;</span>:<span class="literal">None</span>&#125;)</span><br></pre></td></tr></table></figure>




<pre><code>&#123;97: None&#125;</code></pre>
<p>如果有两个参数，则它们必须是两个长度相等的字符串，并且在结果字典中，x 中每个字符将被映射到 y 中相同位置的字符。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">str</span>.maketrans(<span class="string">&#x27;abc&#x27;</span>,<span class="string">&#x27;123&#x27;</span>)</span><br></pre></td></tr></table></figure>




<pre><code>&#123;97: 49, 98: 50, 99: 51&#125;</code></pre>
<p>如果有第三个参数，它必须是一个字符串，其中的字符将在结果中被映<br>射到 None。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">str</span>.maketrans(<span class="string">&#x27;ab&#x27;</span>,<span class="string">&#x27;12&#x27;</span>,<span class="string">&#x27;xy&#x27;</span>)</span><br></pre></td></tr></table></figure>




<pre><code>&#123;97: 49, 98: 50, 120: None, 121: None&#125;</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/02_string/37_str.translate-5e8ec22234e1/</url>
    <content><![CDATA[<h2 id="str-translate-按表转换"><a href="#str-translate-按表转换" class="headerlink" title="str.translate 按表转换"></a>str.translate 按表转换</h2><p>文档描述如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">help</span>(<span class="built_in">str</span>.translate)</span><br></pre></td></tr></table></figure>

<pre><code>Help on method_descriptor:

translate(self, table, /)
    Replace each character in the string using the given translation table.

      table
        Translation table, which must be a mapping of Unicode ordinals to
        Unicode ordinals, strings, or None.

    The table must implement lookup/indexing via __getitem__, for instance a
    dictionary or list.  If this operation raises LookupError, the character is
    left untouched.  Characters mapped to None are deleted.</code></pre>
<p>返回原字符串的副本，其中每个字符按给定的转换表进行映射。转换表必须是一个使用 <code>__getitem__()</code> 来实现索引操作的对象，通常为 mapping 或 sequence。当以 Unicode 码位序号（整数）为索引时，转换表对象可以做以下任何一种操作：返回 Unicode 序号或字符串，将字符映射为一个或多个字符；返回 None，将字符从结果字符串中删除；或引发 LookupError 异常，将字符映射为其自身。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ord</span>(<span class="string">&#x27;p&#x27;</span>),<span class="built_in">ord</span>(<span class="string">&#x27;C&#x27;</span>)</span><br></pre></td></tr></table></figure>




<pre><code>(112, 67)</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;python&#x27;</span>.translate(&#123;<span class="number">112</span>:<span class="number">67</span>&#125;)</span><br></pre></td></tr></table></figure>




<pre><code>&#39;Cython&#39;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;python&#x27;</span>.translate(&#123;<span class="number">112</span>:<span class="string">&#x27;Cp&#x27;</span>&#125;)</span><br></pre></td></tr></table></figure>




<pre><code>&#39;Cpython&#39;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;python&#x27;</span>.translate(&#123;<span class="number">112</span>:<span class="literal">None</span>&#125;)</span><br></pre></td></tr></table></figure>




<pre><code>&#39;ython&#39;</code></pre>
<p>你可以使用 str.maketrans() 基于不同格式的字符到字符映射来创建一个转换映射表。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">table = <span class="built_in">str</span>.maketrans(<span class="string">&#x27;pto&#x27;</span>,<span class="string">&#x27;123&#x27;</span>)</span><br><span class="line"><span class="string">&#x27;python&#x27;</span>.translate(table)</span><br></pre></td></tr></table></figure>




<pre><code>&#39;1y2h3n&#39;</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/02_string/36_str.zfill-7160e556f9e6/</url>
    <content><![CDATA[<h2 id="str-zfill-填充-0"><a href="#str-zfill-填充-0" class="headerlink" title="str.zfill 填充 0"></a>str.zfill 填充 0</h2><p>字符串方法 str.zfill()，Python 官方文档描述如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">help</span>(<span class="built_in">str</span>.zfill)</span><br></pre></td></tr></table></figure>

<pre><code>Help on method_descriptor:

zfill(self, width, /)
    Pad a numeric string with zeros on the left, to fill a field of the given width.

    The string is never truncated.</code></pre>
<p>返回原字符串的副本，在左边填充 ASCII ‘0’ 数码使其长度变为 width。正负值前缀 (‘+’/‘-‘) 的处理方式是在正负符号 之后填充而非在之前。如果 width 小于等于 len(str) 则返回原字符串的副本。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;42a&quot;</span>.zfill(<span class="number">5</span>)</span><br></pre></td></tr></table></figure>




<pre><code>&#39;0042a&#39;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;-42&quot;</span>.zfill(<span class="number">5</span>)</span><br></pre></td></tr></table></figure>




<pre><code>&#39;-0042&#39;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;-42&quot;</span>.zfill(<span class="number">1</span>)</span><br></pre></td></tr></table></figure>




<pre><code>&#39;-42&#39;</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/02_string/35_str.swapcase-363012221563/</url>
    <content><![CDATA[<h2 id="str-swapcase-大小写互转"><a href="#str-swapcase-大小写互转" class="headerlink" title="str.swapcase 大小写互转"></a>str.swapcase 大小写互转</h2><p>字符串方法 str.swapcase()，Python 官方文档描述如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">help</span>(<span class="built_in">str</span>.swapcase)</span><br></pre></td></tr></table></figure>

<pre><code>Help on method_descriptor:

swapcase(self, /)
    Convert uppercase characters to lowercase and lowercase characters to uppercase.</code></pre>
<p>返回原字符串的副本，其中大写字符转换为小写，反之亦然。请注意 s.swapcase().swapcase() == s 并不一定为真值。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;PythoN&#x27;</span>.swapcase()</span><br></pre></td></tr></table></figure>




<pre><code>&#39;pYTHOn&#39;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;pYTHOn&#x27;</span>.swapcase()</span><br></pre></td></tr></table></figure>




<pre><code>&#39;PythoN&#39;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;ß&#x27;</span>.swapcase() <span class="comment"># 德语的小写字母 ß 相当于 ss</span></span><br></pre></td></tr></table></figure>




<pre><code>&#39;SS&#39;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;SS&#x27;</span>.swapcase()</span><br></pre></td></tr></table></figure>




<pre><code>&#39;ss&#39;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;ß&#x27;</span>.swapcase().swapcase() == <span class="string">&#x27;ß&#x27;</span></span><br></pre></td></tr></table></figure>




<pre><code>False</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/02_string/34_str.upper-b03fe8fe0757/</url>
    <content><![CDATA[<h2 id="str-upper-转大写"><a href="#str-upper-转大写" class="headerlink" title="str.upper 转大写"></a>str.upper 转大写</h2><p>字符串方法 str.upper()，Python 官方文档描述如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">help</span>(<span class="built_in">str</span>.upper)</span><br></pre></td></tr></table></figure>

<pre><code>Help on method_descriptor:

upper(self, /)
    Return a copy of the string converted to uppercase.</code></pre>
<p>返回原字符串的副本，其中所有区分大小写的字符均转换为大写。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;嗨python&#x27;</span>.upper()</span><br></pre></td></tr></table></figure>




<pre><code>&#39;嗨PYTHON&#39;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;πpython&#x27;</span>.upper()</span><br></pre></td></tr></table></figure>




<pre><code>&#39;ΠPYTHON&#39;</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/02_string/33_str.title-85983721eba5/</url>
    <content><![CDATA[<h2 id="str-title-单词首字母大写"><a href="#str-title-单词首字母大写" class="headerlink" title="str.title 单词首字母大写"></a>str.title 单词首字母大写</h2><p>字符串方法 str.title()，Python 官方文档描述如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">help</span>(<span class="built_in">str</span>.title)</span><br></pre></td></tr></table></figure>

<pre><code>Help on method_descriptor:

title(self, /)
    Return a version of the string where each word is titlecased.

    More specifically, words start with uppercased characters and all remaining
    cased characters have lower case.</code></pre>
<p>返回原字符串的标题版本，其中每个单词第一个字母为大写，其余字母为小写。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;hi python&#x27;</span>.title()</span><br></pre></td></tr></table></figure>




<pre><code>&#39;Hi Python&#39;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;嗨python&#x27;</span>.title()</span><br></pre></td></tr></table></figure>




<pre><code>&#39;嗨Python&#39;</code></pre>
<p>该算法使用一种简单的与语言无关的定义，将连续的字母组合视为单词。该定义在多数情况下都很有效，但它也意味着代表缩写形式与所有格的撇号也会成为单词边界，这可能导致不希望的结果:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;they&#x27;re bill&#x27;s friends from the UK&quot;</span>.title()</span><br></pre></td></tr></table></figure>




<pre><code>&quot;They&#39;Re Bill&#39;S Friends From The Uk&quot;</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/02_string/32_str.lower-b30ba4f63727/</url>
    <content><![CDATA[<h2 id="str-lower-转小写"><a href="#str-lower-转小写" class="headerlink" title="str.lower 转小写"></a>str.lower 转小写</h2><p>字符串方法 str.lower()，Python 官方文档描述如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">help</span>(<span class="built_in">str</span>.lower)</span><br></pre></td></tr></table></figure>

<pre><code>Help on method_descriptor:

lower(self, /)
    Return a copy of the string converted to lowercase.</code></pre>
<p>返回原字符串的副本，其所有区分大小写的字符均转换为小写。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;PyThon&#x27;</span>.lower()</span><br></pre></td></tr></table></figure>




<pre><code>&#39;python&#39;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;嗨 PyThon&#x27;</span>.lower()</span><br></pre></td></tr></table></figure>




<pre><code>&#39;嗨 python&#39;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;PyThon Γ&#x27;</span>.lower()</span><br></pre></td></tr></table></figure>




<pre><code>&#39;python γ&#39;</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/02_string/31_str.casefold-647268d4b6b0/</url>
    <content><![CDATA[<h2 id="str-casefold-消除大小写"><a href="#str-casefold-消除大小写" class="headerlink" title="str.casefold 消除大小写"></a>str.casefold 消除大小写</h2><p>字符串方法 str.casefold()，Python 官方文档描述如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">help</span>(<span class="built_in">str</span>.casefold)</span><br></pre></td></tr></table></figure>

<pre><code>Help on method_descriptor:

casefold(self, /)
    Return a version of the string suitable for caseless comparisons.</code></pre>
<p>返回原字符串消除大小写的副本。消除大小写的字符串可用于忽略大小写的匹配。</p>
<p>消除大小写类似于转为小写，但是更加彻底一些，因为它会移除字符串中的所有大小写变化形式。例如，德语小写字母 ‘ß’ 相当于 “ss”，由于它已经是小写，lower() 不会对 ‘ß’ 做任何改变，而 casefold() 则会将其转换为 “ss”。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;pYthOn&#x27;</span>.casefold()</span><br></pre></td></tr></table></figure>




<pre><code>&#39;python&#39;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;ß&#x27;</span>.casefold()</span><br></pre></td></tr></table></figure>




<pre><code>&#39;ss&#39;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;ß&#x27;</span>.lower()</span><br></pre></td></tr></table></figure>




<pre><code>&#39;ß&#39;</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/02_string/30_str.capitalize-0ce4b7b59d7b/</url>
    <content><![CDATA[<h2 id="str-capitalize-首字符大写"><a href="#str-capitalize-首字符大写" class="headerlink" title="str.capitalize 首字符大写"></a>str.capitalize 首字符大写</h2><p>字符串方法 str.capitalize()，Python 官方文档描述如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">help</span>(<span class="built_in">str</span>.capitalize)</span><br></pre></td></tr></table></figure>

<pre><code>Help on method_descriptor:

capitalize(self, /)
    Return a capitalized version of the string.

    More specifically, make the first character have upper case and the rest lower
    case.</code></pre>
<p>返回原字符串的副本，其首个字符大写，其余为小写:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;pyTHON&#x27;</span>.capitalize()</span><br></pre></td></tr></table></figure>




<pre><code>&#39;Python&#39;</code></pre>
<p>只有首个字符是字母，才会将首个字符大写：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;嗨 pyTHON&#x27;</span>.capitalize()</span><br></pre></td></tr></table></figure>




<pre><code>&#39;嗨 python&#39;</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/02_string/29_str.encode-a0d851097965/</url>
    <content><![CDATA[<h2 id="str-encode-编码为字节串"><a href="#str-encode-编码为字节串" class="headerlink" title="str.encode 编码为字节串"></a>str.encode 编码为字节串</h2><p>字符串方法 str.encode()，Python 官方文档描述如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">help</span>(<span class="built_in">str</span>.encode)</span><br></pre></td></tr></table></figure>

<pre><code>Help on method_descriptor:

encode(self, /, encoding=&#39;utf-8&#39;, errors=&#39;strict&#39;)
    Encode the string using the codec registered for encoding.

    encoding
      The encoding in which to encode the string.
    errors
      The error handling scheme to use for encoding errors.
      The default is &#39;strict&#39; meaning that encoding errors raise a
      UnicodeEncodeError.  Other possible values are &#39;ignore&#39;, &#39;replace&#39; and
      &#39;xmlcharrefreplace&#39; as well as any other name registered with
      codecs.register_error that can handle UnicodeEncodeErrors.</code></pre>
<p>返回原字符串编码为字节串对象的版本。默认编码为 ‘utf-8’。可以给出 errors 来设置不同的错误处理方案。errors 的默认值为 ‘strict’，表示编码错误会引发 UnicodeError。</p>
<p>下列为 ‘utf-8’ 和 ‘gbk’ 两种编码比较：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;嗨 python&#x27;</span>.encode()</span><br></pre></td></tr></table></figure>




<pre><code>b&#39;\xe5\x97\xa8 python&#39;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;嗨 python&#x27;</span>.encode(<span class="string">&#x27;gbk&#x27;</span>)</span><br></pre></td></tr></table></figure>




<pre><code>b&#39;\xe0\xcb python&#39;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;▲ python&#x27;</span>.encode(<span class="string">&#x27;gbk&#x27;</span>)</span><br></pre></td></tr></table></figure>




<pre><code>b&#39;\xa1\xf8 python&#39;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;🔺 python&#x27;</span>.encode()</span><br></pre></td></tr></table></figure>




<pre><code>b&#39;\xf0\x9f\x94\xba python&#39;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;🔺 python&#x27;</span>.encode(<span class="string">&#x27;gbk&#x27;</span>) <span class="comment">#gbk 不能编码 🔺</span></span><br></pre></td></tr></table></figure>


<pre><code>---------------------------------------------------------------------------

UnicodeEncodeError                        Traceback (most recent call last)

&lt;ipython-input-15-60e87a9208be&gt; in &lt;module&gt;
----&gt; 1 &#39;🔺 python&#39;.encode(&#39;gbk&#39;)


UnicodeEncodeError: &#39;gbk&#39; codec can&#39;t encode character &#39;\U0001f53a&#39; in position 0: illegal multibyte sequence</code></pre>
<p><strong>拓展：</strong></p>
<p>将字节串解码为字符串用 bytes.decode:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">help</span>(<span class="built_in">bytes</span>.decode)</span><br></pre></td></tr></table></figure>


<pre><code>[1;31mSignature:[0m [0mbytes[0m[1;33m.[0m[0mdecode[0m[1;33m([0m[0mself[0m[1;33m,[0m [1;33m/[0m[1;33m,[0m [0mencoding[0m[1;33m=[0m[1;34m&#39;utf-8&#39;[0m[1;33m,[0m [0merrors[0m[1;33m=[0m[1;34m&#39;strict&#39;[0m[1;33m)[0m[1;33m[0m[1;33m[0m[0m
[1;31mDocstring:[0m
Decode the bytes using the codec registered for encoding.

encoding
  The encoding with which to decode the bytes.
errors
  The error handling scheme to use for the handling of decoding errors.
  The default is &#39;strict&#39; meaning that decoding errors raise a
  UnicodeDecodeError. Other possible values are &#39;ignore&#39; and &#39;replace&#39;
  as well as any other name registered with codecs.register_error that
  can handle UnicodeDecodeErrors.
[1;31mType:[0m      method_descriptor</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">b&#x27;\xf0\x9f\x94\xba python&#x27;</span>.decode()</span><br></pre></td></tr></table></figure>




<pre><code>&#39;🔺 python&#39;</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/02_string/28_string_operators-875fd24e3da4/</url>
    <content><![CDATA[<h2 id="字符串操作符"><a href="#字符串操作符" class="headerlink" title="字符串操作符"></a>字符串操作符</h2><h3 id="操作符"><a href="#操作符" class="headerlink" title="操作符 *"></a>操作符 <code>*</code></h3><p>操作符 <code>*</code> 可以实现将字符串重复 n（整数）遍相连接：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;Python&#x27;</span> * <span class="number">3</span></span><br></pre></td></tr></table></figure>




<pre><code>&#39;PythonPythonPython&#39;</code></pre>
<p>n 是小于 1 的整数，则得到空字符串：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;Python&#x27;</span> * <span class="number">-1</span></span><br></pre></td></tr></table></figure>




<pre><code>&#39;&#39;</code></pre>
<p><code>*</code> 操作符可以与 <code>=</code> 连用，重复拼接并赋值：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="string">&#x27;py&#x27;</span></span><br><span class="line">a *= <span class="number">3</span></span><br><span class="line">a</span><br></pre></td></tr></table></figure>




<pre><code>&#39;pypypy&#39;</code></pre>
<p>由于字符串是可迭代对象，因此可以使用 <code>*</code> 对字符串进行拆包：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">(*<span class="string">&#x27;Python&#x27;</span>,)</span><br></pre></td></tr></table></figure>




<pre><code>(&#39;P&#39;, &#39;y&#39;, &#39;t&#39;, &#39;h&#39;, &#39;o&#39;, &#39;n&#39;)</code></pre>
<h3 id="操作符-1"><a href="#操作符-1" class="headerlink" title="操作符 %"></a>操作符 <code>%</code></h3><p>字符串使用 <code>%</code> 操作符，官方文档叫 “printf 风格的字符串格式化”。比较早的格式化方法，官方已不推荐使用，了解它能更好地读懂别人的代码。</p>
<p>转换标记符包含两个或更多字符并具有以下组成，且必须遵循如下规定的顺序：</p>
<ol>
<li>‘%’ 字符，用于标记转换符的起始。</li>
<li>映射键（可选），由加圆括号的字符序列组成。</li>
<li>转换旗标（可选），用于影响某些转换类型的结果。</li>
<li>最小字段宽度（可选）。如果指定为 ‘*’ (星号)，则实际宽度会从 values 元组的下一元素中读取，要转换的对象则为最小字段宽度和可选的精度之后的元素。</li>
<li>精度（可选），以在 ‘.’ (点号) 之后加精度值的形式给出。如果指定为 ‘*’ (星号)，则实际精度会从 values 元组的下一元素中读取，要转换的对象则为精度之后的元素。</li>
<li>长度修饰符（可选）。</li>
<li>转换类型。</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;hi %r&#x27;</span> % <span class="string">&#x27;python&#x27;</span></span><br></pre></td></tr></table></figure>




<pre><code>&quot;hi &#39;python&#39;&quot;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;%s %r&#x27;</span> % (<span class="string">&#x27;hi&#x27;</span>,<span class="string">&#x27;python&#x27;</span>)</span><br></pre></td></tr></table></figure>




<pre><code>&quot;hi &#39;python&#39;&quot;</code></pre>
<p>转换旗标为：</p>
<table>
<thead>
<tr>
<th>标志</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>‘#’</td>
<td>值的转换将使用“替代形式”。</td>
</tr>
<tr>
<td>‘0’</td>
<td>转换将为数字值填充零字符。</td>
</tr>
<tr>
<td>‘-‘</td>
<td>转换值将靠左对齐（如果同时给出 ‘0’ 转换，则会覆盖后者）。</td>
</tr>
<tr>
<td>‘ ‘</td>
<td>(空格) 符号位转换产生的正数（或空字符串）前将留出一个空格。</td>
</tr>
<tr>
<td>‘+’</td>
<td>符号字符 (‘+’ 或 ‘-‘) 将显示于转换结果的开头（会覆盖 ”空格” 旗标）。</td>
</tr>
</tbody></table>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;A is %#x&#x27;</span> % <span class="number">18</span></span><br></pre></td></tr></table></figure>




<pre><code>&#39;A is 0x12&#39;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;A is %    d&#x27;</span> % <span class="number">18</span></span><br></pre></td></tr></table></figure>




<pre><code>&#39;A is  18&#39;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;A is %05o&#x27;</span> % <span class="number">18</span></span><br></pre></td></tr></table></figure>




<pre><code>&#39;A is 00022&#39;</code></pre>
<p>转换类型为：</p>
<table>
<thead>
<tr>
<th>转换符</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>‘d’</td>
<td>有符号十进制整数。</td>
</tr>
<tr>
<td>‘i’</td>
<td>有符号十进制整数。</td>
</tr>
<tr>
<td>‘o’</td>
<td>有符号八进制数。</td>
</tr>
<tr>
<td>‘x’</td>
<td>有符号十六进制数（小写）。</td>
</tr>
<tr>
<td>‘X’</td>
<td>有符号十六进制数（大写）。</td>
</tr>
<tr>
<td>‘e’</td>
<td>浮点指数格式（小写）。</td>
</tr>
<tr>
<td>‘E’</td>
<td>浮点指数格式（大写）。</td>
</tr>
<tr>
<td>‘f’</td>
<td>浮点十进制格式。</td>
</tr>
<tr>
<td>‘F’</td>
<td>浮点十进制格式。</td>
</tr>
<tr>
<td>‘g’</td>
<td>浮点格式。如果指数小于 -4 或不小于精度则使用小写指数格式，否则使用十进制格式。</td>
</tr>
<tr>
<td>‘G’</td>
<td>浮点格式。如果指数小于 -4 或不小于精度则使用大写指数格式，否则使用十进制格式。</td>
</tr>
<tr>
<td>‘c’</td>
<td>单个字符（接受整数或单个字符的字符串）。</td>
</tr>
<tr>
<td>‘r’</td>
<td>字符串（使用repr() 转换任何 Python 对象）。</td>
</tr>
<tr>
<td>‘s’</td>
<td>字符串（使用str() 转换任何 Python 对象）。</td>
</tr>
<tr>
<td>‘a’</td>
<td>字符串（使用ascii() 转换任何 Python 对象）。</td>
</tr>
<tr>
<td>‘%’</td>
<td>不转换参数，在结果中输出一个 ‘%’ 字符。</td>
</tr>
</tbody></table>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;%f&#x27;</span> % <span class="number">3.14</span></span><br></pre></td></tr></table></figure>




<pre><code>&#39;3.140000&#39;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;%.3e&#x27;</span> % <span class="number">3.14</span></span><br></pre></td></tr></table></figure>




<pre><code>&#39;3.140e+00&#39;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;%.1f%%&#x27;</span> % (<span class="number">3.14</span>*<span class="number">100</span>)</span><br></pre></td></tr></table></figure>




<pre><code>&#39;314.0%&#39;</code></pre>
<p>当右边的参数为一个字典（或其他映射类型）时，字符串中的格式 必须包含加圆括号的映射键，对应 <code>%</code> 字符之后字典中的每一项。映射键将从映射中选取要格式化的值:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;%(language)s has %(number)03d quote types.&#x27;</span> %\</span><br><span class="line">&#123;<span class="string">&#x27;language&#x27;</span>: <span class="string">&quot;Python&quot;</span>, <span class="string">&quot;number&quot;</span>: <span class="number">2</span>&#125;</span><br></pre></td></tr></table></figure>




<pre><code>&#39;Python has 002 quote types.&#39;</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/02_string/27_f-string-a45109c573a5/</url>
    <content><![CDATA[<h2 id="f-string-格式化字符串"><a href="#f-string-格式化字符串" class="headerlink" title="f-string 格式化字符串"></a>f-string 格式化字符串</h2><p>f-string 即格式化字符串字面值。字符串以 ‘f’ 或 ‘F’ 为前缀。这种字符串可包含替换字段，即以 {} 标示的表达式。格式化字符串字面值，会在运行时将表达式求值，而其他字符串字面值总是一个常量。</p>
<p>格式化字符串字面值中的表达式会被当作包含在圆括号中的普通 Python 表达式一样处理，但有少数例外。</p>
<p>空表达式不被允许，lambda 和赋值表达式 :=（python 3.8版添加）必须显式地加上圆括号。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">f&#x27;<span class="subst">&#123;(a := <span class="number">1</span>+<span class="number">1</span>)&#125;</span>&#x27;</span> <span class="comment"># python 3.8 才能运行</span></span><br></pre></td></tr></table></figure>




<pre><code>&#39;2&#39;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">f&#x27;<span class="subst">&#123;(<span class="keyword">lambda</span> x:<span class="number">1</span>)&#125;</span>&#x27;</span></span><br></pre></td></tr></table></figure>




<pre><code>&#39;&lt;function &lt;lambda&gt; at 0x000001D70B06CA60&gt;&#39;</code></pre>
<p>替换表达式可以包含换行（例如在三重引号字符串中），但是不能包含注释。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="number">3</span>; b = <span class="number">2</span></span><br><span class="line"><span class="string">f&#x27;&#x27;&#x27;3+2\</span></span><br><span class="line"><span class="string">-5=</span></span><br><span class="line"><span class="string"><span class="subst">&#123;a +</span></span></span><br><span class="line"><span class="string"><span class="subst">b - <span class="number">5</span>&#125;</span>&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>




<pre><code>&#39;3+2-5=\n0&#39;</code></pre>
<p>每个表达式会在格式化字符串字面值所包含的位置按照从左至右的顺序被求值。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">f&#x27;<span class="subst">&#123;<span class="number">1</span>+<span class="number">2</span> &gt; <span class="number">3</span>&#125;</span>&#x27;</span></span><br></pre></td></tr></table></figure>




<pre><code>&#39;False&#39;</code></pre>
<p>可以在表达式后加一个等于号 ‘=’（3.8 新版功能），提供了等于号 ‘=’ 的时候，输出将包含 ‘=’、’=’ 前后的空格以及求值结果。默认情况下，’=’ 会导致表达式的 repr() 被使用，除非专门指定了格式。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">foo = <span class="string">&quot;bar&quot;</span></span><br><span class="line"><span class="string">f&quot;<span class="subst">&#123; foo = &#125;</span>&quot;</span></span><br></pre></td></tr></table></figure>




<pre><code>&quot; foo = &#39;bar&#39;&quot;</code></pre>
<p>可以带一个以叹号 ‘!’ 标示的转换字段，转换符 ‘!s’ 即对结果调用 str()，’!r’ 为调用 repr()，而 ‘!a’ 为调用 ascii()。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">foo = <span class="string">&quot;bar&quot;</span></span><br><span class="line"><span class="string">f&quot;<span class="subst">&#123;foo = !s&#125;</span>&quot;</span></span><br></pre></td></tr></table></figure>




<pre><code>&#39;foo = bar&#39;</code></pre>
<p>还可带一个以冒号 ‘:’ 标示的格式说明符，“格式化迷你语言” 与 str.format() 方法所使用的微语言一致，详见 <a href="https://xue.cn/hub/reader?bookId=64&path=xue_python_kp/02_string/25_str.format.ipynb">str.format</a> 方法。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">foo = <span class="number">3.14</span></span><br><span class="line"><span class="string">f&quot;<span class="subst">&#123;foo:<span class="number">.4</span>f&#125;</span>&quot;</span></span><br></pre></td></tr></table></figure>




<pre><code>&#39;3.1400&#39;</code></pre>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">f&#x27;&#123;123:#o&#125;&#x27;</span><br></pre></td></tr></table></figure>




<pre><code>&#39;0o173&#39;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=<span class="number">5</span>/<span class="number">6</span></span><br><span class="line"><span class="string">f&#x27;<span class="subst">&#123;a:<span class="number">.2</span>%&#125;</span>&#x27;</span></span><br></pre></td></tr></table></figure>




<pre><code>&#39;83.33%&#39;</code></pre>
<p>格式表达式中不允许有反斜杠，这会引发错误:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">f&quot;newline: <span class="subst">&#123;<span class="built_in">ord</span>(<span class="string">&#x27;\n&#x27;</span>)&#125;</span>&quot;</span></span><br></pre></td></tr></table></figure>


<pre><code>  File &quot;&lt;ipython-input-23-30c78f70325d&gt;&quot;, line 1
    f&quot;newline: &#123;ord(&#39;\n&#39;)&#125;&quot;
    ^
SyntaxError: f-string expression part cannot include a backslash</code></pre>
<p>想包含需要用反斜杠转义的值，可以创建一个临时变量:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">newline = <span class="built_in">ord</span>(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"><span class="string">f&quot;newline: <span class="subst">&#123;newline&#125;</span>&quot;</span></span><br></pre></td></tr></table></figure>




<pre><code>&#39;newline: 10&#39;</code></pre>
<p>格式化字符串字面值不可用作文档字符串，即便其中没有包含表达式:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span>():</span></span><br><span class="line">    <span class="string">f&quot;Not a docstring&quot;</span></span><br><span class="line"></span><br><span class="line">print(foo.__doc__)</span><br></pre></td></tr></table></figure>

<pre><code>None</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/02_string/26_str.format_map-69c2b45c644d/</url>
    <content><![CDATA[<h2 id="str-format-map-格式化"><a href="#str-format-map-格式化" class="headerlink" title="str.format_map 格式化"></a>str.format_map 格式化</h2><p>字符串方法 str.format_map()，Python 官方文档描述如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">help</span>(<span class="built_in">str</span>.format_map)</span><br></pre></td></tr></table></figure>

<pre><code>Help on method_descriptor:

format_map(...)
    S.format_map(mapping) -&gt; str

    Return a formatted version of S, using substitutions from mapping.
    The substitutions are identified by braces (&#39;&#123;&#39; and &#39;&#125;&#39;).</code></pre>
<p>类似于 str.format(**mapping)，不同之处在于 mapping 会被直接使用。适宜使用此方法的一个例子是当 mapping 为 dict 的子类的情况：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建一个字典子类型，当 键值对 不存在时，返回键</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Default</span>(<span class="params"><span class="built_in">dict</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__missing__</span>(<span class="params">self, key</span>):</span></span><br><span class="line">        <span class="keyword">return</span> key</span><br><span class="line">d = Default(a=<span class="number">1</span>)</span><br><span class="line">d[<span class="string">&#x27;a&#x27;</span>], d[<span class="string">&#x27;b&#x27;</span>]</span><br></pre></td></tr></table></figure>




<pre><code>(1, &#39;b&#39;)</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># country 键值对不存在，所以直接格式化键 ‘country’</span></span><br><span class="line"><span class="string">&#x27;&#123;name&#125; was born in &#123;country&#125;&#x27;</span>.format_map(</span><br><span class="line">    Default(name=<span class="string">&#x27;Guido&#x27;</span>))</span><br></pre></td></tr></table></figure>




<pre><code>&#39;Guido was born in country&#39;</code></pre>
<p>与 format 格式化对比：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;&#123;a&#125; is &#123;age&#125;&#x27;</span>.format_map(&#123;<span class="string">&#x27;a&#x27;</span>:<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;age&#x27;</span>:<span class="number">18</span>&#125;)</span><br></pre></td></tr></table></figure>




<pre><code>&#39;A is 18&#39;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;&#123;a&#125; is &#123;age&#125;&#x27;</span>.<span class="built_in">format</span>(**&#123;<span class="string">&#x27;a&#x27;</span>:<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;age&#x27;</span>:<span class="number">18</span>&#125;)</span><br></pre></td></tr></table></figure>




<pre><code>&#39;A is 18&#39;</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/02_string/25_str.format-baf9dc52f301/</url>
    <content><![CDATA[<h2 id="str-format-格式化"><a href="#str-format-格式化" class="headerlink" title="str.format 格式化"></a>str.format 格式化</h2><p>字符串方法 str.format()，Python 官方文档描述如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">help</span>(<span class="built_in">str</span>.<span class="built_in">format</span>)</span><br></pre></td></tr></table></figure>

<pre><code>Help on method_descriptor:

format(...)
    S.format(*args, **kwargs) -&gt; str

    Return a formatted version of S, using substitutions from args and kwargs.
    The substitutions are identified by braces (&#39;&#123;&#39; and &#39;&#125;&#39;).</code></pre>
<p>执行字符串格式化操作。调用此方法的字符串可以包含字符串字面值或者以花括号 {} 括起来的替换域。每个替换域可以包含一个位置参数的数字索引，或者一个关键字参数的名称。返回的字符串副本中每个替换域都会被替换为对应参数的字符串值。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;The sum of 1 + 2 is &#123;0&#125;&quot;</span>.<span class="built_in">format</span>(<span class="number">1</span>+<span class="number">2</span>)</span><br></pre></td></tr></table></figure>




<pre><code>&#39;The sum of 1 + 2 is 3&#39;</code></pre>
<p>如果你需要在字面文本中包含花括号字符，可以通过重复来转义:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&#123;&#123;python&#125;&#125;&quot;</span>.<span class="built_in">format</span>()</span><br></pre></td></tr></table></figure>




<pre><code>&#39;&#123;python&#125;&#39;</code></pre>
<p>位置传参和关键字传参方式非常灵活，多个位置索引依次为 0,1,2……，且可以不插入字符串中；关键字传参则需要将关键字插入字符串中：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;&#123;&#125; and &#123;&#125; are both &#123;age&#125; years old.\</span></span><br><span class="line"><span class="string">&#x27;</span>.<span class="built_in">format</span>(<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;B&#x27;</span>,age=<span class="number">18</span>)</span><br></pre></td></tr></table></figure>




<pre><code>&#39;A and B are both 18 years old.&#39;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;&#123;1&#125; and &#123;0&#125; are both &#123;age&#125; years old.\</span></span><br><span class="line"><span class="string">&#x27;</span>.<span class="built_in">format</span>(<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;B&#x27;</span>,age=<span class="number">18</span>)</span><br></pre></td></tr></table></figure>




<pre><code>&#39;B and A are both 18 years old.&#39;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;&#123;age&#125; and &#123;&#125; are both &#123;&#125; years old.\</span></span><br><span class="line"><span class="string">&#x27;</span>.<span class="built_in">format</span>(<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;B&#x27;</span>,age=<span class="number">18</span>)</span><br></pre></td></tr></table></figure>




<pre><code>&#39;18 and A are both B years old.&#39;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;&#123;0&#125; and &#123;0&#125; are both &#123;0&#125; years old.\</span></span><br><span class="line"><span class="string">&#x27;</span>.<span class="built_in">format</span>(<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;B&#x27;</span>,age=<span class="number">18</span>)</span><br></pre></td></tr></table></figure>




<pre><code>&#39;A and A are both A years old.&#39;</code></pre>
<p>通常，格式化值的工作由值本身的 <code>__format__()</code> 方法来完成。但是，在某些情况下最好强制将类型格式化为一个字符串，覆盖其本身的格式化定义。通过在调用 <code>__format__()</code> 之前将值转换为字符串，可以绕过正常的格式化逻辑。</p>
<p>目前支持的转换旗标有三种: ‘!s’ 会对值调用 str()，’!r’ 调用 repr() 而 ‘!a’ 则调用 ascii()。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;&#123;1!s&#125; and &#123;0!r&#125; are both &#123;age!a&#125; years old.\</span></span><br><span class="line"><span class="string">&#x27;</span>.<span class="built_in">format</span>(<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;B&#x27;</span>,age=<span class="number">18</span>)</span><br></pre></td></tr></table></figure>




<pre><code>&quot;B and &#39;A&#39; are both 18 years old.&quot;</code></pre>
<p>可以包含值应如何呈现的规格描述，例如字段宽度、对齐、填充、小数精度等细节信息。每种值类型可以定义自己的 “格式化迷你语言” 或解读方式。</p>
<h3 id="各种格式化方式示例："><a href="#各种格式化方式示例：" class="headerlink" title="各种格式化方式示例："></a>各种格式化方式示例：</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 复数格式化</span></span><br><span class="line">(<span class="string">&#x27;The complex number &#123;0&#125; is formed&#x27;</span></span><br><span class="line"> <span class="string">&#x27; from the real part &#123;0.real&#125; &#x27;</span></span><br><span class="line"> <span class="string">&#x27;and the imaginary part &#123;0.imag&#125;.&#x27;</span>).<span class="built_in">format</span>(<span class="number">3</span><span class="number">-5j</span>)</span><br></pre></td></tr></table></figure>




<pre><code>&#39;The complex number (3-5j) is formed from the real part 3.0 and the imaginary part -5.0.&#39;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 利用索引取出某项格式化，不可切片</span></span><br><span class="line"><span class="string">&#x27;X: &#123;0[0]&#125;; Y: &#123;0[1]&#125;&#x27;</span>.<span class="built_in">format</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br></pre></td></tr></table></figure>




<pre><code>&#39;X: 1; Y: 2&#39;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 切片格式化</span></span><br><span class="line">a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="string">&#x27;X: &#123;0&#125;; Y: &#123;1&#125;&#x27;</span>.<span class="built_in">format</span>(a[:<span class="number">2</span>],a[<span class="number">-2</span>:])</span><br></pre></td></tr></table></figure>




<pre><code>&#39;X: [1, 2]; Y: [2, 3]&#39;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 右对齐</span></span><br><span class="line"><span class="string">&#x27;&#123;:&gt;20&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="string">&#x27;right aligned&#x27;</span>)</span><br></pre></td></tr></table></figure>




<pre><code>&#39;       right aligned&#39;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 填充 ~ 居中</span></span><br><span class="line"><span class="string">&#x27;&#123;:~^20&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="string">&#x27;centered&#x27;</span>)</span><br></pre></td></tr></table></figure>




<pre><code>&#39;~~~~~~centered~~~~~~&#39;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 更复杂的排版</span></span><br><span class="line"><span class="keyword">for</span> i, w <span class="keyword">in</span> <span class="built_in">zip</span>(<span class="string">&#x27;&lt;^&gt;&#x27;</span>, [<span class="string">&#x27;left&#x27;</span>, <span class="string">&#x27;center&#x27;</span>, <span class="string">&#x27;right&#x27;</span>]):</span><br><span class="line">    print(<span class="string">&#x27;&#123;0:&#123;fill&#125;&#123;align&#125;20&#125;&#x27;</span>.<span class="built_in">format</span>(w, fill=i, align=i))</span><br></pre></td></tr></table></figure>

<pre><code>left&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;
^^^^^^^center^^^^^^^
&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;right</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 数字前填充 0</span></span><br><span class="line"><span class="string">&#x27;&#123;:05&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="number">12</span>)</span><br></pre></td></tr></table></figure>




<pre><code>&#39;00012&#39;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 设置保留精度</span></span><br><span class="line"><span class="string">&#x27;&#123;:f&#125;; &#123;:+.1f&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="number">3.14</span>, <span class="number">-3.14</span>)</span><br></pre></td></tr></table></figure>




<pre><code>&#39;3.140000; -3.1&#39;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 各种进制格式化</span></span><br><span class="line"><span class="string">&quot;int: &#123;0:d&#125;; hex: &#123;0:x&#125;; oct: &#123;0:o&#125;; \</span></span><br><span class="line"><span class="string">bin: &#123;0:b&#125;&quot;</span>.<span class="built_in">format</span>(<span class="number">42</span>)</span><br></pre></td></tr></table></figure>




<pre><code>&#39;int: 42; hex: 2a; oct: 52; bin: 101010&#39;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 保留进制前缀</span></span><br><span class="line"><span class="string">&quot;int: &#123;0:d&#125;; hex: &#123;0:#x&#125;; oct: &#123;0:#o&#125;; \</span></span><br><span class="line"><span class="string">bin: &#123;0:#b&#125;&quot;</span>.<span class="built_in">format</span>(<span class="number">42</span>)</span><br></pre></td></tr></table></figure>




<pre><code>&#39;int: 42; hex: 0x2a; oct: 0o52; bin: 0b101010&#39;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 让数字更易读</span></span><br><span class="line"><span class="string">&#x27;&#123;:,&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="number">1234567890</span>)</span><br></pre></td></tr></table></figure>




<pre><code>&#39;1,234,567,890&#39;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 百分比格式化</span></span><br><span class="line"><span class="string">&#x27;Correct answers: &#123;:.2%&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="number">5</span>/<span class="number">6</span>)</span><br></pre></td></tr></table></figure>




<pre><code>&#39;Correct answers: 83.33%&#39;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 特定类型的专属格式化</span></span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line">d = datetime.datetime(<span class="number">2010</span>, <span class="number">7</span>, <span class="number">4</span>, <span class="number">12</span>, <span class="number">15</span>, <span class="number">58</span>)</span><br><span class="line"><span class="string">&#x27;&#123;:%Y-%m-%d %H:%M:%S&#125;&#x27;</span>.<span class="built_in">format</span>(d)</span><br></pre></td></tr></table></figure>




<pre><code>&#39;2010-07-04 12:15:58&#39;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># IP地址格式化</span></span><br><span class="line">octets = [<span class="number">192</span>, <span class="number">168</span>, <span class="number">0</span>, <span class="number">1</span>]</span><br><span class="line"><span class="string">&#x27;&#123;:02X&#125;&#123;:02X&#125;&#123;:02X&#125;&#123;:02X&#125;&#x27;</span>.<span class="built_in">format</span>(*octets)</span><br></pre></td></tr></table></figure>




<pre><code>&#39;C0A80001&#39;</code></pre>
<h3 id="“格式化迷你语言”-总结"><a href="#“格式化迷你语言”-总结" class="headerlink" title="“格式化迷你语言” 总结"></a>“格式化迷你语言” 总结</h3><p>各种对齐选项的含义：</p>
<ul>
<li>‘&lt;’ 强制字段在可用空间内左对齐（这是大多数对象的默认值）。</li>
<li>‘&gt;’ 强制字段在可用空间内右对齐（这是数字的默认值）。</li>
<li>‘=’ 强制将填充放置在符号（如果有）之后但在数字之前。这用于以 “+000000120” 形式打印字段。此对齐选项仅对数字类型有效。当 ’0’  紧接在字段宽度之前时，它成为默认值。</li>
<li>‘^’ 强制字段在可用空间内居中。</li>
</ul>
<p>仅对数字类型有效选项：</p>
<ul>
<li>‘+’ 表示标志应该用于正数和负数。</li>
<li>‘-‘ 表示标志应仅用于负数（这是默认行为）。</li>
<li>space 表示应在正数上使用前导空格，在负数上使用减号。</li>
<li>‘#’ 选项可以让“替代形式”被用于转换。替代形式可针对不同类型分别定义。对于整数类型，当使用二进制、八进制或十六进制输出时，此选项会为输出值添加相应的 ‘0b’, ‘0o’ 或 ‘0x’ 前缀。</li>
<li>‘,’ 选项表示使用逗号作为千位分隔符。对于感应区域设置的分隔符，请改用 ‘n’ 整数表示类型。</li>
<li>‘_’ 选项表示对浮点表示类型和整数表示类型 ‘d’ 使用下划线作为千位分隔符。对于整数表示类型 ‘b’,’o’, ‘x’ 和 ‘X’，将为每 4 个数位插入一个下划线。对于其他表示类型指定此选项则将导致错误。</li>
</ul>
<p>确定了数据应如何呈现：</p>
<ul>
<li>‘s’ 字符串格式。这是字符串的默认类型，可以省略。</li>
<li>‘b’ 二进制格式。输出以 2 为基数的数字。</li>
<li>‘c’ 字符。在打印之前将整数转换为相应的 unicode 字符。</li>
<li>‘d’ 十进制整数。输出以 10 为基数的数字。</li>
<li>‘o’ 八进制格式。输出以 8 为基数的数字。</li>
<li>‘x’ 十六进制格式。输出以 16 为基数的数字，使用小写字母表示 9 以上的数码。</li>
<li>‘X’ 十六进制格式。输出以 16 为基数的数字，使用大写字母表示 9 以上的数码。</li>
<li>‘n’ 数字。这与 ‘d’ 相似，不同之处在于它会使用当前区域设置来插入适当的数字分隔字符。</li>
<li>‘e’ 指数表示。以使用字母’e’ 来标示指数的科学计数法打印数字。默认的精度为 6。</li>
<li>‘E’ 指数表示。与 ‘e’ 相似，不同之处在于它使用大写字母’E’ 作为分隔字符。</li>
<li>‘f’ 定点表示。将数字显示为一个定点数。默认的精确度为 6。</li>
<li>‘F’ 定点表示。与 ‘f’ 相似，但会将 nan 转为 NAN 并将 inf 转为 INF。</li>
<li>‘g’ 常规格式。对于给定的精度 p &gt;= 1，这会将数值舍入到 p 位有效数字，再将结果以定点格式或科学计数法进行格式化，具体取决于其值的大小。</li>
<li>‘G’ 常规格式。类似于 ‘g’，不同之处在于当数值非常大时会切换为 ‘E’。无穷与 NaN 也会表示为大写形式。</li>
<li>‘n’ 数字。这与 ‘g’ 相似，不同之处在于它会使用当前区域设置来插入适当的数字分隔字符。</li>
<li>‘%’ 百分比。将数字乘以 100 并显示为定点 (‘f’) 格式，后面带一个百分号。</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/02_string/24_str.rjust-ad310d3b563c/</url>
    <content><![CDATA[<h2 id="str-rjust-右对齐"><a href="#str-rjust-右对齐" class="headerlink" title="str.rjust 右对齐"></a>str.rjust 右对齐</h2><p>字符串方法 str.rjust()，Python 官方文档描述如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">help</span>(<span class="built_in">str</span>.rjust)</span><br></pre></td></tr></table></figure>

<pre><code>Help on method_descriptor:

rjust(self, width, fillchar=&#39; &#39;, /)
    Return a right-justified string of length width.

    Padding is done using the specified fill character (default is a space).</code></pre>
<p>返回长度为 width 的字符串，原字符串在其中靠右对齐。使用指定的 fillchar 填充空位 (默认使用 ASCII 空格符)。如果 width 小于等于字符串长度 len(str) 则返回原字符串的副本。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;python&#x27;</span>.rjust(<span class="number">1</span>)</span><br></pre></td></tr></table></figure>




<pre><code>&#39;python&#39;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;python&#x27;</span>.rjust(<span class="number">10</span>,<span class="string">&#x27;~&#x27;</span>)</span><br></pre></td></tr></table></figure>




<pre><code>&#39;~~~~python&#39;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;python&#x27;</span>.rjust(<span class="number">10</span>)</span><br></pre></td></tr></table></figure>




<pre><code>&#39;    python&#39;</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/02_string/23_str.center-f5a443b2d145/</url>
    <content><![CDATA[<h2 id="str-center-居中"><a href="#str-center-居中" class="headerlink" title="str.center 居中"></a>str.center 居中</h2><p>字符串方法 str.center()，Python 官方文档描述如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">help</span>(<span class="built_in">str</span>.center)</span><br></pre></td></tr></table></figure>

<pre><code>Help on method_descriptor:

center(self, width, fillchar=&#39; &#39;, /)
    Return a centered string of length width.

    Padding is done using the specified fill character (default is a space).</code></pre>
<p>返回长度为 width 的字符串，原字符串在其正中。使用指定的 fillchar 填充两边的空位（默认使用ASCII 空格符）。如果 width 小于等于字符串长度，则返回原字符串的副本:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;Python&#x27;</span>.center(<span class="number">1</span>)</span><br></pre></td></tr></table></figure>




<pre><code>&#39;Python&#39;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;Python&#x27;</span>.center(<span class="number">10</span>)</span><br></pre></td></tr></table></figure>




<pre><code>&#39;  Python  &#39;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;Python&#x27;</span>.center(<span class="number">20</span>,<span class="string">&#x27;~&#x27;</span>)</span><br></pre></td></tr></table></figure>




<pre><code>&#39;~~~~~~~Python~~~~~~~&#39;</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/02_string/22_str.ljust-bae7ddf7179b/</url>
    <content><![CDATA[<h2 id="str-ljust-左对齐"><a href="#str-ljust-左对齐" class="headerlink" title="str.ljust 左对齐"></a>str.ljust 左对齐</h2><p>字符串方法 str.ljust()，Python 官方文档描述如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">help</span>(<span class="built_in">str</span>.ljust)</span><br></pre></td></tr></table></figure>

<pre><code>Help on method_descriptor:

ljust(self, width, fillchar=&#39; &#39;, /)
    Return a left-justified string of length width.

    Padding is done using the specified fill character (default is a space).</code></pre>
<p>返回长度为 width 的字符串，原字符串在其中靠左对齐。使用指定的 fillchar 填充空位 (默认使用 ASCII 空格符)。如果 width 小于等于字符串长度 len(str) 则返回原字符串的副本。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;python&#x27;</span>.ljust(<span class="number">1</span>)</span><br></pre></td></tr></table></figure>




<pre><code>&#39;python&#39;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;python&#x27;</span>.ljust(<span class="number">10</span>,<span class="string">&#x27;~&#x27;</span>)</span><br></pre></td></tr></table></figure>




<pre><code>&#39;python~~~~&#39;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;python&#x27;</span>.ljust(<span class="number">10</span>)</span><br></pre></td></tr></table></figure>




<pre><code>&#39;python    &#39;</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/02_string/21_str.endswith-d503645e6584/</url>
    <content><![CDATA[<h2 id="str-endswith-指定字符串结尾？"><a href="#str-endswith-指定字符串结尾？" class="headerlink" title="str.endswith 指定字符串结尾？"></a>str.endswith 指定字符串结尾？</h2><p>字符串方法 str.endswith()，Python 官方文档描述如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">help</span>(<span class="built_in">str</span>.endswith)</span><br></pre></td></tr></table></figure>

<pre><code>Help on method_descriptor:

endswith(...)
    S.endswith(suffix[, start[, end]]) -&gt; bool

    Return True if S ends with the specified suffix, False otherwise.
    With optional start, test S beginning at that position.
    With optional end, stop comparing S at that position.
    suffix can also be a tuple of strings to try.</code></pre>
<p>如果字符串以指定的 suffix 结束返回 True，否则返回 False。suffix 也可以为由多个供查找的后缀构成的元组。如果有可选项 start，将从所指定位置开始检查。如果有可选项 end，将在所指定位置之前停止比较。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;python.exe&#x27;</span>.endswith(<span class="string">&#x27;.exe&#x27;</span>)</span><br></pre></td></tr></table></figure>




<pre><code>True</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;python.exe&#x27;</span>.endswith((<span class="string">&#x27;.exe&#x27;</span>,<span class="string">&#x27;.txt&#x27;</span>), <span class="number">5</span>)</span><br></pre></td></tr></table></figure>




<pre><code>True</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;python.exe&#x27;</span>.endswith((<span class="string">&#x27;.py&#x27;</span>,<span class="string">&#x27;.txt&#x27;</span>), <span class="number">5</span>)</span><br></pre></td></tr></table></figure>




<pre><code>False</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;python.exe&#x27;</span>.endswith((<span class="string">&#x27;.exe&#x27;</span>,<span class="string">&#x27;.txt&#x27;</span>), <span class="number">5</span>,<span class="number">9</span>)</span><br></pre></td></tr></table></figure>




<pre><code>False</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/02_string/20_str.startswith-7610ff892666/</url>
    <content><![CDATA[<h2 id="str-startswith-指定字符串开头？"><a href="#str-startswith-指定字符串开头？" class="headerlink" title="str.startswith 指定字符串开头？"></a>str.startswith 指定字符串开头？</h2><p>字符串方法 str.startswith()，Python 官方文档描述如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">help</span>(<span class="built_in">str</span>.startswith)</span><br></pre></td></tr></table></figure>

<pre><code>Help on method_descriptor:

startswith(...)
    S.startswith(prefix[, start[, end]]) -&gt; bool

    Return True if S starts with the specified prefix, False otherwise.
    With optional start, test S beginning at that position.
    With optional end, stop comparing S at that position.
    prefix can also be a tuple of strings to try.</code></pre>
<p>如果字符串以指定的 prefix 开始则返回 True，否则返回 False。prefix 也可以为由多个供查找的前缀构成的元组。如果有可选项 start，将从所指定位置开始检查。如果有可选项 end，将在所指定位置之前停止比较。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;a.b.a.c&#x27;</span>.startswith(<span class="string">&#x27;ab&#x27;</span>)</span><br></pre></td></tr></table></figure>




<pre><code>False</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;a.b.a.c&#x27;</span>.startswith(<span class="string">&#x27;a.&#x27;</span>)</span><br></pre></td></tr></table></figure>




<pre><code>True</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;a.b.a.c&#x27;</span>.startswith(<span class="string">&#x27;ab&#x27;</span>,<span class="number">2</span>)</span><br></pre></td></tr></table></figure>




<pre><code>False</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;a.b.a.c&#x27;</span>.startswith(<span class="string">&#x27;a.&#x27;</span>,<span class="number">4</span>)</span><br></pre></td></tr></table></figure>




<pre><code>True</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;a.b.a.c&#x27;</span>.startswith(<span class="string">&#x27;a&#x27;</span>,<span class="number">1</span>,<span class="number">4</span>)</span><br></pre></td></tr></table></figure>




<pre><code>False</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/02_string/19_str.join-0bbd20f8c520/</url>
    <content><![CDATA[<h2 id="str-join-拼接字符串"><a href="#str-join-拼接字符串" class="headerlink" title="str.join 拼接字符串"></a>str.join 拼接字符串</h2><p>字符串方法 str.join()，Python 官方文档描述如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">help</span>(<span class="built_in">str</span>.join)</span><br></pre></td></tr></table></figure>

<pre><code>Help on method_descriptor:

join(self, iterable, /)
    Concatenate any number of strings.

    The string whose method is called is inserted in between each given string.
    The result is returned as a new string.

    Example: &#39;.&#39;.join([&#39;ab&#39;, &#39;pq&#39;, &#39;rs&#39;]) -&gt; &#39;ab.pq.rs&#39;</code></pre>
<p>返回一个由 iterable 中的字符串拼接而成的字符串。如果 iterable 中存在任何非字符串值则会引发 TypeError。调用该方法的字符串将作为元素之间的分隔。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;~&#x27;</span>.join(<span class="string">&#x27;abc&#x27;</span>)</span><br></pre></td></tr></table></figure>




<pre><code>&#39;a~b~c&#39;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;acb&#x27;</span>.join([<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;2&#x27;</span>])</span><br></pre></td></tr></table></figure>




<pre><code>&#39;1acb2&#39;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;</span>.join([<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;2&#x27;</span>])</span><br></pre></td></tr></table></figure>




<pre><code>&#39;12&#39;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;-&#x27;</span>.join(&#123;<span class="string">&#x27;1&#x27;</span>:<span class="number">1</span>,<span class="string">&#x27;2&#x27;</span>:<span class="number">2</span>&#125;)</span><br></pre></td></tr></table></figure>




<pre><code>&#39;1-2&#39;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;-&#x27;</span>.join([<span class="string">&#x27;1&#x27;</span>,<span class="number">2</span>])</span><br></pre></td></tr></table></figure>


<pre><code>---------------------------------------------------------------------------

TypeError                                 Traceback (most recent call last)

&lt;ipython-input-9-fc346e5ca62e&gt; in &lt;module&gt;
----&gt; 1 &#39;-&#39;.join([&#39;1&#39;,2])


TypeError: sequence item 1: expected str instance, int found</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;-&#x27;</span>.join(<span class="string">b&#x27;abc&#x27;</span>)</span><br></pre></td></tr></table></figure>


<pre><code>---------------------------------------------------------------------------

TypeError                                 Traceback (most recent call last)

&lt;ipython-input-8-9d04d7060926&gt; in &lt;module&gt;
----&gt; 1 &#39;-&#39;.join(b&#39;abc&#39;)


TypeError: sequence item 0: expected str instance, int found</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/02_string/18_str.rindex-36ab5ce6c8e2/</url>
    <content><![CDATA[<h2 id="str-rindex-查找最大索引"><a href="#str-rindex-查找最大索引" class="headerlink" title="str.rindex 查找最大索引"></a>str.rindex 查找最大索引</h2><p>字符串方法 str.rindex()，Python 官方文档描述如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">help</span>(<span class="built_in">str</span>.rindex)</span><br></pre></td></tr></table></figure>

<pre><code>Help on method_descriptor:

rindex(...)
    S.rindex(sub[, start[, end]]) -&gt; int

    Return the highest index in S where substring sub is found,
    such that sub is contained within S[start:end].  Optional
    arguments start and end are interpreted as in slice notation.

    Raises ValueError when the substring is not found.</code></pre>
<p>返回子字符串 sub 在字符串内被找到的最大（最右）索引，这样 sub 将包含在 s[start:end] 当中。可选参数 start 与 end 会被解读为切片表示法。如果未找到则返回 -1。类似于 rfind()，但在子字符串 sub 未找到时会引发 ValueError。</p>
<p>只给定 sub 一个参数的话，于是从第一个字符开始搜索到字符串结束；如果，随后给定了一个可选参数的话，那么它是 start，于是从 start 开始，搜索到字符串结束；如果 start 之后还有参数的话，那么它是 end；于是从 start 开始，搜索到 end - 1 结束（即不包含索引值为 end 的那个字符）。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;python python&#x27;</span>.rindex(<span class="string">&#x27;on&#x27;</span>)</span><br></pre></td></tr></table></figure>




<pre><code>11</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;python python&#x27;</span>.rindex(<span class="string">&#x27;on&#x27;</span>,<span class="number">1</span>,<span class="number">7</span>)</span><br></pre></td></tr></table></figure>




<pre><code>4</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;python python&#x27;</span>.rindex(<span class="string">&#x27;on&#x27;</span>,<span class="number">7</span>)</span><br></pre></td></tr></table></figure>




<pre><code>11</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;python python&#x27;</span>.rindex(<span class="string">&#x27;no&#x27;</span>)</span><br></pre></td></tr></table></figure>


<pre><code>---------------------------------------------------------------------------

ValueError                                Traceback (most recent call last)

&lt;ipython-input-5-92aeb174dba9&gt; in &lt;module&gt;
----&gt; 1 &#39;python python&#39;.rindex(&#39;no&#39;)


ValueError: substring not found</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/02_string/17_str.index-d9c44d34646f/</url>
    <content><![CDATA[<h2 id="str-index-查找最小索引"><a href="#str-index-查找最小索引" class="headerlink" title="str.index 查找最小索引"></a>str.index 查找最小索引</h2><p>字符串方法 str.index()，Python 官方文档描述如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">help</span>(<span class="built_in">str</span>.index)</span><br></pre></td></tr></table></figure>

<pre><code>Help on method_descriptor:

index(...)
    S.index(sub[, start[, end]]) -&gt; int

    Return the lowest index in S where substring sub is found,
    such that sub is contained within S[start:end].  Optional
    arguments start and end are interpreted as in slice notation.

    Raises ValueError when the substring is not found.</code></pre>
<p>返回子字符串 sub 在 s[start:end] 切片内被找到的最小索引。可选参数 start 与 end 会被解读为切片表示法。类似于 find()，但在找不到 sub 时会引发 ValueError。</p>
<p>只给定 sub 一个参数的话，于是从第一个字符开始搜索到字符串结束；如果，随后给定了一个可选参数的话，那么它是 start，于是从 start 开始，搜索到字符串结束；如果 start 之后还有参数的话，那么它是 end；于是从 start 开始，搜索到 end - 1 结束（即不包含索引值为 end 的那个字符）。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;pythonpython&#x27;</span>.index(<span class="string">&#x27;y&#x27;</span>)</span><br></pre></td></tr></table></figure>




<pre><code>1</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;pythonpython&#x27;</span>.index(<span class="string">&#x27;pt&#x27;</span>)</span><br></pre></td></tr></table></figure>


<pre><code>---------------------------------------------------------------------------

ValueError                                Traceback (most recent call last)

&lt;ipython-input-3-4252de1acf66&gt; in &lt;module&gt;
----&gt; 1 &#39;pythonpython&#39;.index(&#39;pt&#39;)


ValueError: substring not found</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;pythonpython&#x27;</span>.index(<span class="string">&#x27;y&#x27;</span>,<span class="number">5</span>)</span><br></pre></td></tr></table></figure>




<pre><code>7</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;pythonpython&#x27;</span>.index(<span class="string">&#x27;y&#x27;</span>,<span class="number">5</span>,<span class="number">7</span>)</span><br></pre></td></tr></table></figure>


<pre><code>---------------------------------------------------------------------------

ValueError                                Traceback (most recent call last)

&lt;ipython-input-5-35705122f03a&gt; in &lt;module&gt;
----&gt; 1 &#39;pythonpython&#39;.index(&#39;y&#39;,5,7)


ValueError: substring not found</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/02_string/16_str.rfind-40284be52098/</url>
    <content><![CDATA[<h2 id="str-rfind-查找最大索引"><a href="#str-rfind-查找最大索引" class="headerlink" title="str.rfind 查找最大索引"></a>str.rfind 查找最大索引</h2><p>字符串方法 str.rfind()，Python 官方文档描述如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">help</span>(<span class="built_in">str</span>.rfind)</span><br></pre></td></tr></table></figure>

<pre><code>Help on method_descriptor:

rfind(...)
    S.rfind(sub[, start[, end]]) -&gt; int

    Return the highest index in S where substring sub is found,
    such that sub is contained within S[start:end].  Optional
    arguments start and end are interpreted as in slice notation.

    Return -1 on failure.</code></pre>
<p>返回子字符串 sub 在字符串内被找到的最大（最右）索引，这样 sub 将包含在 s[start:end] 当中。可选参数 start 与 end 会被解读为切片表示法。如果未找到则返回 -1。</p>
<p>只给定 sub 一个参数的话，于是从第一个字符开始搜索到字符串结束；如果，随后给定了一个可选参数的话，那么它是 start，于是从 start 开始，搜索到字符串结束；如果 start 之后还有参数的话，那么它是 end；于是从 start 开始，搜索到 end - 1 结束（即不包含索引值为 end 的那个字符）。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;python python&#x27;</span>.rfind(<span class="string">&#x27;on&#x27;</span>)</span><br></pre></td></tr></table></figure>




<pre><code>11</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;python python&#x27;</span>.rfind(<span class="string">&#x27;on&#x27;</span>,<span class="number">1</span>,<span class="number">7</span>)</span><br></pre></td></tr></table></figure>




<pre><code>4</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;python python&#x27;</span>.rfind(<span class="string">&#x27;on&#x27;</span>,<span class="number">7</span>)</span><br></pre></td></tr></table></figure>




<pre><code>11</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;python python&#x27;</span>.rfind(<span class="string">&#x27;no&#x27;</span>)</span><br></pre></td></tr></table></figure>




<pre><code>-1</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/02_string/15_str.find-78b272ece8b9/</url>
    <content><![CDATA[<h2 id="str-find-查找最小索引"><a href="#str-find-查找最小索引" class="headerlink" title="str.find 查找最小索引"></a>str.find 查找最小索引</h2><p>字符串方法 str.find()，Python 官方文档描述如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">help</span>(<span class="built_in">str</span>.find)</span><br></pre></td></tr></table></figure>

<pre><code>Help on method_descriptor:

find(...)
    S.find(sub[, start[, end]]) -&gt; int

    Return the lowest index in S where substring sub is found,
    such that sub is contained within S[start:end].  Optional
    arguments start and end are interpreted as in slice notation.

    Return -1 on failure.</code></pre>
<p>返回子字符串 sub 在 s[start:end] 切片内被找到的最小索引。可选参数 start 与 end 会被解读为切片表示法。如果 sub 未被找到则返回 -1。</p>
<p>只给定 sub 一个参数的话，于是从第一个字符开始搜索到字符串结束；如果，随后给定了一个可选参数的话，那么它是 start，于是从 start 开始，搜索到字符串结束；如果 start 之后还有参数的话，那么它是 end；于是从 start 开始，搜索到 end - 1 结束（即不包含索引值为 end 的那个字符）。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;pythonpython&#x27;</span>.find(<span class="string">&#x27;y&#x27;</span>)</span><br></pre></td></tr></table></figure>




<pre><code>1</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;pythonpython&#x27;</span>.find(<span class="string">&#x27;pt&#x27;</span>)</span><br></pre></td></tr></table></figure>




<pre><code>-1</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;pythonpython&#x27;</span>.find(<span class="string">&#x27;y&#x27;</span>,<span class="number">5</span>)</span><br></pre></td></tr></table></figure>




<pre><code>7</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;pythonpython&#x27;</span>.find(<span class="string">&#x27;y&#x27;</span>,<span class="number">5</span>,<span class="number">7</span>)</span><br></pre></td></tr></table></figure>




<pre><code>-1</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/02_string/14_str.rstrip-fb79470f87f8/</url>
    <content><![CDATA[<h2 id="str-rstrip-移除右边字符"><a href="#str-rstrip-移除右边字符" class="headerlink" title="str.rstrip 移除右边字符"></a>str.rstrip 移除右边字符</h2><p>字符串方法 str.rstrip()，Python 官方文档描述如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">help</span>(<span class="built_in">str</span>.rstrip)</span><br></pre></td></tr></table></figure>

<pre><code>Help on method_descriptor:

rstrip(self, chars=None, /)
    Return a copy of the string with trailing whitespace removed.

    If chars is given and not None, remove characters in chars instead.</code></pre>
<p>返回原字符串的副本，移除其中的末尾字符。chars 参数为指定要移除字符的字符串。如果省略或为 None，则 chars 参数默认移除空格符。实际上 chars 参数并非指定单个后缀；而是会移除参数值中的所有字符串:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27; python &#x27;</span>.rstrip()</span><br></pre></td></tr></table></figure>




<pre><code>&#39; python&#39;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27; python &#x27;</span>.rstrip(<span class="string">&#x27;n o&#x27;</span>)</span><br></pre></td></tr></table></figure>




<pre><code>&#39; pyth&#39;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27; python &#x27;</span>.rstrip(<span class="string">&#x27;n&#x27;</span>)</span><br></pre></td></tr></table></figure>




<pre><code>&#39; python &#39;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27; pythonnnnn&#x27;</span>.rstrip(<span class="string">&#x27;no&#x27;</span>)</span><br></pre></td></tr></table></figure>




<pre><code>&#39; pyth&#39;</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/02_string/13_str.lstrip-1c6020f4987b/</url>
    <content><![CDATA[<h2 id="str-lstrip-移除左边字符"><a href="#str-lstrip-移除左边字符" class="headerlink" title="str.lstrip 移除左边字符"></a>str.lstrip 移除左边字符</h2><p>字符串方法 str.lstrip()，Python 官方文档描述如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">help</span>(<span class="built_in">str</span>.lstrip)</span><br></pre></td></tr></table></figure>

<pre><code>Help on method_descriptor:

lstrip(self, chars=None, /)
    Return a copy of the string with leading whitespace removed.

    If chars is given and not None, remove characters in chars instead.</code></pre>
<p>返回原字符串的副本，移除其中的前导字符。chars 参数为指定要移除字符的字符串。如果省略或为 None，则 chars 参数默认移除空格符。实际上 chars 参数并非指定单个前缀；而是会移除参数值中出现的所有字符:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;  python  &#x27;</span>.lstrip()</span><br></pre></td></tr></table></figure>




<pre><code>&#39;python  &#39;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;  python  &#x27;</span>.lstrip(<span class="string">&#x27;y p&#x27;</span>)</span><br></pre></td></tr></table></figure>




<pre><code>&#39;thon  &#39;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;  python  &#x27;</span>.lstrip(<span class="string">&#x27;py&#x27;</span>)</span><br></pre></td></tr></table></figure>




<pre><code>&#39;  python  &#39;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;ppppython  &#x27;</span>.lstrip(<span class="string">&#x27;y p&#x27;</span>)</span><br></pre></td></tr></table></figure>




<pre><code>&#39;thon  &#39;</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/02_string/12_str.strip-a738f1a76060/</url>
    <content><![CDATA[<h2 id="str-strip-移除两边字符"><a href="#str-strip-移除两边字符" class="headerlink" title="str.strip 移除两边字符"></a>str.strip 移除两边字符</h2><p>字符串方法 str.strip()，Python 官方文档描述如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">help</span>(<span class="built_in">str</span>.strip)</span><br></pre></td></tr></table></figure>

<pre><code>Help on method_descriptor:

strip(self, chars=None, /)
    Return a copy of the string with leading and trailing whitespace remove.

    If chars is given and not None, remove characters in chars instead.</code></pre>
<p>返回原字符串的副本，移除其中的前导和末尾字符。chars 参数为指定要移除字符的字符串。如果省略或为 None，则 chars 参数默认移除空格符。实际上 chars 参数并非指定单个前缀或后缀；而是会移除参数值中的所有字符:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27; python &#x27;</span>.strip()</span><br></pre></td></tr></table></figure>




<pre><code>&#39;python&#39;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27; python &#x27;</span>.strip(<span class="string">&#x27;p&#x27;</span>)</span><br></pre></td></tr></table></figure>




<pre><code>&#39; python &#39;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27; python &#x27;</span>.strip(<span class="string">&#x27;p n&#x27;</span>)</span><br></pre></td></tr></table></figure>




<pre><code>&#39;ytho&#39;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27; pythonnnn &#x27;</span>.strip(<span class="string">&#x27;p n&#x27;</span>)</span><br></pre></td></tr></table></figure>




<pre><code>&#39;ytho&#39;</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/02_string/11_str.splitlines-af5f925aff05/</url>
    <content><![CDATA[<h2 id="str-splitlines-按行拆分"><a href="#str-splitlines-按行拆分" class="headerlink" title="str.splitlines 按行拆分"></a>str.splitlines 按行拆分</h2><p>字符串方法 str.splitlines()，Python 官方文档描述如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">help</span>(<span class="built_in">str</span>.splitlines)</span><br></pre></td></tr></table></figure>

<pre><code>Help on method_descriptor:

splitlines(self, /, keepends=False)
    Return a list of the lines in the string, breaking at line boundaries.

    Line breaks are not included in the resulting list unless keepends is given and
    true.</code></pre>
<p>返回由原字符串中各行组成的列表，在行边界的位置拆分。结果列表中不包含行边界，除非给出了 keepends 且为真值。</p>
<p>此方法会以下列行边界进行拆分。特别地，行边界是 universal newlines 的一个超集。</p>
<ul>
<li><code>\n</code> 换行</li>
<li><code>\r</code> 回车</li>
<li><code>\r\n</code> 回车 + 换行</li>
<li><code>\v</code> 或 <code>\x0b</code> 行制表符</li>
<li><code>\f</code> 或 <code>\x0c</code> 换表单</li>
<li><code>\x1c</code> 文件分隔符</li>
<li><code>\x1d</code> 组分隔符</li>
<li><code>\x1e</code> 记录分隔符</li>
<li><code>\x85</code> 下一行</li>
<li><code>\u2028</code> 行分隔符</li>
<li><code>\u2029</code> 段分隔符</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;ab c\n\nde fg\rkl\r\n&#x27;</span>.splitlines()</span><br></pre></td></tr></table></figure>




<pre><code>[&#39;ab c&#39;, &#39;&#39;, &#39;de fg&#39;, &#39;kl&#39;]</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;ab c\n\nde fg\rkl\r\n&#x27;</span>.splitlines(keepends=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>




<pre><code>[&#39;ab c\n&#39;, &#39;\n&#39;, &#39;de fg\r&#39;, &#39;kl\r\n&#39;]</code></pre>
<p>分隔空字符串此方法将返回一个空列表；末尾的换行不会令结果中增加额外的空字符串:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;</span>.splitlines()</span><br></pre></td></tr></table></figure>




<pre><code>[]</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;One line\nTwo lines\n&quot;</span>.splitlines()</span><br></pre></td></tr></table></figure>




<pre><code>[&#39;One line&#39;, &#39;Two lines&#39;]</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;One line\nTwo lines\n&#x27;</span>.split(<span class="string">&#x27;\n&#x27;</span>)</span><br></pre></td></tr></table></figure>




<pre><code>[&#39;One line&#39;, &#39;Two lines&#39;, &#39;&#39;]</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/02_string/10_str.rpartition-3588b7d23ed5/</url>
    <content><![CDATA[<h2 id="str-rpartition-拆分"><a href="#str-rpartition-拆分" class="headerlink" title="str.rpartition 拆分"></a>str.rpartition 拆分</h2><p>字符串方法 str.rpartition()，Python 官方文档描述如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">help</span>(<span class="built_in">str</span>.rpartition)</span><br></pre></td></tr></table></figure>

<pre><code>Help on method_descriptor:

rpartition(self, sep, /)
    Partition the string into three parts using the given separator.

    This will search for the separator in the string, starting at the end. If
    the separator is found, returns a 3-tuple containing the part before the
    separator, the separator itself, and the part after it.

    If the separator is not found, returns a 3-tuple containing two empty strings
    and the original string.</code></pre>
<p>在 sep 最后一次出现的位置拆分字符串，返回一个 3 元组，其中包含分隔符之前的部分、分隔符本身，以及分隔符之后的部分。如果分隔符未找到，则返回的 3 元组中包含两个空字符串以及字符串本身。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;python&#x27;</span>.rpartition(<span class="string">&#x27;n&#x27;</span>)</span><br></pre></td></tr></table></figure>




<pre><code>(&#39;pytho&#39;, &#39;n&#39;, &#39;&#39;)</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;pythhhon&#x27;</span>.rpartition(<span class="string">&#x27;hh&#x27;</span>)</span><br></pre></td></tr></table></figure>




<pre><code>(&#39;pyth&#39;, &#39;hh&#39;, &#39;on&#39;)</code></pre>
<p>分隔符未找到，则返回的 3 元组中 字符串本身 排在最后：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;python&#x27;</span>.rpartition(<span class="string">&#x27;ht&#x27;</span>) </span><br></pre></td></tr></table></figure>




<pre><code>(&#39;&#39;, &#39;&#39;, &#39;python&#39;)</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/02_string/09_str.partition-f1b040e322a2/</url>
    <content><![CDATA[<h2 id="str-partition-拆分"><a href="#str-partition-拆分" class="headerlink" title="str.partition 拆分"></a>str.partition 拆分</h2><p>字符串方法 str.partition()，Python 官方文档描述如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">help</span>(<span class="built_in">str</span>.partition)</span><br></pre></td></tr></table></figure>

<pre><code>Help on method_descriptor:

partition(self, sep, /)
    Partition the string into three parts using the given separator.

    This will search for the separator in the string.  If the separator is found,
    returns a 3-tuple containing the part before the separator, the separator
    itself, and the part after it.

    If the separator is not found, returns a 3-tuple containing the original string
    and two empty strings.</code></pre>
<p>在 sep 首次出现的位置拆分字符串，返回一个 3 元组，其中包含分隔符之前的部分、分隔符本身，以及分隔符之后的部分。如果分隔符未找到，则返回的 3 元组中包含字符本身以及两个空字符串。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;python&#x27;</span>.partition(<span class="string">&#x27;m&#x27;</span>)</span><br></pre></td></tr></table></figure>




<pre><code>(&#39;python&#39;, &#39;&#39;, &#39;&#39;)</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;python&#x27;</span>.partition(<span class="string">&#x27;th&#x27;</span>)</span><br></pre></td></tr></table></figure>




<pre><code>(&#39;py&#39;, &#39;th&#39;, &#39;on&#39;)</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;python&#x27;</span>.partition(<span class="string">&#x27;ht&#x27;</span>)</span><br></pre></td></tr></table></figure>




<pre><code>(&#39;python&#39;, &#39;&#39;, &#39;&#39;)</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/02_string/08_str.rsplit-22e86ff35cb3/</url>
    <content><![CDATA[<h2 id="str-rsplit-拆分"><a href="#str-rsplit-拆分" class="headerlink" title="str.rsplit 拆分"></a>str.rsplit 拆分</h2><p>字符串方法 str.rsplit()，Python 官方文档描述如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">help</span>(<span class="built_in">str</span>.rsplit)</span><br></pre></td></tr></table></figure>

<pre><code>Help on method_descriptor:

rsplit(self, /, sep=None, maxsplit=-1)
    Return a list of the words in the string, using sep as the delimiter string.

      sep
        The delimiter according which to split the string.
        None (the default value) means split according to any whitespace,
        and discard empty strings from the result.
      maxsplit
        Maximum number of splits to do.
        -1 (the default value) means no limit.

    Splits are done starting at the end of the string and working to the front.</code></pre>
<p>返回一个由字符串内单词组成的列表，使用 sep 作为分隔字符串。如果给出了 maxsplit，则最多进行 maxsplit 次拆分，从 最右边开始。如果 sep 未指定或为 None，任何空白字符串都会被作为分隔符。除了从右边开始拆分，rsplit() 的其他行为都类似于 split()。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;p\nyth   on &#x27;</span>.rsplit()</span><br></pre></td></tr></table></figure>




<pre><code>[&#39;p&#39;, &#39;yth&#39;, &#39;on&#39;]</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;p\nyth on&#x27;</span>.rsplit(<span class="string">&#x27;y&#x27;</span>)</span><br></pre></td></tr></table></figure>




<pre><code>[&#39;p\n&#39;, &#39;th on&#39;]</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;p\nyth on&#x27;</span>.rsplit(maxsplit=<span class="number">1</span>)</span><br></pre></td></tr></table></figure>




<pre><code>[&#39;p\nyth&#39;, &#39;on&#39;]</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;p\nyth   on &#x27;</span>.rsplit(maxsplit=<span class="number">2</span>)</span><br></pre></td></tr></table></figure>




<pre><code>[&#39;p&#39;, &#39;yth&#39;, &#39;on&#39;]</code></pre>
<p>多个分隔符在一起，则会解读为拆分空字符串：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;\n\np\nyth on&#x27;</span>.rsplit(<span class="string">&#x27;\n&#x27;</span>)</span><br></pre></td></tr></table></figure>




<pre><code>[&#39;&#39;, &#39;&#39;, &#39;p&#39;, &#39;yth on&#39;]</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/02_string/07_str.split-9e05ceb21a8d/</url>
    <content><![CDATA[<h2 id="str-split-拆分"><a href="#str-split-拆分" class="headerlink" title="str.split 拆分"></a>str.split 拆分</h2><p>字符串方法 str.split()，Python 官方文档描述如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">help</span>(<span class="built_in">str</span>.split)</span><br></pre></td></tr></table></figure>

<pre><code>Help on method_descriptor:

split(self, /, sep=None, maxsplit=-1)
    Return a list of the words in the string, using sep as the delimiter string.

    sep
      The delimiter according which to split the string.
      None (the default value) means split according to any whitespace,
      and discard empty strings from the result.
    maxsplit
      Maximum number of splits to do.
      -1 (the default value) means no limit.</code></pre>
<p>返回一个由字符串内单词组成的列表，使用 sep 作为分隔字符串。如果给出了 sep，则连续的分隔符不会被组合在一起而是被视为分隔空字符串；如果给出了 maxsplit，则最多进行 maxsplit 次拆分（因此，列表最多会有 maxsplit+1 个元素）。如果 maxsplit 未指定或为 -1，则不限制拆分次数（进行所有可能的拆分）。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;a.bc&#x27;</span>.split(<span class="string">&#x27;.&#x27;</span>)</span><br></pre></td></tr></table></figure>




<pre><code>[&#39;a&#39;, &#39;bc&#39;]</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;a.b.c&#x27;</span>.split(<span class="string">&#x27;.&#x27;</span>,maxsplit=<span class="number">1</span>)</span><br></pre></td></tr></table></figure>




<pre><code>[&#39;a&#39;, &#39;b.c&#39;]</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;a.b..c&#x27;</span>.split(<span class="string">&#x27;.&#x27;</span>)</span><br></pre></td></tr></table></figure>




<pre><code>[&#39;a&#39;, &#39;b&#39;, &#39;&#39;, &#39;c&#39;]</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;a.b..c&#x27;</span>.split(<span class="string">&#x27;..&#x27;</span>)</span><br></pre></td></tr></table></figure>




<pre><code>[&#39;a.b&#39;, &#39;c&#39;]</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;</span>.split(<span class="string">&#x27;.&#x27;</span>)</span><br></pre></td></tr></table></figure>




<pre><code>[&#39;&#39;]</code></pre>
<p>如果 sep 未指定或为 None，则会应用另一种拆分算法：连续的空格会被视为单个分隔符，如果字符串包含前缀或后缀空格，其结果将不包含开头或末尾的空字符串。因此，使用 None 拆分空字符串或仅包含空格的字符串将返回 []。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;a b  c &#x27;</span>.split()</span><br></pre></td></tr></table></figure>




<pre><code>[&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;  \n &#x27;</span>.split()</span><br></pre></td></tr></table></figure>




<pre><code>[]</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;</span>.split()</span><br></pre></td></tr></table></figure>




<pre><code>[]</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/02_string/06_str.expandtabs-5cdc786b17b5/</url>
    <content><![CDATA[<h2 id="str-expandtabs-替换制表符"><a href="#str-expandtabs-替换制表符" class="headerlink" title="str.expandtabs 替换制表符"></a>str.expandtabs 替换制表符</h2><p>字符串方法 str.expandtabs()，Python 官方文档描述如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">help</span>(<span class="built_in">str</span>.expandtabs)</span><br></pre></td></tr></table></figure>

<pre><code>Help on method_descriptor:

expandtabs(self, /, tabsize=8)
    Return a copy where all tab characters are expanded using spaces.

    If tabsize is not given, a tab size of 8 characters is assumed.</code></pre>
<p>返回字符串的副本，其中所有的制表符会由一个或多个空格替换，具体取决于当前列位置和给定的制表符宽度。每 tabsize 个字符设为一个制表位（默认值 8 时设定的制表位在列 0, 8, 16 依次类推）。</p>
<p>要展开字符串，当前列将被设为零并逐一检查字符串中的每个字符。如果字符为制表符 (\t)，则会在结果中插入一个或多个空格符，直到当前列等于下一个制表位。（制表符本身不会被复制。）</p>
<p>如果字符为换行符 (\n) 或回车符 (\r)，它会被复制并将当前列重设为零。任何其他字符会被不加修改地复制并将当前列加一，不论该字符在被打印时会如何显示。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;01\t012\t0123\t01234&#x27;</span>.expandtabs()</span><br></pre></td></tr></table></figure>




<pre><code>&#39;01      012     0123    01234&#39;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;01\t012\t0123\t01234&#x27;</span>.expandtabs(<span class="number">4</span>)</span><br></pre></td></tr></table></figure>




<pre><code>&#39;01  012 0123    01234&#39;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;\n\t01\r2\t0123\t01234&#x27;</span>.expandtabs(<span class="number">4</span>)</span><br></pre></td></tr></table></figure>




<pre><code>&#39;\n    01\r2   0123    01234&#39;</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/02_string/05_str.replace-4e8bbf22ea43/</url>
    <content><![CDATA[<h2 id="str-replace-替换"><a href="#str-replace-替换" class="headerlink" title="str.replace 替换"></a>str.replace 替换</h2><p>字符串方法 str.replace()，Python 官方文档描述如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">help</span>(<span class="built_in">str</span>.replace)</span><br></pre></td></tr></table></figure>

<pre><code>Help on method_descriptor:

replace(self, old, new, count=-1, /)
    Return a copy with all occurrences of substring old replaced by new.

      count
        Maximum number of occurrences to replace.
        -1 (the default value) means replace all occurrences.

    If the optional argument count is given, only the first count occurrences are
    replaced.</code></pre>
<p>返回字符串的副本，其中出现的所有子字符串 old 都将被替换为 new。如果给出了可选参数 count，则只替换前 count 次出现。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;python python&#x27;</span>.replace(<span class="string">&#x27;p&#x27;</span>,<span class="string">&#x27;C&#x27;</span>)</span><br></pre></td></tr></table></figure>




<pre><code>&#39;Cython Cython&#39;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;python python&#x27;</span>.replace(<span class="string">&#x27;py&#x27;</span>,<span class="string">&#x27;Cpy&#x27;</span>,<span class="number">1</span>)</span><br></pre></td></tr></table></figure>




<pre><code>&#39;Cpython python&#39;</code></pre>
<p>如果 old 为空字符串，则在每个字符之间（包括前后）插入 new：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;python python&#x27;</span>.replace(<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;C&#x27;</span>)</span><br></pre></td></tr></table></figure>




<pre><code>&#39;CpCyCtChCoCnC CpCyCtChCoCnC&#39;</code></pre>
<p>如果 new 为空字符串，则相当于去除了 old：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;python python&#x27;</span>.replace(<span class="string">&#x27;p&#x27;</span>,<span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure>




<pre><code>&#39;ython ython&#39;</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/02_string/04_str.count-02f328c3609e/</url>
    <content><![CDATA[<h2 id="str-count-统计"><a href="#str-count-统计" class="headerlink" title="str.count 统计"></a>str.count 统计</h2><p>字符串方法 str.count()，Python 官方文档描述如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">help</span>(<span class="built_in">str</span>.count)</span><br></pre></td></tr></table></figure>

<pre><code>Help on method_descriptor:

count(...)
    S.count(sub[, start[, end]]) -&gt; int

    Return the number of non-overlapping occurrences of substring sub in
    string S[start:end].  Optional arguments start and end are
    interpreted as in slice notation.</code></pre>
<p>返回回子字符串 sub 在 [start, end] 范围内非重叠出现的次数。可选参数 start 与 end 会被解读为切片表示法。</p>
<p>只给定 sub 一个参数的话，于是从第一个字符开始搜索到字符串结束；如果，随后给定了一个可选参数的话，那么它是 start，于是从 start 开始，搜索到字符串结束；如果 start 之后还有参数的话，那么它是 end；于是从 start 开始，搜索到 end - 1 结束（即不包含索引值为 end 的那个字符）。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;python&#x27;</span>.count(<span class="string">&#x27;0&#x27;</span>)</span><br></pre></td></tr></table></figure>




<pre><code>0</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;pyyython&#x27;</span>.count(<span class="string">&#x27;yy&#x27;</span>)</span><br></pre></td></tr></table></figure>




<pre><code>1</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;pythonpythonn&#x27;</span>.count(<span class="string">&#x27;n&#x27;</span>,<span class="number">5</span>)</span><br></pre></td></tr></table></figure>




<pre><code>3</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;pythonpythonn&#x27;</span>.count(<span class="string">&#x27;n&#x27;</span>,<span class="number">5</span>,<span class="number">7</span>)</span><br></pre></td></tr></table></figure>




<pre><code>1</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/02_string/03_escape_character-4793a5d487a5/</url>
    <content><![CDATA[<h2 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h2><p>转义字符 <code>\</code> 本身不被当作字符，如果要表示一个字符 <code>\</code>，需要自己将自己转义：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;\\&#x27;</span></span><br></pre></td></tr></table></figure>




<pre><code>&#39;\\&#39;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;\&#x27;</span></span><br></pre></td></tr></table></figure>


<pre><code>  File &quot;&lt;ipython-input-2-d44a383620ab&gt;&quot;, line 1
    &#39;\&#39;
       ^
SyntaxError: EOL while scanning string literal</code></pre>
<p>上面这一行报错信息是 SyntaxError: EOL while scanning string literal。这是因为 <code>\&#39;</code> 表示的是单引号字符 <code>&#39;</code>（Literal）—— 是可被输出到屏幕的 <code>&#39;</code>，而不是用来标示字符串的那个 <code>&#39;</code>—— 别急，无论哪个初学者第一次读到前面的句子都觉得有点莫名其妙…… —— 于是，Python 编译器扫描这个 “字符串” 的时候，还没找到标示字符串末尾的另外一个 <code>&#39;</code> 的时候就读到了 EOL（End Of Line）。</p>
<p>如果你想输出这么个字符串，He said, it’s fine.，如果用双引号扩起来 <code>&quot;</code> 倒没啥问题，但是如果用单引号扩起来就麻烦了，因为编译器会把 it 后面的那个单引号 <code>&#39;</code> 当作字符串结尾。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;He said, it&#x27;</span>s fine.<span class="string">&#x27;</span></span><br></pre></td></tr></table></figure>


<pre><code>  File &quot;&lt;ipython-input-3-2bcf2ca6dd95&gt;&quot;, line 1
    &#39;He said, it&#39;s fine.&#39;
                 ^
SyntaxError: invalid syntax</code></pre>
<p>于是你就得用转义符 <code>\</code>：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 要么你这么写：</span></span><br><span class="line">print(<span class="string">&#x27;He said, it\&#x27;s fine.&#x27;</span>)</span><br><span class="line"><span class="comment"># 要么你这么写：</span></span><br><span class="line">print(<span class="string">&quot;He said, it&#x27;s fine.&quot;</span>)</span><br><span class="line"><span class="comment"># 要么，不管用单引号还是双引号标示字符串，</span></span><br><span class="line"><span class="comment"># 都习惯于用 \&#x27; 和 \&quot; 书写属于字符串内部的引号……</span></span><br><span class="line"><span class="string">&quot;He said, it\&#x27;s fine.&quot;</span></span><br></pre></td></tr></table></figure>

<pre><code>He said, it&#39;s fine.
He said, it&#39;s fine.





&quot;He said, it&#39;s fine.&quot;</code></pre>
<p>转义字符 <code>\</code> 可与其他字符组合成有特殊含义的字符：</p>
<table>
<thead>
<tr>
<th>转义字符</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>\(在行尾时)</code></td>
<td>续行符</td>
</tr>
<tr>
<td><code>\\</code></td>
<td>反斜杠符号</td>
</tr>
<tr>
<td><code>\&#39;</code></td>
<td>单引号</td>
</tr>
<tr>
<td><code>\&quot;</code></td>
<td>双引号</td>
</tr>
<tr>
<td><code>\a</code></td>
<td>响铃</td>
</tr>
<tr>
<td><code>\b</code></td>
<td>退格</td>
</tr>
<tr>
<td><code>\n</code></td>
<td>换行</td>
</tr>
<tr>
<td><code>\v</code></td>
<td>纵向制表符</td>
</tr>
<tr>
<td><code>\t</code></td>
<td>横向制表符</td>
</tr>
<tr>
<td><code>\r</code></td>
<td>回车</td>
</tr>
<tr>
<td><code>\f</code></td>
<td>换页</td>
</tr>
<tr>
<td><code>\yy</code></td>
<td>八进制数 yy 码位的字符</td>
</tr>
<tr>
<td><code>\xyy</code></td>
<td>十六进制数 yy 码位的字符</td>
</tr>
</tbody></table>
<p>续航符，可以将两行代码（或字符串）连接起来，表示一行：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> \</span><br><span class="line"><span class="built_in">range</span>(<span class="number">3</span>): <span class="comment"># 两行相当于 for i in range(10):</span></span><br><span class="line">    print(i)</span><br></pre></td></tr></table></figure>

<pre><code>0
1
2</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;hello \</span></span><br><span class="line"><span class="string">world&#x27;</span></span><br></pre></td></tr></table></figure>




<pre><code>&#39;hello world&#39;</code></pre>
<p>八进制和十六进制字符举例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 八进制字符</span></span><br><span class="line"><span class="string">&#x27;\101&#x27;</span>, <span class="string">&#x27;\102&#x27;</span></span><br></pre></td></tr></table></figure>




<pre><code>(&#39;A&#39;, &#39;B&#39;)</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 十六进制字符</span></span><br><span class="line"><span class="string">&#x27;\x41&#x27;</span>, <span class="string">&#x27;\x42&#x27;</span></span><br></pre></td></tr></table></figure>




<pre><code>(&#39;A&#39;, &#39;B&#39;)</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 十进制</span></span><br><span class="line"><span class="built_in">chr</span>(<span class="number">65</span>),<span class="built_in">chr</span>(<span class="number">66</span>)</span><br></pre></td></tr></table></figure>




<pre><code>(&#39;A&#39;, &#39;B&#39;)</code></pre>
<p>在正则表达式中，转义字符 <code>\</code> 的应用更加普遍。详情请看<a href="https://xue.cn/hub/app/books/21">《正则指引》</a>。</p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/02_string/02_concatenated_string-00bdb592a89f/</url>
    <content><![CDATA[<h2 id="字符串拼接"><a href="#字符串拼接" class="headerlink" title="字符串拼接"></a>字符串拼接</h2><h3 id="空格拼接"><a href="#空格拼接" class="headerlink" title="空格拼接"></a>空格拼接</h3><p>相邻的两个字符串，无论中间隔了多少个空格（包括 0 个），都会自动连接到一起：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;Py&#x27;</span><span class="string">&#x27;thon&#x27;</span>, <span class="string">&#x27;Py&#x27;</span>    <span class="string">&#x27;thon&#x27;</span></span><br></pre></td></tr></table></figure>




<pre><code>(&#39;Python&#39;, &#39;Python&#39;)</code></pre>
<p>甚至可以用 () 包围实现换行拼接，这在字符串（或正则表达式）很长时非常有用：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">(<span class="string">&#x27;Py&#x27;</span></span><br><span class="line"><span class="string">f&#x27;thon<span class="subst">&#123;<span class="number">3</span>&#125;</span>&#x27;</span></span><br><span class="line"><span class="string">r&#x27;\Go&#x27;</span>)</span><br></pre></td></tr></table></figure>




<pre><code>&#39;Python3\\Go&#39;</code></pre>
<h3 id="运算符-拼接"><a href="#运算符-拼接" class="headerlink" title="运算符 + 拼接"></a>运算符 <code>+</code> 拼接</h3><p>运算符 <code>+</code> 拼接字符串，和空格类似，但 <code>+</code> 拼接字符串可以是变量的形式：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="string">&#x27;Py&#x27;</span></span><br><span class="line">b = <span class="string">&#x27;thon&#x27;</span></span><br><span class="line"><span class="string">&#x27;Py&#x27;</span> + b, a + b</span><br></pre></td></tr></table></figure>




<pre><code>(&#39;Python&#39;, &#39;Python&#39;)</code></pre>
<p>运算符 <code>+</code> 还可以和赋值运算符 <code>=</code> 连用，拼接字符串的同时进行赋值：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将 a 和 b 拼接，赋值给 a</span></span><br><span class="line">a += b</span><br><span class="line">print(a)</span><br><span class="line"><span class="comment"># 将 b 和 a 拼接，赋值给 b</span></span><br><span class="line">b += a</span><br><span class="line">b</span><br></pre></td></tr></table></figure>

<pre><code>Python





&#39;thonPython&#39;</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/02_string/01_string-2b7aee12301e/</url>
    <content><![CDATA[<h2 id="字符串概述"><a href="#字符串概述" class="headerlink" title="字符串概述"></a>字符串概述</h2><p>Python 中处理文本数据使用 str 类型对象，也称为字符串。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">type</span>(<span class="string">&#x27;abc&#x27;</span>)</span><br></pre></td></tr></table></figure>




<pre><code>str</code></pre>
<p>字符串是由 Unicode 码位构成的不可变序列。每个字符的 Unicode 码位可由内建函数 ord() 查看：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ord</span>(<span class="string">&#x27;a&#x27;</span>), <span class="built_in">ord</span>(<span class="string">&#x27;b&#x27;</span>), <span class="built_in">ord</span>(<span class="string">&#x27;c&#x27;</span>)</span><br></pre></td></tr></table></figure>




<pre><code>(97, 98, 99)</code></pre>
<p>内建函数 <a href="https://xue.cn/hub/reader?bookId=64&path=xue_python_kp/11_built-in_function/59_str.ipynb">str()</a> 可将其他类型对象转换为字符串：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">str</span>(<span class="number">3.14</span>)</span><br></pre></td></tr></table></figure>




<pre><code>&#39;3.14&#39;</code></pre>
<p>字符串有多种不同写法：</p>
<ul>
<li>单引号标示</li>
</ul>
<p>单引号标示法，如果字符串中有单引号，需要用 <code>\&#39;</code> 表示：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;it\&#x27;s a book&#x27;</span></span><br></pre></td></tr></table></figure>




<pre><code>&quot;it&#39;s a book&quot;</code></pre>
<ul>
<li>双引号标示</li>
</ul>
<p>双引号标示法，如果字符串中有双引号，需要用 <code>\&quot;</code> 表示：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;it&#x27;s a \&quot;book\&quot;&quot;</span></span><br></pre></td></tr></table></figure>




<pre><code>&#39;it\&#39;s a &quot;book&quot;&#39;</code></pre>
<ul>
<li>三重引号标示</li>
</ul>
<p>三重引号标示法，可以是三重单引号 <code>&#39;&#39;&#39;</code>，也可以是三重双引号 <code>&quot;&quot;&quot;</code>，字符串中的单引号或双引号不受影响，但不能紧挨着：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 注意最后四个双引号中有一个空格</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;it&#x27;s a book&#x27;&#x27;&#x27;</span>, \</span><br><span class="line"><span class="string">&quot;&quot;&quot;it&#x27;s a &quot;book&quot; &quot;&quot;&quot;</span> </span><br></pre></td></tr></table></figure>




<pre><code>(&quot;it&#39;s a book&quot;, &#39;it\&#39;s a &quot;book&quot; &#39;)</code></pre>
<p>三重引号标示的字符串可以换行，自动以 <code>\n</code> 表示：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">it&#x27;s a </span></span><br><span class="line"><span class="string">book</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>




<pre><code>&quot;\nit&#39;s a \nbook\n&quot;</code></pre>
<p>若不想引入 <code>\n</code>，可以使用续航符 <code>\</code>：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;\</span></span><br><span class="line"><span class="string">it&#x27;s a \</span></span><br><span class="line"><span class="string">book\</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>




<pre><code>&quot;it&#39;s a book&quot;</code></pre>
<p>字符串可带前缀 u（或 U），r（或 R），f（或 F）。</p>
<p>u 表示 Unicode 编码字符串（默认，可省略）；r 表示原始字符串，其中的反斜杠会被当作其本身来处理；f 表示<a href="https://xue.cn/hub/reader?bookId=64&path=xue_python_kp/02_string/27_f-string.ipynb">格式化字符串字面值</a>。r 和 f 可连用。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;a\nb&#123;1+1&#125;&#x27;</span></span><br></pre></td></tr></table></figure>




<pre><code>&#39;a\nb&#123;1+1&#125;&#39;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">r&#x27;a\nb&#123;1+1&#125;&#x27;</span></span><br></pre></td></tr></table></figure>




<pre><code>&#39;a\\nb&#123;1+1&#125;&#39;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">f&#x27;a\nb<span class="subst">&#123;<span class="number">1</span>+<span class="number">1</span>&#125;</span>&#x27;</span></span><br></pre></td></tr></table></figure>




<pre><code>&#39;a\nb2&#39;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">rf&#x27;a\nb<span class="subst">&#123;<span class="number">1</span>+<span class="number">1</span>&#125;</span>&#x27;</span></span><br></pre></td></tr></table></figure>




<pre><code>&#39;a\\nb2&#39;</code></pre>
<p>注意带前缀 b（或 B），表示字节串对象：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">type</span>(<span class="string">b&#x27;abc&#x27;</span>)</span><br></pre></td></tr></table></figure>




<pre><code>bytes</code></pre>
<p>字符串是不可变序列，下列切片操作得到的是原来的字符串：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="string">&#x27;abc&#x27;</span></span><br><span class="line">b = a[:]</span><br><span class="line">a <span class="keyword">is</span> b</span><br></pre></td></tr></table></figure>




<pre><code>True</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/01_numeric/06_number_operations-001dadf25bd4/</url>
    <content><![CDATA[<h2 id="数字运算"><a href="#数字运算" class="headerlink" title="数字运算"></a>数字运算</h2><p>所有数字类型都支持下列运算（复数不支持 // 和 %）：</p>
<ul>
<li><code>x + y</code>, x 和 y 的和</li>
<li><code>x - y</code>, x 和 y 的差</li>
<li><code>x * y</code>, x 和 y 的乘积</li>
<li><code>x / y</code>, x 和 y 的商</li>
<li><code>x // y</code>, x 和 y 的商数 </li>
<li><code>x % y</code>, x / y 的余数 </li>
<li><code>-x</code>, x 取反</li>
<li><code>+x</code>, x 不变</li>
<li><code>x ** y</code>, x 的 y 次幂 </li>
</ul>
<p>Python 完全支持数字的混合运算：当一个二元算术运算符的操作数有不同数值类型时，“较窄” 类型的操作数会拓宽到另一个操作数的类型。其中整数比浮点数窄，浮点数比复数窄。但整数除以整数得到浮点数。</p>
<p>运算示例如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="literal">True</span> + <span class="number">1</span> + <span class="number">3.14</span></span><br></pre></td></tr></table></figure>




<pre><code>5.140000000000001</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="literal">True</span> + <span class="number">1</span> + <span class="number">3.14</span> + <span class="number">0j</span></span><br></pre></td></tr></table></figure>




<pre><code>(5.140000000000001+0j)</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">3</span>/<span class="number">3</span>, <span class="number">3</span>/<span class="number">1j</span></span><br></pre></td></tr></table></figure>




<pre><code>(1.0, -3j)</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">6</span>//<span class="number">2</span>, <span class="number">6</span>//<span class="number">2.0</span></span><br></pre></td></tr></table></figure>




<pre><code>(3, 3.0)</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">6</span>%<span class="number">4</span>, <span class="number">6</span>%<span class="number">3.0</span></span><br></pre></td></tr></table></figure>




<pre><code>(2, 0.0)</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">3</span>**<span class="number">2</span>, <span class="number">3</span>**<span class="number">2.0</span>, <span class="number">3</span>**<span class="number">0j</span></span><br></pre></td></tr></table></figure>




<pre><code>(9, 9.0, (1+0j))</code></pre>
<p>优先级升序排列如下：</p>
<ul>
<li><code>+, -</code> 加和减</li>
<li><code>*, /, //, %</code> 乘，除，整除，取余 </li>
<li><code>+x, -x</code> 正，负</li>
<li><code>**</code> 乘方 </li>
</ul>
<p>幂运算符 ** 绑定的紧密程度低于在其右侧的算术:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> + <span class="number">-20</span> * <span class="number">4</span>**<span class="number">-1</span></span><br></pre></td></tr></table></figure>




<pre><code>-4.0</code></pre>
<p>为了易读，应该多使用小括号：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> + (<span class="number">-20</span>) * <span class="number">4</span>**(<span class="number">-1</span>)</span><br></pre></td></tr></table></figure>




<pre><code>-4.0</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/01_numeric/05_complex-3c51984cc81b/</url>
    <content><![CDATA[<h2 id="复数"><a href="#复数" class="headerlink" title="复数"></a>复数</h2><p>复数包含实部和虚部（带 j 或 J 的部分），分别以一个浮点数表示。在一个数字后面加上 j 或 J，则得到一个实部为零的复数。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">-1j</span></span><br></pre></td></tr></table></figure>




<pre><code>(-0-1j)</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> + <span class="number">0j</span></span><br></pre></td></tr></table></figure>




<pre><code>(1+0j)</code></pre>
<p>看起来实部和虚部并不是以浮点数表示，可以使用 .real 和 .imag，从一个复数中提取这两个部分查看。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">(<span class="number">1</span> + <span class="number">0j</span>).real, (<span class="number">1</span> + <span class="number">0j</span>).imag</span><br></pre></td></tr></table></figure>




<pre><code>(1.0, 0.0)</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">-1j</span>.real, <span class="number">-1j</span>.imag</span><br></pre></td></tr></table></figure>




<pre><code>(-0.0, -1.0)</code></pre>
<p>实部和虚部都是以浮点数表示，所以复数可以使用浮点数的所有表示法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">0.J</span>, <span class="number">.5J</span>, <span class="number">0.1e-2J</span>, <span class="number">3</span>_1<span class="number">.1</span>_4J, <span class="number">01.2e02J</span></span><br></pre></td></tr></table></figure>




<pre><code>(0j, 0.5j, 0.001j, 31.14j, 120j)</code></pre>
<p>对复数取绝对值，就是计算它的模——实部和虚部平方的和开根号：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">abs</span>(<span class="number">3</span>+<span class="number">4j</span>), (<span class="number">3</span>**<span class="number">2</span> + <span class="number">4</span>**<span class="number">2</span>)**<span class="number">0.5</span></span><br></pre></td></tr></table></figure>




<pre><code>(5.0, 5.0)</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/01_numeric/04_float-0a6726afe85e/</url>
    <content><![CDATA[<h2 id="浮点数"><a href="#浮点数" class="headerlink" title="浮点数"></a>浮点数</h2><p>浮点数简单理解就是带小数点的数，通常使用 C 语音中的 double 来实现。有关你的程序运行所在计算机上浮点数的精度和内部表示法可在 sys.float_info 中查看。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">sys.float_info</span><br></pre></td></tr></table></figure>




<pre><code>sys.float_info(max=1.7976931348623157e+308, max_exp=1024, max_10_exp=308, min=2.2250738585072014e-308, min_exp=-1021, min_10_exp=-307, dig=15, mant_dig=53, epsilon=2.220446049250313e-16, radix=2, rounds=1)</code></pre>
<p>浮点数可以省略 <code>.</code> 前后的数；可以使用科学计数法；可以在数字之间插入下划线；可以以 0 开头。</p>
<p>举例如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># e 大小写均可 e-2 表示 10 的 -2 次方</span></span><br><span class="line"><span class="number">0.</span>, <span class="number">.5</span>, <span class="number">0.1e-2</span>, <span class="number">3</span>_1<span class="number">.1</span>_4, <span class="number">01.2e02</span></span><br></pre></td></tr></table></figure>




<pre><code>(0.0, 0.5, 0.001, 31.14, 120.0)</code></pre>
<p>整数除法除一定得到浮点数：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="literal">True</span>/<span class="number">3</span>, <span class="number">3</span>/<span class="number">3</span></span><br></pre></td></tr></table></figure>




<pre><code>(0.3333333333333333, 1.0)</code></pre>
<p>整数和浮点数可以相互转换，浮点数转为整数，直接去掉小数部分：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">int</span>(<span class="number">3.56</span>), <span class="built_in">float</span>(<span class="number">0</span>)</span><br></pre></td></tr></table></figure>




<pre><code>(3, 0.0)</code></pre>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/01_numeric/03_bool-af0e51c1aa10/</url>
    <content><![CDATA[<h2 id="布尔值及布尔运算"><a href="#布尔值及布尔运算" class="headerlink" title="布尔值及布尔运算"></a>布尔值及布尔运算</h2><p>布尔值有 True 和 False，布尔类型是整数类型的子类型，所以整数的运算都适用布尔值运算。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">issubclass</span>(<span class="built_in">bool</span>,<span class="built_in">int</span>)</span><br></pre></td></tr></table></figure>




<pre><code>True</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="literal">True</span> + <span class="number">1</span></span><br></pre></td></tr></table></figure>




<pre><code>2</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">~<span class="literal">True</span></span><br></pre></td></tr></table></figure>




<pre><code>-2</code></pre>
<p>任何对象都可以进行布尔值的检测，以便在 if 或 while 中作为条件或是作为下文所述布尔运算的操作数来使用。</p>
<p>一个对象在默认情况下均被视为真值，除非当该对象被调用时其所属类定义了 <code>__bool__()</code> 方法且返回 False 或是定义了 <code>__len__()</code> 方法且返回零。</p>
<p>下面基本完整地列出了会被视为假值的内置对象:</p>
<ul>
<li>被定义为假值的常量: None 和 False。</li>
<li>任何数值类型的零: 0, 0.0, 0j, Decimal(0), Fraction(0, 1)</li>
<li>空的序列和多项集: ‘’, (), [], {}, set(), range(0)</li>
</ul>
<p>可以使用内置函数 bool() 来查看任意对象的布尔值：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">bool</span>(<span class="literal">None</span>), <span class="built_in">bool</span>(<span class="built_in">int</span>), <span class="built_in">bool</span>(<span class="number">0</span>)</span><br></pre></td></tr></table></figure>




<pre><code>(False, True, False)</code></pre>
<h2 id="布尔运算"><a href="#布尔运算" class="headerlink" title="布尔运算"></a>布尔运算</h2><p>布尔运算按优先级升序排列：</p>
<ul>
<li><code>x or y</code>, if x is false, then y, else x </li>
<li><code>x and y</code>, if x is false, then x, else y </li>
<li><code>not x</code>, if x is false, then True, else False </li>
</ul>
<p>任何值（包括表达式求值结果），除了自身之外，还有相应的逻辑值（布尔值），所以布尔运算符 or，and，not 可对任何值进行运算。</p>
<p>举例如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>&gt;<span class="number">2</span> <span class="keyword">or</span> <span class="string">&#x27;python&#x27;</span></span><br></pre></td></tr></table></figure>




<pre><code>&#39;python&#39;</code></pre>
<p>1&gt;2 表达式结果为 False，所以布尔运算结果为 ‘python’。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>+<span class="number">1</span> <span class="keyword">or</span> <span class="string">&#x27;python&#x27;</span></span><br></pre></td></tr></table></figure>




<pre><code>2</code></pre>
<p>1+1 表达式结果为 2，布尔值为 True，所以布尔运算结果为 2。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>&gt;<span class="number">2</span> <span class="keyword">and</span> <span class="string">&#x27;python&#x27;</span></span><br></pre></td></tr></table></figure>




<pre><code>False</code></pre>
<p>1&gt;2 表达式的结果为 False，所以布尔运算结果为 False。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>&lt;<span class="number">2</span> <span class="keyword">and</span> <span class="string">&#x27;python&#x27;</span></span><br></pre></td></tr></table></figure>




<pre><code>&#39;python&#39;</code></pre>
<p>1&lt;2 表达式的结果为 True，所以布尔运算结果为 ‘python’。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">not</span> <span class="string">&#x27;python&#x27;</span></span><br></pre></td></tr></table></figure>




<pre><code>False</code></pre>
<p>‘python’ 的布尔值为 True，所以布尔运算结果为 False。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">not</span> <span class="number">0</span></span><br></pre></td></tr></table></figure>




<pre><code>True</code></pre>
<p>0 的布尔值为 False，所以布尔运算结果为 True。</p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/01_numeric/02_int-56540a230f9f/</url>
    <content><![CDATA[<h2 id="整数及其位运算"><a href="#整数及其位运算" class="headerlink" title="整数及其位运算"></a>整数及其位运算</h2><p>整数具有无限精度。有四种整数表示法：十六进制整数（0x 或 0X 开头），十进制整数，八进制整数（0o 或 0O 开头）和二进制整数（0b 或 0B 开头）。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 十六进制</span></span><br><span class="line"><span class="number">0x10</span></span><br></pre></td></tr></table></figure>




<pre><code>16</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 十进制</span></span><br><span class="line"><span class="number">10</span></span><br></pre></td></tr></table></figure>




<pre><code>10</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 八进制</span></span><br><span class="line"><span class="number">0</span>O10</span><br></pre></td></tr></table></figure>




<pre><code>8</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 二进制</span></span><br><span class="line"><span class="number">0b10</span></span><br></pre></td></tr></table></figure>




<pre><code>2</code></pre>
<p>数字之间或基数说明符（例如 0b）后，可以放一个下划线：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">123</span>_456_789</span><br></pre></td></tr></table></figure>




<pre><code>123456789</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">0</span>b_1010</span><br></pre></td></tr></table></figure>




<pre><code>10</code></pre>
<p>十进制整数不可以 0 开头：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">012</span></span><br></pre></td></tr></table></figure>


<pre><code>  File &quot;&lt;ipython-input-44-95f378563ada&gt;&quot;, line 1
    012
      ^
SyntaxError: leading zeros in decimal integer literals are not permitted; use an 0o prefix for octal integers</code></pre>
<h2 id="整数类型按位运算"><a href="#整数类型按位运算" class="headerlink" title="整数类型按位运算"></a>整数类型按位运算</h2><p>按位运算只对整数有意义。以优先级升序排序的按位运算:</p>
<ul>
<li><code>x | y</code> x 和 y 按位 或 运算</li>
<li><code>x ^ y</code> x 和 y 按位 异或 运算</li>
<li><code>x &amp; y</code> x 和 y 按位 与 运算</li>
<li><code>x &lt;&lt; n</code> x 左移 n 位，相当于 <code>x*2**n</code></li>
<li><code>x &gt;&gt; n</code> x 右移 n 位，相当于 <code>x//(2**n)</code></li>
<li><code>~x</code> x 逐位取反</li>
</ul>
<p>下面以八位机为例，x 取 6，y 取 8，n 取 2：</p>
<p>6 和 8 在内存中的储存分别为 00000110，00001000。</p>
<p>按位 或 运算，规则如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">0</span>|<span class="number">0</span>, <span class="number">1</span>|<span class="number">0</span>, <span class="number">1</span>|<span class="number">1</span></span><br></pre></td></tr></table></figure>




<pre><code>(0, 1, 1)</code></pre>
<p>6|8 逐位运算后结果为 00001110，十进制就是 14：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">6</span>|<span class="number">8</span>, <span class="number">0b00001110</span></span><br></pre></td></tr></table></figure>




<pre><code>(14, 14)</code></pre>
<p>同理可按下列计算规则，计算出 6^8, 6&amp;8:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">0</span>^<span class="number">0</span>, <span class="number">0</span>^<span class="number">1</span>, <span class="number">1</span>^<span class="number">1</span></span><br></pre></td></tr></table></figure>




<pre><code>(0, 1, 0)</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">0</span>&amp;<span class="number">0</span>, <span class="number">0</span>&amp;<span class="number">1</span>, <span class="number">1</span>&amp;<span class="number">1</span></span><br></pre></td></tr></table></figure>




<pre><code>(0, 0, 1)</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">6</span>^<span class="number">8</span>, <span class="number">6</span>&amp;<span class="number">8</span></span><br></pre></td></tr></table></figure>




<pre><code>(14, 0)</code></pre>
<p>6 左移 2 位结果为 00011000，十进制就是 24，相当于 <code>6*2**2</code>：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">6</span>&lt;&lt;<span class="number">2</span>, <span class="number">0b00011000</span>, <span class="number">6</span>*<span class="number">2</span>**<span class="number">2</span></span><br></pre></td></tr></table></figure>




<pre><code>(24, 24, 24)</code></pre>
<p>同理可计算出 6&gt;&gt;2，结果为 1:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">6</span>&gt;&gt;<span class="number">2</span>, <span class="number">6</span>//(<span class="number">2</span>**<span class="number">2</span>)</span><br></pre></td></tr></table></figure>




<pre><code>(1, 1)</code></pre>
<p>6 逐位取反为 11111001，因为我们是以八位机来举例的，八位机中 11111001 表示 -7，这是个天才设计，正负整数计算可以利用一种电路即可完成，有兴趣的可以查资料了解详情。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">~<span class="number">6</span></span><br></pre></td></tr></table></figure>




<pre><code>-7</code></pre>
<p>例如 8 + (-7) 如此计算：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  00001000 </span><br><span class="line">+ 11111001 </span><br><span class="line">&#x3D;100000001</span><br></pre></td></tr></table></figure>

<p>因为是八位机，结果有 9 位，所以第一个 1 溢出，结果就是 1。</p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/python/01_numeric/01_numeric-5e396fa210f2/</url>
    <content><![CDATA[<h2 id="数字类型概述"><a href="#数字类型概述" class="headerlink" title="数字类型概述"></a>数字类型概述</h2><p>数字类型属于内置类型。有三种不同的数字类型：整数，浮点数和复数。</p>
<p>整数通常只有数字，浮点数有小数点，而复数有实部（省略则为 0）和虚部，虚部必须有 J 或 j。</p>
<p>它们的类型分别是 int，float 和 complex。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">type</span>(<span class="number">1</span>), <span class="built_in">type</span>(<span class="number">1.0</span>), <span class="built_in">type</span>(<span class="number">1j</span>)</span><br></pre></td></tr></table></figure>




<pre><code>(int, float, complex)</code></pre>
<p>它们虽然属于不同的类型，但 Python 完全支持其混合运算。</p>
<p>而且布尔类型属于整数类型的子类型，布尔类型也可参与混合运算。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="literal">True</span>/<span class="number">3</span> + <span class="number">1.5</span> - <span class="number">1J</span></span><br></pre></td></tr></table></figure>




<pre><code>(1.8333333333333333-1j)</code></pre>
<p>数字之间比较时，比较的是它们的精度决定的精确值：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="literal">True</span> == <span class="number">1</span> == <span class="number">1.0</span></span><br></pre></td></tr></table></figure>




<pre><code>True</code></pre>
<p>对于不同类型的数字，只要精确值相等，哈希值必定相等：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">hash</span>(<span class="literal">True</span>) == <span class="built_in">hash</span>(<span class="number">1</span>) == <span class="built_in">hash</span>(<span class="number">1.0</span>)</span><br></pre></td></tr></table></figure>




<pre><code>True</code></pre>
<p>因此作为集合的元素时，它们是一个元素；作为字典的键时，是同一个键。但这不是明智之举，因为浮点数存在精度问题：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;<span class="literal">True</span>, <span class="number">1</span>, <span class="number">1.0</span>&#125;</span><br></pre></td></tr></table></figure>




<pre><code>&#123;True&#125;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;<span class="literal">True</span>:<span class="number">1</span>, <span class="number">1</span>:<span class="number">2</span>, <span class="number">1.0</span>:<span class="number">3</span>&#125;</span><br></pre></td></tr></table></figure>




<pre><code>&#123;True: 3&#125;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1.00000000000000009</span> == <span class="number">1</span></span><br></pre></td></tr></table></figure>




<pre><code>True</code></pre>
<p>整数，浮点数和复数的构造函数分别是：<a href="https://xue.cn/hub/reader?bookId=64&path=xue_python_kp/11_built-in_function/32_int.ipynb">int()</a>，<a href="https://xue.cn/hub/reader?bookId=64&path=xue_python_kp/11_built-in_function/21_float.ipynb">float()</a> 和 <a href="https://xue.cn/hub/reader?bookId=64&path=xue_python_kp/11_built-in_function/12_complex.ipynb">complex()</a>。构造细节详见相应内置函数知识点。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">int</span>(<span class="string">&#x27;1&#x27;</span>), <span class="built_in">float</span>(<span class="string">&#x27;1.0&#x27;</span>), <span class="built_in">complex</span>(<span class="string">&#x27;1&#x27;</span>)</span><br></pre></td></tr></table></figure>




<pre><code>(1, 1.0, (1+0j))</code></pre>
<p>关于各数字类型的特性和详细介绍见后面章节。</p>
]]></content>
  </entry>
  <entry>
    <title>Python 基础知识点手册</title>
    <url>/python/python-7251ecf1d2a3/</url>
    <content><![CDATA[<p><a href="https://billwuhao.com/" title="诗和远方都在脚下"><img src="/images/dbj.jpg"></a></p>
<br>

<blockquote>
<p><strong>内容来源</strong>：<a href="XUE.cn"><font color=#AE6011 >XUE.cn</font></a> 内容小组通过 <a href="https://docs.python.org/zh-cn/3/">官方文档</a> 编辑。希望能够对 python 初学者，想要更全面地掌握 python 基础的入门新人有所帮助，以及其他 python 爱好者作为速查工具书使用。强烈推荐在 XUE.cn 上打开 <a href="https://xue.cn/hub/app/books/64?from=wh01"><font color=#AE6011 >《Python基础知识点自测手册》</font></a> 学习或查阅：不需要做任何配置，即可使用手机、平板、电脑，随时随地写代码、修改书中代码、运行验证代码。<br>注册请使用我的邀请码：<a href="https://xue.cn/?inviter=xxmbz">https://xue.cn?inviter=xxmbz</a> 你和我都能获得 2 天学习时长，谢谢！</p>
<blockquote>
<p>该书基本<strong>全面完整</strong>地梳理了 Python 基础知识点，基本概念及其联系，为 Python 继续精进打通 “任督二脉”。在实践和应用中可以随手速查，随心所欲，信手拈来。掌握基础，能够使进一步学习 Python 更加得心应手。</p>
</blockquote>
</blockquote>
<h1 id="数字"><a href="#数字" class="headerlink" title="数字"></a>数字</h1><h2 id="⚫"><a href="#⚫" class="headerlink" title="⚫ "></a>⚫ <a href="/python/01_numeric/01_numeric-5e396fa210f2/" title="&lt;font color&#x3D;#AE6011 &gt;数字类型概述&lt;&#x2F;font&gt;"><font color=#AE6011 >数字类型概述</font></a></h2><h2 id="⚫-1"><a href="#⚫-1" class="headerlink" title="⚫ "></a>⚫ <a href="/python/01_numeric/02_int-56540a230f9f/" title="&lt;font color&#x3D;#AE6011 &gt;整数及其位运算&lt;&#x2F;font&gt;"><font color=#AE6011 >整数及其位运算</font></a></h2><h2 id="⚫-2"><a href="#⚫-2" class="headerlink" title="⚫ "></a>⚫ <a href="/python/01_numeric/03_bool-af0e51c1aa10/" title="&lt;font color&#x3D;#AE6011 &gt;布尔值及布尔运算&lt;&#x2F;font&gt;"><font color=#AE6011 >布尔值及布尔运算</font></a></h2><h2 id="⚫-3"><a href="#⚫-3" class="headerlink" title="⚫ "></a>⚫ <a href="/python/01_numeric/04_float-0a6726afe85e/" title="&lt;font color&#x3D;#AE6011 &gt;浮点数&lt;&#x2F;font&gt;"><font color=#AE6011 >浮点数</font></a></h2><h2 id="⚫-4"><a href="#⚫-4" class="headerlink" title="⚫ "></a>⚫ <a href="/python/01_numeric/05_complex-3c51984cc81b/" title="&lt;font color&#x3D;#AE6011 &gt;复数&lt;&#x2F;font&gt;"><font color=#AE6011 >复数</font></a></h2><h2 id="⚫-5"><a href="#⚫-5" class="headerlink" title="⚫ "></a>⚫ <a href="/python/01_numeric/06_number_operations-001dadf25bd4/" title="&lt;font color&#x3D;#AE6011 &gt;数字运算&lt;&#x2F;font&gt;"><font color=#AE6011 >数字运算</font></a></h2><h1 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h1><h2 id="⚫-6"><a href="#⚫-6" class="headerlink" title="⚫ "></a>⚫ <a href="/python/02_string/01_string-2b7aee12301e/" title="&lt;font color&#x3D;#AE6011 &gt;字符串概述&lt;&#x2F;font&gt;"><font color=#AE6011 >字符串概述</font></a></h2><h2 id="⚫-7"><a href="#⚫-7" class="headerlink" title="⚫ "></a>⚫ <a href="/python/02_string/02_concatenated_string-00bdb592a89f/" title="&lt;font color&#x3D;#AE6011 &gt;字符串拼接&lt;&#x2F;font&gt;"><font color=#AE6011 >字符串拼接</font></a></h2><h2 id="⚫-8"><a href="#⚫-8" class="headerlink" title="⚫ "></a>⚫ <a href="/python/02_string/03_escape_character-4793a5d487a5/" title="&lt;font color&#x3D;#AE6011 &gt;转义字符&lt;&#x2F;font&gt;"><font color=#AE6011 >转义字符</font></a></h2><h2 id="⚫-9"><a href="#⚫-9" class="headerlink" title="⚫ "></a>⚫ <a href="/python/02_string/04_str.count-02f328c3609e/" title="&lt;font color&#x3D;#AE6011 &gt;str.count 统计&lt;&#x2F;font&gt;"><font color=#AE6011 >str.count 统计</font></a></h2><h2 id="⚫-10"><a href="#⚫-10" class="headerlink" title="⚫ "></a>⚫ <a href="/python/02_string/05_str.replace-4e8bbf22ea43/" title="&lt;font color&#x3D;#AE6011 &gt;str.replace 替换&lt;&#x2F;font&gt;"><font color=#AE6011 >str.replace 替换</font></a></h2><h2 id="⚫-11"><a href="#⚫-11" class="headerlink" title="⚫ "></a>⚫ <a href="/python/02_string/06_str.expandtabs-5cdc786b17b5/" title="&lt;font color&#x3D;#AE6011 &gt;str.expandtabs 替换制表符&lt;&#x2F;font&gt;"><font color=#AE6011 >str.expandtabs 替换制表符</font></a></h2><h2 id="⚫-12"><a href="#⚫-12" class="headerlink" title="⚫ "></a>⚫ <a href="/python/02_string/07_str.split-9e05ceb21a8d/" title="&lt;font color&#x3D;#AE6011 &gt;str.split 拆分&lt;&#x2F;font&gt;"><font color=#AE6011 >str.split 拆分</font></a></h2><h2 id="⚫-13"><a href="#⚫-13" class="headerlink" title="⚫ "></a>⚫ <a href="/python/02_string/08_str.rsplit-22e86ff35cb3/" title="&lt;font color&#x3D;#AE6011 &gt;str.rsplit 拆分&lt;&#x2F;font&gt;"><font color=#AE6011 >str.rsplit 拆分</font></a></h2><h2 id="⚫-14"><a href="#⚫-14" class="headerlink" title="⚫ "></a>⚫ <a href="/python/02_string/09_str.partition-f1b040e322a2/" title="&lt;font color&#x3D;#AE6011 &gt;str.partition 拆分&lt;&#x2F;font&gt;"><font color=#AE6011 >str.partition 拆分</font></a></h2><h2 id="⚫-15"><a href="#⚫-15" class="headerlink" title="⚫ "></a>⚫ <a href="/python/02_string/10_str.rpartition-3588b7d23ed5/" title="&lt;font color&#x3D;#AE6011 &gt;str.rpartition 拆分&lt;&#x2F;font&gt;"><font color=#AE6011 >str.rpartition 拆分</font></a></h2><h2 id="⚫-16"><a href="#⚫-16" class="headerlink" title="⚫ "></a>⚫ <a href="/python/02_string/11_str.splitlines-af5f925aff05/" title="&lt;font color&#x3D;#AE6011 &gt;str.splitlines 按行拆分&lt;&#x2F;font&gt;"><font color=#AE6011 >str.splitlines 按行拆分</font></a></h2><h2 id="⚫-17"><a href="#⚫-17" class="headerlink" title="⚫ "></a>⚫ <a href="/python/02_string/12_str.strip-a738f1a76060/" title="&lt;font color&#x3D;#AE6011 &gt;str.strip 移除两边字符&lt;&#x2F;font&gt;"><font color=#AE6011 >str.strip 移除两边字符</font></a></h2><h2 id="⚫-18"><a href="#⚫-18" class="headerlink" title="⚫ "></a>⚫ <a href="/python/02_string/13_str.lstrip-1c6020f4987b/" title="&lt;font color&#x3D;#AE6011 &gt;str.lstrip 移除左边字符&lt;&#x2F;font&gt;"><font color=#AE6011 >str.lstrip 移除左边字符</font></a></h2><h2 id="⚫-19"><a href="#⚫-19" class="headerlink" title="⚫ "></a>⚫ <a href="/python/02_string/14_str.rstrip-fb79470f87f8/" title="&lt;font color&#x3D;#AE6011 &gt;str.rstrip 移除右边字符&lt;&#x2F;font&gt;"><font color=#AE6011 >str.rstrip 移除右边字符</font></a></h2><h2 id="⚫-20"><a href="#⚫-20" class="headerlink" title="⚫ "></a>⚫ <a href="/python/02_string/15_str.find-78b272ece8b9/" title="&lt;font color&#x3D;#AE6011 &gt;str.find 查找最小索引&lt;&#x2F;font&gt;"><font color=#AE6011 >str.find 查找最小索引</font></a></h2><h2 id="⚫-21"><a href="#⚫-21" class="headerlink" title="⚫ "></a>⚫ <a href="/python/02_string/16_str.rfind-40284be52098/" title="&lt;font color&#x3D;#AE6011 &gt;str.rfind 查找最大索引&lt;&#x2F;font&gt;"><font color=#AE6011 >str.rfind 查找最大索引</font></a></h2><h2 id="⚫-22"><a href="#⚫-22" class="headerlink" title="⚫ "></a>⚫ <a href="/python/02_string/17_str.index-d9c44d34646f/" title="&lt;font color&#x3D;#AE6011 &gt;str.index 查找最小索引&lt;&#x2F;font&gt;"><font color=#AE6011 >str.index 查找最小索引</font></a></h2><h2 id="⚫-23"><a href="#⚫-23" class="headerlink" title="⚫ "></a>⚫ <a href="/python/02_string/18_str.rindex-36ab5ce6c8e2/" title="&lt;font color&#x3D;#AE6011 &gt;str.rindex 查找最大索引&lt;&#x2F;font&gt;"><font color=#AE6011 >str.rindex 查找最大索引</font></a></h2><h2 id="⚫-24"><a href="#⚫-24" class="headerlink" title="⚫ "></a>⚫ <a href="/python/02_string/19_str.join-0bbd20f8c520/" title="&lt;font color&#x3D;#AE6011 &gt;str.join 拼接字符串&lt;&#x2F;font&gt;"><font color=#AE6011 >str.join 拼接字符串</font></a></h2><h2 id="⚫-25"><a href="#⚫-25" class="headerlink" title="⚫ "></a>⚫ <a href="/python/02_string/20_str.startswith-7610ff892666/" title="&lt;font color&#x3D;#AE6011 &gt;str.startswith 指定字符串开头？&lt;&#x2F;font&gt;"><font color=#AE6011 >str.startswith 指定字符串开头？</font></a></h2><h2 id="⚫-26"><a href="#⚫-26" class="headerlink" title="⚫ "></a>⚫ <a href="/python/02_string/21_str.endswith-d503645e6584/" title="&lt;font color&#x3D;#AE6011 &gt;str.endswith 指定字符串结尾？&lt;&#x2F;font&gt;"><font color=#AE6011 >str.endswith 指定字符串结尾？</font></a></h2><h2 id="⚫-27"><a href="#⚫-27" class="headerlink" title="⚫ "></a>⚫ <a href="/python/02_string/22_str.ljust-bae7ddf7179b/" title="&lt;font color&#x3D;#AE6011 &gt;str.ljust 左对齐&lt;&#x2F;font&gt;"><font color=#AE6011 >str.ljust 左对齐</font></a></h2><h2 id="⚫-28"><a href="#⚫-28" class="headerlink" title="⚫ "></a>⚫ <a href="/python/02_string/23_str.center-f5a443b2d145/" title="&lt;font color&#x3D;#AE6011 &gt;str.center 居中&lt;&#x2F;font&gt;"><font color=#AE6011 >str.center 居中</font></a></h2><h2 id="⚫-29"><a href="#⚫-29" class="headerlink" title="⚫ "></a>⚫ <a href="/python/02_string/24_str.rjust-ad310d3b563c/" title="&lt;font color&#x3D;#AE6011 &gt;str.rjust 右对齐&lt;&#x2F;font&gt;"><font color=#AE6011 >str.rjust 右对齐</font></a></h2><h2 id="⚫-30"><a href="#⚫-30" class="headerlink" title="⚫ "></a>⚫ <a href="/python/02_string/25_str.format-baf9dc52f301/" title="&lt;font color&#x3D;#AE6011 &gt;str.format 格式化&lt;&#x2F;font&gt;"><font color=#AE6011 >str.format 格式化</font></a></h2><h2 id="⚫-31"><a href="#⚫-31" class="headerlink" title="⚫ "></a>⚫ <a href="/python/02_string/26_str.format_map-69c2b45c644d/" title="&lt;font color&#x3D;#AE6011 &gt;str.format_map 格式化&lt;&#x2F;font&gt;"><font color=#AE6011 >str.format_map 格式化</font></a></h2><h2 id="⚫-32"><a href="#⚫-32" class="headerlink" title="⚫ "></a>⚫ <a href="/python/02_string/27_f-string-a45109c573a5/" title="&lt;font color&#x3D;#AE6011 &gt;f-string 格式化字符串&lt;&#x2F;font&gt;"><font color=#AE6011 >f-string 格式化字符串</font></a></h2><h2 id="⚫-33"><a href="#⚫-33" class="headerlink" title="⚫ "></a>⚫ <a href="/python/02_string/28_string_operators-875fd24e3da4/" title="&lt;font color&#x3D;#AE6011 &gt;字符串操作符&lt;&#x2F;font&gt;"><font color=#AE6011 >字符串操作符</font></a></h2><h2 id="⚫-34"><a href="#⚫-34" class="headerlink" title="⚫ "></a>⚫ <a href="/python/02_string/29_str.encode-a0d851097965/" title="&lt;font color&#x3D;#AE6011 &gt;str.encode 编码为字节串&lt;&#x2F;font&gt;"><font color=#AE6011 >str.encode 编码为字节串</font></a></h2><h2 id="⚫-35"><a href="#⚫-35" class="headerlink" title="⚫ "></a>⚫ <a href="/python/02_string/30_str.capitalize-0ce4b7b59d7b/" title="&lt;font color&#x3D;#AE6011 &gt;str.capitalize 首字符大写&lt;&#x2F;font&gt;"><font color=#AE6011 >str.capitalize 首字符大写</font></a></h2><h2 id="⚫-36"><a href="#⚫-36" class="headerlink" title="⚫ "></a>⚫ <a href="/python/02_string/31_str.casefold-647268d4b6b0/" title="&lt;font color&#x3D;#AE6011 &gt;str.casefold 消除大小写&lt;&#x2F;font&gt;"><font color=#AE6011 >str.casefold 消除大小写</font></a></h2><h2 id="⚫-37"><a href="#⚫-37" class="headerlink" title="⚫ "></a>⚫ <a href="/python/02_string/32_str.lower-b30ba4f63727/" title="&lt;font color&#x3D;#AE6011 &gt;str.lower 转小写&lt;&#x2F;font&gt;"><font color=#AE6011 >str.lower 转小写</font></a></h2><h2 id="⚫-38"><a href="#⚫-38" class="headerlink" title="⚫ "></a>⚫ <a href="/python/02_string/33_str.title-85983721eba5/" title="&lt;font color&#x3D;#AE6011 &gt;str.title 单词首字母大写&lt;&#x2F;font&gt;"><font color=#AE6011 >str.title 单词首字母大写</font></a></h2><h2 id="⚫-39"><a href="#⚫-39" class="headerlink" title="⚫ "></a>⚫ <a href="/python/02_string/34_str.upper-b03fe8fe0757/" title="&lt;font color&#x3D;#AE6011 &gt;str.upper 转大写&lt;&#x2F;font&gt;"><font color=#AE6011 >str.upper 转大写</font></a></h2><h2 id="⚫-40"><a href="#⚫-40" class="headerlink" title="⚫ "></a>⚫ <a href="/python/02_string/35_str.swapcase-363012221563/" title="&lt;font color&#x3D;#AE6011 &gt;str.swapcase 大小写互转&lt;&#x2F;font&gt;"><font color=#AE6011 >str.swapcase 大小写互转</font></a></h2><h2 id="⚫-41"><a href="#⚫-41" class="headerlink" title="⚫ "></a>⚫ <a href="/python/02_string/36_str.zfill-7160e556f9e6/" title="&lt;font color&#x3D;#AE6011 &gt;str.zfill 填充 0&lt;&#x2F;font&gt;"><font color=#AE6011 >str.zfill 填充 0</font></a></h2><h2 id="⚫-42"><a href="#⚫-42" class="headerlink" title="⚫ "></a>⚫ <a href="/python/02_string/37_str.translate-5e8ec22234e1/" title="&lt;font color&#x3D;#AE6011 &gt;str.translate 按表转换&lt;&#x2F;font&gt;"><font color=#AE6011 >str.translate 按表转换</font></a></h2><h2 id="⚫-43"><a href="#⚫-43" class="headerlink" title="⚫ "></a>⚫ <a href="/python/02_string/38_str.maketrans-6bb81f583c46/" title="&lt;font color&#x3D;#AE6011 &gt;str.maketrans 生成转换表&lt;&#x2F;font&gt;"><font color=#AE6011 >str.maketrans 生成转换表</font></a></h2><h2 id="⚫-44"><a href="#⚫-44" class="headerlink" title="⚫ "></a>⚫ <a href="/python/02_string/39_str.isalnum-f2f3f4a18054/" title="&lt;font color&#x3D;#AE6011 &gt;str.isalnum 是字母或数字？&lt;&#x2F;font&gt;"><font color=#AE6011 >str.isalnum 是字母或数字？</font></a></h2><h2 id="⚫-45"><a href="#⚫-45" class="headerlink" title="⚫ "></a>⚫ <a href="/python/02_string/40_str.isalpha-58cfcbd76ed6/" title="&lt;font color&#x3D;#AE6011 &gt;str.isalpha 是字母（包括汉字等）？&lt;&#x2F;font&gt;"><font color=#AE6011 >str.isalpha 是字母（包括汉字等）？</font></a></h2><h2 id="⚫-46"><a href="#⚫-46" class="headerlink" title="⚫ "></a>⚫ <a href="/python/02_string/41_str.isdecimal-24a5f30d26fb/" title="&lt;font color&#x3D;#AE6011 &gt;str.isdecimal 是十进制字符？&lt;&#x2F;font&gt;"><font color=#AE6011 >str.isdecimal 是十进制字符？</font></a></h2><h2 id="⚫-47"><a href="#⚫-47" class="headerlink" title="⚫ "></a>⚫ <a href="/python/02_string/42_str.isdigit-2b227cd040e7/" title="&lt;font color&#x3D;#AE6011 &gt;str.isdigit 是数字？&lt;&#x2F;font&gt;"><font color=#AE6011 >str.isdigit 是数字？</font></a></h2><h2 id="⚫-48"><a href="#⚫-48" class="headerlink" title="⚫ "></a>⚫ <a href="/python/02_string/43_str.isnumeric-a6ef728632ba/" title="&lt;font color&#x3D;#AE6011 &gt;str.isnumeric 是数值字符？&lt;&#x2F;font&gt;"><font color=#AE6011 >str.isnumeric 是数值字符？</font></a></h2><h2 id="⚫-49"><a href="#⚫-49" class="headerlink" title="⚫ "></a>⚫ <a href="/python/02_string/44_str.islower-fff1c259645f/" title="&lt;font color&#x3D;#AE6011 &gt;str.islower 是小写？&lt;&#x2F;font&gt;"><font color=#AE6011 >str.islower 是小写？</font></a></h2><h2 id="⚫-50"><a href="#⚫-50" class="headerlink" title="⚫ "></a>⚫ <a href="/python/02_string/45_str.isupper-3ce8c446a83b/" title="&lt;font color&#x3D;#AE6011 &gt;str.isupper 是大写？&lt;&#x2F;font&gt;"><font color=#AE6011 >str.isupper 是大写？</font></a></h2><h2 id="⚫-51"><a href="#⚫-51" class="headerlink" title="⚫ "></a>⚫ <a href="/python/02_string/46_str.istitle-c99cce6950be/" title="&lt;font color&#x3D;#AE6011 &gt;str.istitle 是标题字符串？&lt;&#x2F;font&gt;"><font color=#AE6011 >str.istitle 是标题字符串？</font></a></h2><h2 id="⚫-52"><a href="#⚫-52" class="headerlink" title="⚫ "></a>⚫ <a href="/python/02_string/47_str.isascii-a194a3e63c57/" title="&lt;font color&#x3D;#AE6011 &gt;str.isascii 是 ASCII 字符？&lt;&#x2F;font&gt;"><font color=#AE6011 >str.isascii 是 ASCII 字符？</font></a></h2><h2 id="⚫-53"><a href="#⚫-53" class="headerlink" title="⚫ "></a>⚫ <a href="/python/02_string/48_str.isidentifier-2e47d6ca1ec6/" title="&lt;font color&#x3D;#AE6011 &gt;str.isidentifier 是有效标识符？&lt;&#x2F;font&gt;"><font color=#AE6011 >str.isidentifier 是有效标识符？</font></a></h2><h2 id="⚫-54"><a href="#⚫-54" class="headerlink" title="⚫ "></a>⚫ <a href="/python/02_string/49_str.isprintable-335a8a44deca/" title="&lt;font color&#x3D;#AE6011 &gt;str.isprintable 是可打印字符？&lt;&#x2F;font&gt;"><font color=#AE6011 >str.isprintable 是可打印字符？</font></a></h2><h2 id="⚫-55"><a href="#⚫-55" class="headerlink" title="⚫ "></a>⚫ <a href="/python/02_string/50_str.isspace-58a99289b944/" title="&lt;font color&#x3D;#AE6011 &gt;str.isspace 是空白字符？&lt;&#x2F;font&gt;"><font color=#AE6011 >str.isspace 是空白字符？</font></a></h2><h2 id="⚫-56"><a href="#⚫-56" class="headerlink" title="⚫ "></a>⚫ <a href="/python/02_string/51_str.removeprefix-1befcb25734c/" title="&lt;font color&#x3D;#AE6011 &gt;str.removeprefix  移除前缀&lt;&#x2F;font&gt;"><font color=#AE6011 >str.removeprefix  移除前缀</font></a></h2><h2 id="⚫-57"><a href="#⚫-57" class="headerlink" title="⚫ "></a>⚫ <a href="/python/02_string/52_str.removesuffix-6cdcecb80238/" title="&lt;font color&#x3D;#AE6011 &gt;str.removesuffix 移除后缀&lt;&#x2F;font&gt;"><font color=#AE6011 >str.removesuffix 移除后缀</font></a></h2><h1 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h1><h2 id="⚫-58"><a href="#⚫-58" class="headerlink" title="⚫ "></a>⚫ <a href="/python/03_list/01_list-9161859c273b/" title="&lt;font color&#x3D;#AE6011 &gt;列表概述&lt;&#x2F;font&gt;"><font color=#AE6011 >列表概述</font></a></h2><h2 id="⚫-59"><a href="#⚫-59" class="headerlink" title="⚫ "></a>⚫ <a href="/python/03_list/02_list_comprehension-9a270c39ca05/" title="&lt;font color&#x3D;#AE6011 &gt;列表推导式&lt;&#x2F;font&gt;"><font color=#AE6011 >列表推导式</font></a></h2><h2 id="⚫-60"><a href="#⚫-60" class="headerlink" title="⚫ "></a>⚫ <a href="/python/03_list/03_list_indexes_and_slices-7ea73d16e47d/" title="&lt;font color&#x3D;#AE6011 &gt;列表的索引和切片&lt;&#x2F;font&gt;"><font color=#AE6011 >列表的索引和切片</font></a></h2><h2 id="⚫-61"><a href="#⚫-61" class="headerlink" title="⚫ "></a>⚫ <a href="/python/03_list/04_list_operator-5d89570fc46a/" title="&lt;font color&#x3D;#AE6011 &gt;列表操作符&lt;&#x2F;font&gt;"><font color=#AE6011 >列表操作符</font></a></h2><h2 id="⚫-62"><a href="#⚫-62" class="headerlink" title="⚫ "></a>⚫ <a href="/python/03_list/05_list.append-58508ba35cab/" title="&lt;font color&#x3D;#AE6011 &gt;list.append 添加一个元素&lt;&#x2F;font&gt;"><font color=#AE6011 >list.append 添加一个元素</font></a></h2><h2 id="⚫-63"><a href="#⚫-63" class="headerlink" title="⚫ "></a>⚫ <a href="/python/03_list/06_list.extend-c71f589ad848/" title="&lt;font color&#x3D;#AE6011 &gt;list.extend 加入可迭代对象中元素&lt;&#x2F;font&gt;"><font color=#AE6011 >list.extend 加入可迭代对象中元素</font></a></h2><h2 id="⚫-64"><a href="#⚫-64" class="headerlink" title="⚫ "></a>⚫ <a href="/python/03_list/07_list.insert-cc0ca6da5a02/" title="&lt;font color&#x3D;#AE6011 &gt;list.insert 插入一个元素&lt;&#x2F;font&gt;"><font color=#AE6011 >list.insert 插入一个元素</font></a></h2><h2 id="⚫-65"><a href="#⚫-65" class="headerlink" title="⚫ "></a>⚫ <a href="/python/03_list/08_list.sort-c23d2f03bc13/" title="&lt;font color&#x3D;#AE6011 &gt;list.sort 对列表原地排序&lt;&#x2F;font&gt;"><font color=#AE6011 >list.sort 对列表原地排序</font></a></h2><h2 id="⚫-66"><a href="#⚫-66" class="headerlink" title="⚫ "></a>⚫ <a href="/python/03_list/09_list.reverse-c137ebb0bd15/" title="&lt;font color&#x3D;#AE6011 &gt;list.reverse 反转列表中元素&lt;&#x2F;font&gt;"><font color=#AE6011 >list.reverse 反转列表中元素</font></a></h2><h2 id="⚫-67"><a href="#⚫-67" class="headerlink" title="⚫ "></a>⚫ <a href="/python/03_list/10_list.pop-04e66c513dc8/" title="&lt;font color&#x3D;#AE6011 &gt;list.pop 删除元素并返回&lt;&#x2F;font&gt;"><font color=#AE6011 >list.pop 删除元素并返回</font></a></h2><h2 id="⚫-68"><a href="#⚫-68" class="headerlink" title="⚫ "></a>⚫ <a href="/python/03_list/11_list.remove-43ca38edc680/" title="&lt;font color&#x3D;#AE6011 &gt;list.remove 移除一个元素&lt;&#x2F;font&gt;"><font color=#AE6011 >list.remove 移除一个元素</font></a></h2><h2 id="⚫-69"><a href="#⚫-69" class="headerlink" title="⚫ "></a>⚫ <a href="/python/03_list/12_list.count-393923f676fe/" title="&lt;font color&#x3D;#AE6011 &gt;list.count 统计元素出现次数&lt;&#x2F;font&gt;"><font color=#AE6011 >list.count 统计元素出现次数</font></a></h2><h2 id="⚫-70"><a href="#⚫-70" class="headerlink" title="⚫ "></a>⚫ <a href="/python/03_list/13_list.index-bd54bbbbeab4/" title="&lt;font color&#x3D;#AE6011 &gt;list.index 查找最小索引&lt;&#x2F;font&gt;"><font color=#AE6011 >list.index 查找最小索引</font></a></h2><h2 id="⚫-71"><a href="#⚫-71" class="headerlink" title="⚫ "></a>⚫ <a href="/python/03_list/14_list.copy-459819b69520/" title="&lt;font color&#x3D;#AE6011 &gt;list.copy 列表的一个浅拷贝&lt;&#x2F;font&gt;"><font color=#AE6011 >list.copy 列表的一个浅拷贝</font></a></h2><h2 id="⚫-72"><a href="#⚫-72" class="headerlink" title="⚫ "></a>⚫ <a href="/python/03_list/15_list.clear-36c42c6f6c90/" title="&lt;font color&#x3D;#AE6011 &gt;list.clear 删除所有元素&lt;&#x2F;font&gt;"><font color=#AE6011 >list.clear 删除所有元素</font></a></h2><h1 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h1><h2 id="⚫-73"><a href="#⚫-73" class="headerlink" title="⚫ "></a>⚫ <a href="/python/04_tuple/01_tuple-0698666df6a8/" title="&lt;font color&#x3D;#AE6011 &gt;元组概述&lt;&#x2F;font&gt;"><font color=#AE6011 >元组概述</font></a></h2><h2 id="⚫-74"><a href="#⚫-74" class="headerlink" title="⚫ "></a>⚫ <a href="/python/04_tuple/02_tuple.count-f0a6842a8d99/" title="&lt;font color&#x3D;#AE6011 &gt;tuple.count 统计元素出现次数&lt;&#x2F;font&gt;"><font color=#AE6011 >tuple.count 统计元素出现次数</font></a></h2><h2 id="⚫-75"><a href="#⚫-75" class="headerlink" title="⚫ "></a>⚫ <a href="/python/04_tuple/03_tuple.index-99eeab7a2d0c/" title="&lt;font color&#x3D;#AE6011 &gt;tuple.index 查找元素索引&lt;&#x2F;font&gt;"><font color=#AE6011 >tuple.index 查找元素索引</font></a></h2><h2 id="⚫-76"><a href="#⚫-76" class="headerlink" title="⚫ "></a>⚫ <a href="/python/04_tuple/04_operator-47a8e27ae1cd/" title="&lt;font color&#x3D;#AE6011 &gt;元组操作符&lt;&#x2F;font&gt;"><font color=#AE6011 >元组操作符</font></a></h2><h1 id="序列及通用操作"><a href="#序列及通用操作" class="headerlink" title="序列及通用操作"></a>序列及通用操作</h1><h2 id="⚫-77"><a href="#⚫-77" class="headerlink" title="⚫ "></a>⚫ <a href="/python/05_sequence/01_sequence-1471877459de/" title="&lt;font color&#x3D;#AE6011 &gt;序列类型概述&lt;&#x2F;font&gt;"><font color=#AE6011 >序列类型概述</font></a></h2><h2 id="⚫-78"><a href="#⚫-78" class="headerlink" title="⚫ "></a>⚫ <a href="/python/05_sequence/02_range-114ca2ad46d8/" title="&lt;font color&#x3D;#AE6011 &gt;range 对象&lt;&#x2F;font&gt;"><font color=#AE6011 >range 对象</font></a></h2><h2 id="⚫-79"><a href="#⚫-79" class="headerlink" title="⚫ "></a>⚫ <a href="/python/05_sequence/03_index_slice-5601c0662ae0/" title="&lt;font color&#x3D;#AE6011 &gt;序列索引和切片&lt;&#x2F;font&gt;"><font color=#AE6011 >序列索引和切片</font></a></h2><h2 id="⚫-80"><a href="#⚫-80" class="headerlink" title="⚫ "></a>⚫ <a href="/python/05_sequence/04_common_operations-d633fd2df6c3/" title="&lt;font color&#x3D;#AE6011 &gt;序列通用操作&lt;&#x2F;font&gt;"><font color=#AE6011 >序列通用操作</font></a></h2><h1 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h1><h2 id="⚫-81"><a href="#⚫-81" class="headerlink" title="⚫ "></a>⚫ <a href="/python/06_set/01_set-0ac8a008ad26/" title="&lt;font color&#x3D;#AE6011 &gt;集合概述&lt;&#x2F;font&gt;"><font color=#AE6011 >集合概述</font></a></h2><h2 id="⚫-82"><a href="#⚫-82" class="headerlink" title="⚫ "></a>⚫ <a href="/python/06_set/02_set.isdisjoint-3e2088f07888/" title="&lt;font color&#x3D;#AE6011 &gt;set.isdisjoint 交集为空吗？&lt;&#x2F;font&gt;"><font color=#AE6011 >set.isdisjoint 交集为空吗？</font></a></h2><h2 id="⚫-83"><a href="#⚫-83" class="headerlink" title="⚫ "></a>⚫ <a href="/python/06_set/03_set.issubset-ac04e75aad34/" title="&lt;font color&#x3D;#AE6011 &gt;set.issubset 是子集吗？&lt;&#x2F;font&gt;"><font color=#AE6011 >set.issubset 是子集吗？</font></a></h2><h2 id="⚫-84"><a href="#⚫-84" class="headerlink" title="⚫ "></a>⚫ <a href="/python/06_set/04_set.issuperset-2f8e8004700a/" title="&lt;font color&#x3D;#AE6011 &gt;set.issuperset 是超集吗？&lt;&#x2F;font&gt;"><font color=#AE6011 >set.issuperset 是超集吗？</font></a></h2><h2 id="⚫-85"><a href="#⚫-85" class="headerlink" title="⚫ "></a>⚫ <a href="/python/06_set/05_set.union-790db07409c6/" title="&lt;font color&#x3D;#AE6011 &gt;set.union 并集&lt;&#x2F;font&gt;"><font color=#AE6011 >set.union 并集</font></a></h2><h2 id="⚫-86"><a href="#⚫-86" class="headerlink" title="⚫ "></a>⚫ <a href="/python/06_set/06_set.intersection-e146aaa2077d/" title="&lt;font color&#x3D;#AE6011 &gt;set.intersection 交集&lt;&#x2F;font&gt;"><font color=#AE6011 >set.intersection 交集</font></a></h2><h2 id="⚫-87"><a href="#⚫-87" class="headerlink" title="⚫ "></a>⚫ <a href="/python/06_set/07_set.difference-77375525d729/" title="&lt;font color&#x3D;#AE6011 &gt;set.difference 差集&lt;&#x2F;font&gt;"><font color=#AE6011 >set.difference 差集</font></a></h2><h2 id="⚫-88"><a href="#⚫-88" class="headerlink" title="⚫ "></a>⚫ <a href="/python/06_set/08_set.symmetric_difference-015a8d234608/" title="&lt;font color&#x3D;#AE6011 &gt;set.symmetric_difference 对称差&lt;&#x2F;font&gt;"><font color=#AE6011 >set.symmetric_difference 对称差</font></a></h2><h2 id="⚫-89"><a href="#⚫-89" class="headerlink" title="⚫ "></a>⚫ <a href="/python/06_set/09_set.copy-fdfd1739b562/" title="&lt;font color&#x3D;#AE6011 &gt;set.copy 浅拷贝&lt;&#x2F;font&gt;"><font color=#AE6011 >set.copy 浅拷贝</font></a></h2><h2 id="⚫-90"><a href="#⚫-90" class="headerlink" title="⚫ "></a>⚫ <a href="/python/06_set/10_set.update-fcf185224aca/" title="&lt;font color&#x3D;#AE6011 &gt;set.update 合并更新&lt;&#x2F;font&gt;"><font color=#AE6011 >set.update 合并更新</font></a></h2><h2 id="⚫-91"><a href="#⚫-91" class="headerlink" title="⚫ "></a>⚫ <a href="/python/06_set/11_set.intersection_update-a7e6afd9ad65/" title="&lt;font color&#x3D;#AE6011 &gt;set.intersection_update 交集更新&lt;&#x2F;font&gt;"><font color=#AE6011 >set.intersection_update 交集更新</font></a></h2><h2 id="⚫-92"><a href="#⚫-92" class="headerlink" title="⚫ "></a>⚫ <a href="/python/06_set/12_set.difference_update-5e83d9b6937a/" title="&lt;font color&#x3D;#AE6011 &gt;set.difference_update 差集更新&lt;&#x2F;font&gt;"><font color=#AE6011 >set.difference_update 差集更新</font></a></h2><h2 id="⚫-93"><a href="#⚫-93" class="headerlink" title="⚫ "></a>⚫ <a href="/python/06_set/13_set.symmetric_difference_update-780c8b074599/" title="&lt;font color&#x3D;#AE6011 &gt;set ^&#x3D; other 对称差集更新&lt;&#x2F;font&gt;"><font color=#AE6011 >set ^= other 对称差集更新</font></a></h2><h2 id="⚫-94"><a href="#⚫-94" class="headerlink" title="⚫ "></a>⚫ <a href="/python/06_set/14_set.add-59f536d6bd0c/" title="&lt;font color&#x3D;#AE6011 &gt;set.add 添加元素&lt;&#x2F;font&gt;"><font color=#AE6011 >set.add 添加元素</font></a></h2><h2 id="⚫-95"><a href="#⚫-95" class="headerlink" title="⚫ "></a>⚫ <a href="/python/06_set/15_set.remove-661693a1608e/" title="&lt;font color&#x3D;#AE6011 &gt;set.remove 删除元素&lt;&#x2F;font&gt;"><font color=#AE6011 >set.remove 删除元素</font></a></h2><h2 id="⚫-96"><a href="#⚫-96" class="headerlink" title="⚫ "></a>⚫ <a href="/python/06_set/16_set.discard-5f7c6113f3f1/" title="&lt;font color&#x3D;#AE6011 &gt;set.discard 删除元素&lt;&#x2F;font&gt;"><font color=#AE6011 >set.discard 删除元素</font></a></h2><h2 id="⚫-97"><a href="#⚫-97" class="headerlink" title="⚫ "></a>⚫ <a href="/python/06_set/17_set.pop-a68a78e5d51c/" title="&lt;font color&#x3D;#AE6011 &gt;set.pop 删除元素并返回&lt;&#x2F;font&gt;"><font color=#AE6011 >set.pop 删除元素并返回</font></a></h2><h2 id="⚫-98"><a href="#⚫-98" class="headerlink" title="⚫ "></a>⚫ <a href="/python/06_set/18_set.clear-b31d42e2b343/" title="&lt;font color&#x3D;#AE6011 &gt;set.clear 清空集合元素&lt;&#x2F;font&gt;"><font color=#AE6011 >set.clear 清空集合元素</font></a></h2><h1 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h1><h2 id="⚫-99"><a href="#⚫-99" class="headerlink" title="⚫ "></a>⚫ <a href="/python/07_dictionary/01_dict-ecd2b0f97836/" title="&lt;font color&#x3D;#AE6011 &gt;字典概述&lt;&#x2F;font&gt;"><font color=#AE6011 >字典概述</font></a></h2><h2 id="⚫-100"><a href="#⚫-100" class="headerlink" title="⚫ "></a>⚫ <a href="/python/07_dictionary/02_dict.keys-ca12e9665e6b/" title="&lt;font color&#x3D;#AE6011 &gt;dict.keys 键视图&lt;&#x2F;font&gt;"><font color=#AE6011 >dict.keys 键视图</font></a></h2><h2 id="⚫-101"><a href="#⚫-101" class="headerlink" title="⚫ "></a>⚫ <a href="/python/07_dictionary/03_dict.values-e337ca43dcd4/" title="&lt;font color&#x3D;#AE6011 &gt;dict.values 值视图&lt;&#x2F;font&gt;"><font color=#AE6011 >dict.values 值视图</font></a></h2><h2 id="⚫-102"><a href="#⚫-102" class="headerlink" title="⚫ "></a>⚫ <a href="/python/07_dictionary/04_dict.items-480fc927f532/" title="&lt;font color&#x3D;#AE6011 &gt;dict.items 键值对视图&lt;&#x2F;font&gt;"><font color=#AE6011 >dict.items 键值对视图</font></a></h2><h2 id="⚫-103"><a href="#⚫-103" class="headerlink" title="⚫ "></a>⚫ <a href="/python/07_dictionary/05_dict.get-626864b9ba1d/" title="&lt;font color&#x3D;#AE6011 &gt;dict.get 获取某个键的值&lt;&#x2F;font&gt;"><font color=#AE6011 >dict.get 获取某个键的值</font></a></h2><h2 id="⚫-104"><a href="#⚫-104" class="headerlink" title="⚫ "></a>⚫ <a href="/python/07_dictionary/06_dict.copy-863adee0d3b5/" title="&lt;font color&#x3D;#AE6011 &gt;dict.copy 浅拷贝&lt;&#x2F;font&gt;"><font color=#AE6011 >dict.copy 浅拷贝</font></a></h2><h2 id="⚫-105"><a href="#⚫-105" class="headerlink" title="⚫ "></a>⚫ <a href="/python/07_dictionary/07_dict.pop-34c04582c3ba/" title="&lt;font color&#x3D;#AE6011 &gt;dict.pop 删除元素并返回值&lt;&#x2F;font&gt;"><font color=#AE6011 >dict.pop 删除元素并返回值</font></a></h2><h2 id="⚫-106"><a href="#⚫-106" class="headerlink" title="⚫ "></a>⚫ <a href="/python/07_dictionary/08_dict.popitem-87675bf59a05/" title="&lt;font color&#x3D;#AE6011 &gt;dict.popitem 删除元素并返回键值对&lt;&#x2F;font&gt;"><font color=#AE6011 >dict.popitem 删除元素并返回键值对</font></a></h2><h2 id="⚫-107"><a href="#⚫-107" class="headerlink" title="⚫ "></a>⚫ <a href="/python/07_dictionary/09_dict.fromkeys-a252e4e7bd88/" title="&lt;font color&#x3D;#AE6011 &gt;dict.fromkeys 创建字典&lt;&#x2F;font&gt;"><font color=#AE6011 >dict.fromkeys 创建字典</font></a></h2><h2 id="⚫-108"><a href="#⚫-108" class="headerlink" title="⚫ "></a>⚫ <a href="/python/07_dictionary/10_dict.clear-fdccb262f538/" title="&lt;font color&#x3D;#AE6011 &gt;dict.clear 清空字典元素&lt;&#x2F;font&gt;"><font color=#AE6011 >dict.clear 清空字典元素</font></a></h2><h2 id="⚫-109"><a href="#⚫-109" class="headerlink" title="⚫ "></a>⚫ <a href="/python/07_dictionary/11_dict.setdefault-3804c7a2ead0/" title="&lt;font color&#x3D;#AE6011 &gt;dict.setdefault 获取或插入元素&lt;&#x2F;font&gt;"><font color=#AE6011 >dict.setdefault 获取或插入元素</font></a></h2><h2 id="⚫-110"><a href="#⚫-110" class="headerlink" title="⚫ "></a>⚫ <a href="/python/07_dictionary/12_dict.update-3f3d274296c7/" title="&lt;font color&#x3D;#AE6011 &gt;dict.update 更新字典&lt;&#x2F;font&gt;"><font color=#AE6011 >dict.update 更新字典</font></a></h2><h2 id="⚫-111"><a href="#⚫-111" class="headerlink" title="⚫ "></a>⚫ <a href="/python/07_dictionary/13_loop_through-6dabf88bbee9/" title="&lt;font color&#x3D;#AE6011 &gt;字典遍历&lt;&#x2F;font&gt;"><font color=#AE6011 >字典遍历</font></a></h2><h2 id="⚫-112"><a href="#⚫-112" class="headerlink" title="⚫ "></a>⚫ <a href="/python/07_dictionary/14_operator-ae2f15f20e3e/" title="&lt;font color&#x3D;#AE6011 &gt;字典操作符&lt;&#x2F;font&gt;"><font color=#AE6011 >字典操作符</font></a></h2><h1 id="其他内置类型"><a href="#其他内置类型" class="headerlink" title="其他内置类型"></a>其他内置类型</h1><h2 id="⚫-113"><a href="#⚫-113" class="headerlink" title="⚫ "></a>⚫ <a href="/python/08_other_types/01_none-c7adf7553441/" title="&lt;font color&#x3D;#AE6011 &gt;空值 None&lt;&#x2F;font&gt;"><font color=#AE6011 >空值 None</font></a></h2><h2 id="⚫-114"><a href="#⚫-114" class="headerlink" title="⚫ "></a>⚫ <a href="/python/08_other_types/02_comprehension-fb08381d8126/" title="&lt;font color&#x3D;#AE6011 &gt;生成器表达式和推导式&lt;&#x2F;font&gt;"><font color=#AE6011 >生成器表达式和推导式</font></a></h2><h2 id="⚫-115"><a href="#⚫-115" class="headerlink" title="⚫ "></a>⚫ <a href="/python/08_other_types/03_other_types-64cb73ee4853/" title="&lt;font color&#x3D;#AE6011 &gt;其他内置类型&lt;&#x2F;font&gt;"><font color=#AE6011 >其他内置类型</font></a></h2><h1 id="操作符"><a href="#操作符" class="headerlink" title="操作符"></a>操作符</h1><h2 id="⚫-116"><a href="#⚫-116" class="headerlink" title="⚫ "></a>⚫ <a href="/python/09_operator/01_operator_summary-b1897c05dd00/" title="&lt;font color&#x3D;#AE6011 &gt;操作符概述&lt;&#x2F;font&gt;"><font color=#AE6011 >操作符概述</font></a></h2><h2 id="⚫-117"><a href="#⚫-117" class="headerlink" title="⚫ "></a>⚫ <a href="/python/09_operator/02_compare-d3f8d643e3b8/" title="&lt;font color&#x3D;#AE6011 &gt;比较操作符&lt;&#x2F;font&gt;"><font color=#AE6011 >比较操作符</font></a></h2><h2 id="⚫-118"><a href="#⚫-118" class="headerlink" title="⚫ "></a>⚫ <a href="/python/09_operator/03_precedence-a98e83593b53/" title="&lt;font color&#x3D;#AE6011 &gt;操作符优先级&lt;&#x2F;font&gt;"><font color=#AE6011 >操作符优先级</font></a></h2><h2 id="⚫-119"><a href="#⚫-119" class="headerlink" title="⚫ "></a>⚫ <a href="/python/09_operator/04_special-c20014a80160/" title="&lt;font color&#x3D;#AE6011 &gt;操作符特殊用法&lt;&#x2F;font&gt;"><font color=#AE6011 >操作符特殊用法</font></a></h2><h1 id="语句"><a href="#语句" class="headerlink" title="语句"></a>语句</h1><h2 id="⚫-120"><a href="#⚫-120" class="headerlink" title="⚫ "></a>⚫ <a href="/python/10_statement/01_expression-6a6334ec8d3d/" title="&lt;font color&#x3D;#AE6011 &gt;表达式语句&lt;&#x2F;font&gt;"><font color=#AE6011 >表达式语句</font></a></h2><h2 id="⚫-121"><a href="#⚫-121" class="headerlink" title="⚫ "></a>⚫ <a href="/python/10_statement/02_assignment-7fce53d8768e/" title="&lt;font color&#x3D;#AE6011 &gt;赋值语句&lt;&#x2F;font&gt;"><font color=#AE6011 >赋值语句</font></a></h2><h2 id="⚫-122"><a href="#⚫-122" class="headerlink" title="⚫ "></a>⚫ <a href="/python/10_statement/03_if-1b6634cd9967/" title="&lt;font color&#x3D;#AE6011 &gt;if 条件判断&lt;&#x2F;font&gt;"><font color=#AE6011 >if 条件判断</font></a></h2><h2 id="⚫-123"><a href="#⚫-123" class="headerlink" title="⚫ "></a>⚫ <a href="/python/10_statement/04_for-97e3e9a1331f/" title="&lt;font color&#x3D;#AE6011 &gt;for 循环&lt;&#x2F;font&gt;"><font color=#AE6011 >for 循环</font></a></h2><h2 id="⚫-124"><a href="#⚫-124" class="headerlink" title="⚫ "></a>⚫ <a href="/python/10_statement/05_while-09f06b11db11/" title="&lt;font color&#x3D;#AE6011 &gt;while 循环&lt;&#x2F;font&gt;"><font color=#AE6011 >while 循环</font></a></h2><h2 id="⚫-125"><a href="#⚫-125" class="headerlink" title="⚫ "></a>⚫ <a href="/python/10_statement/06_break-5805f154286d/" title="&lt;font color&#x3D;#AE6011 &gt;break 语句&lt;&#x2F;font&gt;"><font color=#AE6011 >break 语句</font></a></h2><h2 id="⚫-126"><a href="#⚫-126" class="headerlink" title="⚫ "></a>⚫ <a href="/python/10_statement/07_continue-9050d38cfc63/" title="&lt;font color&#x3D;#AE6011 &gt;continue 语句&lt;&#x2F;font&gt;"><font color=#AE6011 >continue 语句</font></a></h2><h2 id="⚫-127"><a href="#⚫-127" class="headerlink" title="⚫ "></a>⚫ <a href="/python/10_statement/08_del-c6238c7d7891/" title="&lt;font color&#x3D;#AE6011 &gt;del 语句&lt;&#x2F;font&gt;"><font color=#AE6011 >del 语句</font></a></h2><h2 id="⚫-128"><a href="#⚫-128" class="headerlink" title="⚫ "></a>⚫ <a href="/python/10_statement/09_pass-3eb78c2897cf/" title="&lt;font color&#x3D;#AE6011 &gt;pass 语句&lt;&#x2F;font&gt;"><font color=#AE6011 >pass 语句</font></a></h2><h2 id="⚫-129"><a href="#⚫-129" class="headerlink" title="⚫ "></a>⚫ <a href="/python/10_statement/10_def-e791a5a7d27f/" title="&lt;font color&#x3D;#AE6011 &gt;def 定义函数&lt;&#x2F;font&gt;"><font color=#AE6011 >def 定义函数</font></a></h2><h2 id="⚫-130"><a href="#⚫-130" class="headerlink" title="⚫ "></a>⚫ <a href="/python/10_statement/11_return-fe6dac1d73cd/" title="&lt;font color&#x3D;#AE6011 &gt;return 语句&lt;&#x2F;font&gt;"><font color=#AE6011 >return 语句</font></a></h2><h2 id="⚫-131"><a href="#⚫-131" class="headerlink" title="⚫ "></a>⚫ <a href="/python/10_statement/12_yield-89555138e53d/" title="&lt;font color&#x3D;#AE6011 &gt;yield 语句&lt;&#x2F;font&gt;"><font color=#AE6011 >yield 语句</font></a></h2><h2 id="⚫-132"><a href="#⚫-132" class="headerlink" title="⚫ "></a>⚫ <a href="/python/10_statement/13_class-2c687901564b/" title="&lt;font color&#x3D;#AE6011 &gt;class 定义类&lt;&#x2F;font&gt;"><font color=#AE6011 >class 定义类</font></a></h2><h2 id="⚫-133"><a href="#⚫-133" class="headerlink" title="⚫ "></a>⚫ <a href="/python/10_statement/14_try-eb35d8e7157e/" title="&lt;font color&#x3D;#AE6011 &gt;try 语句&lt;&#x2F;font&gt;"><font color=#AE6011 >try 语句</font></a></h2><h2 id="⚫-134"><a href="#⚫-134" class="headerlink" title="⚫ "></a>⚫ <a href="/python/10_statement/15_raise-eecf40bbbddf/" title="&lt;font color&#x3D;#AE6011 &gt;raise 语句&lt;&#x2F;font&gt;"><font color=#AE6011 >raise 语句</font></a></h2><h2 id="⚫-135"><a href="#⚫-135" class="headerlink" title="⚫ "></a>⚫ <a href="/python/10_statement/16_with-6a18f128f90a/" title="&lt;font color&#x3D;#AE6011 &gt;with 语句&lt;&#x2F;font&gt;"><font color=#AE6011 >with 语句</font></a></h2><h2 id="⚫-136"><a href="#⚫-136" class="headerlink" title="⚫ "></a>⚫ <a href="/python/10_statement/17_assert-ed895b705780/" title="&lt;font color&#x3D;#AE6011 &gt;assert 语句&lt;&#x2F;font&gt;"><font color=#AE6011 >assert 语句</font></a></h2><h2 id="⚫-137"><a href="#⚫-137" class="headerlink" title="⚫ "></a>⚫ <a href="/python/10_statement/18_import-ab6e2344b614/" title="&lt;font color&#x3D;#AE6011 &gt;import 导入语句&lt;&#x2F;font&gt;"><font color=#AE6011 >import 导入语句</font></a></h2><h2 id="⚫-138"><a href="#⚫-138" class="headerlink" title="⚫ "></a>⚫ <a href="/python/10_statement/19_global-e3e8ec73605d/" title="&lt;font color&#x3D;#AE6011 &gt;global 语句&lt;&#x2F;font&gt;"><font color=#AE6011 >global 语句</font></a></h2><h2 id="⚫-139"><a href="#⚫-139" class="headerlink" title="⚫ "></a>⚫ <a href="/python/10_statement/20_nonlocal-79fb030052f1/" title="&lt;font color&#x3D;#AE6011 &gt;nonlocal 语句&lt;&#x2F;font&gt;"><font color=#AE6011 >nonlocal 语句</font></a></h2><h1 id="内置函数"><a href="#内置函数" class="headerlink" title="内置函数"></a>内置函数</h1><h2 id="⚫-140"><a href="#⚫-140" class="headerlink" title="⚫ "></a>⚫ <a href="/python/11_built-in_function/01_abs-d7a32f9fd8ac/" title="&lt;font color&#x3D;#AE6011 &gt;abs() 数字取绝对值&lt;&#x2F;font&gt;"><font color=#AE6011 >abs() 数字取绝对值</font></a></h2><h2 id="⚫-141"><a href="#⚫-141" class="headerlink" title="⚫ "></a>⚫ <a href="/python/11_built-in_function/02_all-38e9fced3291/" title="&lt;font color&#x3D;#AE6011 &gt;all() 所有元素布尔值为真？&lt;&#x2F;font&gt;"><font color=#AE6011 >all() 所有元素布尔值为真？</font></a></h2><h2 id="⚫-142"><a href="#⚫-142" class="headerlink" title="⚫ "></a>⚫ <a href="/python/11_built-in_function/03_any-5b9f3aa9609e/" title="&lt;font color&#x3D;#AE6011 &gt;any() 有一个元素布尔值为真？&lt;&#x2F;font&gt;"><font color=#AE6011 >any() 有一个元素布尔值为真？</font></a></h2><h2 id="⚫-143"><a href="#⚫-143" class="headerlink" title="⚫ "></a>⚫ <a href="/python/11_built-in_function/04_ascii-a7ee61566ce1/" title="&lt;font color&#x3D;#AE6011 &gt;ascii() 返回对象的可打印字符串&lt;&#x2F;font&gt;"><font color=#AE6011 >ascii() 返回对象的可打印字符串</font></a></h2><h2 id="⚫-144"><a href="#⚫-144" class="headerlink" title="⚫ "></a>⚫ <a href="/python/11_built-in_function/05_bin-d4461ae49b7b/" title="&lt;font color&#x3D;#AE6011 &gt;bin() 整数的二进制形式&lt;&#x2F;font&gt;"><font color=#AE6011 >bin() 整数的二进制形式</font></a></h2><h2 id="⚫-145"><a href="#⚫-145" class="headerlink" title="⚫ "></a>⚫ <a href="/python/11_built-in_function/06_bool-667e158f4a29/" title="&lt;font color&#x3D;#AE6011 &gt;bool 返回对象的布尔值&lt;&#x2F;font&gt;"><font color=#AE6011 >bool 返回对象的布尔值</font></a></h2><h2 id="⚫-146"><a href="#⚫-146" class="headerlink" title="⚫ "></a>⚫ <a href="/python/11_built-in_function/07_bytes-491a3d680bf4/" title="&lt;font color&#x3D;#AE6011 &gt;bytes 创建 bytes 对象&lt;&#x2F;font&gt;"><font color=#AE6011 >bytes 创建 bytes 对象</font></a></h2><h2 id="⚫-147"><a href="#⚫-147" class="headerlink" title="⚫ "></a>⚫ <a href="/python/11_built-in_function/08_callable-a68c42feeee0/" title="&lt;font color&#x3D;#AE6011 &gt;callable() 是可调用对象？&lt;&#x2F;font&gt;"><font color=#AE6011 >callable() 是可调用对象？</font></a></h2><h2 id="⚫-148"><a href="#⚫-148" class="headerlink" title="⚫ "></a>⚫ <a href="/python/11_built-in_function/09_chr-3fd8004de4b1/" title="&lt;font color&#x3D;#AE6011 &gt;chr() 返回 Unicode 码位值对应字符&lt;&#x2F;font&gt;"><font color=#AE6011 >chr() 返回 Unicode 码位值对应字符</font></a></h2><h2 id="⚫-149"><a href="#⚫-149" class="headerlink" title="⚫ "></a>⚫ <a href="/python/11_built-in_function/10_classmethod-97e7b4b5c29e/" title="&lt;font color&#x3D;#AE6011 &gt;classmethod 封装函数为类方法&lt;&#x2F;font&gt;"><font color=#AE6011 >classmethod 封装函数为类方法</font></a></h2><h2 id="⚫-150"><a href="#⚫-150" class="headerlink" title="⚫ "></a>⚫ <a href="/python/11_built-in_function/11_compile-fa483b43b6fd/" title="&lt;font color&#x3D;#AE6011 &gt;compile() 创建代码对象&lt;&#x2F;font&gt;"><font color=#AE6011 >compile() 创建代码对象</font></a></h2><h2 id="⚫-151"><a href="#⚫-151" class="headerlink" title="⚫ "></a>⚫ <a href="/python/11_built-in_function/12_complex-a80ba0438a1c/" title="&lt;font color&#x3D;#AE6011 &gt;complex 创建复数&lt;&#x2F;font&gt;"><font color=#AE6011 >complex 创建复数</font></a></h2><h2 id="⚫-152"><a href="#⚫-152" class="headerlink" title="⚫ "></a>⚫ <a href="/python/11_built-in_function/13_delattr-e928b9eee226/" title="&lt;font color&#x3D;#AE6011 &gt;delattr() 删除对象属性&lt;&#x2F;font&gt;"><font color=#AE6011 >delattr() 删除对象属性</font></a></h2><h2 id="⚫-153"><a href="#⚫-153" class="headerlink" title="⚫ "></a>⚫ <a href="/python/11_built-in_function/14_dict-8c6227f0ee7f/" title="&lt;font color&#x3D;#AE6011 &gt;dict 创建字典&lt;&#x2F;font&gt;"><font color=#AE6011 >dict 创建字典</font></a></h2><h2 id="⚫-154"><a href="#⚫-154" class="headerlink" title="⚫ "></a>⚫ <a href="/python/11_built-in_function/15_dir-820417c91bd7/" title="&lt;font color&#x3D;#AE6011 &gt;dir() 返回对象属性列表&lt;&#x2F;font&gt;"><font color=#AE6011 >dir() 返回对象属性列表</font></a></h2><h2 id="⚫-155"><a href="#⚫-155" class="headerlink" title="⚫ "></a>⚫ <a href="/python/11_built-in_function/16_divmod-090d4fef2340/" title="&lt;font color&#x3D;#AE6011 &gt;divmod() 求两个数的商和余&lt;&#x2F;font&gt;"><font color=#AE6011 >divmod() 求两个数的商和余</font></a></h2><h2 id="⚫-156"><a href="#⚫-156" class="headerlink" title="⚫ "></a>⚫ <a href="/python/11_built-in_function/17_enumerate-7ced91028de0/" title="&lt;font color&#x3D;#AE6011 &gt;enumerate 枚举&lt;&#x2F;font&gt;"><font color=#AE6011 >enumerate 枚举</font></a></h2><h2 id="⚫-157"><a href="#⚫-157" class="headerlink" title="⚫ "></a>⚫ <a href="/python/11_built-in_function/18_eval-85cd8d0d95d1/" title="&lt;font color&#x3D;#AE6011 &gt;eval() 解析字符串或代码并求值&lt;&#x2F;font&gt;"><font color=#AE6011 >eval() 解析字符串或代码并求值</font></a></h2><h2 id="⚫-158"><a href="#⚫-158" class="headerlink" title="⚫ "></a>⚫ <a href="/python/11_built-in_function/19_exec-124cb5381bb4/" title="&lt;font color&#x3D;#AE6011 &gt;exec() 解析字符串或代码并求值&lt;&#x2F;font&gt;"><font color=#AE6011 >exec() 解析字符串或代码并求值</font></a></h2><h2 id="⚫-159"><a href="#⚫-159" class="headerlink" title="⚫ "></a>⚫ <a href="/python/11_built-in_function/20_filter-5deb5c69d4e0/" title="&lt;font color&#x3D;#AE6011 &gt;filter 真值元素筛选&lt;&#x2F;font&gt;"><font color=#AE6011 >filter 真值元素筛选</font></a></h2><h2 id="⚫-160"><a href="#⚫-160" class="headerlink" title="⚫ "></a>⚫ <a href="/python/11_built-in_function/21_float-a182ef4146c6/" title="&lt;font color&#x3D;#AE6011 &gt;float 创建浮点数&lt;&#x2F;font&gt;"><font color=#AE6011 >float 创建浮点数</font></a></h2><h2 id="⚫-161"><a href="#⚫-161" class="headerlink" title="⚫ "></a>⚫ <a href="/python/11_built-in_function/22_format-409d172a13f3/" title="&lt;font color&#x3D;#AE6011 &gt;format() 格式化&lt;&#x2F;font&gt;"><font color=#AE6011 >format() 格式化</font></a></h2><h2 id="⚫-162"><a href="#⚫-162" class="headerlink" title="⚫ "></a>⚫ <a href="/python/11_built-in_function/23_frozenset-23eeb469f641/" title="&lt;font color&#x3D;#AE6011 &gt;frozenset 创建不可变集合&lt;&#x2F;font&gt;"><font color=#AE6011 >frozenset 创建不可变集合</font></a></h2><h2 id="⚫-163"><a href="#⚫-163" class="headerlink" title="⚫ "></a>⚫ <a href="/python/11_built-in_function/24_getattr-327d52b4e7d1/" title="&lt;font color&#x3D;#AE6011 &gt;getattr() 获取对象的属性&lt;&#x2F;font&gt;"><font color=#AE6011 >getattr() 获取对象的属性</font></a></h2><h2 id="⚫-164"><a href="#⚫-164" class="headerlink" title="⚫ "></a>⚫ <a href="/python/11_built-in_function/25_globals-d77884b40f6b/" title="&lt;font color&#x3D;#AE6011 &gt;globals() 返回全局变量字典&lt;&#x2F;font&gt;"><font color=#AE6011 >globals() 返回全局变量字典</font></a></h2><h2 id="⚫-165"><a href="#⚫-165" class="headerlink" title="⚫ "></a>⚫ <a href="/python/11_built-in_function/26_hasattr-2fe988f3f1f4/" title="&lt;font color&#x3D;#AE6011 &gt;hasattr() 是对象的属性吗？&lt;&#x2F;font&gt;"><font color=#AE6011 >hasattr() 是对象的属性吗？</font></a></h2><h2 id="⚫-166"><a href="#⚫-166" class="headerlink" title="⚫ "></a>⚫ <a href="/python/11_built-in_function/27_hash-3366d3144b1b/" title="&lt;font color&#x3D;#AE6011 &gt;hash() 返回对象的哈希值&lt;&#x2F;font&gt;"><font color=#AE6011 >hash() 返回对象的哈希值</font></a></h2><h2 id="⚫-167"><a href="#⚫-167" class="headerlink" title="⚫ "></a>⚫ <a href="/python/11_built-in_function/28_help-c726e5b1f0bf/" title="&lt;font color&#x3D;#AE6011 &gt;help 启动帮助系统&lt;&#x2F;font&gt;"><font color=#AE6011 >help 启动帮助系统</font></a></h2><h2 id="⚫-168"><a href="#⚫-168" class="headerlink" title="⚫ "></a>⚫ <a href="/python/11_built-in_function/29_hex-220f8b030da8/" title="&lt;font color&#x3D;#AE6011 &gt;hex() 整数的十六进制形式&lt;&#x2F;font&gt;"><font color=#AE6011 >hex() 整数的十六进制形式</font></a></h2><h2 id="⚫-169"><a href="#⚫-169" class="headerlink" title="⚫ "></a>⚫ <a href="/python/11_built-in_function/30_id-df37995c8494/" title="&lt;font color&#x3D;#AE6011 &gt;id() 返回对象的唯一标识&lt;&#x2F;font&gt;"><font color=#AE6011 >id() 返回对象的唯一标识</font></a></h2><h2 id="⚫-170"><a href="#⚫-170" class="headerlink" title="⚫ "></a>⚫ <a href="/python/11_built-in_function/31_input-b37f4564f79e/" title="&lt;font color&#x3D;#AE6011 &gt;input() 接受输入返回字符串&lt;&#x2F;font&gt;"><font color=#AE6011 >input() 接受输入返回字符串</font></a></h2><h2 id="⚫-171"><a href="#⚫-171" class="headerlink" title="⚫ "></a>⚫ <a href="/python/11_built-in_function/32_int-e971af77b922/" title="&lt;font color&#x3D;#AE6011 &gt;int 创建整数&lt;&#x2F;font&gt;"><font color=#AE6011 >int 创建整数</font></a></h2><h2 id="⚫-172"><a href="#⚫-172" class="headerlink" title="⚫ "></a>⚫ <a href="/python/11_built-in_function/33_isinstance-13f7fc2e1df6/" title="&lt;font color&#x3D;#AE6011 &gt;isinstance() 是给定类的实例？&lt;&#x2F;font&gt;"><font color=#AE6011 >isinstance() 是给定类的实例？</font></a></h2><h2 id="⚫-173"><a href="#⚫-173" class="headerlink" title="⚫ "></a>⚫ <a href="/python/11_built-in_function/34_issubclass-9820fb7c0dd0/" title="&lt;font color&#x3D;#AE6011 &gt;issubclass() 是给定类的子类吗？&lt;&#x2F;font&gt;"><font color=#AE6011 >issubclass() 是给定类的子类吗？</font></a></h2><h2 id="⚫-174"><a href="#⚫-174" class="headerlink" title="⚫ "></a>⚫ <a href="/python/11_built-in_function/35_iter-5555e79d7850/" title="&lt;font color&#x3D;#AE6011 &gt;iter() 转迭代器&lt;&#x2F;font&gt;"><font color=#AE6011 >iter() 转迭代器</font></a></h2><h2 id="⚫-175"><a href="#⚫-175" class="headerlink" title="⚫ "></a>⚫ <a href="/python/11_built-in_function/36_len-5ebab417e525/" title="&lt;font color&#x3D;#AE6011 &gt;len() 返回元素个数&lt;&#x2F;font&gt;"><font color=#AE6011 >len() 返回元素个数</font></a></h2><h2 id="⚫-176"><a href="#⚫-176" class="headerlink" title="⚫ "></a>⚫ <a href="/python/11_built-in_function/37_list-ac1386f7aa8f/" title="&lt;font color&#x3D;#AE6011 &gt;list 创建列表&lt;&#x2F;font&gt;"><font color=#AE6011 >list 创建列表</font></a></h2><h2 id="⚫-177"><a href="#⚫-177" class="headerlink" title="⚫ "></a>⚫ <a href="/python/11_built-in_function/38_locals-6bc35cc67295/" title="&lt;font color&#x3D;#AE6011 &gt;locals() 返回局部变量的字典&lt;&#x2F;font&gt;"><font color=#AE6011 >locals() 返回局部变量的字典</font></a></h2><h2 id="⚫-178"><a href="#⚫-178" class="headerlink" title="⚫ "></a>⚫ <a href="/python/11_built-in_function/39_map-35f7fd9203d0/" title="&lt;font color&#x3D;#AE6011 &gt;map 以给定函数转换元素&lt;&#x2F;font&gt;"><font color=#AE6011 >map 以给定函数转换元素</font></a></h2><h2 id="⚫-179"><a href="#⚫-179" class="headerlink" title="⚫ "></a>⚫ <a href="/python/11_built-in_function/40_max-0d396952bce9/" title="&lt;font color&#x3D;#AE6011 &gt;max() 求最大项&lt;&#x2F;font&gt;"><font color=#AE6011 >max() 求最大项</font></a></h2><h2 id="⚫-180"><a href="#⚫-180" class="headerlink" title="⚫ "></a>⚫ <a href="/python/11_built-in_function/41_min-1fd08ad72391/" title="&lt;font color&#x3D;#AE6011 &gt;min() 求最小项&lt;&#x2F;font&gt;"><font color=#AE6011 >min() 求最小项</font></a></h2><h2 id="⚫-181"><a href="#⚫-181" class="headerlink" title="⚫ "></a>⚫ <a href="/python/11_built-in_function/42_next-938afbae754d/" title="&lt;font color&#x3D;#AE6011 &gt;next() 返回迭代器下一个元素&lt;&#x2F;font&gt;"><font color=#AE6011 >next() 返回迭代器下一个元素</font></a></h2><h2 id="⚫-182"><a href="#⚫-182" class="headerlink" title="⚫ "></a>⚫ <a href="/python/11_built-in_function/43_object-6dcdc800455f/" title="&lt;font color&#x3D;#AE6011 &gt;object 所有类的基类&lt;&#x2F;font&gt;"><font color=#AE6011 >object 所有类的基类</font></a></h2><h2 id="⚫-183"><a href="#⚫-183" class="headerlink" title="⚫ "></a>⚫ <a href="/python/11_built-in_function/44_oct-1db602c415af/" title="&lt;font color&#x3D;#AE6011 &gt;oct() 整数的八进制形式&lt;&#x2F;font&gt;"><font color=#AE6011 >oct() 整数的八进制形式</font></a></h2><h2 id="⚫-184"><a href="#⚫-184" class="headerlink" title="⚫ "></a>⚫ <a href="/python/11_built-in_function/45_open-8c47a8d90aa0/" title="&lt;font color&#x3D;#AE6011 &gt;open() 打开文件&lt;&#x2F;font&gt;"><font color=#AE6011 >open() 打开文件</font></a></h2><h2 id="⚫-185"><a href="#⚫-185" class="headerlink" title="⚫ "></a>⚫ <a href="/python/11_built-in_function/46_ord-8edcb872b0d6/" title="&lt;font color&#x3D;#AE6011 &gt;ord() 返回单个字符 Unicode 码位值&lt;&#x2F;font&gt;"><font color=#AE6011 >ord() 返回单个字符 Unicode 码位值</font></a></h2><h2 id="⚫-186"><a href="#⚫-186" class="headerlink" title="⚫ "></a>⚫ <a href="/python/11_built-in_function/47_pow-96b10a725f72/" title="&lt;font color&#x3D;#AE6011 &gt;pow() 幂运算并取余&lt;&#x2F;font&gt;"><font color=#AE6011 >pow() 幂运算并取余</font></a></h2><h2 id="⚫-187"><a href="#⚫-187" class="headerlink" title="⚫ "></a>⚫ <a href="/python/11_built-in_function/48_print-c35715e3eff4/" title="&lt;font color&#x3D;#AE6011 &gt;print() 打印对象&lt;&#x2F;font&gt;"><font color=#AE6011 >print() 打印对象</font></a></h2><h2 id="⚫-188"><a href="#⚫-188" class="headerlink" title="⚫ "></a>⚫ <a href="/python/11_built-in_function/49_property-8dc46e043054/" title="&lt;font color&#x3D;#AE6011 &gt;property 返回 property 属性&lt;&#x2F;font&gt;"><font color=#AE6011 >property 返回 property 属性</font></a></h2><h2 id="⚫-189"><a href="#⚫-189" class="headerlink" title="⚫ "></a>⚫ <a href="/python/11_built-in_function/50_range-298285b2e70f/" title="&lt;font color&#x3D;#AE6011 &gt;range 创建 range 序列&lt;&#x2F;font&gt;"><font color=#AE6011 >range 创建 range 序列</font></a></h2><h2 id="⚫-190"><a href="#⚫-190" class="headerlink" title="⚫ "></a>⚫ <a href="/python/11_built-in_function/51_repr-6a88ffc79473/" title="&lt;font color&#x3D;#AE6011 &gt;repr() 返回对象的可打印字符串&lt;&#x2F;font&gt;"><font color=#AE6011 >repr() 返回对象的可打印字符串</font></a></h2><h2 id="⚫-191"><a href="#⚫-191" class="headerlink" title="⚫ "></a>⚫ <a href="/python/11_built-in_function/52_reversed-c7545c0ed2da/" title="&lt;font color&#x3D;#AE6011 &gt;reversed 序列逆置&lt;&#x2F;font&gt;"><font color=#AE6011 >reversed 序列逆置</font></a></h2><h2 id="⚫-192"><a href="#⚫-192" class="headerlink" title="⚫ "></a>⚫ <a href="/python/11_built-in_function/53_round-b3da53a89e3e/" title="&lt;font color&#x3D;#AE6011 &gt;round() 数字舍入&lt;&#x2F;font&gt;"><font color=#AE6011 >round() 数字舍入</font></a></h2><h2 id="⚫-193"><a href="#⚫-193" class="headerlink" title="⚫ "></a>⚫ <a href="/python/11_built-in_function/54_set-31861456f80a/" title="&lt;font color&#x3D;#AE6011 &gt;set 创建集合&lt;&#x2F;font&gt;"><font color=#AE6011 >set 创建集合</font></a></h2><h2 id="⚫-194"><a href="#⚫-194" class="headerlink" title="⚫ "></a>⚫ <a href="/python/11_built-in_function/55_setattr-2d591efa9c32/" title="&lt;font color&#x3D;#AE6011 &gt;setattr() 设置或新增属性&lt;&#x2F;font&gt;"><font color=#AE6011 >setattr() 设置或新增属性</font></a></h2><h2 id="⚫-195"><a href="#⚫-195" class="headerlink" title="⚫ "></a>⚫ <a href="/python/11_built-in_function/56_slice-e955f87942b2/" title="&lt;font color&#x3D;#AE6011 &gt;slice 创建切片对象&lt;&#x2F;font&gt;"><font color=#AE6011 >slice 创建切片对象</font></a></h2><h2 id="⚫-196"><a href="#⚫-196" class="headerlink" title="⚫ "></a>⚫ <a href="/python/11_built-in_function/57_sorted-9cd59184cf14/" title="&lt;font color&#x3D;#AE6011 &gt;sorted() 返回排序列表&lt;&#x2F;font&gt;"><font color=#AE6011 >sorted() 返回排序列表</font></a></h2><h2 id="⚫-197"><a href="#⚫-197" class="headerlink" title="⚫ "></a>⚫ <a href="/python/11_built-in_function/58_staticmethod-2fea0e099726/" title="&lt;font color&#x3D;#AE6011 &gt;staticmethod 封装函数为静态方法&lt;&#x2F;font&gt;"><font color=#AE6011 >staticmethod 封装函数为静态方法</font></a></h2><h2 id="⚫-198"><a href="#⚫-198" class="headerlink" title="⚫ "></a>⚫ <a href="/python/11_built-in_function/59_str-880887137be6/" title="&lt;font color&#x3D;#AE6011 &gt;str 创建字符串&lt;&#x2F;font&gt;"><font color=#AE6011 >str 创建字符串</font></a></h2><h2 id="⚫-199"><a href="#⚫-199" class="headerlink" title="⚫ "></a>⚫ <a href="/python/11_built-in_function/60_sum-6f8576c47660/" title="&lt;font color&#x3D;#AE6011 &gt;sum() 数字求和或序列拼接&lt;&#x2F;font&gt;"><font color=#AE6011 >sum() 数字求和或序列拼接</font></a></h2><h2 id="⚫-200"><a href="#⚫-200" class="headerlink" title="⚫ "></a>⚫ <a href="/python/11_built-in_function/61_super-67ce0cb0e744/" title="&lt;font color&#x3D;#AE6011 &gt;super 调用委托给父类或兄弟类&lt;&#x2F;font&gt;"><font color=#AE6011 >super 调用委托给父类或兄弟类</font></a></h2><h2 id="⚫-201"><a href="#⚫-201" class="headerlink" title="⚫ "></a>⚫ <a href="/python/11_built-in_function/62_tuple-2792aabdfc00/" title="&lt;font color&#x3D;#AE6011 &gt;tuple 创建元组&lt;&#x2F;font&gt;"><font color=#AE6011 >tuple 创建元组</font></a></h2><h2 id="⚫-202"><a href="#⚫-202" class="headerlink" title="⚫ "></a>⚫ <a href="/python/11_built-in_function/63_type-e4bd0e1cf0f7/" title="&lt;font color&#x3D;#AE6011 &gt;type 判断类型或创建类&lt;&#x2F;font&gt;"><font color=#AE6011 >type 判断类型或创建类</font></a></h2><h2 id="⚫-203"><a href="#⚫-203" class="headerlink" title="⚫ "></a>⚫ <a href="/python/11_built-in_function/64_vars-fc7be5a9f530/" title="&lt;font color&#x3D;#AE6011 &gt;vars() 返回对象的变量字典&lt;&#x2F;font&gt;"><font color=#AE6011 >vars() 返回对象的变量字典</font></a></h2><h2 id="⚫-204"><a href="#⚫-204" class="headerlink" title="⚫ "></a>⚫ <a href="/python/11_built-in_function/65_zip-23ecc1f20588/" title="&lt;font color&#x3D;#AE6011 &gt;zip 重组可迭代对象&lt;&#x2F;font&gt;"><font color=#AE6011 >zip 重组可迭代对象</font></a></h2><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><h2 id="⚫-205"><a href="#⚫-205" class="headerlink" title="⚫ "></a>⚫ <a href="/python/12_function/01_function_summary-2667ef3bdac3/" title="&lt;font color&#x3D;#AE6011 &gt;函数概述&lt;&#x2F;font&gt;"><font color=#AE6011 >函数概述</font></a></h2><h2 id="⚫-206"><a href="#⚫-206" class="headerlink" title="⚫ "></a>⚫ <a href="/python/12_function/02_function_definition-f4d7c2e81fbb/" title="&lt;font color&#x3D;#AE6011 &gt;函数定义&lt;&#x2F;font&gt;"><font color=#AE6011 >函数定义</font></a></h2><h2 id="⚫-207"><a href="#⚫-207" class="headerlink" title="⚫ "></a>⚫ <a href="/python/12_function/03_formal_parameter-e773aef4e75c/" title="&lt;font color&#x3D;#AE6011 &gt;函数形参&lt;&#x2F;font&gt;"><font color=#AE6011 >函数形参</font></a></h2><h2 id="⚫-208"><a href="#⚫-208" class="headerlink" title="⚫ "></a>⚫ <a href="/python/12_function/04_return_value-2cdda3ae83c4/" title="&lt;font color&#x3D;#AE6011 &gt;函数返回值&lt;&#x2F;font&gt;"><font color=#AE6011 >函数返回值</font></a></h2><h2 id="⚫-209"><a href="#⚫-209" class="headerlink" title="⚫ "></a>⚫ <a href="/python/12_function/05_recursion-514c422b2d47/" title="&lt;font color&#x3D;#AE6011 &gt;递归函数&lt;&#x2F;font&gt;"><font color=#AE6011 >递归函数</font></a></h2><h2 id="⚫-210"><a href="#⚫-210" class="headerlink" title="⚫ "></a>⚫ <a href="/python/12_function/06_doc-20ce6cd30ddb/" title="&lt;font color&#x3D;#AE6011 &gt;函数文档&lt;&#x2F;font&gt;"><font color=#AE6011 >函数文档</font></a></h2><h2 id="⚫-211"><a href="#⚫-211" class="headerlink" title="⚫ "></a>⚫ <a href="/python/12_function/07_function_call-d874c9f52350/" title="&lt;font color&#x3D;#AE6011 &gt;函数调用&lt;&#x2F;font&gt;"><font color=#AE6011 >函数调用</font></a></h2><h2 id="⚫-212"><a href="#⚫-212" class="headerlink" title="⚫ "></a>⚫ <a href="/python/12_function/08_lambda-52545d66e728/" title="&lt;font color&#x3D;#AE6011 &gt;lambda 函数&lt;&#x2F;font&gt;"><font color=#AE6011 >lambda 函数</font></a></h2><h2 id="⚫-213"><a href="#⚫-213" class="headerlink" title="⚫ "></a>⚫ <a href="/python/12_function/09_generator-df69a72591b5/" title="&lt;font color&#x3D;#AE6011 &gt;生成器函数&lt;&#x2F;font&gt;"><font color=#AE6011 >生成器函数</font></a></h2><h1 id="错误和异常"><a href="#错误和异常" class="headerlink" title="错误和异常"></a>错误和异常</h1><h2 id="⚫-214"><a href="#⚫-214" class="headerlink" title="⚫ "></a>⚫ <a href="/python/13_exception/01_ex_summary-033968da8661/" title="&lt;font color&#x3D;#AE6011 &gt;错误和异常概述&lt;&#x2F;font&gt;"><font color=#AE6011 >错误和异常概述</font></a></h2><h2 id="⚫-215"><a href="#⚫-215" class="headerlink" title="⚫ "></a>⚫ <a href="/python/13_exception/02_handling-d20186248e3c/" title="&lt;font color&#x3D;#AE6011 &gt;处理异常&lt;&#x2F;font&gt;"><font color=#AE6011 >处理异常</font></a></h2><h2 id="⚫-216"><a href="#⚫-216" class="headerlink" title="⚫ "></a>⚫ <a href="/python/13_exception/03_raising-1d22dc227b1a/" title="&lt;font color&#x3D;#AE6011 &gt;抛出异常&lt;&#x2F;font&gt;"><font color=#AE6011 >抛出异常</font></a></h2><h2 id="⚫-217"><a href="#⚫-217" class="headerlink" title="⚫ "></a>⚫ <a href="/python/13_exception/04_user_defined-7d9496ca5f07/" title="&lt;font color&#x3D;#AE6011 &gt;自定义异常&lt;&#x2F;font&gt;"><font color=#AE6011 >自定义异常</font></a></h2><h2 id="⚫-218"><a href="#⚫-218" class="headerlink" title="⚫ "></a>⚫ <a href="/python/13_exception/05_finally-83663a0ba2c5/" title="&lt;font color&#x3D;#AE6011 &gt;finally 清理操作&lt;&#x2F;font&gt;"><font color=#AE6011 >finally 清理操作</font></a></h2><h1 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h1><h2 id="⚫-219"><a href="#⚫-219" class="headerlink" title="⚫ "></a>⚫ <a href="/python/14_file/01_file_summary-d01fc64a461c/" title="&lt;font color&#x3D;#AE6011 &gt;文件对象概述&lt;&#x2F;font&gt;"><font color=#AE6011 >文件对象概述</font></a></h2><h2 id="⚫-220"><a href="#⚫-220" class="headerlink" title="⚫ "></a>⚫ <a href="/python/14_file/02_read-b076bc13cc25/" title="&lt;font color&#x3D;#AE6011 &gt;读取文件内容&lt;&#x2F;font&gt;"><font color=#AE6011 >读取文件内容</font></a></h2><h2 id="⚫-221"><a href="#⚫-221" class="headerlink" title="⚫ "></a>⚫ <a href="/python/14_file/03_write-ec6410c6fc35/" title="&lt;font color&#x3D;#AE6011 &gt;文件写入内容&lt;&#x2F;font&gt;"><font color=#AE6011 >文件写入内容</font></a></h2><h1 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h1><h2 id="⚫-222"><a href="#⚫-222" class="headerlink" title="⚫ "></a>⚫ <a href="/python/15_module/01_module_summary-ee6e296c3ead/" title="&lt;font color&#x3D;#AE6011 &gt;模块概述&lt;&#x2F;font&gt;"><font color=#AE6011 >模块概述</font></a></h2><h2 id="⚫-223"><a href="#⚫-223" class="headerlink" title="⚫ "></a>⚫ <a href="/python/15_module/02_create_module-fe48140b42f1/" title="&lt;font color&#x3D;#AE6011 &gt;创建模块&lt;&#x2F;font&gt;"><font color=#AE6011 >创建模块</font></a></h2><h2 id="⚫-224"><a href="#⚫-224" class="headerlink" title="⚫ "></a>⚫ <a href="/python/15_module/04_executable_file-c3365f12ffd1/" title="&lt;font color&#x3D;#AE6011 &gt;可执行文件&lt;&#x2F;font&gt;"><font color=#AE6011 >可执行文件</font></a></h2><h2 id="⚫-225"><a href="#⚫-225" class="headerlink" title="⚫ "></a>⚫ <a href="/python/15_module/05_import_code-ba2a46fd0843/" title="&lt;font color&#x3D;#AE6011 &gt;导入操作&lt;&#x2F;font&gt;"><font color=#AE6011 >导入操作</font></a></h2><h1 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h1><h2 id="⚫-226"><a href="#⚫-226" class="headerlink" title="⚫ "></a>⚫ <a href="/python/16_class/01_class_summary-313cbd60571f/" title="&lt;font color&#x3D;#AE6011 &gt;面向对象概述&lt;&#x2F;font&gt;"><font color=#AE6011 >面向对象概述</font></a></h2><h2 id="⚫-227"><a href="#⚫-227" class="headerlink" title="⚫ "></a>⚫ <a href="/python/16_class/02_class_definition-91a8825aecc4/" title="&lt;font color&#x3D;#AE6011 &gt;类定义&lt;&#x2F;font&gt;"><font color=#AE6011 >类定义</font></a></h2><h2 id="⚫-228"><a href="#⚫-228" class="headerlink" title="⚫ "></a>⚫ <a href="/python/16_class/03_instance-26f26b338f43/" title="&lt;font color&#x3D;#AE6011 &gt;实例&lt;&#x2F;font&gt;"><font color=#AE6011 >实例</font></a></h2><h2 id="⚫-229"><a href="#⚫-229" class="headerlink" title="⚫ "></a>⚫ <a href="/python/16_class/04_object-d50c7282520d/" title="&lt;font color&#x3D;#AE6011 &gt;对象&lt;&#x2F;font&gt;"><font color=#AE6011 >对象</font></a></h2><h2 id="⚫-230"><a href="#⚫-230" class="headerlink" title="⚫ "></a>⚫ <a href="/python/16_class/05_name-ef1a09230831/" title="&lt;font color&#x3D;#AE6011 &gt;名称&lt;&#x2F;font&gt;"><font color=#AE6011 >名称</font></a></h2><h2 id="⚫-231"><a href="#⚫-231" class="headerlink" title="⚫ "></a>⚫ <a href="/python/16_class/06_variable-86dfb6c6955a/" title="&lt;font color&#x3D;#AE6011 &gt;变量&lt;&#x2F;font&gt;"><font color=#AE6011 >变量</font></a></h2><h2 id="⚫-232"><a href="#⚫-232" class="headerlink" title="⚫ "></a>⚫ <a href="/python/16_class/07_attribute-d94e94b8cb29/" title="&lt;font color&#x3D;#AE6011 &gt;属性&lt;&#x2F;font&gt;"><font color=#AE6011 >属性</font></a></h2><h2 id="⚫-233"><a href="#⚫-233" class="headerlink" title="⚫ "></a>⚫ <a href="/python/16_class/08_method-745a2b8afe40/" title="&lt;font color&#x3D;#AE6011 &gt;方法&lt;&#x2F;font&gt;"><font color=#AE6011 >方法</font></a></h2><h2 id="⚫-234"><a href="#⚫-234" class="headerlink" title="⚫ "></a>⚫ <a href="/python/16_class/09_namespace-e511f0988a04/" title="&lt;font color&#x3D;#AE6011 &gt;命名空间&lt;&#x2F;font&gt;"><font color=#AE6011 >命名空间</font></a></h2><h2 id="⚫-235"><a href="#⚫-235" class="headerlink" title="⚫ "></a>⚫ <a href="/python/16_class/10_scope-26bb8c7537e6/" title="&lt;font color&#x3D;#AE6011 &gt;作用域&lt;&#x2F;font&gt;"><font color=#AE6011 >作用域</font></a></h2><h2 id="⚫-236"><a href="#⚫-236" class="headerlink" title="⚫ "></a>⚫ <a href="/python/16_class/11_create_instance-b76dac7cac16/" title="&lt;font color&#x3D;#AE6011 &gt;创建实例&lt;&#x2F;font&gt;"><font color=#AE6011 >创建实例</font></a></h2><h2 id="⚫-237"><a href="#⚫-237" class="headerlink" title="⚫ "></a>⚫ <a href="/python/16_class/12_attribute_operation-a07d7d2d9358/" title="&lt;font color&#x3D;#AE6011 &gt;属性操作&lt;&#x2F;font&gt;"><font color=#AE6011 >属性操作</font></a></h2><h2 id="⚫-238"><a href="#⚫-238" class="headerlink" title="⚫ "></a>⚫ <a href="/python/16_class/13_method_operation-cba4485cf5b7/" title="&lt;font color&#x3D;#AE6011 &gt;方法操作&lt;&#x2F;font&gt;"><font color=#AE6011 >方法操作</font></a></h2><h2 id="⚫-239"><a href="#⚫-239" class="headerlink" title="⚫ "></a>⚫ <a href="/python/16_class/14_inheritance-3f3e743ec10e/" title="&lt;font color&#x3D;#AE6011 &gt;类继承&lt;&#x2F;font&gt;"><font color=#AE6011 >类继承</font></a></h2>]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>野诗集</title>
    <url>/poetry/poetry-272f7965d2fe/</url>
    <content><![CDATA[<p><a href="https://billwuhao.com/" title="诗和远方都在脚下"><img src="/images/dbj.jpg"></a></p>
<blockquote>
<p>梦想, 美好, 困苦, 绝望, 轮回, 迷途, 沉思 … …，可爱，可悲，可泣，可怜，可敬… …</p>
</blockquote>
<p>每一首诗都像一幅旧照片, 虽然拍的丑, 还是整理留作纪念吧。</p>
<blockquote>
<p>当时是那么的真实，现在看起来完全是很多个样子，每个样子都在一个世界中远去，包括现在。</p>
</blockquote>
<hr>
<h2 id="⚫"><a href="#⚫" class="headerlink" title="⚫ "></a>⚫ <a href="/poetry/poetry1-6891ece0699b/" title="&lt;font color&#x3D;#AE6011 &gt;我要发光&lt;&#x2F;font&gt;"><font color=#AE6011 >我要发光</font></a></h2><h2 id="⚫-1"><a href="#⚫-1" class="headerlink" title="⚫ "></a>⚫ <a href="/poetry/poetry2-4572e9824c44/" title="&lt;font color&#x3D;#AE6011 &gt;念奴娇 · 笼鸟归林&lt;&#x2F;font&gt;"><font color=#AE6011 >念奴娇 · 笼鸟归林</font></a></h2><h2 id="⚫-2"><a href="#⚫-2" class="headerlink" title="⚫ "></a>⚫ <a href="/poetry/poetry3-25f8487f1fd1/" title="&lt;font color&#x3D;#AE6011 &gt;离人泪&lt;&#x2F;font&gt;"><font color=#AE6011 >离人泪</font></a></h2><h2 id="⚫-3"><a href="#⚫-3" class="headerlink" title="⚫ "></a>⚫ <a href="/poetry/poetry4-43f4e440b335/" title="&lt;font color&#x3D;#AE6011 &gt;心门掩·叹息&lt;&#x2F;font&gt;"><font color=#AE6011 >心门掩·叹息</font></a></h2><h2 id="⚫-4"><a href="#⚫-4" class="headerlink" title="⚫ "></a>⚫ <a href="/poetry/poetry5-853893c97603/" title="&lt;font color&#x3D;#AE6011 &gt;梦境狂·落魂&lt;&#x2F;font&gt;"><font color=#AE6011 >梦境狂·落魂</font></a></h2><h2 id="⚫-5"><a href="#⚫-5" class="headerlink" title="⚫ "></a>⚫ <a href="/poetry/poetry6-70b29e6d546e/" title="&lt;font color&#x3D;#AE6011 &gt;苏幕遮·早行怀父&lt;&#x2F;font&gt;"><font color=#AE6011 >苏幕遮·早行怀父</font></a></h2><h2 id="⚫-6"><a href="#⚫-6" class="headerlink" title="⚫ "></a>⚫ <a href="/poetry/poetry7-caa908281f62/" title="&lt;font color&#x3D;#AE6011 &gt;自我寻&lt;&#x2F;font&gt;"><font color=#AE6011 >自我寻</font></a></h2><h2 id="⚫-7"><a href="#⚫-7" class="headerlink" title="⚫ "></a>⚫ <a href="/poetry/poetry8-7d8edfebf87a/" title="&lt;font color&#x3D;#AE6011 &gt;树叶&lt;&#x2F;font&gt;"><font color=#AE6011 >树叶</font></a></h2><h2 id="⚫-8"><a href="#⚫-8" class="headerlink" title="⚫ "></a>⚫ <a href="/poetry/poetry9-7b84797e4f72/" title="&lt;font color&#x3D;#AE6011 &gt;给你自由&lt;&#x2F;font&gt;"><font color=#AE6011 >给你自由</font></a></h2><h2 id="⚫-9"><a href="#⚫-9" class="headerlink" title="⚫ "></a>⚫ <a href="/poetry/poetry10-7893faf46ede/" title="&lt;font color&#x3D;#AE6011 &gt;想象&lt;&#x2F;font&gt;"><font color=#AE6011 >想象</font></a></h2><h2 id="⚫-10"><a href="#⚫-10" class="headerlink" title="⚫ "></a>⚫ <a href="/poetry/poetry11-4707210a4a03/" title="&lt;font color&#x3D;#AE6011 &gt;寒光&lt;&#x2F;font&gt;"><font color=#AE6011 >寒光</font></a></h2><h2 id="⚫-11"><a href="#⚫-11" class="headerlink" title="⚫ "></a>⚫ <a href="/poetry/poetry12-c537b3354e3b/" title="&lt;font color&#x3D;#AE6011 &gt;贫瘠的土地&lt;&#x2F;font&gt;"><font color=#AE6011 >贫瘠的土地</font></a></h2><h2 id="⚫-12"><a href="#⚫-12" class="headerlink" title="⚫ "></a>⚫ <a href="/poetry/poetry13-dbff4b29c3e7/" title="&lt;font color&#x3D;#AE6011 &gt;我愿沉醉&lt;&#x2F;font&gt;"><font color=#AE6011 >我愿沉醉</font></a></h2><h2 id="⚫-13"><a href="#⚫-13" class="headerlink" title="⚫ "></a>⚫ <a href="/poetry/poetry14-22ae98e03e61/" title="&lt;font color&#x3D;#AE6011 &gt;年轻的心&lt;&#x2F;font&gt;"><font color=#AE6011 >年轻的心</font></a></h2><h2 id="⚫-14"><a href="#⚫-14" class="headerlink" title="⚫ "></a>⚫ <a href="/poetry/poetry15-403e9f7cd36e/" title="&lt;font color&#x3D;#AE6011 &gt;不会伤痛&lt;&#x2F;font&gt;"><font color=#AE6011 >不会伤痛</font></a></h2><h2 id="⚫-15"><a href="#⚫-15" class="headerlink" title="⚫ "></a>⚫ <a href="/poetry/poetry16-8bb2e1333128/" title="&lt;font color&#x3D;#AE6011 &gt;我好恨&lt;&#x2F;font&gt;"><font color=#AE6011 >我好恨</font></a></h2><h2 id="⚫-16"><a href="#⚫-16" class="headerlink" title="⚫ "></a>⚫ <a href="/poetry/poetry17-a14d0b273d7e/" title="&lt;font color&#x3D;#AE6011 &gt;上帝为我作证&lt;&#x2F;font&gt;"><font color=#AE6011 >上帝为我作证</font></a></h2><h2 id="⚫-17"><a href="#⚫-17" class="headerlink" title="⚫ "></a>⚫ <a href="/poetry/poetry18-7992129799a1/" title="&lt;font color&#x3D;#AE6011 &gt;我怕过什么怕过谁？&lt;&#x2F;font&gt;"><font color=#AE6011 >我怕过什么怕过谁？</font></a></h2><h2 id="⚫-18"><a href="#⚫-18" class="headerlink" title="⚫ "></a>⚫ <a href="/poetry/poetry19-b7b1b01920a5/" title="&lt;font color&#x3D;#AE6011 &gt;孤独的时光&lt;&#x2F;font&gt;"><font color=#AE6011 >孤独的时光</font></a></h2><h2 id="⚫-19"><a href="#⚫-19" class="headerlink" title="⚫ "></a>⚫ <a href="/poetry/poetry20-a422ae85e047/" title="&lt;font color&#x3D;#AE6011 &gt;柳絮与桃花&lt;&#x2F;font&gt;"><font color=#AE6011 >柳絮与桃花</font></a></h2><h2 id="⚫-20"><a href="#⚫-20" class="headerlink" title="⚫ "></a>⚫ <a href="/poetry/poetry21-60bf59e74854/" title="&lt;font color&#x3D;#AE6011 &gt;晴天游林&lt;&#x2F;font&gt;"><font color=#AE6011 >晴天游林</font></a></h2><h2 id="⚫-21"><a href="#⚫-21" class="headerlink" title="⚫ "></a>⚫ <a href="/poetry/poetry22-8aa5fbf68780/" title="&lt;font color&#x3D;#AE6011 &gt;自家乡小曲&lt;&#x2F;font&gt;"><font color=#AE6011 >自家乡小曲</font></a></h2><h2 id="⚫-22"><a href="#⚫-22" class="headerlink" title="⚫ "></a>⚫ <a href="/poetry/poetry23-37b9f5f6f926/" title="&lt;font color&#x3D;#AE6011 &gt;活&lt;&#x2F;font&gt;"><font color=#AE6011 >活</font></a></h2><h2 id="⚫-23"><a href="#⚫-23" class="headerlink" title="⚫ "></a>⚫ <a href="/poetry/poetry24-150ba3490586/" title="&lt;font color&#x3D;#AE6011 &gt;无尽的快乐&lt;&#x2F;font&gt;"><font color=#AE6011 >无尽的快乐</font></a></h2><h2 id="⚫-24"><a href="#⚫-24" class="headerlink" title="⚫ "></a>⚫ <a href="/poetry/poetry25-ce52f91b675e/" title="&lt;font color&#x3D;#AE6011 &gt;时代九言&lt;&#x2F;font&gt;"><font color=#AE6011 >时代九言</font></a></h2><h2 id="⚫-25"><a href="#⚫-25" class="headerlink" title="⚫ "></a>⚫ <a href="/poetry/poetry26-a55cefdf613c/" title="&lt;font color&#x3D;#AE6011 &gt;以诗会友&lt;&#x2F;font&gt;"><font color=#AE6011 >以诗会友</font></a></h2><h2 id="⚫-26"><a href="#⚫-26" class="headerlink" title="⚫ "></a>⚫ <a href="/poetry/poetry27-70019d725910/" title="&lt;font color&#x3D;#AE6011 &gt;我是谁&lt;&#x2F;font&gt;"><font color=#AE6011 >我是谁</font></a></h2><h2 id="⚫-27"><a href="#⚫-27" class="headerlink" title="⚫ "></a>⚫ <a href="/poetry/poetry28-f318593f69f2/" title="&lt;font color&#x3D;#AE6011 &gt;实事求是&lt;&#x2F;font&gt;"><font color=#AE6011 >实事求是</font></a></h2><h2 id="⚫-28"><a href="#⚫-28" class="headerlink" title="⚫ "></a>⚫ <a href="/poetry/poetry29-fdaa29ec3bd0/" title="&lt;font color&#x3D;#AE6011 &gt;明心见性&lt;&#x2F;font&gt;"><font color=#AE6011 >明心见性</font></a></h2><h2 id="⚫-29"><a href="#⚫-29" class="headerlink" title="⚫ "></a>⚫ <a href="/poetry/poetry30-58d94c391e76/" title="&lt;font color&#x3D;#AE6011 &gt;过年&lt;&#x2F;font&gt;"><font color=#AE6011 >过年</font></a></h2><h2 id="⚫-30"><a href="#⚫-30" class="headerlink" title="⚫ "></a>⚫ <a href="/poetry/poetry31-88100919e038/" title="&lt;font color&#x3D;#AE6011 &gt;春节大黑山天乐&lt;&#x2F;font&gt;"><font color=#AE6011 >春节大黑山天乐</font></a></h2><h2 id="⚫-31"><a href="#⚫-31" class="headerlink" title="⚫ "></a>⚫ <a href="/poetry/poetry32-d59bcc93f946/" title="&lt;font color&#x3D;#AE6011 &gt;倒计时&lt;&#x2F;font&gt;"><font color=#AE6011 >倒计时</font></a></h2>]]></content>
      <categories>
        <category>白话野诗</category>
      </categories>
      <tags>
        <tag>诗词</tag>
      </tags>
  </entry>
  <entry>
    <title>想象</title>
    <url>/poetry/poetry10-7893faf46ede/</url>
    <content><![CDATA[<p><font color=#00BB00>&gt;<center></p>
<p>想象</p>
<p>天地这只大眼睛闭上了<br>星星是想象出来的<br>再次睁开眼<br>又是一天美好时光  </p>
<p>生活的眼睛闭上了<br>想象一些星星吧<br>再次睁开眼<br>又是前途光明  </p>
<p>&emsp;&emsp;&emsp;&emsp;2008</p>
</center></font>
]]></content>
      <categories>
        <category>白话野诗</category>
      </categories>
      <tags>
        <tag>诗词</tag>
      </tags>
  </entry>
  <entry>
    <title>我要发光</title>
    <url>/poetry/poetry1-6891ece0699b/</url>
    <content><![CDATA[<p><font color=#00BB00>&gt;<center></p>
<p>我要发光</p>
<p>年少闯江湖<br>奴役为理想<br>人生路上绝不彷徨<br>大海我的胸膛<br>拥抱着阳光<br>世界是我的家乡<br>上善若水，厚德载物<br>烙在我的心上<br>言行举止为助我发光<br>前进的方向良心来导航<br>你给我的讥笑和悲伤<br>抛在道路旁<br>捧着爱心为你指路疗伤<br>爬出世俗的城墙<br>观看着天亮<br>我爱的人啊<br>我在你心上  </p>
<p>&emsp;&emsp;&emsp;&emsp; 2007年 . 高三</p>
<p><img src="/images/mx.jpg">  </p>
</center></font>

]]></content>
      <categories>
        <category>白话野诗</category>
      </categories>
      <tags>
        <tag>诗词</tag>
      </tags>
  </entry>
  <entry>
    <title>贫瘠的土地</title>
    <url>/poetry/poetry12-c537b3354e3b/</url>
    <content><![CDATA[<p><font color=#00BB00>&gt;<center></p>
<p>贫瘠的土地</p>
<p>这里有障碍<br>这里有悲哀<br>这里有没落<br>这里燃烧不出希望与光彩<br>我因不相信而苦恼  </p>
<p>有人说<br>这里出不了人才<br>那他一定很愚蠢<br>因为我的心跳还在  </p>
<p>&emsp;&emsp;&emsp;&emsp;2008</p>
</center></font>
]]></content>
      <categories>
        <category>白话野诗</category>
      </categories>
      <tags>
        <tag>诗词</tag>
      </tags>
  </entry>
  <entry>
    <title>寒光</title>
    <url>/poetry/poetry11-4707210a4a03/</url>
    <content><![CDATA[<p><font color=#00BB00>&gt;<center></p>
<p>寒光</p>
<p>月亮明媚的晚上<br>却感觉不到一丝丝温暖  </p>
<p>&emsp;&emsp;&emsp;&emsp;2008</p>
</center></font>
]]></content>
      <categories>
        <category>白话野诗</category>
      </categories>
      <tags>
        <tag>诗词</tag>
      </tags>
  </entry>
  <entry>
    <title>年轻的心</title>
    <url>/poetry/poetry14-22ae98e03e61/</url>
    <content><![CDATA[<p><font color=#00BB00>&gt;<center></p>
<p>年轻的心</p>
<p>年轻的心如火<br>热烈地燃烧整个世界<br>年轻的心如水<br>温柔地沐浴美人<br>年轻的心如冰<br>残酷地冻结美丽的湖面<br>年轻的心如雾<br>朦胧地遮住远山<br>年轻的心如云缝中的斜阳<br>好奇地偷视每个角落  </p>
<p>&emsp;&emsp;&emsp;&emsp;2008</p>
</center></font>
]]></content>
      <categories>
        <category>白话野诗</category>
      </categories>
      <tags>
        <tag>诗词</tag>
      </tags>
  </entry>
  <entry>
    <title>我愿沉醉</title>
    <url>/poetry/poetry13-dbff4b29c3e7/</url>
    <content><![CDATA[<p><font color=#00BB00>&gt;<center></p>
<p>我愿沉醉</p>
<p>人生<br>每次清醒过来<br>再也找寻不到意义  </p>
<p>生活<br>每次醉在其中<br>甚至不知道自己是谁<br>还是那么冲动与美丽  </p>
<p>&emsp;&emsp;&emsp;&emsp;2008</p>
</center></font>
]]></content>
      <categories>
        <category>白话野诗</category>
      </categories>
      <tags>
        <tag>诗词</tag>
      </tags>
  </entry>
  <entry>
    <title>我好恨</title>
    <url>/poetry/poetry16-8bb2e1333128/</url>
    <content><![CDATA[<p><font color=#00BB00>&gt;<center></p>
<p>我好恨</p>
<p>我不相信缘分<br>但如何解释我痴情的心<br>我好恨<br>恨你邂逅的眼神<br>我知道爱难永恒<br>可如何还我单纯的心灵<br>我好恨<br>恨你无情的倩影<br>我这辈子注定要在恨泪中度过  </p>
<p>&emsp;&emsp;&emsp;&emsp;2008</p>
</center></font>
]]></content>
      <categories>
        <category>白话野诗</category>
      </categories>
      <tags>
        <tag>诗词</tag>
      </tags>
  </entry>
  <entry>
    <title>不会伤痛</title>
    <url>/poetry/poetry15-403e9f7cd36e/</url>
    <content><![CDATA[<p><font color=#00BB00>&gt;<center></p>
<p>不会伤痛</p>
<p>不想做太多的梦<br>有你存在就是成功<br>飘荡的世界<br>我也不会伤痛<br>轻狂是现实的光荣<br>捧着青春当落红<br>单纯的青春<br>吹满邪恶的风<br>谁说执着是傻瓜的奋勇<br>人间哪有三心二意的珍重<br>谁说不必在乎任何的行踪<br>那如何圆我们甜美的梦<br>埋下幸福快乐的种<br>挂上洁净彩虹<br>拍打着翅膀<br>飞舞在无边晴空<br>谁都应该相信<br>尊严还存在于生活中  </p>
<p>&emsp;&emsp;&emsp;&emsp;2008</p>
</center></font>
]]></content>
      <categories>
        <category>白话野诗</category>
      </categories>
      <tags>
        <tag>诗词</tag>
      </tags>
  </entry>
  <entry>
    <title>上帝为我作证</title>
    <url>/poetry/poetry17-a14d0b273d7e/</url>
    <content><![CDATA[<p><font color=#00BB00>&gt;<center></p>
<p>上帝为我作证</p>
<p>我决不让自己落后<br>作为摇摆不定的尾巴<br>我要做首<br>或者至少做身<br>哪怕吃苦、熬夜、疯狂······  </p>
<p>上帝为我作证<br>我决不让自己孤独<br>作为天边的孤鸿<br>我要飞向太阳<br>飞向自由的蓝天<br>哪怕朴素、执着、强求······</p>
<p>上帝为我作证<br>我决不让自己受饿、受辱<br>作为沿街乞讨的乞丐<br>我要自强、自爱、自尊<br>步入辉煌的殿堂<br>哪怕冒险、打拼、牺牲······</p>
<p>上帝为我作证<br>我会不顾一切<br>扯破衣服扑向我热爱的那片热土<br>并且绝不后悔······  </p>
<p>&emsp;&emsp;&emsp;&emsp;2009</p>
</center></font>
]]></content>
      <categories>
        <category>白话野诗</category>
      </categories>
      <tags>
        <tag>诗词</tag>
      </tags>
  </entry>
  <entry>
    <title>我怕过什么怕过谁？</title>
    <url>/poetry/poetry18-7992129799a1/</url>
    <content><![CDATA[<p><font color=#00BB00>&gt;<center></p>
<p>我怕过什么怕过谁？</p>
<p>我怕过什么怕过谁？<br>四次生死离别<br>三次从死神逃离<br>爬过万重山<br>涉过长江黄河水  </p>
<p>想吃我的赶早<br>因为我会膨胀<br>与日月同辉。。。。。。  </p>
<p>&emsp;&emsp;&emsp;&emsp;2010</p>
</center></font>
]]></content>
      <categories>
        <category>白话野诗</category>
      </categories>
      <tags>
        <tag>诗词</tag>
      </tags>
  </entry>
  <entry>
    <title>孤独的时光</title>
    <url>/poetry/poetry19-b7b1b01920a5/</url>
    <content><![CDATA[<p><font color=#00BB00>&gt;<center></p>
<p>孤独的时光</p>
<p>时光悄悄的来了<br>她偷偷看了你一眼<br>你在上网<br>游戏<br>聊天<br>她心痛<br>她惋惜<br>她揉着泪水轻轻离开<br>时光是孤独的<br>可是<br>原来<br>你比时光还孤独<br>时光多么爱你<br>你却从未发现   </p>
<p>&emsp;&emsp;&emsp;&emsp;2013</p>
</center></font>
]]></content>
      <categories>
        <category>白话野诗</category>
      </categories>
      <tags>
        <tag>诗词</tag>
      </tags>
  </entry>
  <entry>
    <title>柳絮与桃花</title>
    <url>/poetry/poetry20-a422ae85e047/</url>
    <content><![CDATA[<p><font color=#00BB00>&gt;<center></p>
<p>柳絮与桃花  </p>
<p>癫狂柳絮随风去，轻薄桃花逐水流。<br>自由柳絮随风扬，烂漫桃花逐水荡。<br>圣洁柳絮扬风起，傲骨桃花荡水明。  </p>
<p>&emsp;&emsp;&emsp;&emsp;2014</p>
</center></font>
]]></content>
      <categories>
        <category>白话野诗</category>
      </categories>
      <tags>
        <tag>诗词</tag>
      </tags>
  </entry>
  <entry>
    <title>念奴娇 · 笼鸟归林</title>
    <url>/poetry/poetry2-4572e9824c44/</url>
    <content><![CDATA[<p><font color=#00BB00>&gt;<center></p>
<p>念奴娇 · 笼鸟归林</p>
<p>千古江山，艳无比，迷醉纵情人儿。<br>城边一峰，青松照。<br>佛园曰凤山寺，匿蝉幽鸣，灵鼠戏枝，林动山更静。<br>登高远眺，胸怀云海景。<br>忆想书海鸟笼，绳索缚心愁。<br>无地倾发，血情冷冰。<br>每失意，魂飞魄散殆尽。<br>笼鸟归林，欣无羁纵情。<br>高歌云端，昂首哈哈，倒丛草喜吟。  </p>
<p>&emsp;&emsp;&emsp;&emsp; 2006年 . 高二</p>
</center></font>]]></content>
      <categories>
        <category>白话野诗</category>
      </categories>
      <tags>
        <tag>诗词</tag>
      </tags>
  </entry>
  <entry>
    <title>晴天游林</title>
    <url>/poetry/poetry21-60bf59e74854/</url>
    <content><![CDATA[<p><font color=#00BB00>&gt;<center></p>
<p>晴天游林</p>
<p>长松老木抱相护，不遮花儿向云天。<br>芳华碧空遥相望。此景何处觅人间？  </p>
<p>&emsp;&emsp;&emsp;&emsp;2015</p>
</center></font>
]]></content>
      <categories>
        <category>白话野诗</category>
      </categories>
      <tags>
        <tag>诗词</tag>
      </tags>
  </entry>
  <entry>
    <title>活</title>
    <url>/poetry/poetry23-37b9f5f6f926/</url>
    <content><![CDATA[<p><font color=#00BB00>&gt;<center></p>
<p>活</p>
<p><em>上篇诗友作:</em><br>酒淡风清我自如,<br>沏杯茶水看沉浮.<br>熙熙攘攘天边事,<br>岁岁年年有作无.</p>
<p>酒浓风劲我自如,<br>激浊扬清主沉浮.<br>熙熙攘攘身边事,<br>年年岁岁作有无.  </p>
<p>&emsp;&emsp;&emsp;&emsp;2015末</p>
</center></font>
]]></content>
      <categories>
        <category>白话野诗</category>
      </categories>
      <tags>
        <tag>诗词</tag>
      </tags>
  </entry>
  <entry>
    <title>家乡小曲</title>
    <url>/poetry/poetry22-8aa5fbf68780/</url>
    <content><![CDATA[<p><font color=#00BB00>&gt;<center></p>
<p>家乡小曲  </p>
<p>一川东西两山开,<br>山头山尾村落排.<br>几句鸟唱惊绿起,<br>越关门窗越进来.  </p>
<p>&emsp;&emsp;&emsp;&emsp;2015</p>
</center></font>
]]></content>
      <categories>
        <category>白话野诗</category>
      </categories>
      <tags>
        <tag>诗词</tag>
      </tags>
  </entry>
  <entry>
    <title>无尽的快乐</title>
    <url>/poetry/poetry24-150ba3490586/</url>
    <content><![CDATA[<p><font color=#00BB00>&gt;<center></p>
<p>无尽的快乐</p>
<p>我以为看到了海,<br>却曾想是一片茫茫沙漠.<br>快乐就像沙漏里的沙子,<br>翻过来就漏下去,<br>翻过来就漏下去.<br>多想拥有这片沙漠,<br>放到沙漏中,<br>让它在一生中慢慢漏完.  </p>
<p>&emsp;&emsp;&emsp;&emsp;2015</p>
</center></font>
]]></content>
      <categories>
        <category>白话野诗</category>
      </categories>
      <tags>
        <tag>诗词</tag>
      </tags>
  </entry>
  <entry>
    <title>时代九言</title>
    <url>/poetry/poetry25-ce52f91b675e/</url>
    <content><![CDATA[<p><font color=#00BB00>&gt;<center></p>
<p>时代九言</p>
<p>地铁公交匆匆挤工作,<br>微信抖音茫茫点人生.<br>迷与情纠缠工业科技,<br>人与物苟合奸情难分.  </p>
<p>&emsp;&emsp;&emsp;&emsp;15年作, 20年改</p>
</center></font>
]]></content>
      <categories>
        <category>白话野诗</category>
      </categories>
      <tags>
        <tag>诗词</tag>
      </tags>
  </entry>
  <entry>
    <title>我是谁</title>
    <url>/poetry/poetry27-70019d725910/</url>
    <content><![CDATA[<p><font color=#00BB00>&gt;<center></p>
<p>我是谁 </p>
<p>天地生万物，吾本是尘埃。<br>尘埃落入土，润物春自来。<br>春来春还去，春去春又生。<br>春处即我处，无我处处春。  </p>
<p>&emsp;&emsp;&emsp;&emsp;2015</p>
</center></font>
]]></content>
      <categories>
        <category>白话野诗</category>
      </categories>
      <tags>
        <tag>诗词</tag>
      </tags>
  </entry>
  <entry>
    <title>以诗会友</title>
    <url>/poetry/poetry26-a55cefdf613c/</url>
    <content><![CDATA[<p><font color=#00BB00>&gt;<center></p>
<p>以诗会友</p>
<p>梅兰竹菊各自喻，<br>舞文弄墨贵无欺。<br>翻弄经阁相斗趣，<br>心心相惜引古今。  </p>
<p>&emsp;&emsp;&emsp;&emsp;2015</p>
</center></font>
]]></content>
      <categories>
        <category>白话野诗</category>
      </categories>
      <tags>
        <tag>诗词</tag>
      </tags>
  </entry>
  <entry>
    <title>实事求是</title>
    <url>/poetry/poetry28-f318593f69f2/</url>
    <content><![CDATA[<p><font color=#00BB00>&gt;<center></p>
<p>实事求是</p>
<p>应勤富贵路，穷研诗哲经。<br>自诩如来是，酸气弄平生。<br>莫寻生死道，大志笑乾坤，<br>待到临终时，如来即自身。</p>
<p><em>中篇诗友作:</em><br>自古富贵路，都在诗哲经。<br>如来何必是，青灯了平生。<br>生死各有道，立志向乾坤。<br>歧路多无为，不负如来身。</p>
<p>富贵不见路，诗哲亦无经。<br>如来又如去，本无如来身。<br>生死自然道，何须向乾坤。<br>无为无不为，为为但求真。  </p>
<p>&emsp;&emsp;&emsp;&emsp;2015</p>
</center></font>
]]></content>
      <categories>
        <category>白话野诗</category>
      </categories>
      <tags>
        <tag>诗词</tag>
      </tags>
  </entry>
  <entry>
    <title>离人泪</title>
    <url>/poetry/poetry3-25f8487f1fd1/</url>
    <content><![CDATA[<p><font color=#00BB00>&gt;<center></p>
<p>离人泪  </p>
<p>狂雨飞冰雷过城，浑水污泥踏行人。<br>愁绪缕缕伤疾病，呜咽电话断泪痕。  </p>
<p>或言多泪眼清明，哪堪雨泪染霜林。<br>母亲孤独难安心，弟弟厮混总伤情。  </p>
<p>&emsp;&emsp;&emsp;&emsp; 2007年 . 弟入狱</p>
</center></font>

]]></content>
      <categories>
        <category>白话野诗</category>
      </categories>
      <tags>
        <tag>诗词</tag>
      </tags>
  </entry>
  <entry>
    <title>明心见性</title>
    <url>/poetry/poetry29-fdaa29ec3bd0/</url>
    <content><![CDATA[<p><font color=#00BB00>&gt;<center></p>
<p>明心见性</p>
<p>拉长时空隧道，截断历史变迁。<br>激扬社会道动，感应人情深浅。<br>剥离万象森罗，坐拥天地规律。<br>空寂物我存在，全部如实观照。  </p>
<p>&emsp;&emsp;&emsp;&emsp;2015</p>
</center></font>
]]></content>
      <categories>
        <category>白话野诗</category>
      </categories>
      <tags>
        <tag>诗词</tag>
      </tags>
  </entry>
  <entry>
    <title>春节大黑山天乐</title>
    <url>/poetry/poetry31-88100919e038/</url>
    <content><![CDATA[<p><font color=#00BB00>&gt;<center></p>
<p>春节大黑山天乐</p>
<p>万物复新晨，只手弄轻云。<br>空寂一声喊，回响山山应。<br>爆竹声声鼓，万鸟箫齐鸣。<br>紫气微风舞，艳阳闪碧盈。  </p>
<p>&emsp;&emsp;&emsp;&emsp;2016年春</p>
</center></font>
]]></content>
      <categories>
        <category>白话野诗</category>
      </categories>
      <tags>
        <tag>诗词</tag>
      </tags>
  </entry>
  <entry>
    <title>过年</title>
    <url>/poetry/poetry30-58d94c391e76/</url>
    <content><![CDATA[<p><font color=#00BB00>&gt;<center></p>
<p>过年</p>
<p>颠沛流离处, 肝肠寸断时.<br>岁末残残归, 新天盎盎红.  </p>
<p>&emsp;&emsp;&emsp;&emsp;2016年春</p>
</center></font>
]]></content>
      <categories>
        <category>白话野诗</category>
      </categories>
      <tags>
        <tag>诗词</tag>
      </tags>
  </entry>
  <entry>
    <title>心门掩·叹息</title>
    <url>/poetry/poetry4-43f4e440b335/</url>
    <content><![CDATA[<p><font color=#00BB00>&gt;<center></p>
<p>心门掩·叹息  </p>
<p>风高云远，天下春聚。<br>校园巢，莫敢弃。<br>心掩世界，壮志压书底。  </p>
<p>叹息无人理，谁来理？<br>他日一鸣，但求惊人语！  </p>
<p>&emsp;&emsp;&emsp;&emsp;2007</p>
</center></font>
]]></content>
      <categories>
        <category>白话野诗</category>
      </categories>
      <tags>
        <tag>诗词</tag>
      </tags>
  </entry>
  <entry>
    <title>倒计时</title>
    <url>/poetry/poetry32-d59bcc93f946/</url>
    <content><![CDATA[<p><font color=#00BB00>&gt;<center></p>
<p>倒计时  </p>
<p>星辰大海需要门票,<br>诗和远方路途遥远,<br>不管走过多少弯路,<br>每一步都在倒计时. </p>
<p>&emsp;&emsp;&emsp;2020</p>
</center></font>
]]></content>
      <categories>
        <category>白话野诗</category>
      </categories>
      <tags>
        <tag>诗词</tag>
      </tags>
  </entry>
  <entry>
    <title>梦境狂·落魂</title>
    <url>/poetry/poetry5-853893c97603/</url>
    <content><![CDATA[<p><font color=#00BB00>&gt;<center></p>
<p>梦境狂·落魂</p>
<p>云涛汹涌，翻腾蛟龙，飞羽匿无踪，细叶摇清风。<br>万般寂静，难奈何，心潮躁动。  </p>
<p>大志纵火，世事浇油，焚古今名流，狂欲王宇宙。<br>昼梦辉煌，才惊魂，如坠万千搂。  </p>
<p>&emsp;&emsp;&emsp;&emsp;2007</p>
</center></font>]]></content>
      <categories>
        <category>白话野诗</category>
      </categories>
      <tags>
        <tag>诗词</tag>
      </tags>
  </entry>
  <entry>
    <title>苏幕遮·早行怀父</title>
    <url>/poetry/poetry6-70b29e6d546e/</url>
    <content><![CDATA[<p><font color=#00BB00>&gt;<center></p>
<p>苏幕遮·早行怀父  </p>
<p>早行间，父子现，车送手牵，唯望子成龙。<br>撩动忆梦喜少年：怀里神仙，小调唱无边。<br>弹指间，痛三千。<br>慈父成仙，抛妻儿去远。<br>何日飞龙等云天？金光闪闪，南天门叙念。  </p>
<p>&emsp;&emsp;&emsp;&emsp;2007</p>
</center></font>
]]></content>
      <categories>
        <category>白话野诗</category>
      </categories>
      <tags>
        <tag>诗词</tag>
      </tags>
  </entry>
  <entry>
    <title>自我寻</title>
    <url>/poetry/poetry7-caa908281f62/</url>
    <content><![CDATA[<p><font color=#00BB00>&gt;<center></p>
<p>自我寻  </p>
<p>自我无处寻，乱昏昏沉沉。<br>才怨学未成，增又世难平。<br>试问怨何生？高考一方人。<br>无取光明路，何以报爱心。  </p>
<p>&emsp;&emsp;&emsp;&emsp;2007</p>
</center></font>
]]></content>
      <categories>
        <category>白话野诗</category>
      </categories>
      <tags>
        <tag>诗词</tag>
      </tags>
  </entry>
  <entry>
    <title>树叶</title>
    <url>/poetry/poetry8-7d8edfebf87a/</url>
    <content><![CDATA[<p><font color=#00BB00>&gt;<center></p>
<p>树叶</p>
<p>秋的季节<br>静净的湖水<br>静净的叶<br>微风轻轻吹<br>你婀娜的身影飘飞<br>天使般笑着跳着飘飞<br>和风儿一道把湖水揉碎<br>就这样<br>你唤开我的心扉<br>映在我心的每一页<br>真美<br>我如痴如醉<br>你轻轻飘落岸边<br>靠着大地的背<br>诉说着你流过的泪<br>我曾盼望着涨起洪水<br>把你卷入我的世界<br>但那时<br>没了静净的湖水<br>没了静净的叶<br>我固执地认为<br>——距离产生美  </p>
<p>&emsp;&emsp;&emsp;&emsp;2008</p>
</center></font>
]]></content>
      <categories>
        <category>白话野诗</category>
      </categories>
      <tags>
        <tag>诗词</tag>
      </tags>
  </entry>
  <entry>
    <title>给你自由</title>
    <url>/poetry/poetry9-7b84797e4f72/</url>
    <content><![CDATA[<p><font color=#00BB00>&gt;<center></p>
<p>给你自由  </p>
<p>天笼罩着乌云<br>一大片一大片的<br>不停地寻找着出路<br>想冲破这坚硬的思想的铁板<br>想找到自由<br>冲啊 冲啊<br>铁板在晃动<br>裂了<br>裂了 同志<br>裂了啊<br>飞吧 飞吧<br>飞向宇宙  </p>
<p>&emsp;&emsp;&emsp;&emsp;2008复读高三</p>
</center></font>
]]></content>
      <categories>
        <category>白话野诗</category>
      </categories>
      <tags>
        <tag>诗词</tag>
      </tags>
  </entry>
  <entry>
    <title>通俗易懂正则表达式</title>
    <url>/regex-acfc7a7a1ed4/</url>
    <content><![CDATA[<p><a href="https://billwuhao.com/" title="诗和远方都在脚下"><img src="/images/dbj.jpg"></a></p>
<br>

<blockquote>
<p>正则表达式, 也叫规则表达式, 是强大的文本字符串处理工具, 通常用来验证, 查找, 筛选, 提取, 替换那些符合某个规则的文本字符串</p>
</blockquote>
<h2 id="1-匹配规则"><a href="#1-匹配规则" class="headerlink" title="1, 匹配规则"></a>1, 匹配规则</h2><p>正则表达式的核心就是设计一个规则, 按照这个规则”按图索骥”, 去寻找符合这个规则的字符串, 并将它按需处理</p>
<p>先以一个最简单的例子进行探索:</p>
<p><code>re</code>: 正则表达式模块<br><code>findall</code>: 模块的一个方法, 传入 正则表达式 和 要去匹配字符串 将匹配结果以列表形式返回, 没有匹配结果返回空列表<br><code>\d</code>: 定义的规则, 表示匹配任意一个 0~9 的数字<br><code>198\d年</code>: 匹配符合 <code>198某年</code> 的字符串   </p>
<p>然后按照规则去匹配字符串: <code>&#39;1988年 2000年 2020年 1980年&#39;</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 导入模块 re</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="comment"># 按规则 r&#x27;198\d年&#x27; 匹配, r 的作用在 python 基础部分已介绍</span></span><br><span class="line">re.findall(<span class="string">r&#x27;198\d年&#x27;</span>, <span class="string">&#x27;1988年 2000年 2020年 1980年&#x27;</span>)</span><br></pre></td></tr></table></figure>




<pre><code>[&#39;1988年&#39;, &#39;1980年&#39;]</code></pre>
<p><code>\d</code> 是其中一个规则定义符, 可以和其他字符组合成正则表达式, 它自身也是一个正则表达式</p>
<p>而且任意一个字符都可以作为匹配它自身的正则表达式, 包括空字符<code>&#39;&#39;</code>, 只是要匹配规则定义符, 需要用 <code>\</code> 进行转义</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">re.findall(<span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;a&#x27;</span>), re.findall(<span class="string">r&#x27;\\d.+\[a]&#x27;</span>, <span class="string">r&#x27;a\d.+[a]&#x27;</span>)</span><br></pre></td></tr></table></figure>




<pre><code>([&#39;&#39;, &#39;&#39;], [&#39;\\d.+[a]&#39;])</code></pre>
<h2 id="2-常用规则定义符"><a href="#2-常用规则定义符" class="headerlink" title="2, 常用规则定义符"></a>2, 常用规则定义符</h2><h3 id="2-01-定义类别匹配"><a href="#2-01-定义类别匹配" class="headerlink" title="2.01, 定义类别匹配"></a>2.01, 定义类别匹配</h3><p><code>\w</code> 匹配任意一个字母, 数字及下划线, <code>\W</code> 匹配任意一个非字母, 数字及下划线</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="string">r&#x27;my\wname&#x27;</span></span><br><span class="line">b = <span class="string">r&#x27;my\Wname&#x27;</span></span><br><span class="line">c = <span class="string">&#x27;my1name, my_name, my.name, myaname&#x27;</span></span><br><span class="line">re.findall(a, c), re.findall(b, c)</span><br></pre></td></tr></table></figure>




<pre><code>([&#39;my1name&#39;, &#39;my_name&#39;, &#39;myaname&#39;], [&#39;my.name&#39;])</code></pre>
<p><code>\d</code> 匹配任意一个 0~9 的数字, <code>\D</code> 匹配任意任意一个非数字</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="string">r&#x27;01\d-\D123&#x27;</span></span><br><span class="line">b = <span class="string">&#x27;010-0123, 010-爱123, 01o-0123&#x27;</span></span><br><span class="line">re.findall(a, b)</span><br></pre></td></tr></table></figure>




<pre><code>[&#39;010-爱123&#39;]</code></pre>
<p><code>\s</code> 匹配一个空白字符, <code>\S</code> 匹配一个非空白字符, 空白包括一个空格 <code> </code>, <code>\f</code> 分页符, <code>\n</code> <code>\r</code> 换行符, <code>\t</code> 制表符, <code>\v</code> 纵向制表符</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="string">r&#x27;a\sb\Sc&#x27;</span></span><br><span class="line">b = <span class="string">&#x27;a b c, a bcc, a  bcc&#x27;</span></span><br><span class="line">re.findall(a, b)</span><br></pre></td></tr></table></figure>




<pre><code>[&#39;a bcc&#39;]</code></pre>
<p><code>.</code> 匹配除换行符 <code>\r</code> <code>\n</code> 之外的任意一个字符</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="string">r&#x27;a.b&#x27;</span></span><br><span class="line">b = <span class="string">&#x27;&#x27;&#x27;a</span></span><br><span class="line"><span class="string">b, a-b, a b, a  b&#x27;&#x27;&#x27;</span></span><br><span class="line">re.findall(a, b)</span><br></pre></td></tr></table></figure>




<pre><code>[&#39;a-b&#39;, &#39;a b&#39;]</code></pre>
<h3 id="2-02-定义范围匹配"><a href="#2-02-定义范围匹配" class="headerlink" title="2.02, 定义范围匹配"></a>2.02, 定义范围匹配</h3><p>用括号 <code>[]</code> 将字符(表达式)包围起来, 表示在括号内指定的范围内匹配任意一个</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">re.findall(<span class="string">&#x27;[abc]&#x27;</span>, <span class="string">&#x27;bill&#x27;</span>)</span><br></pre></td></tr></table></figure>




<pre><code>[&#39;b&#39;]</code></pre>
<p>在 <code>[]</code> 内, 以 <code>^</code> 开头, 表示排除括号内的字符(表达式)范围匹配</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">re.findall(<span class="string">&#x27;[^abc]&#x27;</span>, <span class="string">&#x27;abcd&#x27;</span>)</span><br></pre></td></tr></table></figure>




<pre><code>[&#39;d&#39;]</code></pre>
<p>在 <code>[]</code> 内, 数字或字母之间用 <code>-</code> 连接, 表示在两者(包含)之间的范围内匹配</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">re.findall(<span class="string">&#x27;[a-d0-5]&#x27;</span>, <span class="string">&#x27;af357&#x27;</span>)</span><br></pre></td></tr></table></figure>




<pre><code>[&#39;a&#39;, &#39;3&#39;, &#39;5&#39;]</code></pre>
<h3 id="2-03-定义边界匹配"><a href="#2-03-定义边界匹配" class="headerlink" title="2.03, 定义边界匹配"></a>2.03, 定义边界匹配</h3><p><code>^</code> 或 <code>\A</code>, 表示必须以接下来的字符(表达式)开头才能被匹配, 换行开头也不能匹配</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="string">&#x27;^b\d[bc]&#x27;</span></span><br><span class="line">b = <span class="string">&#x27;&#x27;&#x27;a2b</span></span><br><span class="line"><span class="string">b2b&#x27;&#x27;&#x27;</span></span><br><span class="line">c = <span class="string">&#x27;b2bcd&#x27;</span></span><br><span class="line">re.findall(a, b), re.findall(a, c)</span><br></pre></td></tr></table></figure>




<pre><code>([], [&#39;b2b&#39;])</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="string">&#x27;\Ab\d[bc]&#x27;</span></span><br><span class="line">b = <span class="string">&#x27;&#x27;&#x27;a2b</span></span><br><span class="line"><span class="string">b2b&#x27;&#x27;&#x27;</span></span><br><span class="line">c = <span class="string">&#x27;b2bcd&#x27;</span></span><br><span class="line">re.findall(a, b), re.findall(a, c)</span><br></pre></td></tr></table></figure>




<pre><code>([], [&#39;b2b&#39;])</code></pre>
<p><code>$</code> 或 <code>\Z</code>表示必须以其前面的字符(表达式)结尾才能被匹配, 换行之前的结束也不能匹配</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">re.findall(<span class="string">&#x27;a\w$&#x27;</span>, <span class="string">&#x27;ab&#x27;</span>), re.findall(<span class="string">&#x27;a\w\Z&#x27;</span>, <span class="string">&#x27;a=&#x27;</span>)</span><br></pre></td></tr></table></figure>




<pre><code>([&#39;ab&#39;], [])</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">re.findall(<span class="string">&#x27;a\w\Z&#x27;</span>, <span class="string">&#x27;ab&#x27;</span>), re.findall(<span class="string">&#x27;a\w\Z&#x27;</span>, <span class="string">&#x27;ab%&#x27;</span>)</span><br></pre></td></tr></table></figure>




<pre><code>([&#39;ab&#39;], [])</code></pre>
<p><code>\b</code> 表示必须以其前面的字符(表达式)结尾才能被匹配, 但是只要有符号(<code>_</code>除外)隔开都算结尾, <code>\B</code> 与 <code>\b</code> 相反</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">re.findall(<span class="string">r&#x27;b\b&#x27;</span>, <span class="string">&#x27;ab_ab,ab-ab&#x27;</span>) <span class="comment"># 只匹配后三个 b</span></span><br></pre></td></tr></table></figure>




<pre><code>[&#39;b&#39;, &#39;b&#39;, &#39;b&#39;]</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">re.findall(<span class="string">r&#x27;中国\B&#x27;</span>, <span class="string">&#x27;中国中国中国)的中国&#x27;</span>) <span class="comment"># 只匹配前两个 中国</span></span><br></pre></td></tr></table></figure>




<pre><code>[&#39;中国&#39;, &#39;中国&#39;]</code></pre>
<h3 id="2-04-定义数量匹配"><a href="#2-04-定义数量匹配" class="headerlink" title="2.04, 定义数量匹配"></a>2.04, 定义数量匹配</h3><p><code>+</code> 其前面的字符(表达式)至少有一个的都能匹配</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">re.findall(<span class="string">r&#x27;10+&#x27;</span>, <span class="string">&#x27;110, 100, 1001&#x27;</span>)</span><br></pre></td></tr></table></figure>




<pre><code>[&#39;10&#39;, &#39;100&#39;, &#39;100&#39;]</code></pre>
<p><code>?</code> 其前面的字符(表达式)最多有一个的才能匹配</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">re.findall(<span class="string">r&#x27;10?&#x27;</span>, <span class="string">&#x27;1, 10, 100&#x27;</span>)</span><br></pre></td></tr></table></figure>




<pre><code>[&#39;1&#39;, &#39;10&#39;, &#39;10&#39;]</code></pre>
<p><code>*</code> 其前面的字符(表达式)没有或有多个都可以匹配</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">re.findall(<span class="string">r&#x27;10*&#x27;</span>, <span class="string">&#x27;1, 10, 1001&#x27;</span>)</span><br></pre></td></tr></table></figure>




<pre><code>[&#39;1&#39;, &#39;10&#39;, &#39;100&#39;, &#39;1&#39;]</code></pre>
<p><code>&#123;n&#125;</code> 其前面的字符(表达式)有 n 个才能匹配</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">re.findall(<span class="string">r&#x27;1\d&#123;3&#125;&#x27;</span>, <span class="string">&#x27;12, 123, 1a23, 1234&#x27;</span>)</span><br></pre></td></tr></table></figure>




<pre><code>[&#39;1234&#39;]</code></pre>
<p><code>&#123;n,&#125;</code> 其前面的字符(表达式)有至少 n 个才能匹配, <code>&#123;m,n&#125;</code> 则表示有 m~n 个才能匹配, m 和 n 之间只有 <code>,</code> 号而不能有空格</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">re.findall(<span class="string">r&#x27;1\d&#123;2,&#125;&#x27;</span>, <span class="string">&#x27;12, 123, 1234, 12345&#x27;</span>)</span><br></pre></td></tr></table></figure>




<pre><code>[&#39;123&#39;, &#39;1234&#39;, &#39;12345&#39;]</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">re.findall(<span class="string">r&#x27;1\d&#123;2,3&#125;&#x27;</span>, <span class="string">&#x27;12, 123, 1234, 12345&#x27;</span>)</span><br></pre></td></tr></table></figure>




<pre><code>[&#39;123&#39;, &#39;1234&#39;, &#39;1234&#39;]</code></pre>
<h3 id="2-05-或-匹配符"><a href="#2-05-或-匹配符" class="headerlink" title="2.05, 或 匹配符 |"></a>2.05, <code>或</code> 匹配符 <code>|</code></h3><p>符号 <code>|</code> 两边的内容, 有一边匹配 或 两边都匹配都可以, 但当 <code>|</code> 在括号 <code>[]</code> 中则无此作用, 只代表它自身</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">re.findall(<span class="string">r&#x27;aa|bb&#x27;</span>, <span class="string">&#x27;aacbbcaabbab&#x27;</span>)</span><br></pre></td></tr></table></figure>




<pre><code>[&#39;aa&#39;, &#39;bb&#39;, &#39;aa&#39;, &#39;bb&#39;]</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">re.findall(<span class="string">r&#x27;a[|]b&#x27;</span>, <span class="string">&#x27;ab, a|b&#x27;</span>)</span><br></pre></td></tr></table></figure>




<pre><code>[&#39;a|b&#39;]</code></pre>
<h3 id="2-06-定义组合匹配"><a href="#2-06-定义组合匹配" class="headerlink" title="2.06, 定义组合匹配"></a>2.06, 定义组合匹配</h3><p>用 <code>()</code> 将多个字符组合成一个整体来匹配, 不管 <code>()</code> 外是否有数量匹配符, 都只返回 <code>()</code> 内的内容, 如果表达式内有多个 <code>()</code> 封装的内容, 匹配结果以元组形式返回. </p>
<p>当 <code>()</code> 在 <code>[]</code> 中则无此作用, 只代表它自身</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 匹配的是 ab 和 abab 但只返回括号内的 ab</span></span><br><span class="line">re.findall(<span class="string">r&#x27;(ab)+&#x27;</span>, <span class="string">&#x27;ab11abab&#x27;</span>) </span><br></pre></td></tr></table></figure>




<pre><code>[&#39;ab&#39;, &#39;ab&#39;]</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 匹配的是后面的 abab 返回元组</span></span><br><span class="line">re.findall(<span class="string">r&#x27;(ab)(ab)&#x27;</span>, <span class="string">&#x27;ab11abab&#x27;</span>) </span><br></pre></td></tr></table></figure>




<pre><code>[(&#39;ab&#39;, &#39;ab&#39;)]</code></pre>
<p>将贪婪匹配转为非贪婪匹配</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 贪婪匹配 \d+ 使得无法将 000 取出</span></span><br><span class="line">re.findall(<span class="string">r&#x27;(\d+)(0*)$&#x27;</span>, <span class="string">&#x27;123000&#x27;</span>)</span><br></pre></td></tr></table></figure>




<pre><code>[(&#39;123000&#39;, &#39;&#39;)]</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># + 后面加个 ? 号</span></span><br><span class="line">re.findall(<span class="string">r&#x27;(\d+?)(0*)$&#x27;</span>, <span class="string">&#x27;123000&#x27;</span>)</span><br></pre></td></tr></table></figure>




<pre><code>[(&#39;123&#39;, &#39;000&#39;)]</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">re.findall(<span class="string">r&#x27;[(ab)]&#x27;</span>, <span class="string">&#x27;ab, (ab)&#x27;</span>)</span><br></pre></td></tr></table></figure>




<pre><code>[&#39;a&#39;, &#39;b&#39;, &#39;(&#39;, &#39;a&#39;, &#39;b&#39;, &#39;)&#39;]</code></pre>
<p>如果 <code>()</code> 内以 <code>?:</code> 开头, 则在 <code>()</code> 外面的数量匹配符, 返回匹配到的相应数量字符</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">re.findall(<span class="string">r&#x27;(?:ab)+&#x27;</span>, <span class="string">&#x27;ab11abab&#x27;</span>) </span><br></pre></td></tr></table></figure>




<pre><code>[&#39;ab&#39;, &#39;abab&#39;]</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 匹配的是后面的 abab, 但只返回前一个 () 内的内容</span></span><br><span class="line">re.findall(<span class="string">r&#x27;(ab)(?:ab)+&#x27;</span>, <span class="string">&#x27;ab11abab&#x27;</span>) </span><br></pre></td></tr></table></figure>




<pre><code>[&#39;ab&#39;]</code></pre>
<p>如果 <code>()</code> 内以 <code>?=</code> 开头, 则 <code>()</code> 内的内容只是用来匹配, 不返回也不消耗匹配的字符, 也就是说, 匹配完了, 后面的字符需要继续匹配</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">re.findall(<span class="string">r&#x27;a(?=bc)bc&#x27;</span>, <span class="string">&#x27;ab, abc, abcde&#x27;</span>)</span><br></pre></td></tr></table></figure>




<pre><code>[&#39;abc&#39;, &#39;abc&#39;]</code></pre>
<p>如果 <code>()</code> 内以 <code>?!</code> 开头, 则 <code>()</code> 内的内容只是用来排除, 也就是说, 排除括号内的内容都可以匹配, 不占字符, 匹配完了, 后面的字符需要继续匹配</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># a 后面除了 bc 都可以匹配</span></span><br><span class="line">re.findall(<span class="string">r&#x27;a(?!bc)\w+&#x27;</span>, <span class="string">&#x27;abc, acb, abde&#x27;</span>)</span><br></pre></td></tr></table></figure>




<pre><code>[&#39;acb&#39;, &#39;abde&#39;]</code></pre>
<p><code>(?&lt;=...)</code> 和 <code>(?&lt;!...)</code>, 与上面两个类似, 只是方向相反</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">re.findall(<span class="string">r&#x27;\w(?&lt;=bc)b&#x27;</span>, <span class="string">&#x27;ab, bcb, abcd&#x27;</span>)</span><br></pre></td></tr></table></figure>




<pre><code>[&#39;cb&#39;]</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 只能匹配后一个 a</span></span><br><span class="line">re.findall(<span class="string">r&#x27;(?&lt;!bc)a&#x27;</span>, <span class="string">&#x27;bca, cba&#x27;</span>)</span><br></pre></td></tr></table></figure>




<pre><code>[&#39;a&#39;]</code></pre>
<h3 id="2-07-匹配规则修正符"><a href="#2-07-匹配规则修正符" class="headerlink" title="2.07, 匹配规则修正符"></a>2.07, 匹配规则修正符</h3><p>介绍几个常用的规则修正符</p>
<p><code>re.I</code> 大小写不敏感匹配</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">re.findall(<span class="string">r&#x27;aA&#x27;</span>,<span class="string">&#x27;aA, aa&#x27;</span>, re.I)</span><br></pre></td></tr></table></figure>




<pre><code>[&#39;aA&#39;, &#39;aa&#39;]</code></pre>
<p><code>re.S</code> 使 <code>.</code> 匹配任何字符, 包括换行符</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="string">&#x27;&#x27;&#x27;a</span></span><br><span class="line"><span class="string">b, a-b&#x27;&#x27;&#x27;</span></span><br><span class="line">re.findall(<span class="string">r&#x27;a.b&#x27;</span>, a, re.S)</span><br></pre></td></tr></table></figure>




<pre><code>[&#39;a\nb&#39;, &#39;a-b&#39;]</code></pre>
<p><code>re.M</code> 使得 <code>^</code> 和 <code>$</code> 能匹配换行的开始或换行前的结束</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="string">&#x27;^b\d[bc]&#x27;</span></span><br><span class="line">b = <span class="string">&#x27;&#x27;&#x27;a2b</span></span><br><span class="line"><span class="string">b2b&#x27;&#x27;&#x27;</span></span><br><span class="line">re.findall(a, b, re.M)</span><br></pre></td></tr></table></figure>




<pre><code>[&#39;b2b&#39;]</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="string">&#x27;a\d[bc]$&#x27;</span></span><br><span class="line">b = <span class="string">&#x27;&#x27;&#x27;a2b</span></span><br><span class="line"><span class="string">a2c&#x27;&#x27;&#x27;</span></span><br><span class="line">re.findall(a, b, re.M)</span><br></pre></td></tr></table></figure>




<pre><code>[&#39;a2b&#39;, &#39;a2c&#39;]</code></pre>
<h2 id="3-匹配和处理方法"><a href="#3-匹配和处理方法" class="headerlink" title="3, 匹配和处理方法"></a>3, 匹配和处理方法</h2><p><code>match</code> 从字符串起始位置匹配, 匹配到的字符返回为 match 对象, 相当于一个数据容器, 可以用方法加以获取</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = re.match(<span class="string">r&#x27;ab&#x27;</span>, <span class="string">&#x27;abc&#x27;</span>)</span><br><span class="line">b = re.match(<span class="string">r&#x27;a(bc)d(ef)g&#x27;</span>, <span class="string">&#x27;abcdefgh&#x27;</span>)</span><br><span class="line">c = re.match(<span class="string">r&#x27;ab&#x27;</span>, <span class="string">&#x27;bab&#x27;</span>)</span><br><span class="line">a, b, c</span><br></pre></td></tr></table></figure>




<pre><code>(&lt;re.Match object; span=(0, 2), match=&#39;ab&#39;&gt;,
 &lt;re.Match object; span=(0, 7), match=&#39;abcdefg&#39;&gt;,
 None)</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># group() 获取匹配的全部字符, </span></span><br><span class="line"><span class="comment"># group(1) 获取 () 内匹配的第一个, 以此类推</span></span><br><span class="line">a.group(), b.group(), b.group(<span class="number">1</span>), b.group(<span class="number">2</span>)</span><br></pre></td></tr></table></figure>




<pre><code>(&#39;ab&#39;, &#39;abcdefg&#39;, &#39;bc&#39;, &#39;ef&#39;)</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># start 获取匹配开始的位置</span></span><br><span class="line">a.start(), b.start()</span><br></pre></td></tr></table></figure>




<pre><code>(0, 0)</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># end 获取匹配结束的位置</span></span><br><span class="line">a.end(), b.end()</span><br></pre></td></tr></table></figure>




<pre><code>(2, 7)</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># span 获取 (开始, 结束) 元组</span></span><br><span class="line">a.span(), b.span()</span><br></pre></td></tr></table></figure>




<pre><code>((0, 2), (0, 7))</code></pre>
<p><code>compile</code> 编译正则表达式, 返回一个 Pattern 对象(后面简写为p), 然后可以用该对象调用方法, 原来用 <code>re</code> 调用的方法的参数已经变了</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">p = re.<span class="built_in">compile</span>(<span class="string">&#x27;\d+&#x27;</span>)</span><br><span class="line">p</span><br></pre></td></tr></table></figure>




<pre><code>re.compile(r&#39;\d+&#39;, re.UNICODE)</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 调用上面的 match 方法, 可以指定开始和结束位置</span></span><br><span class="line">a = p.match(<span class="string">&#x27;12a21&#x27;</span>, <span class="number">3</span>)</span><br><span class="line">a</span><br></pre></td></tr></table></figure>




<pre><code>&lt;re.Match object; span=(3, 5), match=&#39;21&#39;&gt;</code></pre>
<p><code>re.search</code> 扫描整个字符串, 第一个匹配的字符串返回为 match 对象<br><code>p.search</code> 扫描指定范围, 不指定就全部扫描</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">r = <span class="string">&#x27;python\d.\d&#x27;</span></span><br><span class="line">s = <span class="string">&#x27;python3.0, python3.8&#x27;</span></span><br><span class="line">p = re.<span class="built_in">compile</span>(r)</span><br><span class="line">a = re.search(r, s)</span><br><span class="line">b = p.search(s)</span><br><span class="line">c = p.search(s, <span class="number">1</span>)</span><br><span class="line">a, b, c</span><br></pre></td></tr></table></figure>




<pre><code>(&lt;re.Match object; span=(0, 9), match=&#39;python3.0&#39;&gt;,
 &lt;re.Match object; span=(0, 9), match=&#39;python3.0&#39;&gt;,
 &lt;re.Match object; span=(11, 20), match=&#39;python3.8&#39;&gt;)</code></pre>
<p><code>sub</code> 替换字符串中的匹配项, 可以控制替换次数, 还可传入函数高级替换</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">r = <span class="string">&#x27;[,.]&#x27;</span></span><br><span class="line">s = <span class="string">&#x27;去掉,逗号和.句号.&#x27;</span></span><br><span class="line">p = re.<span class="built_in">compile</span>(r)</span><br><span class="line">re.sub(p, <span class="string">&#x27;&#x27;</span>, s), p.sub(<span class="string">&#x27;&#x27;</span>, s, <span class="number">2</span>)</span><br></pre></td></tr></table></figure>




<pre><code>(&#39;去掉逗号和句号&#39;, &#39;去掉逗号和句号.&#39;)</code></pre>
<p><code>findall</code> 已经介绍过</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">r = <span class="string">r&#x27;\D+(\d+)\D+(\d+)\D+(\d+)*&#x27;</span></span><br><span class="line">s = <span class="string">&#x27;分组提取123所有456数字78.&#x27;</span></span><br><span class="line">p = re.<span class="built_in">compile</span>(r)</span><br><span class="line">re.findall(p, s), p.findall(s, <span class="number">8</span>)</span><br></pre></td></tr></table></figure>




<pre><code>([(&#39;123&#39;, &#39;456&#39;, &#39;78&#39;)], [(&#39;456&#39;, &#39;78&#39;, &#39;&#39;)])</code></pre>
<p><code>finditer</code> 和 <code>findall</code>类似, 只是返回的是一个 match 的迭代器(可以理解为数据容器)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">r = <span class="string">r&#x27;\D+(\d+)\D+(\d+)\D+(\d+)*&#x27;</span></span><br><span class="line">s = <span class="string">&#x27;分组提取123所有456数字78.&#x27;</span></span><br><span class="line">p = re.<span class="built_in">compile</span>(r)</span><br><span class="line">a = re.finditer(p, s)</span><br><span class="line">b = p.finditer(s, <span class="number">8</span>)</span><br><span class="line">a, b</span><br></pre></td></tr></table></figure>




<pre><code>(&lt;callable_iterator at 0x2d83f2fbac8&gt;, &lt;callable_iterator at 0x2d83f3033c8&gt;)</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i, j <span class="keyword">in</span> <span class="built_in">zip</span>(a, b):</span><br><span class="line">    print(i, j)</span><br><span class="line">    print(i.group(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>), j.group())</span><br></pre></td></tr></table></figure>

<pre><code>&lt;re.Match object; span=(0, 16), match=&#39;分组提取123所有456数字78&#39;&gt; &lt;re.Match object; span=(8, 17), match=&#39;有456数字78.&#39;&gt;
(&#39;123&#39;, &#39;456&#39;, &#39;78&#39;) 有456数字78.</code></pre>
<p><code>split</code> 用匹配到的字符(或字符串), 将整个字符串分割返回列表, 可设置最大拆分数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">r = <span class="string">&#x27;[\s\,-]&#x27;</span></span><br><span class="line">s = <span class="string">&#x27;将,每 个-字 拆,开&#x27;</span></span><br><span class="line">p = re.<span class="built_in">compile</span>(r)</span><br><span class="line">re.split(p, s), p.split(s, <span class="number">2</span>)</span><br></pre></td></tr></table></figure>




<pre><code>([&#39;将&#39;, &#39;每&#39;, &#39;个&#39;, &#39;字&#39;, &#39;拆&#39;, &#39;开&#39;], [&#39;将&#39;, &#39;每&#39;, &#39;个-字 拆,开&#39;])</code></pre>
]]></content>
      <categories>
        <category>数据分析</category>
      </categories>
      <tags>
        <tag>正则表达式</tag>
      </tags>
  </entry>
  <entry>
    <title>描述统计</title>
    <url>/statistics/statistics1-c52131cc9c3a/</url>
    <content><![CDATA[<blockquote>
<p>内容主要来源：<strong>开课吧</strong>学习笔记整理。</p>
</blockquote>
<p><font color=#00A600 >2020年6月4日更新</font></p>
<h2 id="一-数理统计介绍"><a href="#一-数理统计介绍" class="headerlink" title="一, 数理统计介绍"></a>一, 数理统计介绍</h2><p>数理统计以概率论为基础, 研究大量随机现象的统计规律性. 分为<strong>描述统计</strong>和<strong>推断统计</strong>, 在数据分析领域具有非常重要的地位 </p>
<h2 id="二-描述统计"><a href="#二-描述统计" class="headerlink" title="二, 描述统计"></a>二, 描述统计</h2><p>描述统计, 就是从总体数据中提取变量的主要信息(总和, 均值, 最大, 最多等), 从而从总体层面上, 对数据进行统计性描述. 通常配合绘制相关统计图进行辅助</p>
<h3 id="2-01-统计学的变量类型"><a href="#2-01-统计学的变量类型" class="headerlink" title="2.01, 统计学的变量类型"></a>2.01, 统计学的变量类型</h3><p>统计学中的变量指研究对象的特征(属性), 每个变量都有变量值和类型, 类型可分为:</p>
<p><strong>类别变量</strong>: 对研究对象定性, 分类</p>
<p>类别变量又可分为: </p>
<ul>
<li>有序类别变量: 描述对象等级或顺序等, 例如, 优良中差</li>
<li>无序类别变量: 仅做分类, 例如 A, B 血型, 男女</li>
</ul>
<p><strong>数值变量</strong>: 对研究对象定量描述</p>
<p>数值变量又可分为:</p>
<ul>
<li>离散变量: 取值只能用自然数或整数个单位计算, 例如统计人数</li>
<li>连续变量: 在一定区间内可以任意取值, 例如计算身高</li>
</ul>
<p>数值变量对加, 减, 求平均等操作有意义, 而类别变量无意义</p>
<h3 id="2-02-统计量"><a href="#2-02-统计量" class="headerlink" title="2.02, 统计量"></a>2.02, 统计量</h3><p>描述统计所提取的统计信息, 称为统计量, 主要包括: </p>
<ul>
<li>类别分析: 频数, 频率</li>
<li>集中趋势分析: 均值, 中位数, 众数, 分位数</li>
<li>离散程度分析: 极差, 方差, 标准差</li>
<li>描述分布形状: 偏度, 峰度</li>
</ul>
<p>准备数据:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"></span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.family&#x27;</span>] = <span class="string">&#x27;SimHei&#x27;</span></span><br><span class="line">plt.rcParams[<span class="string">&#x27;axes.unicode_minus&#x27;</span>] = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 正态分布</span></span><br><span class="line">data1 = np.around(np.random.normal(<span class="number">10</span>, <span class="number">3</span>, <span class="number">600</span>)).reshape(<span class="number">-1</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 左偏</span></span><br><span class="line">t1 = np.random.randint(<span class="number">1</span>, <span class="number">21</span>, size=<span class="number">100</span>)</span><br><span class="line">t2 = np.random.randint(<span class="number">21</span>, <span class="number">31</span>, size=<span class="number">500</span>)</span><br><span class="line">left_data = np.concatenate([t1, t2]).reshape(<span class="number">-1</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 右偏</span></span><br><span class="line">t3 = np.random.randint(<span class="number">1</span>, <span class="number">11</span>, size=<span class="number">500</span>)</span><br><span class="line">t4 = np.random.randint(<span class="number">11</span>, <span class="number">21</span>, size=<span class="number">100</span>)</span><br><span class="line">right_data = np.concatenate([t3, t4]).reshape(<span class="number">-1</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 类别</span></span><br><span class="line">type_data = np.random.randint(<span class="number">0</span>, <span class="number">2</span>, size=<span class="number">600</span>).reshape(<span class="number">-1</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">data = np.concatenate([data1, left_data, right_data, type_data], axis=<span class="number">1</span>)</span><br><span class="line">data = pd.DataFrame(data,</span><br><span class="line">                   columns=[<span class="string">&#x27;data1&#x27;</span>, <span class="string">&#x27;left_data&#x27;</span>, <span class="string">&#x27;right_data&#x27;</span>, <span class="string">&#x27;type_data&#x27;</span>])</span><br><span class="line"><span class="comment"># 随机取 10 条数据</span></span><br><span class="line">data.sample(<span class="number">10</span>)</span><br></pre></td></tr></table></figure>




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>data1</th>
      <th>left_data</th>
      <th>right_data</th>
      <th>type_data</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>83</th>
      <td>12.0</td>
      <td>11.0</td>
      <td>3.0</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>391</th>
      <td>4.0</td>
      <td>29.0</td>
      <td>10.0</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>450</th>
      <td>9.0</td>
      <td>25.0</td>
      <td>10.0</td>
      <td>1.0</td>
    </tr>
    <tr>
      <th>303</th>
      <td>12.0</td>
      <td>22.0</td>
      <td>3.0</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>542</th>
      <td>12.0</td>
      <td>25.0</td>
      <td>17.0</td>
      <td>1.0</td>
    </tr>
    <tr>
      <th>19</th>
      <td>8.0</td>
      <td>6.0</td>
      <td>6.0</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>232</th>
      <td>6.0</td>
      <td>27.0</td>
      <td>2.0</td>
      <td>1.0</td>
    </tr>
    <tr>
      <th>456</th>
      <td>16.0</td>
      <td>29.0</td>
      <td>10.0</td>
      <td>1.0</td>
    </tr>
    <tr>
      <th>478</th>
      <td>10.0</td>
      <td>23.0</td>
      <td>5.0</td>
      <td>1.0</td>
    </tr>
    <tr>
      <th>298</th>
      <td>10.0</td>
      <td>28.0</td>
      <td>1.0</td>
      <td>1.0</td>
    </tr>
  </tbody>
</table>
</div>



<h4 id="a-频数"><a href="#a-频数" class="headerlink" title="a, 频数"></a>a, 频数</h4><p>数据中某个类别出现的次数称为该类别的频数</p>
<p>例如, 计算上述两个类别(<code>0.0</code> 和 <code>1.0</code>)出现的频数:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">frequency = data[<span class="string">&#x27;type_data&#x27;</span>].value_counts()</span><br><span class="line">frequency</span><br></pre></td></tr></table></figure>




<pre><code>0.0    315
1.0    285
Name: type_data, dtype: int64</code></pre>
<h4 id="b-频率"><a href="#b-频率" class="headerlink" title="b, 频率"></a>b, 频率</h4><p>数据中某个类别出现次数与总次数的比值称为该类别的频率</p>
<p>例如, 计算上述两个类别(<code>0.0</code> 和 <code>1.0</code>)出现的频率:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">percentage = frequency * <span class="number">100</span> / <span class="built_in">len</span>(data)</span><br><span class="line">percentage</span><br></pre></td></tr></table></figure>




<pre><code>0.0    52.5
1.0    47.5
Name: type_data, dtype: float64</code></pre>
<h4 id="c-均值"><a href="#c-均值" class="headerlink" title="c, 均值"></a>c, 均值</h4><p>平均值, 一组数据的总和除以数据的个数</p>
<h4 id="d-中位数"><a href="#d-中位数" class="headerlink" title="d, 中位数"></a>d, 中位数</h4><p>将一组数据按顺序排列, 位于最中间位置的值, 即是中位数, 如果数据个数为偶数, 取中间两个的平均值</p>
<h4 id="e-众数"><a href="#e-众数" class="headerlink" title="e, 众数"></a>e, 众数</h4><p>一组数据中出现次数最多的值</p>
<p>通常三者的关系如下图所示:</p>
<p><img src="/images/mathematical-statistics/fenbu.png"></p>
<p><strong>注意点</strong>:<br>数值变量通常使用均值和中值表示集中趋势, 类别变量则通常使用众数<br>正态分布下, 数据量足够多, 三者相同<br>均值使用所有数据计算, 容易受极端值影响, 中位数和众数则不会<br>众数在一组数据中可能不唯一</p>
<p>例, 计算字段 <code>data1</code> 的均值, 中位数和众数:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">mean = data[<span class="string">&#x27;data1&#x27;</span>].mean()</span><br><span class="line">median = data[<span class="string">&#x27;data1&#x27;</span>].median()</span><br><span class="line">mode = data[<span class="string">&#x27;data1&#x27;</span>].mode()</span><br><span class="line">print(<span class="string">f&#x27;均值:<span class="subst">&#123;mean&#125;</span> 中位数:<span class="subst">&#123;median&#125;</span>\n众数:\n<span class="subst">&#123;mode&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure>

<pre><code>均值:9.973333333333333 中位数:10.0
众数:
0    10.0
dtype: float64</code></pre>
<p>还可以使用 <code>scipy</code> 中的 <code>stats</code> 模块来求一组数据的众数:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> scipy <span class="keyword">import</span> stats</span><br><span class="line">stats.mode(data[<span class="string">&#x27;data1&#x27;</span>]).mode</span><br></pre></td></tr></table></figure>




<pre><code>array([10.])</code></pre>
<p>求众数方法两者对比: 前者的返回值类型是 Serise, 后者的返回值类型是 array. 如果众数的值不唯一，前者都会显示，后者只显示一个</p>
<h4 id="f-分位数"><a href="#f-分位数" class="headerlink" title="f, 分位数"></a>f, 分位数</h4><p>通过 n - 1 个分位, 将升序排列的数据分为 n 个区间, 使得每个区间数值个数相等(或近似相等), 则每个分位对应的数, 就是该 n 分位的分位数. 常用的有四分位数和百分位数</p>
<p>以四分位数为例:<br>第一个分位称为 1/4 分位(下四分位), 第二个称为 2/4 分位(中四分位), 第三个称为 3/4 分位(上四分位), 其中中四分位数, 其实就是中位数</p>
<p>求四分位的值:  </p>
<ul>
<li><p>首先计算各个分位的位置<br>index1 = (n - 1) * 0.25<br>index2 = (n - 1) * 0.5<br>index3 = (n - 1) * 0.75<br>(index 从 0 开始, n 为元素的个数)</p>
</li>
<li><p>根据位置计算各个分位的值<br>index 为整数, 值就是相应的 index 对应的元素<br>index 不为整数, 四分位位置介于 ceil(index) 和 floor(index) 之间, 加权计算分位值</p>
</li>
</ul>
<p>例, 求 x 的四分位数:<br><strong>index 为整数</strong>  </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = np.arange(<span class="number">0</span>, <span class="number">9</span>)</span><br><span class="line">n = <span class="built_in">len</span>(x)</span><br><span class="line"></span><br><span class="line">index1 = (n - <span class="number">1</span>) * <span class="number">0.25</span></span><br><span class="line">index2 = (n - <span class="number">1</span>) * <span class="number">0.5</span>  </span><br><span class="line">index3 = (n - <span class="number">1</span>) * <span class="number">0.75</span>  </span><br><span class="line"></span><br><span class="line">index = np.array([index1, index2, index3]).astype(np.int32)</span><br><span class="line">x[index]</span><br></pre></td></tr></table></figure>




<pre><code>array([2, 4, 6])</code></pre>
<p><strong>index 不是整数</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = np.arange(<span class="number">0</span>, <span class="number">10</span>)</span><br><span class="line">n = <span class="built_in">len</span>(x)</span><br><span class="line"></span><br><span class="line">index1 = (n - <span class="number">1</span>) * <span class="number">0.25</span></span><br><span class="line">index2 = (n - <span class="number">1</span>) * <span class="number">0.5</span>  </span><br><span class="line">index3 = (n - <span class="number">1</span>) * <span class="number">0.75</span>  </span><br><span class="line"></span><br><span class="line">index = np.array([index1, index2, index3])</span><br><span class="line">left = np.floor(index).astype(np.int32)</span><br><span class="line">right = np.ceil(index).astype(np.int32)</span><br><span class="line">weight, _ = np.modf(index) <span class="comment"># 获取 index 整数和小数部分</span></span><br><span class="line"></span><br><span class="line">result = x[left] * (<span class="number">1</span> - weight) + x[right] * weight</span><br><span class="line">result</span><br></pre></td></tr></table></figure>




<pre><code>array([2.25, 4.5 , 6.75])</code></pre>
<p><strong>注意点:</strong><br>Numpy 中计算分位数可直接用方法 <code>np.quantile</code> 和 <code>np.percentile</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.quantile(x, q=[<span class="number">0.25</span>, <span class="number">0.5</span>, <span class="number">0.75</span>]), np.percentile(x, q=[<span class="number">25</span>, <span class="number">50</span>, <span class="number">75</span>])</span><br></pre></td></tr></table></figure>




<pre><code>(array([2.25, 4.5 , 6.75]), array([2.25, 4.5 , 6.75]))</code></pre>
<p>Pandas 中计算分位数可利用 <code>describe</code> (默认 4 分位)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = pd.Series(x)</span><br><span class="line">s.describe()</span><br></pre></td></tr></table></figure>




<pre><code>count    10.00000
mean      4.50000
std       3.02765
min       0.00000
25%       2.25000
50%       4.50000
75%       6.75000
max       9.00000
dtype: float64</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s.describe().iloc[<span class="number">4</span>:<span class="number">7</span>]</span><br></pre></td></tr></table></figure>




<pre><code>25%    2.25
50%    4.50
75%    6.75
dtype: float64</code></pre>
<p>可自定义分位:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s.describe(percentiles=[<span class="number">0.15</span>, <span class="number">0.4</span>, <span class="number">0.8</span>])</span><br></pre></td></tr></table></figure>




<pre><code>count    10.00000
mean      4.50000
std       3.02765
min       0.00000
15%       1.35000
40%       3.60000
50%       4.50000
80%       7.20000
max       9.00000
dtype: float64</code></pre>
<h4 id="g-极差"><a href="#g-极差" class="headerlink" title="g, 极差"></a>g, 极差</h4><p>一组数据中, 最大值与最小值之差</p>
<h4 id="h-方差"><a href="#h-方差" class="headerlink" title="h, 方差"></a>h, 方差</h4><p>方差体现一组数据中, 每个元素与均值的偏离程度</p>
<p>$$\sigma^{2}=\frac{1}{n-1} \sum_{i=1}^{n}\left(x_{i}-\bar{x}\right)^{2}$$</p>
<p>$x_{i}:$ 数组中的每个元素<br>$n:$ 数组元素的个数<br>$\bar{x}:$ 数组中所有元素的均值  </p>
<h4 id="i-标准差"><a href="#i-标准差" class="headerlink" title="i, 标准差"></a>i, 标准差</h4><p>标准差为方差的开方. 方差和标准差可以体现数据的分散性, 越大越分散, 越小越集中. 也可体现数据波动性(稳定性), 越大波动越大, 反之亦然  </p>
<p>当数据足够多时, 可用 n 代替 n - 1</p>
<p>例, 计算 <code>left_data</code> 字段的极差, 方差, 标准差:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sub = np.ptp(data[<span class="string">&#x27;left_data&#x27;</span>])</span><br><span class="line">var = data[<span class="string">&#x27;left_data&#x27;</span>].var()</span><br><span class="line">std = data[<span class="string">&#x27;left_data&#x27;</span>].std()</span><br><span class="line">sub, var, std</span><br></pre></td></tr></table></figure>




<pre><code>(29.0, 41.241399554813675, 6.42194671068)</code></pre>
<p>绘图对比 <code>data1</code> 和 <code>left_data</code> 的分散程度</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">plt.figure(figsize=(<span class="number">11</span>, <span class="number">1</span>))</span><br><span class="line">plt.ylim(<span class="number">-0.5</span>, <span class="number">1.5</span>)</span><br><span class="line">plt.plot(data[<span class="string">&#x27;data1&#x27;</span>], np.zeros(<span class="built_in">len</span>(data)), ls=<span class="string">&#x27;&#x27;</span>, marker=<span class="string">&#x27;o&#x27;</span>, color=<span class="string">&#x27;r&#x27;</span>, label=<span class="string">&#x27;data1&#x27;</span>)</span><br><span class="line">plt.plot(data[<span class="string">&#x27;left_data&#x27;</span>], np.ones(<span class="built_in">len</span>(data)), ls=<span class="string">&#x27;&#x27;</span>, marker=<span class="string">&#x27;o&#x27;</span>, color=<span class="string">&#x27;g&#x27;</span>, label=<span class="string">&#x27;left_data&#x27;</span>)</span><br><span class="line">plt.axvline(data[<span class="string">&#x27;data1&#x27;</span>].mean(), ls=<span class="string">&#x27;--&#x27;</span>, color=<span class="string">&#x27;r&#x27;</span>, label=<span class="string">&#x27;data1均值&#x27;</span>)</span><br><span class="line">plt.axvline(data[<span class="string">&#x27;left_data&#x27;</span>].mean(), ls=<span class="string">&#x27;--&#x27;</span>, color=<span class="string">&#x27;g&#x27;</span>, label=<span class="string">&#x27;left_data均值&#x27;</span>)</span><br><span class="line">plt.legend()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>


<p><img src="/images/mathematical-statistics/output_25_0.png" alt="png"></p>
<h4 id="j-偏度"><a href="#j-偏度" class="headerlink" title="j, 偏度"></a>j, 偏度</h4><p>统计数据分布偏斜方向和程度的度量, 统计数据分布非对称程度的数字特征, 偏度为 0 , 对称分布, 小于 0, 左偏分别, 大于 0, 右偏分布</p>
<h4 id="k-峰度"><a href="#k-峰度" class="headerlink" title="k, 峰度"></a>k, 峰度</h4><p>表征概率密度分布曲线在平均值处峰值高低的特征数. 直观看来, 峰度反映了峰部的尖度, 峰度高意味着标准差增大是由低频度的大于或小于平均值的极端差值引起的. 在相同的标准差下，峰度越大，分布就有更多的极端值，那么其余值必然要更加集中在众数周围，其分布必然就更加陡峭</p>
<p>样本的峰度是和正态分布相比较而言的统计量, 符合正态分布的峰度为 0</p>
<p>例, 计算 <code>data</code> 中前三个字段的偏度, 峰度与标准差, 并绘图比较:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="string">&#x27;偏度:&#x27;</span>, data[<span class="string">&#x27;data1&#x27;</span>].skew(), data[<span class="string">&#x27;left_data&#x27;</span>].skew(), data[<span class="string">&#x27;right_data&#x27;</span>].skew())</span><br><span class="line">print(<span class="string">&#x27;峰度:&#x27;</span>, data[<span class="string">&#x27;data1&#x27;</span>].kurt(), data[<span class="string">&#x27;left_data&#x27;</span>].kurt(), data[<span class="string">&#x27;right_data&#x27;</span>].kurt())</span><br><span class="line">print(<span class="string">&#x27;标准差:&#x27;</span>, data[<span class="string">&#x27;data1&#x27;</span>].std(), data[<span class="string">&#x27;left_data&#x27;</span>].std(), data[<span class="string">&#x27;right_data&#x27;</span>].std())</span><br></pre></td></tr></table></figure>

<pre><code>偏度: 0.01863368573517327 -1.6482232780416728 0.8893682831648914
峰度: 0.01734807363555335 2.3817050408202034 0.16006510575975996
标准差: 3.0585748897401723 6.42194671068 4.940541290899053</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sns.kdeplot(data[<span class="string">&#x27;data1&#x27;</span>], shade=<span class="literal">True</span>, label=<span class="string">&#x27;正态&#x27;</span>)</span><br><span class="line">sns.kdeplot(data[<span class="string">&#x27;left_data&#x27;</span>], shade=<span class="literal">True</span>, label=<span class="string">&#x27;左偏&#x27;</span>)</span><br><span class="line">sns.kdeplot(data[<span class="string">&#x27;right_data&#x27;</span>], shade=<span class="literal">True</span>, label=<span class="string">&#x27;右偏&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>


<p><img src="/images/mathematical-statistics/output_28_0.png" alt="png"></p>
<br>

]]></content>
      <categories>
        <category>数据分析</category>
      </categories>
      <tags>
        <tag>数理统计</tag>
      </tags>
  </entry>
  <entry>
    <title>推断统计</title>
    <url>/statistics/statistics2-4cc5fc64703e/</url>
    <content><![CDATA[<blockquote>
<p>内容主要来源：<strong>开课吧</strong>学习笔记整理。</p>
</blockquote>
<h2 id="三-推断统计"><a href="#三-推断统计" class="headerlink" title="三, 推断统计"></a>三, 推断统计</h2><p>推断统计, 通过样本推断总体的统计方法, 包括对总体的未知参数进行估计; 对关于参数的假设进行检查; 对总体进行预测预报等. 推断统计的基本问题可以分为两大类：一类是<strong>参数估计</strong>问题; 另一类是<strong>假设检验</strong>问题</p>
<h3 id="1-总体-个体与样本"><a href="#1-总体-个体与样本" class="headerlink" title="1, 总体, 个体与样本"></a>1, 总体, 个体与样本</h3><p>总体, 要研究对象的所有数据, 获取通常比较困难. 总体中的某个数据, 就是个体. 从总体中抽取部分个体, 就构成了样本, 样本中的个体数, 称为样本容量.</p>
<h3 id="2-参数估计"><a href="#2-参数估计" class="headerlink" title="2, 参数估计"></a>2, 参数估计</h3><p>参数估计, 用样本指标(统计量)估计总体指标(参数). 参数估计有<strong>点估计</strong>和<strong>区间估计</strong>两种</p>
<h4 id="2-01-点估计"><a href="#2-01-点估计" class="headerlink" title="2.01, 点估计"></a>2.01, 点估计</h4><p>点估计是依据样本统计量估计总体中的未知参数. 通常它们是总体的某个特征值，如数学期望, 方差和相关系数等. 点估计问题就是要构造一个只依赖于样本的量，作为总体未知参数的估计值.</p>
<h4 id="2-02-区间估计"><a href="#2-02-区间估计" class="headerlink" title="2.02, 区间估计"></a>2.02, 区间估计</h4><p>区间估计是根据样本的统计量, 计算出一个可能的区间(置信区间) 和 概率(置信度), 表示总体的未知参数有多少概率位于该区间. </p>
<p><strong>注意:</strong><br>点估计使用一个值来作为总体参数值, 能给出具体值, 但易受随机抽样影响, 准确性不够<br>区间估计使用一个置信区间和置信度, 表示总体参数值有多少可能(置信度)会在该范围(置信区间)内, 能给出合理的范围和信心指数, 不能给出具体值</p>
<h4 id="2-03-中心极限定理"><a href="#2-03-中心极限定理" class="headerlink" title="2.03, 中心极限定理"></a>2.03, 中心极限定理</h4><p>要确定置信区间与置信度, 我们先要知道总体与样本之间, 在分布上有着怎样的联系. 中心极限定理(独立同分布的中心极限定理)给出了它们之间的联系:</p>
<p>如果总体均值为 $\mu$, 方差为 $\sigma^{2}$, 我们进行随机抽样, 样本容量为 n, 当 n 增大时，则样本均值 $\bar{X}$ 逐渐趋近服从均值为 $\mu$, 方差为 $\sigma^{2} / n$ 的正态分布：</p>
<p>$$\bar{X} \sim N\left(\mu, \sigma^{2} / n\right)$$</p>
<p><strong>说明:</strong><br>进行多次抽样，每次抽样会得到一个均值, 这些均值会围绕在总体均值左右，呈正态分布<br>当样本容量 n 足够大时, 抽样样本均值的均值 ≈ 样本均值 $\bar{X}$ ≈ 总体均值 $\mu$, 样本均值分布的标准差等于 $\sigma / \sqrt{n}$<br>样本均值分布的标准差, 称为标准误差, 简称标准误  </p>
<p>模拟证明:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 定义非正态分布总体(也可以是正态分布)</span></span><br><span class="line">data = np.random.normal(<span class="number">20</span>, <span class="number">5</span>, size=<span class="number">10000</span>)</span><br><span class="line">data.sort()</span><br><span class="line">all_ = np.random.choice(data[<span class="number">0</span>:<span class="number">8000</span>], size=<span class="number">10000</span>)</span><br><span class="line">sns.distplot(all_, label=<span class="string">&#x27;总体分布&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将总体的均值和标准差设为已知条件</span></span><br><span class="line">print(<span class="string">&#x27;总体均值:&#x27;</span>, all_.mean(), <span class="string">&#x27;总体标准差:&#x27;</span>, all_.std())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建存放每次抽样的平均值的数组(初始值为 0)</span></span><br><span class="line">mean_arr = np.zeros(<span class="number">1000</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 循环抽取 1000 个样本, 每次抽 100 个</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(mean_arr)):</span><br><span class="line">    mean_arr[i] = np.random.choice(all_, size=<span class="number">100</span>, replace=<span class="literal">False</span>).mean()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 验证结果</span></span><br><span class="line">print(<span class="string">&#x27;样本均值:&#x27;</span>, mean_arr[<span class="number">1</span>], <span class="string">&#x27;样本均值的均值:&#x27;</span>, mean_arr.mean(), </span><br><span class="line">      <span class="string">&#x27;标准误差:&#x27;</span>, mean_arr.std(), <span class="string">&#x27;偏度:&#x27;</span>, pd.Series(mean_arr).skew(), sep=<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">sns.distplot(mean_arr, label=<span class="string">&#x27;样本均值分布&#x27;</span>)</span><br><span class="line">plt.legend()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<pre><code>总体均值: 18.21972188896503 总体标准差: 3.746872923755833
样本均值:
18.227008580631708
样本均值的均值:
18.221448457496017
标准误差:
0.3638614618535304
偏度:
-0.15476133964256097</code></pre>
<p><img src="/images/mathematical-statistics/output_1_1.png" alt="png"></p>
<h4 id="2-04-正态分布的特性"><a href="#2-04-正态分布的特性" class="headerlink" title="2.04, 正态分布的特性"></a>2.04, 正态分布的特性</h4><p>正态分布: $X \sim N\left(\mu, \sigma^{2}\right)$</p>
<p><img src="/images/mathematical-statistics/zttx.png" alt="png"></p>
<p>以均值为中心:<br>在 1 倍标准差内包含约 68.2% 的样本数据<br>在 2 倍标准差内包含约 95.4% 的样本数据<br>在 3 倍标准差内包含约 99.7% 的样本数据</p>
<p>证明:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 定义标准差</span></span><br><span class="line">scale = <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义数据</span></span><br><span class="line">x = np.random.normal(<span class="number">0</span>, scale, size=<span class="number">100000</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算</span></span><br><span class="line"><span class="keyword">for</span> times <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">4</span>):</span><br><span class="line">    y = x[(x &gt; -times * scale) &amp; (x &lt; times * scale)]</span><br><span class="line">    print(<span class="string">f&#x27;<span class="subst">&#123;times&#125;</span>倍的标准差:&#x27;</span>)</span><br><span class="line">    print(<span class="string">f&#x27;<span class="subst">&#123;<span class="built_in">len</span>(y) * <span class="number">100</span> / <span class="built_in">len</span>(x)&#125;</span>%&#x27;</span>)</span><br></pre></td></tr></table></figure>

<pre><code>1倍的标准差:
68.075%
2倍的标准差:
95.446%
3倍的标准差:
99.737%</code></pre>
<h4 id="2-05-重要结论"><a href="#2-05-重要结论" class="headerlink" title="2.05, 重要结论"></a>2.05, 重要结论</h4><p>根据中心极限定理和正态分布的特性, 如果总体标准差为$\sigma$, 对总体进行一次抽样, 如果样本足够大, 则样品均值 $\bar{X}$ 服从正态分布, 该均值约有 95.4% 的概率会在 2 倍的标准误差 ($\mu - 2\sigma / \sqrt{n}, \mu + 2\sigma / \sqrt{n}$) 范围内, 并且该样本均值约等于总体均值 $\mu$. 从而, 可以利用这一结论, 对总体均值进行区间估计.</p>
<p><strong>结论验证:</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 随机生成总体均值, 其值未知</span></span><br><span class="line">mean = np.random.randint(<span class="number">0</span>, <span class="number">10000</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 总体的标准差已知为 50</span></span><br><span class="line">std = <span class="number">50</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义总体数据</span></span><br><span class="line">all_ = np.random.normal(mean, std, size=<span class="number">100000</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从总体抽取 100 个元素构成样本</span></span><br><span class="line">sample = np.random.choice(all_, size=<span class="number">100</span>, replace=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算样本均值</span></span><br><span class="line">sample_mean = sample.mean()</span><br><span class="line">print(<span class="string">&#x27;样本均值:&#x27;</span>, sample_mean)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算样本的标准误差</span></span><br><span class="line">se = std / np.sqrt(n)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算置信区间 95%置信度</span></span><br><span class="line">min_ = sample_mean - <span class="number">1.96</span> * se</span><br><span class="line">max_ = sample_mean + <span class="number">1.96</span> * se</span><br><span class="line">print(<span class="string">&#x27;置信区间(95%置信度):&#x27;</span>, (min_, max_))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 区间估计</span></span><br><span class="line">print(<span class="string">f&#x27;总体均值有 95% 的概率在<span class="subst">&#123;(min_, max_)&#125;</span>区间内&#x27;</span>)</span><br><span class="line">print(<span class="string">&#x27;总体均值:&#x27;</span>, mean)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘图辅助</span></span><br><span class="line">plt.plot(mean, <span class="number">0</span>, marker=<span class="string">&#x27;*&#x27;</span>, color=<span class="string">&#x27;orange&#x27;</span>, ms=<span class="number">12</span>, label=<span class="string">&#x27;总体均值&#x27;</span>)</span><br><span class="line">plt.plot(sample_mean, <span class="number">0</span>, marker=<span class="string">&#x27;o&#x27;</span>, color=<span class="string">&#x27;r&#x27;</span>, label=<span class="string">&#x27;样本均值&#x27;</span>)</span><br><span class="line">plt.hlines(<span class="number">0</span>, xmin=min_, xmax=max_, color=<span class="string">&#x27;b&#x27;</span>, label=<span class="string">&#x27;置信区间&#x27;</span>)</span><br><span class="line">plt.axvline(min_, <span class="number">0.4</span>, <span class="number">0.6</span>, color=<span class="string">&#x27;r&#x27;</span>, ls=<span class="string">&#x27;--&#x27;</span>, label=<span class="string">&#x27;左边界&#x27;</span>)</span><br><span class="line">plt.axvline(max_, <span class="number">0.4</span>, <span class="number">0.6</span>, color=<span class="string">&#x27;g&#x27;</span>, ls=<span class="string">&#x27;--&#x27;</span>, label=<span class="string">&#x27;右边界&#x27;</span>)</span><br><span class="line">plt.legend()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<pre><code>样品均值: 3792.704816801116
置信区间(95%置信度): (3761.714495731466, 3823.6951378707663)
总体均值有 95% 的概率在(3761.714495731466, 3823.6951378707663)区间内
总体均值: 3789</code></pre>
<p><img src="/images/mathematical-statistics/output_5_1.png" alt="png"></p>
<h3 id="3-假设检验"><a href="#3-假设检验" class="headerlink" title="3, 假设检验"></a>3, 假设检验</h3><p>假设检验(显著性检验), 先对总体做出假设, 然后通过判断样本与总体之间是否存在显著性差异, 来验证总体的假设</p>
<p>假设检验使用了一种类似于 “反证法” 的推理方法，它的特点是：</p>
<ul>
<li><p>先对总体做出两个完全相反的假设, 原假设(设为真) 和 备择假设, 计算后导致不合理现象产生，则拒绝原假设, 接受备择假设, 反之接受原假设, 放弃备择假设</p>
</li>
<li><p>这种 “反证法” 不同于一般的反证法. 所谓不合理现象产生，并非指形式逻辑上的绝对矛盾，而是基于小概率原理：概率很小的事件在一次试验中几乎是不可能发生的，若发生了，就是不合理的.   </p>
</li>
<li><p>怎样才算 “小概率”, 通常可将概率不超过 0.05 的事件称为 “小概率事件” ，也可视具体情形而取 0.1 或 0.01 等. 在假设检验中常记这个概率为 α，称为显著性水平</p>
</li>
</ul>
<p>假设检验可分为正态分布检验, 正态总体均值检验, 非参数检验三类, 本文只介绍<strong>正态总体均值检验</strong>, 包括 Z检验 和 t检验 两种情况</p>
<h4 id="3-01-关键概念"><a href="#3-01-关键概念" class="headerlink" title="3.01, 关键概念:"></a>3.01, 关键概念:</h4><p>对总体参数做出两个完全对立的假设, 分别为:<br><strong>原假设(零假设) $H_{0}$<br>备择假设(对立假设) $H_{1}$</strong></p>
<p><strong>双边假设检验</strong>:<br>$H_{0}: \mu=\mu_{0}, H_{1}: \mu \neq \mu_{0}$ </p>
<p><strong>单边假设检验</strong>:<br>$H_{0}: \mu \geq \mu_{0}, H_{1}: \mu&lt;\mu_{0}$ (**左边检验**)<br>$H_{0}: \mu \leq \mu_{0}, H_{1}: \mu&gt;\mu_{0}$ (<strong>右边检验</strong>)<br>$\mu$ 为总体均值, $\mu_{0}$ 为假设均值 </p>
<p><strong>显著性水平</strong>: 根据需要设定的小概率事件的概率 α (1 - α 为置信度)</p>
<p><strong>检验统计量</strong>(Z 和 t): 用来判断样本均值与总体均值是否存在显著性差异</p>
<p><strong>P值:</strong> 通过检验统计量计算而得的概率值, 表示原假设可被拒绝的最小值(或可支持原假设的概率):<br>P ≤ α, 原假设可被拒绝的最小值比显著性水平还低, 原假设可被拒绝, 则拒绝原假设<br>P &gt; α, 原假设可被拒绝的最小值大于显著性水平, 原假设不可被拒绝, 支持原假设</p>
<h4 id="3-02-假设检验的步骤"><a href="#3-02-假设检验的步骤" class="headerlink" title="3.02, 假设检验的步骤"></a>3.02, 假设检验的步骤</h4><p>设置原假设与备择假设<br>设置显著性水平 α<br>根据问题选择假设检验的方式<br>计算统计量(Z 或 t)<br>计算 P值(Z 或 t 围成的分布面积)<br>根据 P值 与 α值, 决定接受原假设还是备择假设</p>
<p>例, 某车间用一台包装机包装葡萄糖. 袋装糖的净重是一个随机变量，它服从正态分布. 当机器正常时，其均值为 0.5kg，标准差为 0.015kg. 某日开工后为检验包装机是否正常，随机地抽取它所包装的糖 9 袋，称得净重为(kg):<br>0.497, 0.506, 0.518, 0.524, 0.498, 0.511, 0.520, 0.515, 0.512<br>判断下面说法是否正确:<br>(1) 机器正常    </p>
<p>例, 某车间用包装机包装葡萄糖. 袋装糖的净重是一个随机变量，它服从正态分布. 随机地抽取糖 9 袋，称得净重为(kg):<br>0.497, 0.506, 0.518, 0.524, 0.498, 0.511, 0.520, 0.515, 0.512<br>判断下面说法是否正确:<br>(2) 该车间袋装糖净重均值为 0.5kg<br>(3) 该车间袋装糖净重均值不少于 0.5kg<br>(4) 该车间袋装糖净重均值不多于 0.5kg</p>
<h4 id="3-03-Z检验"><a href="#3-03-Z检验" class="headerlink" title="3.03, Z检验"></a>3.03, Z检验</h4><p>Z检验适用于: 总体正态分布且方差已知, 样本容量较大(一般 ≥ 30)</p>
<p>Z统计量计算公式:</p>
<p>$$Z=\frac{\bar{x}-\mu_{0}}{S_{\bar{x}}}=\frac{\bar{x}-\mu_{0}}{\sigma / \sqrt{n}}$$</p>
<p>$\bar{x}$: 样本均值<br>$\mu_{0}$: 假设的总体均值<br>$S_{\bar{x}}$: 样本的标准误差<br>$\sigma$: 总体的标准差<br>$n$: 样本容量  </p>
<p>检验说法(1): 机器正常 </p>
<p>双边检验:<br>原假设机器正常: $H_{0}: \mu=\mu_{0}=0.5kg$<br>备择假设机器不正常: $H_{1}: \mu \neq \mu_{0} \neq 0.5kg$<br>设置显著性水平: α = 0.05</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> scipy <span class="keyword">import</span> stats</span><br><span class="line"></span><br><span class="line"><span class="comment"># 样本已知</span></span><br><span class="line">a = np.array([<span class="number">0.497</span>, <span class="number">0.506</span>, <span class="number">0.518</span>, <span class="number">0.524</span>, <span class="number">0.498</span>, <span class="number">0.511</span>, <span class="number">0.520</span>, <span class="number">0.515</span>, <span class="number">0.512</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 总体均值和标准差已知</span></span><br><span class="line">mean, std = <span class="number">0.5</span>, <span class="number">0.015</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算样本均值</span></span><br><span class="line">sample_mean = a.mean()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算样本标准误差</span></span><br><span class="line">se = std / np.sqrt(<span class="built_in">len</span>(a))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算 Z统计量</span></span><br><span class="line">Z = (sample_mean - mean) / se</span><br><span class="line">print(<span class="string">&#x27;Z统计量:&#x27;</span>, Z)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算 P值, 双边检验: Z值与其右边曲线围成的面积的 2 倍</span></span><br><span class="line">P = <span class="number">2</span> * stats.norm.sf(<span class="built_in">abs</span>(Z))</span><br><span class="line"></span><br><span class="line">print(<span class="string">&#x27;P值:&#x27;</span> , P)</span><br></pre></td></tr></table></figure>

<pre><code>Z统计量: 2.244444444444471
P值: 0.02480381963225589</code></pre>
<p><img src="/images/mathematical-statistics/mianji.png"></p>
<p>由结果可知, Z值 超过了 1.96, 由 Z值 与其右边曲线围成的面积的 2 倍, 必然小于 α(1.96 与其右边曲线围成的面积的 2 倍), 计算结果 P &lt; α, 因此拒绝原假设, 接受备择假设, 机器不正常</p>
<h4 id="3-04-t检验"><a href="#3-04-t检验" class="headerlink" title="3.04, t检验"></a>3.04, t检验</h4><p>t检验适用于: 总体正态分布, 方差未知, 样本数量较少(一般 &lt; 30), 但是随着样本容量的增加, 分布逐渐趋于正态分布</p>
<p><img src="/images/mathematical-statistics/tzyd.png"></p>
<p>t统计量计算公式:</p>
<p>$$t=\frac{\bar{x}-\mu_{0}}{S_{\bar{x}}}=\frac{\bar{x}-\mu_{0}}{S / \sqrt{n}}$$</p>
<p>$\bar{x}$: 样本均值<br>$\mu_{0}$: 假设的总体均值<br>$S_{\bar{x}}$: 样本的标准误差<br>$S$: 样本的标准差<br>$n$: 样本容量  </p>
<p><strong>双边检验</strong>:<br>检验说法(2): 该车间袋装糖净重均值为 0.5kg </p>
<p>原假设, 该车间袋装糖净重均值为 0.5kg: $H_{0}: \mu=\mu_{0}=0.5kg$<br>备择假设, 该车间袋装糖净重均值不为 0.5kg: $H_{1}: \mu \neq \mu_{0} \neq 0.5kg$<br>设置显著性水平: α = 0.05</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 样本已知</span></span><br><span class="line">a = np.array([<span class="number">0.497</span>, <span class="number">0.506</span>, <span class="number">0.518</span>, <span class="number">0.524</span>, <span class="number">0.498</span>, <span class="number">0.511</span>, <span class="number">0.520</span>, <span class="number">0.515</span>, <span class="number">0.512</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 假设的总体均值已知</span></span><br><span class="line">mean = <span class="number">0.5</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算样本均值</span></span><br><span class="line">sample_mean = a.mean()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算样本标准差</span></span><br><span class="line">std = a.std()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算 t统计量</span></span><br><span class="line">t = (sample_mean - mean) / ( std / np.sqrt(<span class="built_in">len</span>(a)))</span><br><span class="line">print(<span class="string">&#x27;t统计量:&#x27;</span>, t)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算 P值, df 是自由度: 样本变量可自由取值的个数</span></span><br><span class="line">P = <span class="number">2</span> * stats.t.sf(<span class="built_in">abs</span>(t), df=<span class="built_in">len</span>(a) - <span class="number">1</span>)</span><br><span class="line">print(<span class="string">&#x27;P值:&#x27;</span>, P)</span><br></pre></td></tr></table></figure>

<pre><code>t统计量: 3.802382179137283
P值: 0.005218925008708613</code></pre>
<p>P &lt; α, 拒绝原假设, 接受备择假设: 该车间袋装糖净重均值不为 0.5kg</p>
<p>还可以通过 scipy 提供的方法 <code>ttest_1samp</code> 来进行 t检验计算:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">stats.ttest_1samp(a, <span class="number">0.5</span>)</span><br></pre></td></tr></table></figure>




<pre><code>Ttest_1sampResult(statistic=3.584920298041139, pvalue=0.007137006417828698)</code></pre>
<p><strong>左边检验</strong>:<br>检验说法(3): 该车间袋装糖净重均值不少于 0.5kg  </p>
<p>原假设, 该车间袋装糖净重均值不少于 0.5kg: $H_{0}: \mu \geq \mu_{0}$<br>备择假设, 该车间袋装糖净重均值少于 0.5kg: $H_{1}: \mu&lt;\mu_{0}$<br>设置显著性水平: α = 0.05  </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># t统计量上述已经计算, 只需计算 P值: t统计量与其左边曲线围成的面积</span></span><br><span class="line">P = stats.t.cdf(t, df=<span class="built_in">len</span>(a) - <span class="number">1</span>)</span><br><span class="line">print(<span class="string">&#x27;P值:&#x27;</span>, P)</span><br></pre></td></tr></table></figure>

<pre><code>P值: 0.9973905374956458</code></pre>
<p>P &gt; α, 接受原假设, 该车间袋装糖净重均值不少于 0.5kg</p>
<p><strong>右边检验</strong>:<br>检验说法(4): 该车间袋装糖净重均值不多于 0.5kg  </p>
<p>原假设, 该车间袋装糖净重均值不多于 0.5kg: $H_{0}: \mu \leq \mu_{0}$<br>备择假设, 该车间袋装糖净重均值多于 0.5kg: $H_{1}: \mu&gt;\mu_{0}$<br>设置显著性水平: α = 0.05 </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 计算 P值: t统计量与其右边曲线围成的面积</span></span><br><span class="line">P = stats.t.sf(t, df=<span class="built_in">len</span>(a) - <span class="number">1</span>)</span><br><span class="line">print(<span class="string">&#x27;P值:&#x27;</span>, P)</span><br></pre></td></tr></table></figure>

<pre><code>P值: 0.0026094625043543065</code></pre>
<p>P &lt; α, 拒绝原假设, 接受备择假设, 该车间袋装糖净重均值多于 0.5kg</p>
<br>
]]></content>
      <categories>
        <category>数据分析</category>
      </categories>
      <tags>
        <tag>数理统计</tag>
      </tags>
  </entry>
  <entry>
    <title>逻辑回归</title>
    <url>/statistics/statistics4-548ae340f960/</url>
    <content><![CDATA[<blockquote>
<p>内容主要来源：<strong>开课吧</strong>学习笔记整理。</p>
</blockquote>
<h2 id="五-逻辑回归"><a href="#五-逻辑回归" class="headerlink" title="五, 逻辑回归"></a>五, 逻辑回归</h2><p>逻辑回归和线性回归有类似之处, 都是利用线性加权计算的模型, 但逻辑回归是分类算法, 例如对是否患癌症进行预测, 因变量就是 <strong>是</strong> 和 <strong>否</strong>, 两个类别, 自变量可以是年龄, 性别, 饮食, 作息, 病菌感染等, 自变量既可以是数值变量, 也可以是类别变量</p>
<h3 id="1-逻辑回归二分类推导"><a href="#1-逻辑回归二分类推导" class="headerlink" title="1, 逻辑回归二分类推导"></a>1, 逻辑回归二分类推导</h3><p>和线性回归类似, 设自变量为 x, 每个自变量的权重为 w, 令:</p>
<p>$$<br>\begin{array}{l}<br>z=w_{1} x_{1}+w_{2} x_{2}+\cdots+w_{n} x_{n}+b \<br>=\sum_{j=1}^{n} w_{j} x_{j}+b \<br>=\sum_{j=0}^{n} w_{j} x_{j} \<br>=\vec{w}^{T} \cdot \vec{x}<br>\end{array}<br>$$</p>
<p>z 是一个连续值, 取值范围(-∞, +∞), 为了实现分类, 一般设置阈值 z = 0, 当 z &gt; 0 时, 将样本判定为一个类别(正例), 该类别设为 1, 当 z ≤ 0 时, 判定为另一个类别(负例), 该类别设为 0, 再设因变量为 y, 从而逻辑回归方程可表示为:</p>
<p>$y=1, z&gt;0$</p>
<p>$y=0, z \leq 0$</p>
<p>上述方程虽然实现了分类, 但提供的信息有限, 因此引入 <strong>sigmoid函数</strong>(也叫 Logistic函数), 将 z 映射到 (0, 1) 区间，可以实现二分类的同时, 还能体现将样本分为某个类的可能性, 这个可能性设为 p:</p>
<p>$$p=\operatorname{sigmoid}(z)=\frac{1}{1+e^{-z}}$$</p>
<p>sigmoid 函数图像如下:</p>
<p><img src="/images/mathematical-statistics/sigmoid.png"></p>
<p>于是, 逻辑回归方程又可表示为:</p>
<p>$y=1, p&gt;0.5$</p>
<p>$y=0, 1-p \geq 0.5$</p>
<p>从而可见, 通过比较 p 和 1-p 哪个更大(z 的阈值不取 0 时做出调整即可), 预测结果就是对应的一类</p>
<h3 id="2-逻辑回归的损失函数"><a href="#2-逻辑回归的损失函数" class="headerlink" title="2, 逻辑回归的损失函数"></a>2, 逻辑回归的损失函数</h3><p>通过上述推导过程可知, 要得到逻辑回归模型, 最终就是要求得参数 $\vec{w}^{T}$, 于是将 p 和 1-p 统一, 构造一个损失函数来求 $\vec{w}^{T}$:</p>
<p>$$p(y=1 | x ; w)=s(z)$$</p>
<p>$$p(y=0 | x ; w)=1-s(z)$$</p>
<p>合并:</p>
<p>$$p(y | x ; w)=s(z)^{y}(1-s(z))^{1-y}$$</p>
<p>上式表示一个样本的概率, 我们要求解能够使所有样本联合概率密度最大的 $\vec{w}^{T}$ 值, 根据极大似然估计, 所有样本的联合概率密度函数(似然函数)为:</p>
<p>$$\begin{array}{l}<br>L(w)=\prod_{i=1}^{m} p\left(y^{(i)} | x^{(i)} ; w\right) \<br>=\prod_{i=1}^{m} s\left(z^{(i)}\right)^{y^{(i)}}\left(1-s\left(z^{(i)}\right)\right)^{1-y^{(i)}}<br>\end{array}$$</p>
<p>取对数, 让累积乘积变累积求和:</p>
<p>$$\begin{array}{l}<br>\ln L(w)=\ln \left(\prod_{i=1}^{m} s\left(z^{(i)}\right)^{y^{(i)}}\left(1-s\left(z^{(i)}\right)^{1-y^{(i)}}\right)\right) \<br>=\sum_{i=1}^{m}\left(y^{(i)} \ln s\left(z^{(i)}\right)+\left(1-y^{(i)}\right) \ln \left(1-s\left(z^{(i)}\right)\right)\right)<br>\end{array}$$</p>
<p>要求上式最大值, 取反变成求最小值, 就作为逻辑回归的损失函数(交叉熵损失函数):</p>
<p>$$J(w)=-\sum_{i=1}^{m}\left(y^{(i)} \ln s\left(z^{(i)}\right)+\left(1-y^{(i)}\right) \ln \left(1-s\left(z^{(i)}\right)\right)\right)$$</p>
<p>利用梯度下降法最终求得 $\vec{w}^{T}$ (省略)</p>
<p>例, 对鸢尾花实现二分类并分析:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LogisticRegression</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> load_iris</span><br><span class="line"><span class="keyword">import</span> warnings</span><br><span class="line"></span><br><span class="line">warnings.filterwarnings(<span class="string">&#x27;ignore&#x27;</span>)</span><br><span class="line"></span><br><span class="line">iris = load_iris()</span><br><span class="line">x, y = iris.data, iris.target</span><br><span class="line"></span><br><span class="line"><span class="comment"># 鸢尾花数据集有 3 个类别, 4 个特性, 取两个类别, 两个特性</span></span><br><span class="line">x = x[y!=<span class="number">0</span>, <span class="number">2</span>:]</span><br><span class="line">y = y[y!=<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 拆分训练集与测试集</span></span><br><span class="line">x_train, x_test, y_train, y_test = train_test_split(x, y,</span><br><span class="line">        test_size=<span class="number">0.25</span>, random_state=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 训练分类模型</span></span><br><span class="line">lr = LogisticRegression()</span><br><span class="line">lr.fit(x_train, y_train)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试</span></span><br><span class="line">y_hat = lr.predict(x_test)</span><br><span class="line">print(<span class="string">&#x27;权重:&#x27;</span>, lr.coef_)</span><br><span class="line">print(<span class="string">&#x27;偏置:&#x27;</span>, lr.intercept_)</span><br><span class="line">print(<span class="string">&#x27;真实值:&#x27;</span>, y_test)</span><br><span class="line">print(<span class="string">&#x27;预测值:&#x27;</span>, y_hat)</span><br></pre></td></tr></table></figure>

<pre><code>权重: [[2.54536368 2.15257324]]
偏置: [-16.08741502]
真实值: [2 1 2 1 1 1 1 1 1 1 2 2 2 1 1 1 1 1 2 2 1 1 2 1 2]
预测值: [2 1 1 1 1 1 1 2 1 1 2 2 2 1 1 1 1 1 2 2 1 1 2 1 2]</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 样本的真实类别可视化</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.family&#x27;</span>] = <span class="string">&#x27;SimHei&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 取出两种鸢尾花的特征</span></span><br><span class="line">c1 = x[y==<span class="number">1</span>]</span><br><span class="line">c2 = x[y==<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制样本分布</span></span><br><span class="line">plt.scatter(x=c1[:, <span class="number">0</span>], y=c1[:, <span class="number">1</span>], c=<span class="string">&#x27;g&#x27;</span>, label=<span class="string">&#x27;类别1&#x27;</span>)</span><br><span class="line">plt.scatter(x=c2[:, <span class="number">0</span>], y=c2[:, <span class="number">1</span>], c=<span class="string">&#x27;r&#x27;</span>, label=<span class="string">&#x27;类别2&#x27;</span>)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;花瓣长度&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;花瓣宽度&#x27;</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;鸢尾花样本分布&#x27;</span>)</span><br><span class="line">plt.legend()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>


<p><img src="/images/mathematical-statistics/output_2_0.png"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将预测类别和真实类别可视化对比</span></span><br><span class="line">plt.figure(figsize=(<span class="number">6</span>, <span class="number">2.2</span>))</span><br><span class="line">plt.plot(y_test, marker=<span class="string">&#x27;o&#x27;</span>, ls=<span class="string">&#x27;&#x27;</span>, ms=<span class="number">10</span>, c=<span class="string">&#x27;r&#x27;</span>, label=<span class="string">&#x27;真实类别&#x27;</span>)</span><br><span class="line">plt.plot(y_hat, marker=<span class="string">&#x27;x&#x27;</span>, ls=<span class="string">&#x27;&#x27;</span>, ms=<span class="number">10</span>, c=<span class="string">&#x27;g&#x27;</span>, label=<span class="string">&#x27;预测类别&#x27;</span>)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;样本序号&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;类别&#x27;</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;预测结果&#x27;</span>)</span><br><span class="line">plt.legend()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>


<p><img src="/images/mathematical-statistics/output_3_0.png"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 因预测样本所属类别时, 通过比较概率得到结果, </span></span><br><span class="line"><span class="comment"># 我们可将结果对应的概率可视化</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取预测的概率值</span></span><br><span class="line">probability = lr.predict_proba(x_test)</span><br><span class="line">print(<span class="string">&#x27;概率:&#x27;</span>, probability[:<span class="number">5</span>], sep=<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">index = np.arange(<span class="built_in">len</span>(x_test))</span><br><span class="line">pro_0 = probability[:, <span class="number">0</span>]</span><br><span class="line">pro_1 = probability[:, <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置预测结果标签, 对和错</span></span><br><span class="line">tick_label = np.where(y_test==y_hat, <span class="string">&#x27;对&#x27;</span>, <span class="string">&#x27;错&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制堆叠图</span></span><br><span class="line">plt.figure(figsize=(<span class="number">8</span>, <span class="number">2</span>))</span><br><span class="line">plt.bar(index, height=pro_0, color=<span class="string">&#x27;g&#x27;</span>, label=<span class="string">&#x27;类别1的概率&#x27;</span>)</span><br><span class="line">plt.bar(index, height=pro_1, color=<span class="string">&#x27;r&#x27;</span>, bottom=pro_0,</span><br><span class="line">        label=<span class="string">&#x27;类别2的概率&#x27;</span>, tick_label=tick_label)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;样本序号&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;各类别的概率&#x27;</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;分类概率&#x27;</span>)</span><br><span class="line">plt.legend()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<pre><code>概率:
[[0.46933862 0.53066138]
 [0.98282882 0.01717118]
 [0.72589695 0.27410305]
 [0.91245661 0.08754339]
 [0.80288412 0.19711588]]</code></pre>
<p><img src="/images/mathematical-statistics/output_4_1.png"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 绘制决策边界</span></span><br><span class="line"><span class="comment"># 决策边界: 不同类别的分界线</span></span><br><span class="line"><span class="keyword">from</span> matplotlib.colors <span class="keyword">import</span> ListedColormap</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义绘制函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">plot_decision_boundary</span>(<span class="params">model, x, y</span>):</span></span><br><span class="line">    color = [<span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;b&#x27;</span>]</span><br><span class="line">    marker = [<span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;v&#x27;</span>, <span class="string">&#x27;x&#x27;</span>]</span><br><span class="line">    class_label = np.unique(y)</span><br><span class="line">    cmap = ListedColormap(color[:<span class="built_in">len</span>(class_label)])</span><br><span class="line">    x1_min, x2_min = np.<span class="built_in">min</span>(x, axis=<span class="number">0</span>)</span><br><span class="line">    x1_max, x2_max = np.<span class="built_in">max</span>(x, axis=<span class="number">0</span>)</span><br><span class="line">    x1 = np.arange(x1_min - <span class="number">1</span>, x1_max + <span class="number">1</span>, <span class="number">0.02</span>)</span><br><span class="line">    x2 = np.arange(x2_min - <span class="number">1</span>, x2_max + <span class="number">1</span>, <span class="number">0.02</span>)</span><br><span class="line">    x1, x2 = np.meshgrid(x1, x2)</span><br><span class="line">    z = model.predict(np.array([x1.ravel(), x2.ravel()]).T).reshape(x1.shape)</span><br><span class="line">    </span><br><span class="line">    plt.contourf(x1, x2, z, cmap=cmap, alpha=<span class="number">0.5</span>)</span><br><span class="line">    <span class="keyword">for</span> i, class_ <span class="keyword">in</span> <span class="built_in">enumerate</span>(class_label):</span><br><span class="line">        plt.scatter(x=x[y==class_, <span class="number">0</span>], y=x[y==class_, <span class="number">1</span>],</span><br><span class="line">                c=cmap.colors[i], label=class_, marker=marker[i])</span><br><span class="line">    plt.legend()</span><br><span class="line">    plt.show()</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 绘制模型在训练集上的决策边界</span></span><br><span class="line">plot_decision_boundary(lr, x_train, y_train)</span><br></pre></td></tr></table></figure>


<p><img src="/images/mathematical-statistics/output_5_0.png"></p>
<p><strong>拓展</strong>:<br>逻辑回归实现多分类</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">iris = load_iris()</span><br><span class="line">x, y = iris.data, iris.target</span><br><span class="line">x = x[:, <span class="number">2</span>:]</span><br><span class="line">x_train, x_test, y_train, y_test = train_test_split(x, y, </span><br><span class="line">        test_size=<span class="number">0.25</span>, random_state=<span class="number">2</span>)</span><br><span class="line">lr = LogisticRegression()</span><br><span class="line">lr.fit(x_train, y_train)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试分类</span></span><br><span class="line">y_hat = lr.predict(x_test)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可视化结果</span></span><br><span class="line">plt.rcParams[<span class="string">&#x27;axes.unicode_minus&#x27;</span>]=<span class="literal">False</span></span><br><span class="line">plot_decision_boundary(lr, x_test, y_test)</span><br></pre></td></tr></table></figure>


<p><img src="/images/mathematical-statistics/output_7_0.png"></p>
<br>

]]></content>
      <categories>
        <category>数据分析</category>
      </categories>
      <tags>
        <tag>数理统计</tag>
      </tags>
  </entry>
  <entry>
    <title>线性回归</title>
    <url>/statistics/statistics3-65786bb614a2/</url>
    <content><![CDATA[<blockquote>
<p>内容主要来源：<strong>开课吧</strong>学习笔记整理。</p>
</blockquote>
<h2 id="四-线性回归"><a href="#四-线性回归" class="headerlink" title="四, 线性回归"></a>四, 线性回归</h2><h3 id="1-模型"><a href="#1-模型" class="headerlink" title="1, 模型"></a>1, 模型</h3><p>模型是指对于某个(类)实际问题的求解或客观事物运行规律进行抽象后的一种形式化表达方式, 可以理解为一个函数(一种映射规则)</p>
<p>任何模型都是由三个部分组成: 目标, 变量和关系. 建模时明确了模型的目标，才能进一步确定影响目标(因变量)的各关键变量(自变量)，进而确定变量之间的关系(函数关系)</p>
<p>通过大量数据检验(训练)模型, 将模型(函数)的各个参数求解, 当参数确定之后, 便可利用模型对未知数据进行求值, 预测</p>
<p>用于训练模型的样本数据中的每个属性称为特征, 用 x 表示, 样本中的每条数据经过模型计算得到的输出值称为标签(监督学习), 用 y 表示, 从而得到 y = f(x) 的函数关系</p>
<h3 id="2-回归分析"><a href="#2-回归分析" class="headerlink" title="2, 回归分析"></a>2, 回归分析</h3><p>在统计学中, 回归分析指的是确定两种或两种以上变量间相互依赖的定量关系的一种统计分析方法</p>
<p>回归分析按照涉及的变量的多少，分为一元回归分析和多元回归分析；按照因变量的多少，可分为简单回归分析和多重回归分析；按照自变量和因变量之间的关系类型，可分为线性回归分析和非线性回归分析</p>
<p>回归分析解释自变量 x 发生改变, 因变量 y 会如何改变</p>
<p><strong>拟合</strong>, 插值 和 逼近 是数值分析的三大基础工具. 线性回归和非线性回归, 也叫线性拟合和非线性拟合, 拟合就是从整体上靠近已知点列，构造一种算法(模型或函数), 使得算法能够更加符合真实数据</p>
<h3 id="3-简单线性回归"><a href="#3-简单线性回归" class="headerlink" title="3, 简单线性回归"></a>3, 简单线性回归</h3><p>线性回归分析的自变量和因变量之间是线性关系, 只有一个自变量时称为<strong>简单线性回归</strong>, 多个自变量时称为<strong>多元线性回归</strong></p>
<p>简单线性回归方程:</p>
<p>$$\hat{y}=w * x+b$$</p>
<p>$\hat{y}$ 为因变量, x 为自变量, w 为比例关系, b 为截距, w 和 b 就是模型的参数. 例如房屋价格与房屋面积的正比例关系</p>
<h3 id="4-多元线性回归"><a href="#4-多元线性回归" class="headerlink" title="4, 多元线性回归"></a>4, 多元线性回归</h3><p>现实生活中自变量通常不止一个, 例如影响房屋价格的, 除了房屋面积, 还有交通, 地段, 新旧, 楼层等等因素. 不同的因素对房屋的价格影响力度(权重)不同, 因此使用多个因素来分析房屋的价格(各个因素与房屋价格近似线性关系), 可以得出多元线性回归方程:</p>
<p>$\hat{y}=w_{1} * x_{1}+w_{2} * x_{2}+w_{3} * x_{3}+\cdots+w_{n} * x_{n}+b$</p>
<p>$x$: 影响因素, 特征<br>$w$: 每个 x 的影响力度<br>$n$: 特征个数<br>$\hat{y}$: 房屋的预测价格  </p>
<p>令:</p>
<p>$x_{0}=1, w_{0}=b$</p>
<p>设 $\vec{w}$ 和 $\vec{x}$ 为两个向量如下:</p>
<p>$$\vec{w}=\left(w_{0}, w_{1}, w_{2}, w_{3}, \ldots, w_{n}\right)^{T}$$<br>$$\vec{x}=\left(x_{0}, x_{1}, x_{2}, x_{3}, \ldots, x_{n}\right)^{T}$$</p>
<p>则方程可表示为: </p>
<p>$$\begin{aligned}<br>\hat{y} &amp;=w_{0} * x_{0}+w_{1} * x_{1}+w_{2} * x_{2}+w_{3} * x_{3}+\ldots \ldots+w_{n} * x_{n} \<br>=\sum_{j=0}^{n} w_{j} * x_{j} \<br>=\vec{w}^{T} \cdot \vec{x}<br>\end{aligned}$$</p>
<p>接下来只需要计算出参数 $\vec{w}^{T}$, 便可以建立模型</p>
<h3 id="5-损失函数"><a href="#5-损失函数" class="headerlink" title="5, 损失函数"></a>5, 损失函数</h3><p>损失函数, 用来衡量模型预测值与真实值之间的差异的函数, 也称目标函数或代价函数. 损失函数的值越小, 表示预测值与真实值之间的差异越小.</p>
<p>因此, 求解上述模型的参数 $\vec{w}^{T}$, 就是要建立一个关于模型参数的损失函数(以模型参数 $\vec{w}^{T}$ 为自变量的函数), 然而 $\vec{w}^{T}$ 的取值组合是无限的, 目标就是通过机器学习, 求出一组最佳组合, 使得损失函数的值最小</p>
<p>在线性回归中, 使用平方损失函数(最小二乘法), 用 J(w) 表示:</p>
<p>$$\begin{array}{l}<br>J(w)=\frac{1}{2} \sum_{i=1}^{m}\left(y^{(i)}-\hat{y}^{(i)}\right)^{2} \<br>=\frac{1}{2} \sum_{i=1}^{m}\left(y^{(i)}-\vec{w}^{T} \vec{x}^{(i)}\right)^{2}<br>\end{array}$$</p>
<p>m: 样本(训练集)数据的条数<br>$y^{(i)}$: 样本第 i 条数据的真实值<br>$\hat{y}^{(i)}$: 样本第 i 条数据的预测值<br>$\vec{x}^{(i)}$: 样本第 i 条数据的特征  </p>
<p>m, $y^{(i)}$ 和 $\vec{x}^{(i)}$ 已知, 要使 J(w) 最小, 对 $\vec{w}^{T}$ 求导并令导数等于 0 , 便可求得 $\vec{w}^{T}$, 然后将样本(训练集)输入通过机器学习计算出具体的 $\vec{w}^{T}$</p>
<h3 id="6-回归模型评估"><a href="#6-回归模型评估" class="headerlink" title="6, 回归模型评估"></a>6, 回归模型评估</h3><p>建立模型之后, 模型的效果如何, 需要进行评估, 对于回归模型, 可用如下指标来衡量:</p>
<p><strong>MSE</strong>:<br>平均平方误差, 所有样本数据误差的平方和取均值:</p>
<p>$$M S E=\frac{1}{m} \sum_{i=1}^{m}\left(y^{(i)}-\hat{y}^{(i)}\right)^{2}$$</p>
<p><strong>RMSE</strong>:<br>平均平方误差的平方根:</p>
<p>$$R M S E=\sqrt{M S E}=\sqrt{\frac{1}{m} \sum_{i=1}^{m}\left(y^{(i)}-\hat{y}^{(i)}\right)^{2}}$$</p>
<p><strong>MAE</strong>:<br>平均绝对值误差, 所有样本数据误差的绝对值的和取均值:</p>
<p>$$M A E=\frac{1}{m} \sum_{i=1}^{m}\left|y^{(i)}-\hat{y}^{(i)}\right|$$</p>
<p>上述指标越小越好, 小到什么程度, 不同的对象建立的模型不一样</p>
<p><strong>R²</strong>:<br>决定系数，反应因变量的全部变异能通过回归关系被自变量解释的比例. 如 R²=0.8，则表示回归关系可以解释因变量 80% 的变异. 换句话说，如果我们能控制自变量不变，则因变量的变异程度会减少 80%</p>
<p>在训练集中 R² 取值范围为 [0, 1], 在测试集(未知数据)中, R² 的取值范围为 [-∞, 1], R² 的值越大, 模型拟合越好</p>
<p>R² 的计算公式: </p>
<p>$$R^{2}=1-\frac{R S S}{T S S}=1-\frac{\sum_{i=1}^{m}\left(y^{(i)}-\hat{y}^{(i)}\right)^{2}}{\sum_{i=1}^{m}\left(y^{(i)}-\bar{y}\right)^{2}}$$</p>
<p>$\bar{y}$: 样本(测试集)的平均值</p>
<p>不管何种对象建立的模型, R² 都是越大模拟越好</p>
<p><strong>例一, 简单线性回归模型: 求鸢尾花花瓣长度和宽度的关系</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入用于线性回归的类</span></span><br><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LinearRegression</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切分训练集与测试集的模块</span></span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"></span><br><span class="line"><span class="comment"># 鸢尾花数据集</span></span><br><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> load_iris</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置输出数据的精度为 2 (默认是8)</span></span><br><span class="line">np.set_printoptions(precision=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取花瓣长度 x, 宽度 y</span></span><br><span class="line">iris = load_iris()</span><br><span class="line">x, y = iris.data[:, <span class="number">2</span>].reshape(<span class="number">-1</span>, <span class="number">1</span>), iris.data[:, <span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将数据拆分为训练集和测试集, 指定测试集占比 test_size</span></span><br><span class="line"><span class="comment"># 指定随机种子 random_state(可以任意值但必须确定), 锁定拆分行为</span></span><br><span class="line">x_train, x_test, y_train, y_test = train_test_split(</span><br><span class="line">    x, y, test_size=<span class="number">0.25</span>, random_state=<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用训练集训练模型</span></span><br><span class="line">lr = LinearRegression()</span><br><span class="line">lr.fit(x_train, y_train)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 求得模型参数</span></span><br><span class="line">print(<span class="string">&#x27;权重 w:&#x27;</span>, lr.coef_, <span class="string">&#x27;截距 b:&#x27;</span>, lr.intercept_)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用模型进行预测</span></span><br><span class="line">y_hat = lr.predict(x_test)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果可视化</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.family&#x27;</span>] = <span class="string">&#x27;SimHei&#x27;</span></span><br><span class="line">plt.rcParams[<span class="string">&#x27;axes.unicode_minus&#x27;</span>] = <span class="literal">False</span></span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.size&#x27;</span>] = <span class="number">10</span></span><br><span class="line"></span><br><span class="line">plt.scatter(x_train, y_train, c=<span class="string">&#x27;orange&#x27;</span>, label=<span class="string">&#x27;训练集&#x27;</span>)</span><br><span class="line">plt.scatter(x_test, y_test, c=<span class="string">&#x27;g&#x27;</span>, marker=<span class="string">&#x27;D&#x27;</span>, label=<span class="string">&#x27;测试集&#x27;</span>)</span><br><span class="line">plt.plot(x, lr.predict(x), <span class="string">&#x27;r-&#x27;</span>)</span><br><span class="line">plt.legend()</span><br><span class="line">plt.xlabel(<span class="string">&#x27;花瓣长度&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;花瓣宽度&#x27;</span>)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 模型评估</span></span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> mean_squared_error, mean_absolute_error, r2_score</span><br><span class="line"></span><br><span class="line">print(<span class="string">&#x27;MSE:&#x27;</span>, mean_squared_error(y_test, y_hat))</span><br><span class="line">print(<span class="string">&#x27;RMSE:&#x27;</span>, np.sqrt(mean_squared_error(y_test, y_hat)))</span><br><span class="line">print(<span class="string">&#x27;MAE:&#x27;</span>, mean_absolute_error(y_test, y_hat))</span><br><span class="line">print(<span class="string">&#x27;训练集R²:&#x27;</span>, r2_score(y_train, lr.predict(x_train))) <span class="comment"># 可换成 lr.score(x_train, y_train)</span></span><br><span class="line">print(<span class="string">&#x27;测试集R²:&#x27;</span>, r2_score(y_test, y_hat)) <span class="comment"># 可换成 lr.score(x_test, y_test)</span></span><br></pre></td></tr></table></figure>

<pre><code>权重 w: [0.42] 截距 b: -0.370615595909495</code></pre>
<p><img src="/images/mathematical-statistics/output_1_101.png"></p>
<pre><code>MSE: 0.047866747643216113
RMSE: 0.21878470614559903
MAE: 0.1543808898175286
训练集R²: 0.9317841638431329
测试集R²: 0.9119955391492289</code></pre>
<p><strong>列二, 多元线性回归模型: 波士顿房价预测</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LinearRegression</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> load_boston</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">boston = load_boston()</span><br><span class="line">x, y = boston.data, boston.target</span><br><span class="line">df = pd.DataFrame(np.concatenate([x, y.reshape(<span class="number">-1</span>, <span class="number">1</span>)], axis=<span class="number">1</span>), </span><br><span class="line">                 columns=boston.feature_names.tolist() + [<span class="string">&#x27;MEDV&#x27;</span>])</span><br><span class="line"><span class="comment"># 部分数据</span></span><br><span class="line">df.head(<span class="number">3</span>)</span><br></pre></td></tr></table></figure>




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>CRIM</th>
      <th>ZN</th>
      <th>INDUS</th>
      <th>CHAS</th>
      <th>NOX</th>
      <th>RM</th>
      <th>AGE</th>
      <td>...</td>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>0.00632</td>
      <td>18.0</td>
      <td>2.31</td>
      <td>0.0</td>
      <td>0.538</td>
      <td>6.575</td>
      <td>65.2</td>
      <td>...</td>
    </tr>
    <tr>
      <th>1</th>
      <td>0.02731</td>
      <td>0.0</td>
      <td>7.07</td>
      <td>0.0</td>
      <td>0.469</td>
      <td>6.421</td>
      <td>78.9</td>
      <td>...</td>
    </tr>
    <tr>
      <th>2</th>
      <td>0.02729</td>
      <td>0.0</td>
      <td>7.07</td>
      <td>0.0</td>
      <td>0.469</td>
      <td>7.185</td>
      <td>61.1</td>
      <td>...</td>
    </tr>
  </tbody>
</table>
</div>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x_train, x_test, y_train, y_test = train_test_split(</span><br><span class="line">    x, y, test_size=<span class="number">0.25</span>, random_state=<span class="number">5</span>)</span><br><span class="line">lr = LinearRegression()</span><br><span class="line">lr.fit(x_train, y_train)</span><br><span class="line">print(<span class="string">&#x27;权重:&#x27;</span>, lr.coef_)</span><br><span class="line">print(<span class="string">&#x27;截距:&#x27;</span>, lr.intercept_)</span><br><span class="line">y_hat = lr.predict(x_test)</span><br><span class="line">print(<span class="string">&#x27;训练集R²:&#x27;</span>, lr.score(x_train, y_train))</span><br><span class="line">print(<span class="string">&#x27;测试集R²:&#x27;</span>, lr.score(x_test, y_test)) </span><br><span class="line"></span><br><span class="line"><span class="comment"># 假如获取了一间房屋的数据, 预测其房价</span></span><br><span class="line">room_data = np.array([<span class="number">0.00732</span>, <span class="number">17.0</span>, <span class="number">1.31</span>, <span class="number">1.0</span>, <span class="number">0.638</span>, <span class="number">7.575</span>, <span class="number">62.2</span>, <span class="number">5.0900</span>,</span><br><span class="line">                      <span class="number">1.0</span>, <span class="number">296.0</span>, <span class="number">15.3</span>, <span class="number">396.90</span>, <span class="number">4.98</span>]).reshape(<span class="number">1</span>, <span class="number">-1</span>)</span><br><span class="line">y_price = lr.predict(room_data)</span><br><span class="line">print(<span class="string">&#x27;房屋价格:&#x27;</span>, y_price)</span><br></pre></td></tr></table></figure>

<pre><code>权重: [-1.53004848e-01  4.79388437e-02 -8.60131597e-03  2.57986675e+00
 -1.46325645e+01  3.96283436e+00 -7.92357629e-03 -1.46078023e+00
  3.45431204e-01 -1.24503134e-02 -9.19092768e-01  1.32203623e-02
 -5.17255347e-01]
截距: 32.214120389743606
训练集R²: 0.7468034208269784
测试集R²: 0.7059096071098042
房屋价格: [33.62048527]</code></pre>
<p>多元线性回归在空间中, 可表示为一个超平面去拟合空间中的数据点</p>
<br>
]]></content>
      <categories>
        <category>数据分析</category>
      </categories>
      <tags>
        <tag>数理统计</tag>
      </tags>
  </entry>
  <entry>
    <title>分类模型评估</title>
    <url>/statistics/statistics5-718e604fdfd5/</url>
    <content><![CDATA[<blockquote>
<p>内容主要来源：<strong>开课吧</strong>学习笔记整理。</p>
</blockquote>
<h2 id="六-分类模型评估"><a href="#六-分类模型评估" class="headerlink" title="六, 分类模型评估"></a>六, 分类模型评估</h2><p>在完成模型训练之后，需要对模型的效果进行评估，根据评估结果继续调整模型的参数, 特征或者算法，以达到满意的结果</p>
<h3 id="1-混淆矩阵"><a href="#1-混淆矩阵" class="headerlink" title="1, 混淆矩阵"></a>1, 混淆矩阵</h3><p>将 真正例(TP), 假正例(FP), 真负例(TN), 假负例(FN) 统计于一个方阵中, 观察比较, 评价模型好坏, 矩阵如下:</p>
<p><img src="/images/mathematical-statistics/hxjz.png"></p>
<p>混淆矩阵统计数量, 评价不直观也有限, 基于混淆矩阵又延伸出 正确率, 精准率, 召回率, F1(调和平均值), ROC曲线和AUC等</p>
<h3 id="2-评估指标分析"><a href="#2-评估指标分析" class="headerlink" title="2, 评估指标分析"></a>2, 评估指标分析</h3><p><strong>正确率:</strong></p>
<p>$$\text { 正确率 }=\frac{T P+T N}{T P+T N+F P+F N}$$</p>
<p>正确率, 表示总体(包括正负)预测正确的比率, 在模型对正例和负例的预测准确度差异较大时, 难以评价模型的好坏, 例如正例较多, 负例较少, 正例全部预测对了, 负例只预测对几个, 正确率却可能较高</p>
<p><strong>精准率:</strong></p>
<p>$$\text { 精准率 }=\frac{T P}{T P+F P}$$</p>
<p>精准率, 表示所有预测为正例的结果中 预测正确的正例 的占比, 精准率越高, 说明正例预测正确概率越高, 因此精准率更关注”一击必中”, 比如通过预测找出上涨的概率很高的一支股票</p>
<p><strong>召回率:</strong></p>
<p>$$\text { 召回率 }=\frac{T P}{T P+F N}$$</p>
<p>召回率, 表示所有真实的正例中, 预测正确的正例 的占比, 召回率越高, 说明正例被”召回”的越多, 因此召回率更关注”宁错一千, 不放一个”, 例如通过预测尽可能将新冠肺炎患者全部隔离观察</p>
<p><strong>调和平均值 F1</strong>:</p>
<p>$$F 1=\frac{2 * \text {精准率} * \text {召回率}}{\text {精准率}+\text {召回率}}$$</p>
<p>F1 将综合了精准率和召回率, F1越高, 说明模型预测效果越好, F1 能够直接评估模型的好坏</p>
<p><strong>ROC曲线:</strong></p>
<p>ROC (Receiver Operating Characteristic) 曲线, 用图像来描述分类模型的性能好坏. 图像纵轴为 真 正例率(TPR), 横轴为 假 正例率(FPR):</p>
<p>$$\begin{array}{l}<br>T P R=\text { 召回率 }=\frac{T P}{T P+F N} \<br>F P R=\frac{F P}{F P+T N}<br>\end{array}$$</p>
<p>上述两式通过取分类模型的不同阈值, 从而计算出不同的值, 绘制出曲线, 曲线必过 (0,0)  和 (1, 1) 两个点, TPR 增长得越快, 曲线越往上凸, 模型的分类性能就越好. 如果 ROC 曲线为对角线, 可将模型理解为随机猜测; 如果 ROC 曲线在 0 点 真 正例率就达到了 1, 此时模型最完美</p>
<p><strong>AUC:</strong></p>
<p>AUC (Area Under the Curve), 是 ROC 曲线下面的面积, 因为有时通过 ROC 曲线看不出哪个分类模型性能好, 而 AUC 比较数值就不存在这样的问题</p>
<p>以鸢尾花数据集做如下练习:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> load_iris</span><br><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LogisticRegression </span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> confusion_matrix</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> warnings</span><br><span class="line"></span><br><span class="line">plt.rcParams[<span class="string">&quot;font.family&quot;</span>] = <span class="string">&quot;SimHei&quot;</span></span><br><span class="line">plt.rcParams[<span class="string">&quot;axes.unicode_minus&quot;</span>] = <span class="literal">False</span> </span><br><span class="line">plt.rcParams[<span class="string">&quot;font.size&quot;</span>] = <span class="number">12</span> </span><br><span class="line">warnings.filterwarnings(<span class="string">&quot;ignore&quot;</span>)</span><br><span class="line"></span><br><span class="line">iris = load_iris()</span><br><span class="line">x, y = iris.data, iris.target</span><br><span class="line">x = x[y!=<span class="number">0</span>, <span class="number">2</span>:]</span><br><span class="line">y = y[y!=<span class="number">0</span>]</span><br><span class="line">x_train, x_test, y_train, y_test = train_test_split(x, y,</span><br><span class="line">                        test_size=<span class="number">0.25</span>, random_state=<span class="number">2</span>)</span><br><span class="line">lr = LogisticRegression()</span><br><span class="line">lr.fit(x_train, y_train)</span><br><span class="line">y_hat = lr.predict(x_test)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 传入真实值与预测值, 创建混淆矩阵</span></span><br><span class="line">matrix = confusion_matrix(y_true=y_test, y_pred=y_hat)</span><br><span class="line">print(matrix)</span><br><span class="line">y_hat[y_hat==<span class="number">1</span>].<span class="built_in">sum</span>()</span><br></pre></td></tr></table></figure>

<pre><code>[[15  1]
 [ 1  8]]

16</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将混淆矩阵可视化</span></span><br><span class="line">mat = plt.matshow(matrix, cmap=plt.cm.Blues, alpha=<span class="number">0.5</span>)</span><br><span class="line">label = [<span class="string">&quot;负例&quot;</span>, <span class="string">&quot;正例&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取当前的绘图对象</span></span><br><span class="line">ax = plt.gca()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置属性, 设类别 1 为负例</span></span><br><span class="line">ax.<span class="built_in">set</span>(</span><br><span class="line">    xticks=np.arange(matrix.shape[<span class="number">1</span>]), </span><br><span class="line">    yticks=np.arange(matrix.shape[<span class="number">0</span>]),</span><br><span class="line">    xticklabels=label, </span><br><span class="line">    yticklabels=label, </span><br><span class="line">    title=<span class="string">&quot;混淆矩阵可视化\n&quot;</span>, </span><br><span class="line">    ylabel=<span class="string">&quot;真实值&quot;</span>, </span><br><span class="line">    xlabel=<span class="string">&quot;预测值&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置统计值的位置</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(matrix.shape[<span class="number">0</span>]):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(matrix.shape[<span class="number">1</span>]):</span><br><span class="line">        plt.text(x=j, y=i, s=matrix[i, j], va=<span class="string">&quot;center&quot;</span>, ha=<span class="string">&quot;center&quot;</span>) </span><br><span class="line">        </span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>


<p><img src="/images/mathematical-statistics/output_2_0001.png"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 计算各个评估指标</span></span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> accuracy_score, precision_score, recall_score, f1_score</span><br><span class="line"></span><br><span class="line">print(<span class="string">&quot;正确率：&quot;</span>, accuracy_score(y_test, y_hat))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 默认以 1 为正例, 我们将 2 设为正例</span></span><br><span class="line">print(<span class="string">&quot;精准率：&quot;</span>, precision_score(y_test, y_hat, pos_label=<span class="number">2</span>))</span><br><span class="line">print(<span class="string">&quot;召回率：&quot;</span>, recall_score(y_test, y_hat, pos_label=<span class="number">2</span>))</span><br><span class="line">print(<span class="string">&quot;F1：&quot;</span>, f1_score(y_test, y_hat, pos_label=<span class="number">2</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 也可以用逻辑回归模型对象的score方法计算正确率 </span></span><br><span class="line">print(<span class="string">&quot;score方法计算正确率：&quot;</span>, lr.score(x_test, y_test))</span><br></pre></td></tr></table></figure>

<pre><code>正确率： 0.92
精准率： 0.8888888888888888
召回率： 0.8888888888888888
F1： 0.8888888888888888
score方法计算正确率： 0.92</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 还可以用 classification_report 方法直接计算各个指标</span></span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> classification_report</span><br><span class="line">print(classification_report(y_true=y_test, y_pred=y_hat))</span><br></pre></td></tr></table></figure>

<pre><code>              precision    recall  f1-score   support

           1       0.94      0.94      0.94        16
           2       0.89      0.89      0.89         9

    accuracy                           0.92        25
   macro avg       0.91      0.91      0.91        25
weighted avg       0.92      0.92      0.92        25</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 绘制 ROC曲线 和计算 AUC</span></span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> roc_curve, auc, roc_auc_score</span><br><span class="line"></span><br><span class="line">iris = load_iris()</span><br><span class="line">x, y = iris.data, iris.target</span><br><span class="line">x = x[y!=<span class="number">0</span>, <span class="number">2</span>:]</span><br><span class="line">y = y[y!=<span class="number">0</span>]</span><br><span class="line">x_train, x_test, y_train, y_test = train_test_split(x, y,</span><br><span class="line">                            test_size=<span class="number">0.25</span>, random_state=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置模型参数(有默认值可以不设), 并进行训练</span></span><br><span class="line"><span class="comment"># 不同的参数训练结果不一样, 需要注意参数之间关系</span></span><br><span class="line">lr = LogisticRegression(multi_class=<span class="string">&quot;ovr&quot;</span>, solver=<span class="string">&quot;liblinear&quot;</span>)</span><br><span class="line"><span class="comment"># lr = LogisticRegression(multi_class=&quot;multinomial&quot;)</span></span><br><span class="line">lr.fit(x_train, y_train)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取样本的概率</span></span><br><span class="line">probo = lr.predict_proba(x_test)</span><br><span class="line">print(<span class="string">&#x27;类别 2 的概率:&#x27;</span>, probo[:, <span class="number">1</span>][:<span class="number">5</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将概率值传入 roc_curve 方法, 从概率中选择若干个值作为阈值</span></span><br><span class="line"><span class="comment"># 同时根据阈值判定正负例, 返回 fpr, tpr 和 阈值 thresholds</span></span><br><span class="line">fpr, tpr, thresholds = roc_curve(y_true=y_test,</span><br><span class="line">                       y_score=probo[:, <span class="number">1</span>], pos_label=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 阈值中的第一个值是第二个值 +1 得到, 为了让让曲线过 0 点</span></span><br><span class="line">print(<span class="string">&#x27;阈值:&#x27;</span>, thresholds)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算 AUC </span></span><br><span class="line">print(<span class="string">&#x27;用auc计算:&#x27;</span>, auc(fpr, tpr))</span><br><span class="line">print(<span class="string">&#x27;用roc_auc_score计算:&#x27;</span>, roc_auc_score(y_true=y_test,</span><br><span class="line">                                    y_score=probo[:, <span class="number">1</span>]))</span><br></pre></td></tr></table></figure>

<pre><code>类别 2 的概率: [0.4663913  0.28570842 0.60050037 0.3758227  0.48450719]
阈值: [1.69092453 0.69092453 0.60050037 0.54308778 0.50384451 0.49358343
 0.48450719 0.47242245 0.4663913  0.42043757 0.39590375 0.39413886
 0.3843811  0.24698327]
用auc计算: 0.8819444444444444
用roc_auc_score计算: 0.8819444444444444</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 绘制 ROC 曲线</span></span><br><span class="line">plt.figure(figsize=(<span class="number">6</span>, <span class="number">2</span>))</span><br><span class="line">plt.plot(fpr, tpr, marker=<span class="string">&quot;o&quot;</span>, label=<span class="string">&quot;ROC曲线&quot;</span>)</span><br><span class="line">plt.plot([<span class="number">0</span>,<span class="number">1</span>], [<span class="number">0</span>,<span class="number">1</span>], lw=<span class="number">2</span>, ls=<span class="string">&quot;--&quot;</span>, label=<span class="string">&quot;随机猜测&quot;</span>) </span><br><span class="line">plt.plot([<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>], [<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>], lw=<span class="number">2</span>, ls=<span class="string">&quot;-.&quot;</span>, label=<span class="string">&quot;完美预测&quot;</span>) </span><br><span class="line">plt.xlim(<span class="number">-0.01</span>, <span class="number">1.02</span>)</span><br><span class="line">plt.ylim(<span class="number">-0.01</span>, <span class="number">1.02</span>)</span><br><span class="line">plt.xticks(np.arange(<span class="number">0</span>, <span class="number">1.1</span>, <span class="number">0.2</span>))</span><br><span class="line">plt.yticks(np.arange(<span class="number">0</span>, <span class="number">1.1</span>, <span class="number">0.2</span>))</span><br><span class="line">plt.xlabel(<span class="string">&quot;FPR&quot;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&quot;TPR&quot;</span>)</span><br><span class="line">plt.grid()</span><br><span class="line">plt.title(<span class="string">f&quot;ROC曲线, AUC值为:<span class="subst">&#123;auc(fpr, tpr):<span class="number">.2</span>f&#125;</span>&quot;</span>)</span><br><span class="line">plt.legend()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>


<p><img src="/images/mathematical-statistics/output_6_0.png"></p>
<br>

]]></content>
      <categories>
        <category>数据分析</category>
      </categories>
      <tags>
        <tag>数理统计</tag>
      </tags>
  </entry>
  <entry>
    <title>KNN 算法</title>
    <url>/statistics/statistics6-7e2ca84cd5fe/</url>
    <content><![CDATA[<blockquote>
<p>内容主要来源：<strong>开课吧</strong>学习笔记整理。</p>
</blockquote>
<h2 id="七-KNN-算法"><a href="#七-KNN-算法" class="headerlink" title="七, KNN 算法"></a>七, KNN 算法</h2><h3 id="1-关于-KNN"><a href="#1-关于-KNN" class="headerlink" title="1, 关于 KNN"></a>1, 关于 KNN</h3><p>KNN (K-Nearest Neighbor), 即 K 近邻算法, K 个最近的邻居. 当需要预测一个未知样本的时候, 就由与该样本最近的 K 个邻居来决定</p>
<p>KNN 既可以用于分类, 也可用于回归. 用来分类时, 使用 K 个邻居中, 类别数量最多(或加权最多)者, 作为预测结果; 当用来回归分析时, 使用 K 个邻居的均值(或加权均值), 作为预测结果</p>
<p>KNN 算法的原理是: 样本映射到多维空间时, 相似度较高的样本, 距离也会较接近, “近朱者赤近墨者黑”</p>
<h3 id="2-K-值"><a href="#2-K-值" class="headerlink" title="2, K 值"></a>2, K 值</h3><p>KNN 算法的 K 值是一个模型训练前就要人为指定的参数<strong>超参数</strong>, 不同于模型内部通过训练数据计算得到的参数. KNN 的超参数, 需要通常通过<strong>交叉验证</strong>的方式来选择最合适的参数组合 </p>
<p>K 值的选择非常重要, K 值较小时, 模型预测依赖附近的邻居, 敏感性高, 稳定性低, 容易导致过拟合; 反之, K 值较大, 敏感性低, 稳定性高, 容易欠拟合</p>
<p>K 值在数据量小时, 可以通过遍历所有样本(穷举)的方式找出最近的 K 个邻居, 当数据量庞大时, 穷举耗费大量时间, 此时可以采用 <strong>KD树</strong> 来找 K 个邻居</p>
<h3 id="3-交叉验证"><a href="#3-交叉验证" class="headerlink" title="3, 交叉验证"></a>3, 交叉验证</h3><p>KNN 的网格搜索交叉验证: 取不同的 K, 选择不同的距离或权重计算方式等, 将数据分为多个组, 一个组作为测试集, 其他部分作为训练集, 不断循环训练和测试, 对模型进行循环验证, 找出最佳参数组合</p>
<h3 id="4-距离的度量方式"><a href="#4-距离的度量方式" class="headerlink" title="4, 距离的度量方式"></a>4, 距离的度量方式</h3><p><strong>闵可夫斯基距离:</strong></p>
<p>设 n 维空间中两个点位 X 和 Y:</p>
<p>$X=\left(x_{1}, x_{2}, \ldots \ldots, x_{n}\right)$</p>
<p>$Y=\left(y_{1}, y_{2}, \ldots \ldots, y_{n}\right)$</p>
<p>则阁可夫斯基距离为:</p>
<p>$D(X, Y)=\left(\sum_{i=1}^{n}\left|x_{i}-y_{i}\right|^{p}\right)^{1 / p}$</p>
<p>当 p 为 1 时, 又称 <strong>曼哈顿距离</strong>; 当 p 为 2 时, 称 <strong>欧几里得距离</strong></p>
<h3 id="5-权重"><a href="#5-权重" class="headerlink" title="5, 权重"></a>5, 权重</h3><p><strong>统一权重:</strong> K 个邻居权重相同, 不管近远都是 1/K</p>
<p><strong>距离加权权重:</strong> K 个邻居的权重, 与他们各自和待测样本的距离成反比, 同时要保证权重之和为 1. 例如 3 个邻居 a, b, c 距离待测样本的距离分别为 a, b 和 c, 则 a 的权重为:</p>
<p>$$\frac{\frac{1}{a}}{\frac{1}{a}+\frac{1}{b}+\frac{1}{c}}=\frac{b c}{b c+a c+a b}$$</p>
<p>b 和 c 同理</p>
<h3 id="6-数据标准化"><a href="#6-数据标准化" class="headerlink" title="6, 数据标准化"></a>6, 数据标准化</h3><p>样本中的特征通常非常多，由于各特征的性质不同，通常具有不同的量纲(数量级). 当各特征间的量纲相差很大时，如果直接用原始特征值进行分析，就会突出数值较高的特征在综合分析中的作用，相对削弱数值较低特征的作用, 因此需要通过数据标准化, 将量纲统一, 才能客观地描述各个特征对模型的影响程度</p>
<p>线性回归和逻辑回归, 都是通过每个特征与其权重的乘积相加来进行计算, 不进行数据标准化(不考虑正则化), 对每个特征的权重影响较大, 但对结果不会造成影响, 而 KNN 是基于距离计算的, 如果特征的量纲不同, 量纲较大的特征会占据主导地位, 导致忽略量纲较小的特征, 从而对模型性能造成较大影响</p>
<h3 id="7-算法实现步骤"><a href="#7-算法实现步骤" class="headerlink" title="7, 算法实现步骤"></a>7, 算法实现步骤</h3><p>a, 确定超参数<br>  确定 K<br>  确定距离度量方式<br>  确定权重计算方式<br>  其他超参数  </p>
<p>b, 从训练集中选择距离待测样本最近的 K 个样本</p>
<p>c, 根据 K 个样本对待测样本进行预测, 如果遇到多个样本距离相同的情况, 默认选取训练集中靠前的</p>
<h3 id="8-流水线-Pipline"><a href="#8-流水线-Pipline" class="headerlink" title="8, 流水线 Pipline"></a>8, 流水线 Pipline</h3><p>流水线可以将每个评估器视为一个步骤, 然后将多个步骤作为整体依次执行. 例如数据处理工作较多时, 可能涉及更多步骤, 例如多项式扩展, One-Hot 编码, 特征选择, 数据标准化, 交叉验证等, 分别执行过于繁琐, 我们可以将数据处理与模型训练各个步骤作为一个整体来执行</p>
<p>流水线具有最后一个评估器的所有方法:</p>
<p>a, 当流水线对象调用 fit 方法时, 会从第一个评估器依次调用 fit_transform 方法, 然后到最后一个评估器调用 fit 方法</p>
<p>b, 当流水线对象调用 <em>其他</em> 方法时, 会从第一个评估器依次调用 transform 方法, 然后到最后一个评估器调用 <em>其他</em> 方法</p>
<h3 id="9-以鸢尾花为例-对逻辑回归和-KNN-进行比较"><a href="#9-以鸢尾花为例-对逻辑回归和-KNN-进行比较" class="headerlink" title="9, 以鸢尾花为例, 对逻辑回归和 KNN 进行比较:"></a>9, 以鸢尾花为例, 对逻辑回归和 KNN 进行比较:</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"><span class="keyword">from</span> sklearn.neighbors <span class="keyword">import</span> KNeighborsClassifier</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> classification_report</span><br><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> load_iris</span><br><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> StandardScaler</span><br><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LogisticRegression</span><br><span class="line"><span class="keyword">import</span> matplotlib <span class="keyword">as</span> mpl</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> warnings</span><br><span class="line">warnings.filterwarnings(<span class="string">&quot;ignore&quot;</span>)</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">mpl.rcParams[<span class="string">&quot;font.family&quot;</span>] = <span class="string">&quot;SimHei&quot;</span></span><br><span class="line">mpl.rcParams[<span class="string">&quot;axes.unicode_minus&quot;</span>] = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">iris = load_iris()</span><br><span class="line">X = iris.data[:, :<span class="number">2</span>]</span><br><span class="line">y = iris.target</span><br><span class="line">X_train, X_test, y_train, y_test = train_test_split(X, y, </span><br><span class="line">                        test_size=<span class="number">0.25</span>, random_state=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据标准化: StandardScaler 均值标准差标准化, MinMaxScaler 最大最小值标准化</span></span><br><span class="line">ss = StandardScaler()</span><br><span class="line">X_train = ss.fit_transform(X_train)</span><br><span class="line">X_test = ss.transform(X_test)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 逻辑回归训练</span></span><br><span class="line">lr = LogisticRegression()</span><br><span class="line">lr.fit(X_train,y_train)</span><br><span class="line"></span><br><span class="line"><span class="comment"># KNN 训练</span></span><br><span class="line"><span class="comment"># n_neighbors: 邻居的数量</span></span><br><span class="line"><span class="comment"># weights：权重计算方式, 可选值为 uniform 统一权重, 与 distance 加权权重</span></span><br><span class="line">knn = KNeighborsClassifier(n_neighbors=<span class="number">3</span>, weights=<span class="string">&quot;uniform&quot;</span>)</span><br><span class="line">knn.fit(X_train, y_train)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 比较 AUC</span></span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> roc_curve, auc,roc_auc_score</span><br><span class="line"></span><br><span class="line">lr_fpr, lr_tpr, lr_thresholds = roc_curve(y_test,</span><br><span class="line">                lr.predict_proba(X_test)[:,<span class="number">1</span>], pos_label=<span class="number">1</span>)</span><br><span class="line">lr_auc = auc(lr_fpr, lr_tpr)</span><br><span class="line">print(<span class="string">&#x27;Logistic 算法: AUC = %.3f&#x27;</span> % lr_auc)</span><br><span class="line"></span><br><span class="line">knn_fpr, knn_tpr, knn_thresholds = roc_curve(y_test,</span><br><span class="line">                knn.predict_proba(X_test)[:,<span class="number">1</span>], pos_label=<span class="number">1</span>)</span><br><span class="line">knn_auc = auc(knn_fpr, knn_tpr)</span><br><span class="line">print(<span class="string">&#x27;KNN 算法: AUC = %.3f&#x27;</span> % knn_auc)</span><br></pre></td></tr></table></figure>

<pre><code>Logistic 算法: AUC = 0.835
KNN 算法: AUC = 0.794</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将 KNN 算法参数进行调优再来比较</span></span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> GridSearchCV</span><br><span class="line"></span><br><span class="line"><span class="comment"># K 值取 1~10, 并定义需要的参数组合</span></span><br><span class="line">knn = KNeighborsClassifier()</span><br><span class="line">grid = &#123;<span class="string">&#x27;n_neighbors&#x27;</span>: <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">11</span>,<span class="number">1</span>), <span class="string">&#x27;weights&#x27;</span>: [<span class="string">&#x27;uniform&#x27;</span>,<span class="string">&#x27;distance&#x27;</span>]&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 网格搜索交叉验证</span></span><br><span class="line"><span class="comment"># param_grid：需要检验的超参数组合</span></span><br><span class="line"><span class="comment"># scoring：模型评估标准, accuracy 正确率</span></span><br><span class="line"><span class="comment"># n_jobs：并发数量</span></span><br><span class="line"><span class="comment"># cv：交叉验证折数</span></span><br><span class="line"><span class="comment"># verbose：输出冗余信息</span></span><br><span class="line">gs = GridSearchCV(estimator=knn, param_grid=grid, scoring=<span class="string">&#x27;accuracy&#x27;</span>,</span><br><span class="line">                  n_jobs=<span class="number">-1</span>, cv=<span class="number">5</span>, verbose=<span class="number">0</span>)</span><br><span class="line">gs.fit(X_train, y_train)</span><br><span class="line">gs_fpr, gs_tpr, gs_thresholds = roc_curve(y_test,</span><br><span class="line">                gs.predict_proba(X_test)[:,<span class="number">1</span>], pos_label=<span class="number">1</span>)</span><br><span class="line">gs_auc = auc(gs_fpr, gs_tpr)</span><br><span class="line">print(<span class="string">&#x27;KNN 算法: AUC = %.3f&#x27;</span> % gs_auc)</span><br></pre></td></tr></table></figure>

<pre><code>KNN 算法: AUC = 0.855</code></pre>
<h3 id="10-以波士顿房价为例-对线性回归和-KNN-进行比较"><a href="#10-以波士顿房价为例-对线性回归和-KNN-进行比较" class="headerlink" title="10, 以波士顿房价为例, 对线性回归和 KNN 进行比较:"></a>10, 以波士顿房价为例, 对线性回归和 KNN 进行比较:</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> load_boston</span><br><span class="line"><span class="keyword">from</span> sklearn.neighbors <span class="keyword">import</span> KNeighborsRegressor </span><br><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LinearRegression</span><br><span class="line"></span><br><span class="line">X, y = load_boston(return_X_y=<span class="literal">True</span>)</span><br><span class="line">X_train, X_test, y_train, y_test = train_test_split(X, y,</span><br><span class="line">                        test_size=<span class="number">0.25</span>, random_state=<span class="number">0</span>)</span><br><span class="line">knn = KNeighborsRegressor(n_neighbors=<span class="number">3</span>, weights=<span class="string">&quot;distance&quot;</span>) </span><br><span class="line">knn.fit(X_train, y_train)</span><br><span class="line">print(<span class="string">&quot;KNN 算法 R²：&quot;</span>, knn.score(X_test, y_test))</span><br><span class="line">lr = LinearRegression()</span><br><span class="line">lr.fit(X_train, y_train)</span><br><span class="line">print(<span class="string">&quot;线性回归算法 R²：&quot;</span>, lr.score(X_test, y_test))</span><br></pre></td></tr></table></figure>

<pre><code>KNN 算法 R²： 0.5158073940789912
线性回归算法 R²： 0.6354638433202129</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 对 KNN 数据标准化和参数调优之后再来比较</span></span><br><span class="line">knn = KNeighborsRegressor()</span><br><span class="line">grid = &#123;<span class="string">&#x27;n_neighbors&#x27;</span>: <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">11</span>,<span class="number">1</span>), <span class="string">&#x27;weights&#x27;</span>: [<span class="string">&#x27;uniform&#x27;</span>,<span class="string">&#x27;distance&#x27;</span>]&#125;</span><br><span class="line">gs = GridSearchCV(estimator=knn, param_grid=grid, scoring=<span class="string">&#x27;r2&#x27;</span>,</span><br><span class="line">                  n_jobs=<span class="number">-1</span>, cv=<span class="number">5</span>, verbose=<span class="number">0</span>) </span><br><span class="line"></span><br><span class="line"><span class="comment"># 利用流水线处理</span></span><br><span class="line"><span class="keyword">from</span> sklearn.pipeline <span class="keyword">import</span> Pipeline</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义流水线的步骤: 类型为一个列表, 列表中的每个元素是元组类型</span></span><br><span class="line"><span class="comment"># 格式为：[(步骤名1，评估器1), (步骤名2， 评估器2), ……, (步骤名n, 评估器n)</span></span><br><span class="line">knn_steps = [(<span class="string">&quot;scaler&quot;</span>, StandardScaler()), (<span class="string">&quot;knn&quot;</span>, gs)]</span><br><span class="line">knn_p = Pipeline(knn_steps)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以设置流水线的参数. 所有可用的参数可以通过 get_params 获取</span></span><br><span class="line"><span class="comment"># 设置格式如下: (步骤名__参数)</span></span><br><span class="line"><span class="comment"># p.set_params(knn__n_neighbors=3, knn__weights=&quot;uniform&quot;)</span></span><br><span class="line">knn_p.fit(X_train, y_train)</span><br><span class="line">print(<span class="string">&quot;KNN 算法 R²：&quot;</span>, knn_p.score(X_test, y_test))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 线性回归数据标准化</span></span><br><span class="line">lr_steps = [(<span class="string">&quot;scaler&quot;</span>, StandardScaler()), (<span class="string">&quot;lr&quot;</span>, LinearRegression())]</span><br><span class="line">lr_p = Pipeline(lr_steps)</span><br><span class="line">lr_p.fit(X_train, y_train)</span><br><span class="line">print(<span class="string">&quot;线性回归算法 R²：&quot;</span>, lr_p.score(X_test, y_test))</span><br></pre></td></tr></table></figure>

<pre><code>KNN 算法 R²： 0.6441485149216897
线性回归算法 R²： 0.6354638433202131</code></pre>
<br>

]]></content>
      <categories>
        <category>数据分析</category>
      </categories>
      <tags>
        <tag>数理统计</tag>
      </tags>
  </entry>
  <entry>
    <title>决策树</title>
    <url>/statistics/statistics8-144b84551481/</url>
    <content><![CDATA[<blockquote>
<p>内容主要来源：<strong>开课吧</strong>学习笔记整理。</p>
</blockquote>
<h2 id="九-决策树"><a href="#九-决策树" class="headerlink" title="九, 决策树"></a>九, 决策树</h2><h3 id="1-概念理解"><a href="#1-概念理解" class="headerlink" title="1, 概念理解"></a>1, 概念理解</h3><p>决策树: 通过数据特征的差别, 用已知数据训练将不同数据划分到不同分支(子树)中, 层层划分, 最终得到一个树型结构, 用来对未知数据进行预测, 实现分类或回归</p>
<p>例如, 有如下数据集, 预测第 11 条数据能否偿还债务:</p>
<table>
   <tr>
      <td>序号</td>
      <td>有无房产</td>
      <td>婚姻状况</td>
      <td>年收入</td>
      <td>能否偿还债务</td>
   </tr>
   <tr>
      <td>1</td>
      <td>是</td>
      <td>单身</td>
      <td>125</td>
      <td>能</td>
   </tr>
   <tr>
      <td>2</td>
      <td>否</td>
      <td>已婚</td>
      <td>100</td>
      <td>能</td>
   </tr>
   <tr>
      <td>3</td>
      <td>否</td>
      <td>单身</td>
      <td>100</td>
      <td>能</td>
   </tr>
   <tr>
      <td>4</td>
      <td>是</td>
      <td>已婚</td>
      <td>110</td>
      <td>能</td>
   </tr>
   <tr>
      <td>5</td>
      <td>是</td>
      <td>离婚</td>
      <td>60</td>
      <td>能</td>
   </tr>
   <tr>
      <td>6</td>
      <td>否</td>
      <td>离婚</td>
      <td>95</td>
      <td>不能</td>
   </tr>
   <tr>
      <td>7</td>
      <td>否</td>
      <td>单身</td>
      <td>85</td>
      <td>不能</td>
   </tr>
   <tr>
      <td>8</td>
      <td>否</td>
      <td>已婚</td>
      <td>75</td>
      <td>能</td>
   </tr>
   <tr>
      <td>9</td>
      <td>否</td>
      <td>单身</td>
      <td>90</td>
      <td>不能</td>
   </tr>
   <tr>
      <td>10</td>
      <td>是</td>
      <td>离婚</td>
      <td>220</td>
      <td>能</td>
   </tr>
   <tr>
      <td>11</td>
      <td>否</td>
      <td>已婚</td>
      <td>94</td>
      <td>?</td>
   </tr>
</table>

<p>我们可以将已知样本作如下划分(训练), 构建一颗决策树, 然后将第 11 条数据代入(测试), 落在哪一个叶子中, 它就是对应叶子的类别: 预测结果是<strong>能</strong></p>
<p><img src="https://wx2.sbimg.cn/2020/07/02/2Y8Lk.md.png"></p>
<p>上例中, 层级已经不可再分, 但如果只划分到婚姻状况就不再划分如何实现预测?</p>
<p>决策树实现预测:<br>对于分类树, 叶子节点中, 哪个类别样本数量最多, 就将其作为未知样本的类别<br>对于回归树, 使用叶子节点中, 所有样本的均值, 作为未知样本的结果</p>
<p>对于上例, 如果只划分到婚姻状况, 那对于婚姻状况这个叶子中, 不能偿还的最多, 预测结果就是<strong>不能</strong></p>
<h3 id="2-分类决策树"><a href="#2-分类决策树" class="headerlink" title="2, 分类决策树"></a>2, 分类决策树</h3><p>对上例出现的情况, 我们会有如下问题:<br>我们为什么以年收入开始划分, 依据是什么? 划分顺序怎么定?<br>年收入为什么选 97.5 为划分阈值?<br>要划分多少层才好, 是否越多越好?<br>等等…</p>
<p>下面一步步来作讨论:</p>
<h4 id="2-01-信息熵"><a href="#2-01-信息熵" class="headerlink" title="2.01, 信息熵"></a>2.01, 信息熵</h4><p><strong>信息熵</strong>: 用来描述信源的不确定度, 不确定性越大, 信息熵越大. 例如, 明天海南要下雪, 不确定性非常小, 信息熵很小, 明天海南要下雨, 不确定性大, 信息熵就大</p>
<p>设随机变量 X 具有 m 个特征值, 各个值出现的概率为 $p_{1}$, …, $p_{m}$, 且 </p>
<p>$$p_{1}+p_{2}+\cdots+p_{m} = 1$$</p>
<p>则变量 X 的信息熵(信息期望值)为:</p>
<p>$$H(X)=-p_{1} \log_{2} p_{1} -p_{2} \log_{2} p_{2}-\cdots -p_{m} \log_{2} p_{m}$$</p>
<p>$$ =-\sum_{i=1}^{m}p_{i}\log_{2}p_{i}$$</p>
<h4 id="2-02-概率分布与信息商的关系"><a href="#2-02-概率分布与信息商的关系" class="headerlink" title="2.02, 概率分布与信息商的关系"></a>2.02, 概率分布与信息商的关系</h4><p>假设明天下雨的概率从 0.01 ~ 0.99 递增, 那么不下雨的概率就从 0.99 ~ 0.01 递减, 看看概率分布和信息熵的关系:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.family&#x27;</span>] = <span class="string">&#x27;SimHei&#x27;</span></span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.size&#x27;</span>] = <span class="number">14</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 下雨的概率</span></span><br><span class="line">p = np.linspace(<span class="number">0.01</span>, <span class="number">0.99</span>, <span class="number">100</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 信息熵</span></span><br><span class="line">h = -p * np.log2(p) - (<span class="number">1</span>-p) * np.log2(<span class="number">1</span>-p)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制关系图</span></span><br><span class="line">plt.plot(p, h)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;概率分布&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;信息熵&#x27;</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;概率分布和信息熵关系图&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>


<p><img src="/images/mathematical-statistics/output_1_0100.png" alt="png"></p>
<p>可见, 概率分布越均衡, 不确定性越大, 信息熵越大, 在所有概率都相等(p下雨=p不下雨)时, 信息熵最大</p>
<p>如果把概率分布转换到决策树的数据集上, 信息熵体现的就是数据的<strong>不纯度</strong>, 即样本类别的均衡程度. 因为数据集是未分类的, 要把它分类, 样本类别越均衡, 各个类别的占比(概率)分布越均衡, 不纯度越高, 信息熵越大</p>
<h4 id="2-03-信息增益"><a href="#2-03-信息增益" class="headerlink" title="2.03, 信息增益"></a>2.03, 信息增益</h4><p>信息增益的定义如下:</p>
<p>$$I G\left(D_{p}, f\right)=I\left(D_{p}\right)-\sum_{j=1}^{n} \frac{N_{j}}{N_{p}} I\left(D_{j}\right) $$</p>
<p>$f$:  划分的特征<br>$D_{p}$:  父节点, 即使用特征  f  分割之前的节点<br>$I G\left(D_{p}, f\right)$:  父节点  $D_{p}$  使用特征  f  划分下, 获得的信息增益<br>$I\left(D_{p}\right)$：父节点不纯度, 信息熵是度量标准之一<br>$D_{j}$:  父节点 $D_{p}$ 经过分割之后, 会产生 n 个子节点,  $D_{j}$  为第  j  个子节点<br>$I\left(D_{j}\right)$：子节点不纯度<br>$N_{p}$:  父节点  $D_{p}$  包含样本的数量<br>$N_{j}$:  第  j  个子节点  $D_{j}$  包含样本的数量   </p>
<p>如果是二叉树, 即父节点最多分为左右两个子节点, 此时, 信息增益为:</p>
<p>$$I G\left(D_{p}, f\right)=I\left(D_{p}\right)-\frac{N_{l e f t}}{N_{p}} I\left(D_{l e f t}\right)-\frac{N_{r i g h t}}{N_{p}} I\left(D_{r i g h t}\right)$$</p>
<p>可见, 信息增益就是父节点的不纯度减去所有子节点的(加权)不纯度</p>
<p>父节点的不纯度是不变的, 在选择特征进行类别划分时, 应该让子节点的不纯度尽可能低, 这样训练可以更快完成, 信息增益也最大. 这正是训练决策树时, 选择特征顺序的依据</p>
<p>以开头的例子为例, 不纯度使用信息熵度量, 则根节点的信息熵为:</p>
<p>$$I\left(D_{p}\right)=-0.7 * \log _{2} 0.7-0.3 * \log _{2} 0.3=0.88$$</p>
<p>如果以”有无房产”划分, 则可计算得子节点信息熵:</p>
<p>$$\begin{array}{l}<br>I\left(D_{\text {有房产 }}\right)=0 \<br>I\left(D_{\text {无房产 }}\right)=1<br>\end{array}$$</p>
<p>从而可得根节点信息增益为:</p>
<p>$$I G(\text { 有无房产 })=0.88-0.4 * 0-0.6 * 1=0.28 $$</p>
<p>同理, </p>
<p>$$I G(\text { 婚姻状况 })=0.205 $$</p>
<p>而对于年收入, 将年收入排序后, 取不同类别的分界点年收入(75 与 85, 95 与 100)的均值进行划分, 比较哪一个信息增益大:</p>
<p>$$\begin{array}{l}<br>I\left(D_{\text {年收入 }&lt; 80}\right)=0 \<br>I\left(D_{\text { 年收入 } &gt;=80}\right)=0.954 \<br>I G(\text { 年收入 }=80)=0.88-0.2 * 0-0.8 * 0.954=0.117<br>\end{array}$$</p>
<p>同理, </p>
<p>$$I G(\text { 年收入 }=97.5)=0.395$$</p>
<p>可见, 以 年收入=97.5 划分时, 信息增益最大, 故首先选它进行划分</p>
<p>根节点划分结束, 第二层的父节点以同样的方式计算之后再次划分, 一直到划分停止</p>
<h4 id="2-04-过拟合与欠拟合"><a href="#2-04-过拟合与欠拟合" class="headerlink" title="2.04, 过拟合与欠拟合"></a>2.04, 过拟合与欠拟合</h4><p>如果不设置条件, 是不是划分深度越大越好呢?</p>
<p>下面以鸢尾花数据集为例, 看看划分深度对模型效果的影响:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> load_iris</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"><span class="keyword">from</span> sklearn.tree <span class="keyword">import</span> DecisionTreeClassifier</span><br><span class="line"></span><br><span class="line">x, y = load_iris(return_X_y=<span class="literal">True</span>)</span><br><span class="line">x = x[:, :<span class="number">2</span>]</span><br><span class="line">x_train, x_test, y_train, y_test = train_test_split(</span><br><span class="line">    x, y, test_size=<span class="number">0.25</span>, random_state=<span class="number">0</span>)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">参数介绍:</span></span><br><span class="line"><span class="string">criterion: 不纯度度量标准, 默认基尼系数 gini, 信息熵为 entropy</span></span><br><span class="line"><span class="string">splitter: 选择划分节点的方式, 默认最好 best, 随机 random</span></span><br><span class="line"><span class="string">max_depth: 划分深度, 默认 None 不设限</span></span><br><span class="line"><span class="string">min_samples_split: 划分节点的最小样本数, 默认 2</span></span><br><span class="line"><span class="string">min_samples_leaf: 划分节点后, 叶子节点的最少样本数, 默认 1</span></span><br><span class="line"><span class="string">max_features: 划分节点时, 考虑的最大特征数, 默认 None 考虑所有, 设置数量后会随机选择</span></span><br><span class="line"><span class="string">random_state: 随机种子, 控制模型的随机行为</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">tree = DecisionTreeClassifier()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义列表, 用来储存不同深度下, 模型的分值</span></span><br><span class="line">train_score = []</span><br><span class="line">test_score = []</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置深度 1~12 开始训练</span></span><br><span class="line"><span class="keyword">for</span> depth <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">13</span>):</span><br><span class="line">    tree = DecisionTreeClassifier(criterion=<span class="string">&#x27;entropy&#x27;</span>,</span><br><span class="line">                    max_depth=depth, random_state=<span class="number">0</span>)</span><br><span class="line">    tree.fit(x_train, y_train)</span><br><span class="line">    train_score.append(tree.score(x_train, y_train))</span><br><span class="line">    test_score.append(tree.score(x_test, y_test))</span><br><span class="line">    </span><br><span class="line">plt.plot(train_score, label=<span class="string">&#x27;训练集分值&#x27;</span>)</span><br><span class="line">plt.plot(test_score, label=<span class="string">&#x27;测试集分值&#x27;</span>)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;划分深度&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;分值&#x27;</span>)</span><br><span class="line">plt.legend()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>


<p><img src="/images/mathematical-statistics/output_3_0001.png" alt="png"></p>
<p>可见, 划分深度小, 训练集和测试集的分值都小, 容易欠拟合<br>随着划分深度的增加, 分值都在增加, 模型预测效果也在变好<br>当深度增加到一定程度, 深度再增加, 训练集分值随着增加, 但造成了模型过分依赖训练集数据特征, 从而测试集分值减小, 容易过拟合</p>
<h3 id="3-不纯度度量标准"><a href="#3-不纯度度量标准" class="headerlink" title="3, 不纯度度量标准"></a>3, 不纯度度量标准</h3><p>不纯度度量标准有:</p>
<p><strong>信息熵</strong></p>
<p>$$I_{H}(D)=-\sum_{i=1}^{m} p(i \mid D) \log _{2} p(i \mid D) $$</p>
<p>m: 节点 D 中含有样本的类别数量<br>$p(i \mid D)$: 节点 D 中, 属于类别 i 的样本占节点 D 中样本总数的比例(概率)</p>
<p><strong>基尼系数</strong></p>
<p>$$I_{G}(D)=1-\sum_{i=1}^{m} p(i \mid D)^{2}$$</p>
<p><strong>错误率</strong></p>
<p>$$I_{E}(D)=1-\max {p(i \mid D)}$$</p>
<p>看看各个度量标准与概率分布的关系:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">entropy</span>(<span class="params">p</span>):</span></span><br><span class="line">    <span class="keyword">return</span> -p * np.log2(p) - (<span class="number">1</span>-p) * np.log2(<span class="number">1</span>-p)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gini</span>(<span class="params">p</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span> - p**<span class="number">2</span> - (<span class="number">1</span>-p)**<span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">error</span>(<span class="params">p</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span> - np.<span class="built_in">max</span>([p, <span class="number">1</span>-p], axis=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">p = np.linspace(<span class="number">0.0001</span>, <span class="number">0.9999</span>, <span class="number">200</span>)</span><br><span class="line"></span><br><span class="line">en = entropy(p)</span><br><span class="line">er = error(p)</span><br><span class="line">g = gini(p)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i, lab, ls <span class="keyword">in</span> <span class="built_in">zip</span>([en, g, er],</span><br><span class="line">                      [<span class="string">&#x27;信息熵&#x27;</span>, <span class="string">&#x27;基尼系数&#x27;</span>, <span class="string">&#x27;错误率&#x27;</span>],</span><br><span class="line">                      [<span class="string">&#x27;-&#x27;</span>, <span class="string">&#x27;:&#x27;</span>, <span class="string">&#x27;--&#x27;</span>]):</span><br><span class="line">    plt.plot(p, i, label=lab, linestyle=ls, lw=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">plt.legend()</span><br><span class="line">plt.xlabel(<span class="string">&#x27;概率分布&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;不纯度&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>


<p><img src="https://wx2.sbimg.cn/2020/07/02/2Yx2j.png" alt="png"></p>
<p>可见, 无论选哪一种度量标准, 样本属于同一类, 不纯度都是 0; 样本中不同类别占比相同时, 不纯度最大</p>
<h3 id="4-决策树常用算法介绍"><a href="#4-决策树常用算法介绍" class="headerlink" title="4, 决策树常用算法介绍"></a>4, 决策树常用算法介绍</h3><p><strong>ID3</strong></p>
<p>ID3 (Iterative Dichotomiser3), 迭代二分法特点:<br>  -使用多叉树结构<br>  -使用信息熵作为不纯度度量, 选择信息增益最大的特征划分<br>  -经典算法, 简单, 训练快<br>局限:<br>  -不支持连续特征<br>  -不支持缺失值处理<br>  -不支持回归<br>  -倾向选择特征取值多的特征来划分, 例如按身份证号划分, 一个号码就是一个特征</p>
<p><strong>C4.5</strong></p>
<p>ID3算法改进而来, 特点:<br>  -使用多叉树结构<br>  -不支持回归<br>优化:<br>  -支持缺失值处理<br>  -连续值进行离散化处理<br>  -信息熵作为不纯度度量, 但选择<strong>信息增益率</strong>最大的特征划分   </p>
<p>信息增益率:</p>
<p>$$I G_{\text {Ratio}}\left(D_{p}, f\right)=\frac{I G_{H}\left(D_{p}, f\right)}{I_{H}(f)} $$</p>
<p>$I_{H}(f)$:  在特征 $f$ 下, 取各个特征值计算得到的信息熵之和, 其实就是特征 $f$ 的不纯度, 特征值越多, 特征不纯度越大</p>
<p>选择信息增益最大的特征来划分, 父节点的信息熵不变, 就要求信息增益的第二项 $\sum_{j=1}^{n} \frac{N_{j}}{N_{p}} I\left(D_{j}\right)$ 最小, 从而会倾向选择特征取值多的特征</p>
<p>因为, 特征取值多, 通常划分之后子节点的不纯度(信息熵)就更低, 例如极端情况, 选身份证划分, 划分之后不管什么类别, 子节点都只有一种类别, 不纯度都是 0, 第二项就是 0, 信息增益就最大</p>
<p>因此, 采用信息增益率, 将 信息增益/特征不纯度, 就避免了 特征不纯度大 造成 信息增益大 而选择类别多的特征来划分的情况</p>
<p>看看类别数量与信息熵的关系:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">en = <span class="keyword">lambda</span> p: np.<span class="built_in">sum</span>(-p * np.log2(p))</span><br><span class="line"></span><br><span class="line">a1 = np.array([<span class="number">0.3</span>, <span class="number">0.7</span>])</span><br><span class="line">a2 = np.array([<span class="number">0.3</span>, <span class="number">0.3</span>, <span class="number">0.4</span>])</span><br><span class="line">a3 = np.array([<span class="number">0.25</span>] * <span class="number">4</span>)</span><br><span class="line">a4 = np.array([<span class="number">0.1</span>] * <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">print(en(a1), en(a2), en(a3), en(a4), sep=<span class="string">&#x27;\n&#x27;</span>)</span><br></pre></td></tr></table></figure>

<pre><code>0.8812908992306927
1.5709505944546684
2.0
3.321928094887362</code></pre>
<p><strong>CART</strong></p>
<p>CART (Classification And Regression Tree), 分类回归树, 特点如下:<br>  -使用二叉树结构<br>  -支持连续值与缺失值处理<br>  -分类时, 使用基尼系数作为不纯度度量, 选择基尼增益最大的特征划分<br>  -回归时, 使用 MSE 或 MAE 最小的特征划分</p>
<h3 id="5-回归决策树"><a href="#5-回归决策树" class="headerlink" title="5, 回归决策树"></a>5, 回归决策树</h3><p>回归决策树因变量 y 是连续的, 使用叶子节点的均值来预测未知样本, 使用 MSE 或 MAE 作为特征划分的评估指标</p>
<p>在 scikit-learn 中, 使用的是优化的 CART 算法来实现决策树</p>
<p>以波士顿房价为例来实现(参数参考分类决策树):</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> load_boston</span><br><span class="line"><span class="keyword">from</span> sklearn.tree <span class="keyword">import</span> DecisionTreeRegressor</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"></span><br><span class="line">x, y = load_boston(return_X_y=<span class="literal">True</span>)</span><br><span class="line">x_train, x_test, y_train, y_test = train_test_split(</span><br><span class="line">            x, y, test_size=<span class="number">0.25</span>, random_state=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">tree = DecisionTreeRegressor(max_depth=<span class="number">5</span>, random_state=<span class="number">0</span>)</span><br><span class="line">tree.fit(x_train, y_train)</span><br><span class="line">print(tree.score(x_train, y_train))</span><br><span class="line">print(tree.score(x_test, y_test))</span><br></pre></td></tr></table></figure>

<pre><code>0.9204825770764915
0.8763987309111113</code></pre>
<br>
]]></content>
      <categories>
        <category>数据分析</category>
      </categories>
      <tags>
        <tag>数理统计</tag>
      </tags>
  </entry>
  <entry>
    <title>K-Means 算法</title>
    <url>/statistics/statistics9-1d958e8e187b/</url>
    <content><![CDATA[<blockquote>
<p>内容主要来源：<strong>开课吧</strong>学习笔记整理。</p>
</blockquote>
<h2 id="十-K-Means-算法"><a href="#十-K-Means-算法" class="headerlink" title="十, K-Means 算法"></a>十, K-Means 算法</h2><h3 id="1-聚类"><a href="#1-聚类" class="headerlink" title="1, 聚类"></a>1, 聚类</h3><p>前面接触的算法, 都是<strong>监督学习</strong>, 即训练数据中自变量(特征)和因变量(结果)都是已知的, 用含有结果的训练集建立模型, 然后对未知结果的数据进行预测</p>
<p>聚类属于<strong>无监督学习</strong>, 训练数据中没有”已知结果的监督”. 聚类的目的, 就是通过已知样本数据的特征, 将数据划分为若干个类别, 每个类别成一个类簇, 使得同一个簇内的数据相似度越大, “物以类聚”, 不同簇之间的数据相似度越小, 聚类效果越好</p>
<p>聚类的样本相似度根据距离来度量</p>
<h3 id="2-K-Means"><a href="#2-K-Means" class="headerlink" title="2, K-Means"></a>2, K-Means</h3><p>即 K 均值算法, 是常见的聚类算法, 该算法将数据集分为 K 个簇, 每个簇使用簇内所有样本的均值来表示, 该均值称为”质心”</p>
<p>K-Means 算法的目标, 就是选择适合的质心, 使得每个簇内, 样本点距质心的距离尽可能的小, 从而保证簇内样本有较高相似度</p>
<p>算法实现步骤:</p>
<p>a, 从样本中选择 K 个点作为初始质心<br>b, 计算每个样本点到各个质心的距离, 将样本点划分到距离最近的质心所对应的簇中<br>c, 计算每个簇内所有样本的均值, 使用该均值作为新的质心<br>d, 重复 b 和 c, 重复一定次数质心一般会趋于稳定, 如果达到以下条件, 重复结束:<br>– 质心位置变化小于指定的阈值<br>– 达到最迭代环次数</p>
<p>对于算法的实现步骤, 我们有几个重要的疑问:</p>
<p>– 1.怎么评价质心是否达到了最佳位置?<br>– 2.初始质心随机选, 还是选在哪里?<br>– 3. K 值怎么定?  </p>
<h3 id="3-算法优化目标"><a href="#3-算法优化目标" class="headerlink" title="3, 算法优化目标"></a>3, 算法优化目标</h3><p>样本的相似度是根据距离来度量的, 一般使用簇内<strong>误差平方和</strong>(within-cluster SSE 簇惯性) 来作为优化算法的目标函数, 距离常用欧氏距离, 优化目标就是使 SSE 最小化:</p>
<p>$$S S E=\sum_{i=1}^{k} \sum_{j=1}^{m_{i}}\left(\left|x_{j}-\mu_{i}\right|^{2}\right)$$</p>
<p>k: 族的数量  </p>
<p>$m_{i}$: 第 i 个簇含有的样本数量 </p>
<p>${\mu}_{i}$: 第 i 个族的质心  </p>
<p>$\left|x_{j}-\mu_{i}\right|$: 第 i 个族中，每个样本  $x_{j}$  与质心 $\mu_{i}$  的距离</p>
<p>同一个数据集, 相同的簇数, SSE 越小, 通常质心位置更佳, 算法模型更好</p>
<h3 id="4-初始质心的影响"><a href="#4-初始质心的影响" class="headerlink" title="4, 初始质心的影响"></a>4, 初始质心的影响</h3><p>初始质心可以随机选择, 但由于算法是通过迭代初始质心一步步实现, 初始质心的位置受随机性影响, 算法训练的最终结果也会受到影响</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> sklearn.cluster <span class="keyword">import</span> KMeans</span><br><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> make_blobs</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.family&#x27;</span>] = <span class="string">&#x27;YouYuan&#x27;</span> </span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.size&#x27;</span>] = <span class="number">12</span> </span><br><span class="line">plt.rcParams[<span class="string">&#x27;axes.unicode_minus&#x27;</span>] = <span class="literal">False</span> </span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">生成数据:</span></span><br><span class="line"><span class="string">n_samples: 样本数量</span></span><br><span class="line"><span class="string">n_features: 特征数</span></span><br><span class="line"><span class="string">centers: 聚类中心</span></span><br><span class="line"><span class="string">cluster_std: 簇的标准差, 可以统一指定, 也分别指定</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">centers = [[<span class="number">1</span>, <span class="number">1</span>], [<span class="number">5</span>, <span class="number">2</span>], [<span class="number">2</span>, <span class="number">5</span>]]</span><br><span class="line">x, y = make_blobs(n_samples=<span class="number">90</span>,</span><br><span class="line">                  n_features=<span class="number">2</span>,</span><br><span class="line">                  centers=centers,</span><br><span class="line">                  cluster_std=[<span class="number">2.2</span>, <span class="number">2.5</span>, <span class="number">2</span>],</span><br><span class="line">                  random_state=<span class="number">0</span>)</span><br><span class="line"><span class="comment"># x 是特征, y 是类别标签</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制原始数据</span></span><br><span class="line">plt.figure(figsize=(<span class="number">12</span>,<span class="number">8</span>))</span><br><span class="line">plt.subplot(<span class="number">221</span>)</span><br><span class="line">colors = np.array([<span class="string">&#x27;Coral&#x27;</span>, <span class="string">&#x27;SeaGreen&#x27;</span>, <span class="string">&#x27;RoyalBlue&#x27;</span>])</span><br><span class="line">plt.scatter(x[:, <span class="number">0</span>], x[:, <span class="number">1</span>], c=colors[y], marker=<span class="string">&#x27;.&#x27;</span>, label=<span class="string">&#x27;原始数据&#x27;</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;原始数据&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义绘制聚类结果的函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">plot_cluster</span>(<span class="params">model, train, test=<span class="literal">None</span></span>):</span></span><br><span class="line">    <span class="keyword">global</span> colors  <span class="comment"># 使用上面的颜色</span></span><br><span class="line">    cc = model.cluster_centers_ <span class="comment"># 获取质心</span></span><br><span class="line">    label = model.labels_ <span class="comment"># 获取聚类结果的标签</span></span><br><span class="line">    <span class="comment"># 绘制质心</span></span><br><span class="line">    plt.scatter(cc[:, <span class="number">0</span>], <span class="comment"># 质心的 x 坐标</span></span><br><span class="line">                cc[:, <span class="number">1</span>], <span class="comment"># 质心的 y 坐标</span></span><br><span class="line">                marker=<span class="string">&#x27;*&#x27;</span>,</span><br><span class="line">                s=<span class="number">150</span>,</span><br><span class="line">                c=colors)</span><br><span class="line">    <span class="comment"># 绘制训练集</span></span><br><span class="line">    plt.scatter(train[:, <span class="number">0</span>], train[:, <span class="number">1</span>], marker=<span class="string">&#x27;.&#x27;</span>, c=colors[label])</span><br><span class="line">    <span class="comment"># 绘制测试集</span></span><br><span class="line">    <span class="keyword">if</span> test <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        y_hat = model.predict(test)</span><br><span class="line">        plt.scatter(test[:, <span class="number">0</span>], test[:, <span class="number">1</span>], marker=<span class="string">&#x27;+&#x27;</span>,</span><br><span class="line">                    s=<span class="number">150</span>, c=colors[y_hat])        </span><br><span class="line">    <span class="comment"># 标题</span></span><br><span class="line">    plt.title(<span class="string">f&#x27;SSE:<span class="subst">&#123;model.inertia_:<span class="number">.1</span>f&#125;</span> 迭代次数:<span class="subst">&#123;model.n_iter_&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试集</span></span><br><span class="line">test = np.array([[<span class="number">6</span>, <span class="number">5</span>]])    </span><br><span class="line"><span class="comment"># 绘制不同初始质心的聚类结果</span></span><br><span class="line">seed = [<span class="number">1</span>, <span class="number">10</span>, <span class="number">100</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, <span class="number">5</span>):</span><br><span class="line">    plt.subplot(<span class="number">2</span>, <span class="number">2</span>, i)</span><br><span class="line">    kmeans = KMeans(n_clusters=<span class="number">3</span>, <span class="comment"># 簇数</span></span><br><span class="line">                    init=<span class="string">&#x27;random&#x27;</span>, <span class="comment"># 初始化方式</span></span><br><span class="line">                    n_init=<span class="number">1</span>, <span class="comment"># 初始化质心组数</span></span><br><span class="line">                    random_state=seed[i<span class="number">-2</span>])</span><br><span class="line">    kmeans.fit(x)</span><br><span class="line">    plot_cluster(kmeans, x)</span><br><span class="line">    <span class="comment"># 测试结果</span></span><br><span class="line">    plot_cluster(kmeans, x, test)</span><br></pre></td></tr></table></figure>


<p><img src="https://wx2.sbimg.cn/2020/07/04/2O85J.md.png" alt="png"></p>
<p>从上图可以看出受初始化质心的影响, 聚类效果(SSE) 与 收敛速度(迭代次数) 会不同, 也即是可能会收敛到局部最小, 而不是整体最优; 同时, 也可以看出 SSE 越小, 整体结果越优, 越接近原始数据</p>
<h3 id="5-K-Means-优化"><a href="#5-K-Means-优化" class="headerlink" title="5, K-Means++ 优化"></a>5, K-Means++ 优化</h3><p>针对上述初始化质心造成的问题, 设置初始化多组质心可以得到缓解, 但通常限于聚类簇数较少的情况, 如果簇数较多, 可能就不会有效</p>
<p>于是有了 K-Means++, 选择初始化质心时, 不在随机选, 而是按下述步骤进行选择:</p>
<p>– 1, 从训练数据中随机选择一个样本点, 作为初始质心<br>– 2, 对任意一个非质心样本点 $x^{(i)}$, 计算 $x^{(i)}$ 与现有最近质心的距离 $D\left(x^{(i)}\right)$<br>– 3, 根据概率 $\frac{D\left(x^{(i)}\right)^{2}}{\sum_{j=1}^{m} D\left(x^{(j)}\right)^{2}}$ 最大, 来选择最远的一个样本点 $x^{(i)}$ 作为质心, m 为非质心样本点数量<br>– 4, 重复 2 和 3, 直到选择了 K 个质心为止</p>
<p>做了优化之后, 保证了初始质心不会集中, 而是分散在数据集中</p>
<p>下面试试 K-Means++ 的聚类效果:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">kmeans = KMeans(n_clusters=<span class="number">3</span>, init=<span class="string">&#x27;k-means++&#x27;</span>, n_init=<span class="number">1</span>)</span><br><span class="line">kmeans.fit(x)</span><br><span class="line">plot_cluster(kmeans, x)</span><br></pre></td></tr></table></figure>


<p><img src="https://wx2.sbimg.cn/2020/07/04/2OnU8.png" alt="png"></p>
<h3 id="6-确定-K-值"><a href="#6-确定-K-值" class="headerlink" title="6, 确定 K 值"></a>6, 确定 K 值</h3><p>K 是超参数, 需要预先人为指定 </p>
<p>有时需要按照建模的需求和目的来选择聚类的个数, 但是 K 值选择不当, 聚类效果可能不佳. 例如实际 3 类, K 选了 10, 或者 K 无限制, 取值和样本点个数一样, 最后每个点一个类, SEE 为 0, 但是聚类已经毫无意义</p>
<p>如果不是硬性要求 K 的取值, 怎么确定最佳的 K 值呢? 一个比较好的方法就是<strong>肘部法则</strong>:</p>
<p>SEE 需要越小越好, K 又不能取太大, 我们可以看看他们之间的关系:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 设置列表储存 SSE</span></span><br><span class="line">sse = []</span><br><span class="line"><span class="comment"># K 值从 1~9 变化</span></span><br><span class="line">scope = <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">10</span>)</span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> scope:</span><br><span class="line">    kmeans = KMeans(n_clusters=k)</span><br><span class="line">    kmeans.fit(x)</span><br><span class="line">    sse.append(kmeans.inertia_)</span><br><span class="line">    </span><br><span class="line">plt.xticks(scope)</span><br><span class="line">plt.plot(scope, sse, marker=<span class="string">&#x27;o&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>


<p><img src="/images/mathematical-statistics/output_70_0.png" alt="png"></p>
<p>从上图可以看出, K 增加, SSE 减小, 但当 K &gt; 3 时, K 再增加, SSE 减小变得缓慢, 所以 K 选择 3, 实际情况也是 3</p>
<h3 id="6-Mini-Batch-K-Means"><a href="#6-Mini-Batch-K-Means" class="headerlink" title="6, Mini Batch K-Means"></a>6, Mini Batch K-Means</h3><p>K-Means 每次迭代都会使用所有数据参与运算, 当数据集较大时, 会比较耗时. Mini Batch K-Means (小批量 K-Means) 算法每次迭代使用小批量样本训练, 逐批次累计的方式进行计算, 从而大大减少计算时间. 效果上, 通常只是略差于 K-Means</p>
<p>Mini Batch K-Means 算法实现步骤:</p>
<p>a, 从数据集中随机选择部分数据, 使用 K-Means 算法在这部分数据上聚类, 获取质心<br>b, 再从数据集中随机选择部分数据, 分别分配给最近的质心<br>c, 每个簇根据现有的数据集更新质心<br>d, 重复 b 和 c, 直到质心变化小于指定阈值或达到最大迭代次数</p>
<p>下面比较一下两个算法:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> sklearn.cluster <span class="keyword">import</span> MiniBatchKMeans</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics.pairwise <span class="keyword">import</span> pairwise_distances_argmin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成数据</span></span><br><span class="line">centers = [[<span class="number">1</span>, <span class="number">1</span>], [<span class="number">400</span>, <span class="number">100</span>], [<span class="number">100</span>, <span class="number">400</span>]]</span><br><span class="line">x, y = make_blobs(n_samples=<span class="number">8000</span>, n_features=<span class="number">2</span>, centers=centers,</span><br><span class="line">                  cluster_std=<span class="number">120</span>, random_state=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义函数, 用于计算模型训练时间</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">elapsed_time</span>(<span class="params">model, data</span>):</span></span><br><span class="line">    start = time.time()</span><br><span class="line">    model.fit(data)</span><br><span class="line">    end = time.time()</span><br><span class="line">    <span class="keyword">return</span> end - start</span><br><span class="line"></span><br><span class="line">n_clusters = <span class="built_in">len</span>(centers)</span><br><span class="line">kmeans = KMeans(n_clusters=n_clusters)</span><br><span class="line">mbk = MiniBatchKMeans(n_clusters=n_clusters,</span><br><span class="line">                      batch_size=<span class="number">200</span>, <span class="comment"># 小批量的大小</span></span><br><span class="line">                     n_init=<span class="number">10</span> <span class="comment"># 和 KMeans 统一为 10</span></span><br><span class="line">                     )</span><br><span class="line">kmeans_time = elapsed_time(kmeans, x)</span><br><span class="line">mbk_time = elapsed_time(mbk, x)</span><br><span class="line"></span><br><span class="line">print(<span class="string">&#x27;K-Means耗时:&#x27;</span>, kmeans_time)</span><br><span class="line">print(<span class="string">&#x27;Mini Batch K-Means耗时:&#x27;</span>, mbk_time)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制聚类效果</span></span><br><span class="line">plt.figure(figsize=(<span class="number">12</span>, <span class="number">5</span>))</span><br><span class="line">model = [kmeans, mbk]</span><br><span class="line"><span class="keyword">for</span> i, m <span class="keyword">in</span> <span class="built_in">enumerate</span>(model, start=<span class="number">1</span>):</span><br><span class="line">    plt.subplot(<span class="number">1</span>, <span class="number">2</span>, i)</span><br><span class="line">    plot_cluster(m, x)</span><br></pre></td></tr></table></figure>

<pre><code>K-Means耗时: 0.08678650856018066
Mini Batch K-Means耗时: 0.05485272407531738</code></pre>
<p><img src="https://wx2.sbimg.cn/2020/07/04/2ONKU.md.png" alt="png"></p>
<p>可见, 聚类耗时 K-Means 更多, 如果数据量很大, 耗时会更明显, 而聚类效果基本一样. 但发现颜色对不上, 这是因为质心的随机性, 聚类之后质心虽然最终落在相同的位置, 但是顺序不一致, 从而聚类的结果标签不一致, 即使是同一个算法, 运行几次, 标签结果也会不一致</p>
<p>我们将相同簇用相同的颜色绘制:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">plt.figure(figsize=(<span class="number">12</span>, <span class="number">5</span>))</span><br><span class="line"><span class="comment"># 定义列表, 用来保存两个模型预测结果</span></span><br><span class="line">y_hat_list = []</span><br><span class="line"><span class="keyword">for</span> i, m <span class="keyword">in</span> <span class="built_in">enumerate</span>(model, start=<span class="number">1</span>):</span><br><span class="line">    plt.subplot(<span class="number">1</span>, <span class="number">2</span>, i)</span><br><span class="line">    y_hat = m.predict(x)</span><br><span class="line">    <span class="keyword">if</span> m == mbk:</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        因为输出的质心顺序就是训练结果标签的顺序</span></span><br><span class="line"><span class="string">        故可以按 mbk 训练的质心, 去找 kmeans 训练的相同簇的质心</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">        pairwise_distances_argmin(x, y) 解释:</span></span><br><span class="line"><span class="string">        依次取出数组 X 中的元素 x, </span></span><br><span class="line"><span class="string">        计算找到数组 Y 中与 x 距离最近的元素 y 的索引, </span></span><br><span class="line"><span class="string">        返回索引构成的数组</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        <span class="comment"># 将两者相同簇的质心一一对应并按 mbk 质心的顺序封装成字典</span></span><br><span class="line">        ar = pairwise_distances_argmin(</span><br><span class="line">        mbk.cluster_centers_, kmeans.cluster_centers_)</span><br><span class="line">        dict_ = <span class="built_in">dict</span>(<span class="built_in">enumerate</span>(ar))</span><br><span class="line">        <span class="comment"># 用 mbk 的训练结果标签 y_hat 就可以寻找到对应的 kmeans 的质心</span></span><br><span class="line">        y_hat = pd.Series(y_hat).<span class="built_in">map</span>(dict_).values</span><br><span class="line">    <span class="comment"># 将预测结果加入到列表中</span></span><br><span class="line">    y_hat_list.append(y_hat)</span><br><span class="line">    </span><br><span class="line">    plt.scatter(x[:, <span class="number">0</span>], x[:, <span class="number">1</span>], c=colors[y_hat], marker=<span class="string">&#x27;.&#x27;</span>)</span><br></pre></td></tr></table></figure>


<p><img src="https://wx2.sbimg.cn/2020/07/04/2OERm.md.png" alt="png"></p>
<p>比较两个算法聚类结果的差异:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">same = y_hat_list[<span class="number">0</span>] == y_hat_list[<span class="number">1</span>]</span><br><span class="line">diff = y_hat_list[<span class="number">0</span>] != y_hat_list[<span class="number">1</span>]</span><br><span class="line">plt.scatter(x[same, <span class="number">0</span>], x[same, <span class="number">1</span>], c=<span class="string">&#x27;g&#x27;</span>, marker=<span class="string">&#x27;.&#x27;</span>, label=<span class="string">&#x27;预测相同&#x27;</span>)</span><br><span class="line">plt.scatter(x[diff, <span class="number">0</span>], x[diff, <span class="number">1</span>], c=<span class="string">&#x27;r&#x27;</span>, marker=<span class="string">&#x27;.&#x27;</span>, label=<span class="string">&#x27;预测不同&#x27;</span>)</span><br><span class="line">plt.legend()</span><br><span class="line">print(<span class="string">&#x27;相同数量:&#x27;</span>, x[same].shape[<span class="number">0</span>])</span><br><span class="line">print(<span class="string">&#x27;不同数量:&#x27;</span>, x[diff].shape[<span class="number">0</span>])</span><br></pre></td></tr></table></figure>

<pre><code>相同数量: 7983
不同数量: 17</code></pre>
<p><img src="https://wx2.sbimg.cn/2020/07/04/2Obyd.png" alt="png"></p>
<p>两个算法聚类结果只有 17 个样本点不同</p>
<br>

]]></content>
      <categories>
        <category>数据分析</category>
      </categories>
      <tags>
        <tag>数理统计</tag>
      </tags>
  </entry>
  <entry>
    <title>朴素贝叶斯</title>
    <url>/statistics/statistics7-c1988cb61792/</url>
    <content><![CDATA[<blockquote>
<p>内容主要来源：<strong>开课吧</strong>学习笔记整理。</p>
</blockquote>
<h2 id="八-朴素贝叶斯"><a href="#八-朴素贝叶斯" class="headerlink" title="八, 朴素贝叶斯"></a>八, 朴素贝叶斯</h2><h3 id="1-概率基础"><a href="#1-概率基础" class="headerlink" title="1, 概率基础"></a>1, 概率基础</h3><p><strong>样本空间</strong>:</p>
<p>在<strong>随机试验</strong> E 中, 实验的所有可能结果组成的集合, 称为<strong>样本空间</strong> S, 样本空间的每个元素, 即 E 的每个结果, 称<strong>样本点</strong></p>
<p><strong>随机事件</strong>:</p>
<p>进行随机试验时, 满足某种条件的样本点组成的集合, S 的子集, 称作<strong>随机事件</strong>, 只有一个样本点时, 称作<strong>基本事件</strong></p>
<p><strong>概率</strong>:</p>
<p>对于随机事件 A, 概率为:</p>
<p>$P(A)=\frac{A \text { 中基本事件数 }}{S \text { 中基本事件数 }}$</p>
<p><strong>条件概率</strong>:</p>
<p>定义事件 A 发生的前提下, 事件 B 发生的概率 P(B | A) 为条件概率:</p>
<p>$$P(B \mid A)=\frac{P(A B)}{P(A)}$$</p>
<p>由条件概率的定义可得, 事件 A 和 B 同时发生的概率 P(AB) 满足如下<strong>乘法定理</strong>:</p>
<p>$$P(A B)=P(B \mid A) P(A)$$</p>
<p><strong>独立性:</strong></p>
<p>定义 A 和 B 两个事件, 如果满足:</p>
<p>$$P(A B)=P(A) P(B)$$</p>
<p>则称事件 A, B 相互独立. 再结合乘法定理, 则有:</p>
<p>$$P(B \mid A) = P(B)$$</p>
<p><strong>全概率公式:</strong></p>
<p>设随机试验 E 的样本空间为 S, 若事件 $B_{1}$，$B_{2}$，…, $B_{n}$ 构成一个完备事件组(即它们两两相互独立，事件并集为 S), 且都有正概率，则对任意一个 E 的事件 A，有如下公式成立：</p>
<p>$$P(A)=P\left(A \mid B_{1}\right) P\left(B_{1}\right)+P\left(A \mid B_{2}\right) P\left(B_{2}\right)+\ldots \ldots+P\left(A \mid B_{n}\right) P\left(B_{n}\right)$$</p>
<p>此公式即为全概率公式. 特别地，对于任意两随机事件 A 和 B，有如下成立：</p>
<p>$$P(B)=P(B \mid A) P(A)+P(B \mid \bar{A}) P(\bar{A})$$</p>
<p><strong>贝叶斯公式:</strong></p>
<p>设随机试验 E 的样本空间为 S, 若事件 $B_{1}$，$B_{2}$，…, $B_{n}$ 构成一个完备事件组(即它们两两相互独立，事件并集为 S), 且都有正概率，则对任意一个 E 的正概率事件 A，有如下公式成立( i 为 1~n 的正整数)：</p>
<p>$$P\left(B_{i} \mid A\right)=\frac{P\left(A B_{i}\right)}{P(A)}=\frac{P\left(A \mid B_{i}\right) P\left(B_{i}\right)}{P(A)} \<br>=\frac{P\left(A \mid B_{i}\right) P\left(B_{i}\right)}{\sum_{j=1}^{n} P\left(A \mid B_{j}\right) P\left(B_{j}\right)}$$</p>
<p>贝叶斯公式将求解 P(B | A) 的概率转换成求 P(A | B) 的概率, 在求解某个事件概率非常困难时, 转换一下更方便求解</p>
<p>例: 从以往数据得出, 机器调整良好时生产的产品合格的概率是 98%, 机器故障时合格的概率是 55%, 每天开机时机器调整良好的概率为 95%. 求某日开机生产的第一件产品是合格品时, 机器调整良好的概率?</p>
<p>解: 设事件 A 为产品合格, B 为机器调整良好, 则 $\bar{B}$ 为机器故障</p>
<p>$$P(B \mid A)=\frac{P(A \mid B) P(B)}{P(A \mid B) P(B)+P(A \mid \bar{B}) P(\bar{B})} \<br>=\frac{0.98 \times 0.95}{0.98 \times 0.95+0.55 \times 0.05} \<br>=0.97$$</p>
<p><strong>先验概率和后验概率:</strong></p>
<p>由以往的数据得出的概率称为<strong>先验概率</strong>, 如上例中的已知概率</p>
<p>得到某些信息后, 在先验概率的基础上进行修正而得到的概率, 称为<strong>后验概率</strong>, 如上例中求解的概率</p>
<h3 id="2-朴素贝叶斯算法原理"><a href="#2-朴素贝叶斯算法原理" class="headerlink" title="2, 朴素贝叶斯算法原理"></a>2, 朴素贝叶斯算法原理</h3><p>朴素贝叶斯是基于概率的分类算法, 前提假设各个特征(自变量)之间是相互独立的, 设类别(因变量)为 Y, Y 包含 m 个类别($y_{1}, \ldots, y_{m}$), 特征为 X, X 包含含有 n 个特征 ($x_{1}, \ldots, x_{n}$), 然后通过计算比较, 在特征 X 确定的前提下, 类别 Y 中每个类别的概率大小, 概率最大者即为预测结果</p>
<p>设 Y 中任意一个类别为 y, 则:</p>
<p>$$P(y \mid X) = P\left(y \mid x_{1}, \ldots, x_{n}\right) \<br>=\frac{P(y) P\left(x_{1}, \ldots, x_{n} \mid y\right)}{P\left(x_{1}, \ldots, x_{n}\right)} \<br>=\frac{P(y) P\left(x_{1} \mid y\right) P\left(x_{2} \mid y\right) \ldots P\left(x_{n} \mid y\right)}{P\left(x_{1}, \ldots, x_{n}\right)} \<br>=\frac{P(y) \prod_{i=1}^{n} P\left(x_{i} \mid y\right)}{P\left(x_{1}, \ldots, x_{n}\right)}$$</p>
<p>上式分母为定值, 则:</p>
<p>$$P\left(y \mid X \right) \propto P(y) \prod_{i=1}^{n} P\left(x_{i} \mid y\right)$$</p>
<p>所以最终预测类别 $\hat{y}$ 为分子部分值最大对应的类别:</p>
<p>$$\hat{y}=\arg \max_{y} P(y) \prod_{i=1}^{n} P\left(x_{i} \mid y\right)$$</p>
<p>不同的朴素贝叶斯算法, 主要是对 $P\left(x_{i} \mid y\right)$ 的分布假设不同, 进而采取不同的参数估计方式. 最终主要就是通过计算  $P\left(x_{i} \mid y\right)$ 的概率来计算结果</p>
<p>例: 预测第 11 条记录, 学生是否上课</p>
<table>
   <tr>
      <td>序号</td>
      <td>天气</td>
      <td>上课距离</td>
      <td>成绩</td>
      <td>课程</td>
      <td>上课情况</td>
   </tr>
   <tr>
      <td>1</td>
      <td>晴</td>
      <td>远</td>
      <td>差</td>
      <td>选修</td>
      <td>逃课</td>
   </tr>
   <tr>
      <td>2</td>
      <td>晴</td>
      <td>近</td>
      <td>差</td>
      <td>必修</td>
      <td>上课</td>
   </tr>
   <tr>
      <td>3</td>
      <td>晴</td>
      <td>近</td>
      <td>好</td>
      <td>必修</td>
      <td>上课</td>
   </tr>
   <tr>
      <td>4</td>
      <td>阴</td>
      <td>远</td>
      <td>差</td>
      <td>选修</td>
      <td>逃课</td>
   </tr>
   <tr>
      <td>5</td>
      <td>阴</td>
      <td>近</td>
      <td>好</td>
      <td>选修</td>
      <td>上课</td>
   </tr>
   <tr>
      <td>6</td>
      <td>阴</td>
      <td>近</td>
      <td>好</td>
      <td>必修</td>
      <td>上课</td>
   </tr>
   <tr>
      <td>7</td>
      <td>雨</td>
      <td>远</td>
      <td>差</td>
      <td>选修</td>
      <td>逃课</td>
   </tr>
   <tr>
      <td>8</td>
      <td>雨</td>
      <td>近</td>
      <td>好</td>
      <td>必修</td>
      <td>上课</td>
   </tr>
   <tr>
      <td>9</td>
      <td>雨</td>
      <td>近</td>
      <td>差</td>
      <td>必修</td>
      <td>逃课</td>
   </tr>
   <tr>
      <td>10</td>
      <td>雨</td>
      <td>远</td>
      <td>好</td>
      <td>选修</td>
      <td>逃课</td>
   </tr>
   <tr>
      <td>11</td>
      <td>阴</td>
      <td>近</td>
      <td>差</td>
      <td>选修</td>
      <td>?</td>
   </tr>
   <tr>
      <td>12</td>
      <td>晴</td>
      <td>远</td>
      <td>好</td>
      <td>选修</td>
      <td>?</td>
   </tr>
</table>

<p>分别计算上课和逃课情况下, 各自的概率:</p>
<p>$$P(y=\text { 上课 }) \prod_{i=1}^{n} P\left(x_{i} \mid y=\text { 上课 }\right) \<br>=P(y=\text { 上课 }) P\left(x_{1}=\text { 阴 } \mid y=\text { 上课 }\right) P\left(x_{2}=\text { 近 } \mid y=\text { 上课 }\right) \<br>P\left(x_{3}=\text {差 } \mid y=\text { 上课 }\right) P\left(x_{4}=\text { 选修 } \mid y=\text { 上课 }\right) \<br>=0.5 \times 0.4 \times 1 \times 0.2 \times 0.2 \<br>=0.008$$</p>
<p>$$P(y=\text { 逃课 }) \prod_{i=1}^{n} P\left(x_{i} \mid y=\text { 逃课 }\right) \<br>=P(y=\text { 逃课 }) P\left(x_{1}=\text { 阴 } \mid y=\text { 逃课 }\right) P\left(x_{2}=\text { 近 } \mid y=\text { 逃课 }\right) \<br>P\left(x_{3}=\text { 差 } \mid y=\text { 逃课 }\right) P\left(x_{4}=\text { 选修 } \mid y=\text { 逃课 }\right) \<br>=0.5 \times 0.2 \times 0.2 \times 0.8 \times 0.8 \<br>=0.0128$$</p>
<p>可得预测结果为: 逃课</p>
<h3 id="3-平滑改进"><a href="#3-平滑改进" class="headerlink" title="3, 平滑改进"></a>3, 平滑改进</h3><p>当我们预测上例中, 第 12 条记录所属的类别时, 因为样本不是总体, 会出现上课的前提下, 距离远的概率为 0, 造成计算结果也为 0, 影响了预测结果, 因此需要平滑改进:</p>
<p>$$ P\left(x_{i} \mid y\right)=\frac{\text { 类别 } y \text { 中 } x_{i} \text { 取某个值出现的次数 }+ \alpha}{\text { 类别别 }  y \text { 的总数 }+k * \alpha} $$</p>
<p>其中, k 为特征 $x_{i}$ 可能的取值数, α (α ≥ 0) 称为平滑系数, 当 α = 1 时, 称拉普拉斯平滑( Laplace smoothing)</p>
<h3 id="4-算法优点"><a href="#4-算法优点" class="headerlink" title="4, 算法优点"></a>4, 算法优点</h3><p>即使训练集数据较少, 也能实现不错的预测; 算法训练速度非常快</p>
<p>因此算法假设特征之间是独立的, 可以单独考虑. 如果训练集有 N 个特征, 每个特征需要 M 个样本来训练, 则只需要训练 N*M 的样本数量, 而不是笛卡儿积的形式指数级增加</p>
<p>常用的朴素贝叶斯有: 高斯朴素贝叶斯, 伯努利朴素贝叶斯, 多项式朴素贝叶斯</p>
<h3 id="5-高斯朴素贝叶斯"><a href="#5-高斯朴素贝叶斯" class="headerlink" title="5, 高斯朴素贝叶斯"></a>5, 高斯朴素贝叶斯</h3><p>适用于连续变量, 其假定各个特征 x 在各个类别 y 下服从正态分布:</p>
<p>$$x_{i} \sim N\left(\mu_{y}, \sigma_{y}^{2}\right)$$</p>
<p>算法使用概率密度函数来计算 $P\left(x_{i} \mid y\right)$ 的概率:</p>
<p>$$P\left(x_{i} \mid y\right)=\frac{1}{\sqrt{2 \pi \sigma_{y}^{2}}} \exp \left(-\frac{\left(x_{i}-\mu_{y}\right)^{2}}{2 \sigma_{y}^{2}}\right) $$</p>
<p>$\mu_{y}$:  在类别为  y  的样本中, 特征  $x_{i}$  的均值<br>$\sigma_{y}$:  在类别为  y  的样本中, 特征 $x_{i}$  的标件差</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> sklearn.naive_bayes <span class="keyword">import</span> GaussianNB</span><br><span class="line"></span><br><span class="line">np.random.seed(<span class="number">0</span>)</span><br><span class="line">x = np.random.randint(<span class="number">0</span>, <span class="number">10</span>, size=(<span class="number">8</span>, <span class="number">3</span>))</span><br><span class="line">y = np.array([<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>])</span><br><span class="line">data = pd.DataFrame(np.concatenate([x, y.reshape(<span class="number">-1</span>, <span class="number">1</span>)], axis=<span class="number">1</span>),</span><br><span class="line">                   columns=[<span class="string">&#x27;x1&#x27;</span>, <span class="string">&#x27;x2&#x27;</span>, <span class="string">&#x27;x3&#x27;</span>, <span class="string">&#x27;y&#x27;</span>])</span><br><span class="line">display(data[:<span class="number">3</span>])</span><br><span class="line"></span><br><span class="line">gnb = GaussianNB()</span><br><span class="line">gnb.fit(x, y)</span><br><span class="line"></span><br><span class="line">print(<span class="string">&#x27;类别标签:&#x27;</span>, gnb.classes_)</span><br><span class="line">print(<span class="string">&#x27;每个类别的先验概率:&#x27;</span>, gnb.class_prior_)</span><br><span class="line">print(<span class="string">&#x27;样本数量:&#x27;</span>, gnb.class_count_)</span><br><span class="line">print(<span class="string">&#x27;每个类别下特征的均值:&#x27;</span>, gnb.theta_)</span><br><span class="line">print(<span class="string">&#x27;每个类别下特征的方差:&#x27;</span>, gnb.sigma_)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试集</span></span><br><span class="line">x_test = np.array([[<span class="number">5</span>, <span class="number">7</span>, <span class="number">2</span>]])</span><br><span class="line">print(<span class="string">&#x27;预测结果:&#x27;</span>, gnb.predict(x_test))</span><br><span class="line">print(<span class="string">&#x27;预测结果概率:&#x27;</span>, gnb.predict_proba(x_test))</span><br></pre></td></tr></table></figure>


<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>x1</th>
      <th>x2</th>
      <th>x3</th>
      <th>y</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>5</td>
      <td>0</td>
      <td>3</td>
      <td>0</td>
    </tr>
    <tr>
      <th>1</th>
      <td>3</td>
      <td>7</td>
      <td>9</td>
      <td>1</td>
    </tr>
    <tr>
      <th>2</th>
      <td>3</td>
      <td>5</td>
      <td>2</td>
      <td>0</td>
    </tr>
  </tbody>
</table>
</div>


<pre><code>类别标签: [0 1]
每个类别的先验概率: [0.5 0.5]
样本数量: [4. 4.]
每个类别下特征的均值: [[5.   5.   3.  ]
 [6.5  5.75 7.5 ]]
每个类别下特征的方差: [[3.50000001 9.50000001 3.50000001]
 [5.25000001 7.68750001 2.75000001]]
预测结果: [0]
预测结果概率: [[0.99567424 0.00432576]]</code></pre>
<h3 id="6-伯努利朴素贝叶斯"><a href="#6-伯努利朴素贝叶斯" class="headerlink" title="6, 伯努利朴素贝叶斯"></a>6, 伯努利朴素贝叶斯</h3><p>设实验 E 只有两个可能的结果, A 与 $\bar{A}$, 则称 E 为伯努利试验</p>
<p>伯努利朴素贝叶斯, 适用于离散变量, 其假设各个特征 x 在各个类别 y 下服从 n 重伯努利分布(二项分布), 因伯努利试验仅有两个结果, 算法会首先对特征值进行二值化处理(假设二值化结果为 1 和 0 )</p>
<p>$P\left(x_{i} \mid y\right)$ 的概率为:</p>
<p>$$P\left(x_{i} \mid y\right)=P\left(x_{i}=1 \mid y\right) x_{i}+\left(1-P\left(x_{i}=1 \mid y\right)\right)\left(1-x_{i}\right)$$</p>
<p>在训练集中, 会进行如下评估:</p>
<p>$$ P\left(x_{i}=1 \mid y\right)=\frac{N_{y i}+\alpha}{N_{y}+2 * \alpha} \<br> P\left(x_{i}=0 \mid y\right)=1-P\left(x_{i}=1 \mid y\right) $$</p>
<p>$N_{y i}$:  第  i  特征中, 属于类别  y,  数值为 1 的样本个数<br>$N_{y}$:  属于类別 y 的所有样本个数<br>$\alpha$:  平滑系数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.naive_bayes <span class="keyword">import</span> BernoulliNB</span><br><span class="line"></span><br><span class="line">np.random.seed(<span class="number">0</span>)</span><br><span class="line">x = np.random.randint(<span class="number">-5</span>, <span class="number">5</span>, size=(<span class="number">8</span>, <span class="number">3</span>))</span><br><span class="line">y = np.array([<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>])</span><br><span class="line">data = pd.DataFrame(np.concatenate([x, y.reshape(<span class="number">-1</span>, <span class="number">1</span>)], axis=<span class="number">1</span>),</span><br><span class="line">                   columns=[<span class="string">&#x27;x1&#x27;</span>, <span class="string">&#x27;x2&#x27;</span>, <span class="string">&#x27;x3&#x27;</span>, <span class="string">&#x27;y&#x27;</span>])</span><br><span class="line">display(data[:<span class="number">3</span>])</span><br><span class="line"></span><br><span class="line">bnb = BernoulliNB()</span><br><span class="line">bnb.fit(x, y)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 统计每个类别下, 特征中二值化后, 每个特征下值 1 出现的次数</span></span><br><span class="line">print(<span class="string">&#x27;值 1 出现的次数:&#x27;</span>, bnb.feature_count_)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 每个类别的先验概率, 算法得到的该概率值是取对数后的结果,</span></span><br><span class="line"><span class="comment"># 需要取指数还原</span></span><br><span class="line">print(<span class="string">&#x27;每个类别的先验概率:&#x27;</span>, np.exp(bnb.class_log_prior_))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 每个类别下, 每个特征的概率(也需要取指数还原)</span></span><br><span class="line">print(<span class="string">&#x27;每个特征的概率:&#x27;</span>, np.exp(bnb.feature_log_prob_))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试集</span></span><br><span class="line">x_test = np.array([[<span class="number">-5</span>, <span class="number">0</span>, <span class="number">2</span>]])</span><br><span class="line">print(<span class="string">&#x27;预测结果:&#x27;</span>, bnb.predict(x_test))</span><br><span class="line">print(<span class="string">&#x27;预测结果概率:&#x27;</span>, bnb.predict_proba(x_test))</span><br></pre></td></tr></table></figure>


<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>x1</th>
      <th>x2</th>
      <th>x3</th>
      <th>y</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>0</td>
      <td>-5</td>
      <td>-2</td>
      <td>0</td>
    </tr>
    <tr>
      <th>1</th>
      <td>-2</td>
      <td>2</td>
      <td>4</td>
      <td>1</td>
    </tr>
    <tr>
      <th>2</th>
      <td>-2</td>
      <td>0</td>
      <td>-3</td>
      <td>0</td>
    </tr>
  </tbody>
</table>
</div>


<pre><code>值 1 出现的次数: [[1. 2. 1.]
 [3. 3. 3.]]
每个类别的先验概率: [0.5 0.5]
每个特征的概率: [[0.33333333 0.5        0.33333333]
 [0.66666667 0.66666667 0.66666667]]
预测结果: [0]
预测结果概率: [[0.6 0.4]]</code></pre>
<h3 id="7-多项式朴素贝叶斯"><a href="#7-多项式朴素贝叶斯" class="headerlink" title="7, 多项式朴素贝叶斯"></a>7, 多项式朴素贝叶斯</h3><p>多项式朴素贝叶斯, 适用于离散变量, 其假设各个特征 x 在各个类别 y 下服从多项式分布(每个特征下的值之和, 就是该特征发生(出现)的次数), 因此每个特征值不能是负数</p>
<p>$P\left(x_{i} \mid y\right)$ 的概率为:</p>
<p>$$P\left(x_{i} \mid y\right)=\frac{N_{y i}+\alpha}{N_{y}+\alpha n} $$</p>
<p>$N_{y i}$:  特征 i 在类别 y 的样本中发生(出现)的次数<br>$N_{y}$:  类别  y  的样本中, 所有特征发生(出现)的次数<br>$n$:  特征数量<br>$\alpha$:  平滑系数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.naive_bayes <span class="keyword">import</span> MultinomialNB</span><br><span class="line"></span><br><span class="line">np.random.seed(<span class="number">0</span>)</span><br><span class="line">x = np.random.randint(<span class="number">1</span>, <span class="number">5</span>, size=(<span class="number">8</span>, <span class="number">3</span>))</span><br><span class="line">y = np.array([<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>])</span><br><span class="line">data = pd.DataFrame(np.concatenate([x, y.reshape(<span class="number">-1</span>, <span class="number">1</span>)], axis=<span class="number">1</span>),</span><br><span class="line">                   columns=[<span class="string">&#x27;x1&#x27;</span>, <span class="string">&#x27;x2&#x27;</span>, <span class="string">&#x27;x3&#x27;</span>, <span class="string">&#x27;y&#x27;</span>])</span><br><span class="line">display(data[:<span class="number">3</span>])</span><br><span class="line"></span><br><span class="line">mnb = MultinomialNB()</span><br><span class="line">mnb.fit(x, y)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 每个类别的样本数量</span></span><br><span class="line">print(<span class="string">&#x27;每个类别的样本数:&#x27;</span>, mnb.class_count_)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 每个特征在每个类别下发生(出现)的次数</span></span><br><span class="line">print(<span class="string">&#x27;每个特征发生(出现)次数:&#x27;</span>, mnb.feature_count_)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 每个类别下, 每个特征的概率(需要取指数还原)</span></span><br><span class="line">print(<span class="string">&#x27;每个类别下特征的概率:&#x27;</span>, np.exp(mnb.feature_log_prob_))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试集</span></span><br><span class="line">x_test = np.array([[<span class="number">1</span>, <span class="number">1</span>, <span class="number">4</span>]])</span><br><span class="line">print(<span class="string">&#x27;预测结果:&#x27;</span>, mnb.predict(x_test))</span><br><span class="line">print(<span class="string">&#x27;预测结果概率:&#x27;</span>, mnb.predict_proba(x_test))</span><br></pre></td></tr></table></figure>


<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>x1</th>
      <th>x2</th>
      <th>x3</th>
      <th>y</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>1</td>
      <td>4</td>
      <td>2</td>
      <td>0</td>
    </tr>
    <tr>
      <th>1</th>
      <td>1</td>
      <td>4</td>
      <td>4</td>
      <td>1</td>
    </tr>
    <tr>
      <th>2</th>
      <td>4</td>
      <td>4</td>
      <td>2</td>
      <td>0</td>
    </tr>
  </tbody>
</table>
</div>


<pre><code>每个类别的样本数: [4. 4.]
每个特征发生(出现)次数: [[10. 14. 10.]
 [ 9. 11. 11.]]
每个类别下特征的概率: [[0.2972973  0.40540541 0.2972973 ]
 [0.29411765 0.35294118 0.35294118]]
预测结果: [1]
预测结果概率: [[0.36890061 0.63109939]]</code></pre>
<p><strong>利用鸢尾花数据集比较上述 3 个贝叶斯算法:</strong></p>
<p>对不同的数据集, 根据其分布情况选择适合的算法, 能得到更好的结果</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> load_iris</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"></span><br><span class="line">x, y = load_iris(return_X_y=<span class="literal">True</span>)</span><br><span class="line">x_train, x_test, y_train, y_test = train_test_split(x, y,</span><br><span class="line">                        test_size=<span class="number">0.25</span>, random_state=<span class="number">0</span>)</span><br><span class="line">models = [(<span class="string">&#x27;高斯朴素贝叶斯分值:&#x27;</span>, GaussianNB()),</span><br><span class="line">          (<span class="string">&#x27;伯努利朴素贝叶斯分值:&#x27;</span>, BernoulliNB()),</span><br><span class="line">          (<span class="string">&#x27;多项式朴素贝叶斯分值:&#x27;</span>, MultinomialNB())]</span><br><span class="line"><span class="keyword">for</span> name, m <span class="keyword">in</span> models:</span><br><span class="line">    m.fit(x_train, y_train)</span><br><span class="line">    print(name, m.score(x_test, y_test))</span><br></pre></td></tr></table></figure>

<pre><code>高斯朴素贝叶斯分值: 1.0
伯努利朴素贝叶斯分值: 0.23684210526315788
多项式朴素贝叶斯分值: 0.5789473684210527</code></pre>
<br>

]]></content>
      <categories>
        <category>数据分析</category>
      </categories>
      <tags>
        <tag>数理统计</tag>
      </tags>
  </entry>
  <entry>
    <title>Hive 介绍和 HiveQL 库和表初探</title>
    <url>/sql/hadoop1-f1634b625912/</url>
    <content><![CDATA[<blockquote>
<p>内容主要来源：<strong>开课吧</strong>学习笔记整理。</p>
</blockquote>
<p><font color=#00A600 >2020年8月9日更新</font></p>
<h2 id="一-Hive-介绍"><a href="#一-Hive-介绍" class="headerlink" title="一, Hive 介绍"></a>一, Hive 介绍</h2><h3 id="1-关于大数据"><a href="#1-关于大数据" class="headerlink" title="1, 关于大数据"></a>1, 关于大数据</h3><p>大数据指无法在一定时间范围内用传统数据处理应用程序进行捕捉,管理和处理的极其庞大, 复杂的数据集合. 大数据通常还指用更高级的处理模式和分析方法, 优化和提取海量, 高增长率和多样化数据的价值. </p>
<p>大数据的 4V+1O 特征:</p>
<ul>
<li><p>数据量大(volume): 采集, 储存, 计算量都非常大.</p>
</li>
<li><p>类型繁多(variety): 种类和来源多样化. 结构和非结构, 文本, 音频, 图片, 视频等等.</p>
</li>
<li><p>价值密度低(value): 沙里淘金又弥足珍贵.</p>
</li>
<li><p>速度快时效高(velocity): 增长速度快, 处理速度快, 时效性要求高. 搜索引擎要求几分钟之前的新闻就能被用户查到, 推荐算法要求尽可能实时推荐.</p>
</li>
<li><p>数据在线(online): 数据永远在线, 随时调用计算(OLTP). </p>
</li>
</ul>
<h3 id="2-关于-hadoop"><a href="#2-关于-hadoop" class="headerlink" title="2, 关于 hadoop"></a>2, 关于 hadoop</h3><p>云计算是分布式计算, 并行计算, 网格计算, 多核计算, 网络存储, 虚拟化, 负载均衡等传统计算机技术和互联网技术融合发展的产物. 借助 IaaS(基础设施服务), PaaS(平台服务), SaaS(软件服务)等业务模式, 把强大的计算能力提供给终端用户(自主权 IaaS &gt; PaaS &gt; SaaS).</p>
<p>云计算的两大底层支撑技术: 虚拟化, 大数据.</p>
<p>Hadoop 是 Apache 旗下的一套开源软件平台, 是云计算 PaaS 层的解决方案之一. 其提供了利用服务器集群, 根据用户自定义业务逻辑, 对海量数据进行分布式处理的能力, 有高可靠性、高可拓展性、高容错性和高效性. </p>
<p>Hadoop 生态圈:</p>
<p><img src="/images/hadoop.jpg"></p>
<p>Hadoop 的主要组成: 分布式存储 HDFS, 分布式计算 MapReduce, 资源调度引擎 Yarn.</p>
<h3 id="3-关于-Hive"><a href="#3-关于-Hive" class="headerlink" title="3, 关于 Hive"></a>3, 关于 Hive</h3><p>Hive 是基于 Hadoop 构建的一套数据仓库分析系统，它提供了丰富的 SQL 查询方式来分析存储在 Hadoop 的分布式文件系统中的数据：</p>
<ul>
<li><p>可以将结构化的数据文件映射为一张数据库表，并提供完整的 SQL 查询功能.</p>
</li>
<li><p>可以将 SQL 语句转换为 MapReduce 任务运行，通过自己的 SQL 查询分析需要的内容，这套 SQL 简称 HiveQL，使不熟悉 mapreduce 的用户可以很方便地利用 SQL 语言查询, 汇总和分析数据.</p>
</li>
</ul>
<p>Hive 不适合用于联机事务处理(OLTP), 不提供实时的查询和基于行级的数据更新操作; 它是专为联机分析处理(OLAP)设计, 最适合应用在基于大量不可变数据的批处理作业.</p>
<p>Hive 在加载数据过程中不会对数据进行任何的修改，只是将数据移动到 HDFS 中 hive 设定的目录下，因此 hive 不支持对数据的改写和添加，所有的数据都在加载的时候确定. </p>
<h3 id="4-Hive-的数据类型"><a href="#4-Hive-的数据类型" class="headerlink" title="4, Hive 的数据类型"></a>4, Hive 的数据类型</h3><p>基本数据类型:</p>
<p>TINYINT, SALLINT, INT, BIGINT, BOLLEAN, FLOAT, DOUBLE, STRING, BINARY, TIMESTAMP, DECIMAL, CHAR, VARCHAR, DATE.</p>
<p>复杂数据类型:</p>
<p>STRUCT 类型, 可以通过 <code>.</code> 符号访问元素内容. 例如某列数据类型是 STRUCT(first str1, last str2), 那么第一个元素可以通过 <code>.first</code> 来引用.</p>
<p>MAP 类型, 一组 键-值 对元组集合, 使用数组表示法, 可以访问数据. 例如某列数据类型是 MAP, ‘first’-‘str1’, ‘last’-‘str2’, 可以通过 <code>[&#39;last&#39;]</code> 获取后一个元素.</p>
<p>ARRAY 类型, 就是数组, 可以通过下标进行元素引用.</p>
<h2 id="二-HiveQL-库和表初探"><a href="#二-HiveQL-库和表初探" class="headerlink" title="二, HiveQL 库和表初探"></a>二, HiveQL 库和表初探</h2><p>(HiveQL 语句, 很多和 SQL 语句一样, 不同之处还需要统计加以区分)</p>
<p><a href="https://cwiki.apache.org/confluence/display/Hive/Home">Hive 官方文档</a></p>
<h3 id="1-数据库"><a href="#1-数据库" class="headerlink" title="1, 数据库"></a>1, 数据库</h3><p>a, 创建数据库:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create (database&#x2F;schema) [if not exists] 库名</span><br><span class="line">[comment 数据库描述]</span><br><span class="line">[location hdfs路径]</span><br><span class="line">[with dbproperties (属性名&#x3D;属性值, ...)];</span><br></pre></td></tr></table></figure>

<p>b, 查看数据库信息:</p>
<p><code>desc database extended 数据库名;</code></p>
<p>c, 删除数据库:</p>
<p><code>drop database if exists 数据库名 cascade;</code>, 加上 cascade 表示强制删除.</p>
<p>d, 修改数据库:</p>
<p><code>alter (database/schema) 数据库名 set 属性名 新属性值;</code></p>
<h3 id="2-数据表"><a href="#2-数据表" class="headerlink" title="2, 数据表"></a>2, 数据表</h3><p>a, 创建数据表:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create [externa] table if not exists 表名  # external 表示创建外部表</span><br><span class="line">    (列名 数据类型 [comment 列描述],</span><br><span class="line">     ...</span><br><span class="line">    )</span><br><span class="line">[comment 表描述]</span><br><span class="line">[partitioned by (列名 数据类型 [comment 列描述], ...)]  # 分区表</span><br><span class="line">[clustered by (列名, 列名, ...)]                       # 分桶表</span><br><span class="line">[sorted by (列名 [asc|desc], ...)]                     # 排序</span><br><span class="line">[row format 行格式]</span><br><span class="line">[stored as 文件存储类型]</span><br><span class="line">[location hdfs路径]</span><br><span class="line">[tblproperties (属性名&#x3D;属性值, ...)]</span><br><span class="line">[as 查询语句]</span><br></pre></td></tr></table></figure>

<p>Hive 中分区表, 将数据按一定逻辑进行组织, 查询分区表时, 除非 where 语句包含分区字段过滤条件控制数据查询范围, 否则不允许执行, 防止扫描所有分区消耗巨大资源.</p>
<p>b, 查看数据表结构:</p>
<p><code>desc formatted 表名;</code></p>
<p>c, 修改表:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 修改表名</span><br><span class="line">alter table 表名 rename to 新表名;  </span><br><span class="line"># 表中添加列</span><br><span class="line">alter table 表名 add columns (列名 类型 描述, ...);</span><br><span class="line"># 修改列名</span><br><span class="line">alter table 表名 change 列名 新列名 类型;</span><br></pre></td></tr></table></figure>

<p>d, 删除表:</p>
<p><code>drop table if exists 表名;</code></p>
<p>e, 清空表:</p>
<p><code>truncate table 表名;</code></p>
<p>f, 数据导入导出:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 本地导入表中</span><br><span class="line">load data local inpath &#39;本地路径&#39; overwrite into table 表名 [partition (属性&#x3D;属性值, ...)];</span><br><span class="line"></span><br><span class="line"># 从 hdfs 导入表中</span><br><span class="line">load data inpath &#39;hdfs路径&#39; into table 表名 [partition (属性&#x3D;属性名, ...)];</span><br><span class="line"></span><br><span class="line"># 将 Hive 表中数据导出到本地</span><br><span class="line">insert overwrite local directory &#39;本地路径&#39; 查询语句;</span><br><span class="line"></span><br><span class="line"># 将 Hive 表中数据导出到 hdfs</span><br><span class="line">insert overwrite directory &#39;hdfs路径&#39; 查询语句;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>数据分析</category>
      </categories>
      <tags>
        <tag>HiveQL</tag>
      </tags>
  </entry>
  <entry>
    <title>HiveQL 表查询</title>
    <url>/sql/hadoop2-4c8304e56f6f/</url>
    <content><![CDATA[<blockquote>
<p>内容主要来源：<strong>开课吧</strong>学习笔记整理。</p>
</blockquote>
<h2 id="三-HiveQL-单表查询"><a href="#三-HiveQL-单表查询" class="headerlink" title="三, HiveQL 单表查询"></a>三, HiveQL 单表查询</h2><h3 id="1-函数"><a href="#1-函数" class="headerlink" title="1, 函数"></a>1, 函数</h3><p>查询需要用到查询语法, 语句和函数. 查看 Hive 中的全部函数可用 <code>show functions;</code>语句</p>
<p>查看具体函数的用法可用 <code>desc function 函数名;</code>, 也可用更详细的 <code>desc function extended 函数名;</code>.</p>
<h3 id="2-语法和语句"><a href="#2-语法和语句" class="headerlink" title="2, 语法和语句"></a>2, 语法和语句</h3><p>查询语法和语句: </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT [DISTINCT] </span><br><span class="line">  FROM </span><br><span class="line">  [JOIN]</span><br><span class="line">    [ON]</span><br><span class="line">  [WHERE]</span><br><span class="line">  [GROUP BY]</span><br><span class="line">  [WITH]  </span><br><span class="line">  [HAVING]</span><br><span class="line">  [ORDER BY]</span><br><span class="line">  [LIMIT]</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>语句的执行顺序: </p>
<p>FROM → ON → JOIN → WHERE → GROUP BY → WITH → HAVING → SELECT → DISTINCT → ORDER BY → LIMIT  </p>
<h3 id="3-语句和常用函数用法"><a href="#3-语句和常用函数用法" class="headerlink" title="3, 语句和常用函数用法"></a>3, 语句和常用函数用法</h3><p>通过实例熟悉语句和常用函数用法:</p>
<p>有用户信息表 <code>user_info</code>, 通过语句<code>desc 表名</code>查看表结构信息如下:</p>
<table>
   <tr>
      <td>col_name</td>
      <td>data_type</td>
   </tr>
   <tr>
      <td>user_id             </td>
      <td>string              </td>
   </tr>
   <tr>
      <td>user_name           </td>
      <td>string              </td>
   </tr>
   <tr>
      <td>sex                 </td>
      <td>string              </td>
   </tr>
   <tr>
      <td>age                 </td>
      <td>int                 </td>
   </tr>
   <tr>
      <td>city                </td>
      <td>string              </td>
   </tr>
   <tr>
      <td>firstactivetime     </td>
      <td>string              </td>
   </tr>
   <tr>
      <td>level               </td>
      <td>int                 </td>
   </tr>
   <tr>
      <td>extra1              </td>
      <td>string              </td>
   </tr>
   <tr>
      <td>extra2              </td>
      <td>map<string,string> </td>
   </tr>
</table>

<p>其中扩展列 extra1 是 json 字符串型, extra2 是 map 类型, 格式如下:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&quot;systemtype&quot;:&quot;ios&quot;,&quot;education&quot;:&quot;master&quot;,&quot;marriage_status&quot;:&quot;1&quot;,&quot;phonebrand&quot;:&quot;iphone X&quot;&#125;</span><br></pre></td></tr></table></figure>

<p>需要查看某个字段的值及格式, 直接筛选出来查看. </p>
<p><strong>3.01, 查询北京的 10 个女性用户:</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> user_name</span><br><span class="line"><span class="keyword">from</span> user_info</span><br><span class="line"><span class="keyword">where</span> city=<span class="string">&#x27;beijing&#x27;</span> <span class="keyword">and</span> <span class="string">&#x27;sex&#x27;</span>=<span class="string">&#x27;female&#x27;</span></span><br><span class="line"><span class="keyword">limit</span> <span class="number">10</span>;</span><br></pre></td></tr></table></figure>

<br>

<p>有用户交易表 <code>user_trade</code>:</p>
<table>
   <tr>
      <td>col_name</td>
      <td>data_type</td>
   </tr>
   <tr>
      <td>user_name           </td>
      <td>string              </td>
   </tr>
   <tr>
      <td>piece               </td>
      <td>int                 </td>
   </tr>
   <tr>
      <td>price               </td>
      <td>double              </td>
   </tr>
   <tr>
      <td>pay_amount          </td>
      <td>double              </td>
   </tr>
   <tr>
      <td>goods_category      </td>
      <td>string              </td>
   </tr>
   <tr>
      <td>pay_time            </td>
      <td>bigint              </td>
   </tr>
   <tr>
      <td>dt                  </td>
      <td>string              </td>
   </tr>
   <tr>
      <td># Partition Information</td>
      <td> </td>
   </tr>
   <tr>
      <td># col_name            </td>
      <td>data_type           </td>
   </tr>
   <tr>
      <td>dt                  </td>
      <td>string </td>
   </tr>
</table>

<p>此表是一个分区表, 有分区字段<code>dt</code>, 在查询的时候, where 条件中<strong>必须对分区字段进行限制</strong>.</p>
<p><strong>3.02, 查询某天(2018-12-31), 购买食物的用户, 及其购买量与金额:</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> user_name,</span><br><span class="line">    piece,</span><br><span class="line">    pay_amount</span><br><span class="line"><span class="keyword">from</span> user_trade</span><br><span class="line"><span class="keyword">where</span> dt=<span class="string">&#x27;2018-12-31&#x27;</span> <span class="keyword">and</span> goods_category=<span class="string">&#x27;food&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p><strong>3.03, 查询 2019 年第一季度, 商品的热度(购买人数)与价值度(购买金额):</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> goods_category,</span><br><span class="line">    <span class="keyword">count</span>(<span class="keyword">distinct</span> user_name) user_num,</span><br><span class="line">    <span class="keyword">sum</span>(pay_amount) tatal_amount</span><br><span class="line"><span class="keyword">from</span> user_trade</span><br><span class="line"><span class="keyword">where</span> dt <span class="keyword">between</span> <span class="string">&#x27;2019-01-01&#x27;</span> <span class="keyword">and</span> <span class="string">&#x27;2019-03-31&#x27;</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> goods_category;</span><br></pre></td></tr></table></figure>

<p><code>count(distinct 字段)</code> 去重计数.</p>
<p><strong>3.04, 查询 2019 年 4 月, 支付超过 5w 的用户:</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> user_name,</span><br><span class="line">    <span class="keyword">sum</span>(pay_amount) total_amount</span><br><span class="line"><span class="keyword">from</span> user_trade</span><br><span class="line"><span class="keyword">where</span> dt <span class="keyword">between</span> <span class="string">&#x27;2019-04-01&#x27;</span> <span class="keyword">and</span> <span class="string">&#x27;2019-04-30&#x27;</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> user_name</span><br><span class="line"><span class="keyword">having</span> <span class="keyword">sum</span>(pay_amount)&gt;<span class="number">50000</span>;</span><br></pre></td></tr></table></figure>
<p>语句<code>having sum(pay_amount)</code>虽然用上面的别名<code>total_amount</code>也可以查询, 但是执行顺序 having 在 select 之前, 最好不用别名.</p>
<p><strong>3.05, 查询 2019 年 4 月, 支付金额前五的用户:</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> user_name,</span><br><span class="line">    <span class="keyword">sum</span>(pay_amount) total_amount</span><br><span class="line"><span class="keyword">from</span> user_trade</span><br><span class="line"><span class="keyword">where</span> dt <span class="keyword">between</span> <span class="string">&#x27;2019-04-01&#x27;</span> <span class="keyword">and</span> <span class="string">&#x27;2019-04-30&#x27;</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> user_name</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> total_amount <span class="keyword">desc</span></span><br><span class="line"><span class="keyword">limit</span> <span class="number">5</span>;</span><br></pre></td></tr></table></figure>
<p><code>asc</code>是升序(默认), 可以不写, <code>desc</code>是降序, 对多个字段进行排序, 每个字段都要指定.</p>
<p><code>order by total_amount</code> 用 <code>sum(pay_amount)</code> 也可以查询, 但是最好用别名 <code>total_amount</code> , 执行顺序 order by 在 select 之后. </p>
<br>

<p><strong>日期时间处理函数</strong>:</p>
<p>时间戳转换为日期: </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from_unixtime(时间戳, &#39;yyyy-MM-dd hh:mm:ss&#39;)</span><br></pre></td></tr></table></figure>
<p>其中的日期格式<code>yyyy-MM-dd HH:mm:ss</code>(全省略时默认格式), <code>HH</code> 是 24 小时制, <code>hh</code> 是 12 小时制, 可以省略任意字符, 例如<code>y</code>就是转换为年, <code>h:m</code>就是几点几分, <code>yMd</code>就是年月日连写.</p>
<p>日期转换为时间戳:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">unix_timestamp(&#39;日期&#39;, &#39;yyyy-MM-dd hh:mm:ss&#39;)</span><br></pre></td></tr></table></figure>
<p>按照日期对应的格式转换为时间戳, 括号里无参数时, 获取当前时间的时间戳.</p>
<p>将日期时间转换为日期: <code>to_date()</code></p>
<p>计算两个日期之间的天数: <code>datediff(&#39;日期1&#39;, &#39;日期2&#39;)</code>, 得到<code>日期1 - 日期2</code>的天数.<br>日期增加: <code>date_add(&#39;日期&#39;, 天数)</code>, 日期减少: <code>date_sub(&#39;日期&#39;, 天数)</code>.<br>上述的日期都需要是<code>&#39;yyyy-MM-dd&#39;</code>格式, 天数是 int 类型.</p>
<p>获取当前日期: <code>current_date()</code>, 括号可以省略.</p>
<p><strong>3.06, 查询用户首次激活日期距今的日期间隔:</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> user_name,</span><br><span class="line">    <span class="keyword">datediff</span>(<span class="keyword">current_date</span>, <span class="keyword">to_date</span>(firstactivetime))</span><br><span class="line"><span class="keyword">from</span> user_info</span><br><span class="line"><span class="keyword">limit</span> <span class="number">10</span>;</span><br></pre></td></tr></table></figure>

<p><strong>3.07, 查询四个年龄段 20 以下, 20-30, 30-40, 40 以上 的用户数:</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">case</span> <span class="keyword">when</span> age&lt;<span class="number">20</span> <span class="keyword">then</span> <span class="string">&#x27;20以下&#x27;</span></span><br><span class="line">    <span class="keyword">when</span> age&gt;=<span class="number">20</span> <span class="keyword">and</span> age&lt;<span class="number">30</span> <span class="keyword">then</span> <span class="string">&#x27;20-30&#x27;</span></span><br><span class="line">    <span class="keyword">when</span> age&gt;=<span class="number">30</span> <span class="keyword">and</span> age&lt;<span class="number">40</span> <span class="keyword">then</span> <span class="string">&#x27;30-40&#x27;</span></span><br><span class="line">    <span class="keyword">else</span> <span class="string">&#x27;40以上&#x27;</span> <span class="keyword">end</span> <span class="keyword">as</span> age_type,</span><br><span class="line">    <span class="keyword">count</span>(<span class="keyword">distinct</span> user_id) user_num</span><br><span class="line"><span class="keyword">from</span> user_info</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> <span class="keyword">case</span> <span class="keyword">when</span> age&lt;<span class="number">20</span> <span class="keyword">then</span> <span class="string">&#x27;20以下&#x27;</span></span><br><span class="line">    <span class="keyword">when</span> age&gt;=<span class="number">20</span> <span class="keyword">and</span> age&lt;<span class="number">30</span> <span class="keyword">then</span> <span class="string">&#x27;20-30&#x27;</span></span><br><span class="line">    <span class="keyword">when</span> age&gt;=<span class="number">30</span> <span class="keyword">and</span> age&lt;<span class="number">40</span> <span class="keyword">then</span> <span class="string">&#x27;30-40&#x27;</span></span><br><span class="line">    <span class="keyword">else</span> <span class="string">&#x27;40以上&#x27;</span> <span class="keyword">end</span>;</span><br></pre></td></tr></table></figure>
<p>注意<code>case when ... then ... else ... end</code>的用法, 字段<code>user_id</code> 每个值是唯一值, 可以省略<code>distinct</code>.</p>
<p><strong>3.08, 查询用户等级高低(level&gt;5 为高)随性别分布情况:</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> sex, </span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">level</span>&gt;<span class="number">5</span>, <span class="string">&#x27;高&#x27;</span>, <span class="string">&#x27;低&#x27;</span>) level_type,</span><br><span class="line">    <span class="keyword">count</span>(user_id) user_num</span><br><span class="line"><span class="keyword">from</span> user_info</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> sex,</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">level</span>&gt;<span class="number">5</span>, <span class="string">&#x27;高&#x27;</span>, <span class="string">&#x27;低&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p><strong>字符串处理函数</strong>:</p>
<p><code>substr(字符串, 起始, 长度)</code>, 从<code>起始</code>(字符串的第一个字符是 1)截取<code>长度</code>个字符, <code>长度</code>省略则从<code>起始</code>截取到最后.</p>
<p><code>get_json_object(json字符串, &#39;$.key&#39;)</code>, 从 <code>json字符串</code>中取出 <code>key</code> 字符串对应的 <code>value</code> 字符串.</p>
<p><code>字段[&#39;key&#39;]</code>, 从 map 类型字段中, 取出 <code>key</code> 字符串对应的 <code>value</code> 字符串.</p>
<p><strong>3.09, 查询每个月拉新情况(就是每个月新的 用户id 的增加数):</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">substr</span>(firstactivetime, <span class="number">1</span>, <span class="number">7</span>) <span class="keyword">as</span> <span class="keyword">month</span>,</span><br><span class="line">    <span class="keyword">count</span>(<span class="keyword">distinct</span> user_id) user_num</span><br><span class="line"><span class="keyword">from</span> user_info</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> <span class="keyword">substr</span>(firstactivetime, <span class="number">1</span>, <span class="number">7</span>);</span><br></pre></td></tr></table></figure>

<p><strong>3.10, 查询不同手机品牌的用户数:</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 方法一</span></span><br><span class="line"><span class="keyword">select</span> get_json_object(extra1, <span class="string">&#x27;$.phonebrand&#x27;</span>) <span class="keyword">as</span> phone_brand,</span><br><span class="line">    <span class="keyword">count</span>(user_id) user_num</span><br><span class="line"><span class="keyword">from</span> user_info</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> get_json_object(extra1, <span class="string">&#x27;$.phonebrand&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 方法二</span></span><br><span class="line"><span class="keyword">select</span> extra2[<span class="string">&#x27;phonebrand&#x27;</span>] <span class="keyword">as</span> phone_brand,</span><br><span class="line">    <span class="keyword">count</span>(user_id) user_num</span><br><span class="line"><span class="keyword">from</span> user_info</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> extra2[<span class="string">&#x27;phonebrand&#x27;</span>];</span><br></pre></td></tr></table></figure>

<p><strong>3.11, 查询 ELLA 用户 2018 年平均每次支付金额和平均支付时间间隔:</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">avg</span>(pay_amount) <span class="keyword">as</span> avg_amount,</span><br><span class="line">    <span class="keyword">datediff</span>(<span class="keyword">max</span>(from_unixtime(pay_time, <span class="string">&#x27;yyyy-MM-dd&#x27;</span>)),</span><br><span class="line">        <span class="keyword">min</span>(from_unixtime(pay_time, <span class="string">&#x27;yyyy-MM-dd&#x27;</span>)))/<span class="keyword">count</span>(pay_time) <span class="keyword">as</span> avg_date</span><br><span class="line"><span class="keyword">from</span> user_trade</span><br><span class="line"><span class="keyword">where</span> <span class="keyword">year</span>(dt)=<span class="string">&#x27;2018&#x27;</span> <span class="keyword">and</span> user_name=<span class="string">&#x27;ELLA&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p>可以先取出最大最小, 在转换为时间格式. <code>year()</code>取出日期中的年, 对数字不敏感, <code>&#39;2018&#39;</code> 写成 <code>2018</code> 也可以. 月, 日, 小时, 分, 秒类似, 周是<code>weekofyear()</code>.</p>
<p><strong>3.12, 查询 2018 年购买商品品类在两个以上的用户数:</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(a.user_name)</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    (<span class="keyword">select</span> user_name,</span><br><span class="line">        <span class="keyword">count</span>(<span class="keyword">distinct</span> goods_category) <span class="keyword">as</span> category_num</span><br><span class="line">    <span class="keyword">from</span> user_trade</span><br><span class="line">    <span class="keyword">where</span> <span class="keyword">year</span>(dt)=<span class="string">&#x27;2018&#x27;</span></span><br><span class="line">    <span class="keyword">group</span> <span class="keyword">by</span> user_name</span><br><span class="line">    <span class="keyword">having</span> <span class="keyword">count</span>(<span class="keyword">distinct</span> goods_category)&gt;<span class="number">2</span>) a;</span><br></pre></td></tr></table></figure>

<p><strong>3.13, 查询在 2018 年激活, 年龄段在 20-30 和 30-40 的用户的婚姻状况分布:</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> a.age_type,</span><br><span class="line">    <span class="keyword">if</span>(a.marriage_status=<span class="number">1</span>, <span class="string">&#x27;已婚&#x27;</span>, <span class="string">&#x27;未婚&#x27;</span>),</span><br><span class="line">    <span class="keyword">count</span>(<span class="keyword">distinct</span> a.user_id)</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    (<span class="keyword">select</span> <span class="keyword">case</span> <span class="keyword">when</span> age&lt;<span class="number">20</span> <span class="keyword">then</span> <span class="string">&#x27;&lt;20&#x27;</span></span><br><span class="line">        <span class="keyword">when</span> age&gt;=<span class="number">20</span> <span class="keyword">and</span> age&lt;<span class="number">30</span> <span class="keyword">then</span> <span class="string">&#x27;20-30&#x27;</span></span><br><span class="line">        <span class="keyword">when</span> age&gt;=<span class="number">30</span> <span class="keyword">and</span> age&lt;<span class="number">40</span> <span class="keyword">then</span> <span class="string">&#x27;30-40&#x27;</span></span><br><span class="line">        <span class="keyword">else</span> <span class="string">&#x27;&gt;40&#x27;</span> <span class="keyword">end</span> <span class="keyword">as</span> age_type,</span><br><span class="line">        get_json_object(extra1, <span class="string">&#x27;$.marriage_status&#x27;</span>) <span class="keyword">as</span> marriage_status,</span><br><span class="line">        user_id</span><br><span class="line">    <span class="keyword">from</span> user_info</span><br><span class="line">    <span class="keyword">where</span> <span class="keyword">to_date</span>(firstactivetime) <span class="keyword">between</span> <span class="string">&#x27;2018-01-01&#x27;</span> <span class="keyword">and</span> <span class="string">&#x27;2018-12-31&#x27;</span>) a</span><br><span class="line"><span class="keyword">where</span> a.age_type <span class="keyword">in</span> (<span class="string">&#x27;20-30&#x27;</span>, <span class="string">&#x27;30-40&#x27;</span>)</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> a.age_type,</span><br><span class="line">    <span class="keyword">if</span>(a.marriage_status=<span class="number">1</span>, <span class="string">&#x27;已婚&#x27;</span>, <span class="string">&#x27;未婚&#x27;</span>);</span><br></pre></td></tr></table></figure>
<p>婚姻状况在字段中是字符型的<code>&#39;0&#39;</code>和<code>&#39;1&#39;</code>, 可以直接写成<code>0</code>和<code>1</code>, 但是需前后要统一.</p>
<p><strong>3.14, 查询 2019-01-01 到 2019-04-30, 全天全时段不同商品的购买金额分布:</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">substr</span>(from_unixtime(pay_time), <span class="number">12</span>, <span class="number">2</span>) time_type,</span><br><span class="line">    goods_category,</span><br><span class="line">    <span class="keyword">sum</span>(pay_amount) pay_amount</span><br><span class="line"><span class="keyword">from</span> user_trade</span><br><span class="line"><span class="keyword">where</span> dt <span class="keyword">between</span> <span class="string">&#x27;2019-01-01&#x27;</span> <span class="keyword">and</span> <span class="string">&#x27;2019-04-30&#x27;</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> <span class="keyword">substr</span>(from_unixtime(pay_time), <span class="number">12</span>, <span class="number">2</span>),</span><br><span class="line">    goods_category;</span><br></pre></td></tr></table></figure>
<p>可以用 <code>from_unixtime(pay_time, &#39;HH&#39;)</code>直接取时间, 更方便.</p>
<br>

<h2 id="四-HiveQL-多表连接查询"><a href="#四-HiveQL-多表连接查询" class="headerlink" title="四, HiveQL 多表连接查询"></a>四, HiveQL 多表连接查询</h2><h3 id="1-内连接"><a href="#1-内连接" class="headerlink" title="1, 内连接"></a>1, 内连接</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">表1 别名1 inner join 表2 别名2 on 连接条件</span><br></pre></td></tr></table></figure>

<p>表连接时起别名, 尤其必须对子查询的结果起别名.<br>on 后面的连接条件必须起到唯一键值的作用(去重或 group by等).<br>返回<code>表1</code>和<code>表2</code>同时满足连接条件的结果.<br>inner 可以省略.</p>
<p>有用户退款表 <code>user_refund</code> 如下:</p>
<table>
   <tr>
      <td>col_name</td>
      <td>data_type</td>
   </tr>
   <tr>
      <td>user_name           </td>
      <td>string              </td>
   </tr>
   <tr>
      <td>refund_piece        </td>
      <td>int                 </td>
   </tr>
   <tr>
      <td>refund_amount       </td>
      <td>double              </td>
   </tr>
   <tr>
      <td>refund_time         </td>
      <td>string              </td>
   </tr>
   <tr>
      <td>dt                  </td>
      <td>string              </td>
   </tr>
   <tr>
      <td># Partition Information</td>
      <td> </td>
   </tr>
   <tr>
      <td># col_name            </td>
      <td>data_type           </td>
   </tr>
   <tr>
      <td>dt                  </td>
      <td>string</td>
   </tr>
</table>


<p><strong>1.01, 查询 2019 年购买后又退款的用户:</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> a.user_name</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    (<span class="keyword">select</span> <span class="keyword">distinct</span> user_name</span><br><span class="line">    <span class="keyword">from</span> user_trade</span><br><span class="line">    <span class="keyword">where</span> <span class="keyword">year</span>(dt)=<span class="number">2019</span>) a</span><br><span class="line"><span class="keyword">join</span></span><br><span class="line">    (<span class="keyword">select</span> <span class="keyword">distinct</span> user_name</span><br><span class="line">    <span class="keyword">from</span> user_refund</span><br><span class="line">    <span class="keyword">where</span> <span class="keyword">year</span>(dt)<span class="number">2019</span>) b</span><br><span class="line"><span class="keyword">on</span> a.user_name=b.user_name;</span><br></pre></td></tr></table></figure>

<p>注意点:<br>user_name 字段非唯一, 连接前需要去重(连接后去重效率低).<br>因为是内连接, a.user_name 与 b.user_name 相等.<br><code>select a.user_name</code> 必须指明来自 a 还是 b, 此处内连接 a 和 b 均可.</p>
<p><strong>1.02, 查询 2017 和 2018 都购买的用户:</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> a.user_name</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    (<span class="keyword">select</span> <span class="keyword">distinct</span> user_name</span><br><span class="line">    <span class="keyword">from</span> user_trade</span><br><span class="line">    <span class="keyword">where</span> <span class="keyword">year</span>(dt)=<span class="number">2017</span>) a</span><br><span class="line"><span class="keyword">join</span> </span><br><span class="line">    (<span class="keyword">select</span> <span class="keyword">distinct</span> user_name</span><br><span class="line">    <span class="keyword">from</span> user_trade</span><br><span class="line">    <span class="keyword">where</span> <span class="keyword">year</span>(dt)<span class="number">2018</span>) b</span><br><span class="line"><span class="keyword">on</span> a.user_name=b.user_name;</span><br></pre></td></tr></table></figure>

<p>有 2017, 2018 和 2019 三年的交易表, <code>trade_2017</code>, <code>trade_2018</code> 和 <code>trade_2019</code>:</p>
<table>
   <tr>
      <td>col_name</td>
      <td>data_type</td>
   </tr>
   <tr>
      <td>user_name           </td>
      <td>string              </td>
   </tr>
   <tr>
      <td>amount              </td>
      <td>double              </td>
   </tr>
   <tr>
      <td>trade_time          </td>
      <td>string</td>
   </tr>
</table>

<p><strong>1.03, 查询三年都有交易的用户</strong>:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 方法一</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> a.user_name</span><br><span class="line"><span class="keyword">from</span> trade_2017 a</span><br><span class="line"><span class="keyword">join</span> trade_2018 b <span class="keyword">on</span> a.user_name=b.user_name</span><br><span class="line"><span class="keyword">join</span> trade_2019 c <span class="keyword">on</span> b.user_name=c.user_name;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 方法二</span></span><br><span class="line"><span class="keyword">select</span> a.user_name</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    (<span class="keyword">select</span> <span class="keyword">distinct</span> user_name</span><br><span class="line">    <span class="keyword">from</span> trade_2017) a</span><br><span class="line">    <span class="keyword">join</span></span><br><span class="line">    (<span class="keyword">select</span> <span class="keyword">distinct</span> user_name</span><br><span class="line">    <span class="keyword">from</span> trade_2018) b <span class="keyword">on</span> a.user_name=b.user_name</span><br><span class="line">    <span class="keyword">join</span></span><br><span class="line">    (<span class="keyword">select</span> <span class="keyword">distinct</span> user_name</span><br><span class="line">    <span class="keyword">from</span> trade_2019) c <span class="keyword">on</span> b.user_name=c.user_name;</span><br></pre></td></tr></table></figure>

<p>注意点:<br>方法二更优, 数据量很大时用方法二.<br>执行时是按顺序一个 <code>join</code> 一个 <code>join</code> 的执行完, 因此每个都要连接条件.</p>
<h3 id="2-左连接"><a href="#2-左连接" class="headerlink" title="2, 左连接"></a>2, 左连接</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">表1 别名1 left join 表2 别名2 on 链接条件</span><br></pre></td></tr></table></figure>
<p>以左边的<code>表1</code>为全集, 返回连接条件能够匹配上的<code>表2</code>的匹配结果, 没匹配上的则返回 null.</p>
<p>右连接 <code>right join</code> 相反, 可以通过左连接改写出一样的结果.</p>
<p><strong>2.01, 查询在 2019 年购买且无退款的用户:</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> a.user_name</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    (<span class="keyword">select</span> <span class="keyword">distinct</span> user_name</span><br><span class="line">    <span class="keyword">from</span> user_trade</span><br><span class="line">    <span class="keyword">where</span> <span class="keyword">year</span>(dt)=<span class="number">2019</span>) a</span><br><span class="line">    <span class="keyword">left</span> <span class="keyword">join</span></span><br><span class="line">    (<span class="keyword">select</span> <span class="keyword">distinct</span> user_name</span><br><span class="line">    <span class="keyword">from</span> user_refund</span><br><span class="line">    <span class="keyword">where</span> <span class="keyword">year</span>(dt)=<span class="number">2019</span>) b</span><br><span class="line">    <span class="keyword">on</span> a.user_name=b.user_name</span><br><span class="line"><span class="keyword">where</span> b.user_name <span class="keyword">is</span> <span class="literal">null</span>;</span><br></pre></td></tr></table></figure>

<p>因为是左连接, b.user_name 是 null 的用户, 就是购买无退款的用户, 而不是 null 的, 就是有购买也有退款的用户.</p>
<p><strong>2.02, 查询 2019 年购买用户的学历分布:</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> b.education,</span><br><span class="line">    <span class="keyword">count</span>(a.user_name)</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    (<span class="keyword">select</span> <span class="keyword">distinct</span> user_name</span><br><span class="line">    <span class="keyword">from</span> user_trade</span><br><span class="line">    <span class="keyword">where</span> <span class="keyword">year</span>(dt)=<span class="number">2019</span>) a</span><br><span class="line">    <span class="keyword">left</span> <span class="keyword">join</span></span><br><span class="line">    (<span class="keyword">select</span> user_name,</span><br><span class="line">        get_json_object(extra1, <span class="string">&#x27;$.education&#x27;</span>) education</span><br><span class="line">    <span class="keyword">from</span> user_info) b</span><br><span class="line">    <span class="keyword">on</span> a.user_name=b.user_name</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> b.education;</span><br></pre></td></tr></table></figure>

<p><strong>2.03, 查询 2017 和 2018 购买, 2019 没有购买的用户:</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> a.user_name</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    (<span class="keyword">select</span> <span class="keyword">distinct</span> user_name</span><br><span class="line">    <span class="keyword">from</span> trade_2017) a</span><br><span class="line">    <span class="keyword">join</span></span><br><span class="line">    (<span class="keyword">select</span> <span class="keyword">distinct</span> user_name</span><br><span class="line">    <span class="keyword">from</span> trade_2018) b </span><br><span class="line">    <span class="keyword">on</span> a.user_name=b.user_name</span><br><span class="line">    <span class="keyword">left</span> <span class="keyword">join</span></span><br><span class="line">    (<span class="keyword">select</span> <span class="keyword">distinct</span> user_name</span><br><span class="line">    <span class="keyword">from</span> trade_2019) c</span><br><span class="line">    <span class="keyword">on</span> b.user_name=c.user_name</span><br><span class="line"><span class="keyword">where</span> c.user_name <span class="keyword">is</span> <span class="literal">null</span>;</span><br></pre></td></tr></table></figure>

<p>方法不是唯一的, 有多种实现方法, 但是注意先后顺序和去重优化等.</p>
<h3 id="3-全连接"><a href="#3-全连接" class="headerlink" title="3, 全连接"></a>3, 全连接</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">表1 别名1 full join 表2 别名2 on 连接条件</span><br></pre></td></tr></table></figure>
<p><code>表1</code>和<code>表2</code>都为全集进行连接, 匹配上的返回匹配结果, 没匹配上的都为 null.</p>
<p>可用 <code>coalesce(字段1, 字段2, ...)</code> 函数, 将连接后每条记录的非 null 的值取出来, <code>表1</code>和<code>表2</code>相同字段都有值时, 只取其一.</p>
<h3 id="4-联合查询-并集"><a href="#4-联合查询-并集" class="headerlink" title="4, 联合查询(并集)"></a>4, 联合查询(并集)</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">查询1 union all(或union) 查询2</span><br></pre></td></tr></table></figure>
<p><code>查询1</code>和<code>查询2</code>的查询字段<strong>个数必须相同</strong>.<br>查询顺序需要一致(不一致也可, 但是失去了意义).<br>查询后的结果以<code>查询1</code>的字段名为字段名.<br>联合不需要条件.</p>
<p><code>union all</code> 和 <code>union</code> 的区别:</p>
<p><code>union</code><strong>对结果</strong>去重且排序, 效率低.<br><code>union all</code>不去重不排序, 简单地进行并集, 效率高.</p>
<p><strong>4.01, 查询 2017-2019 有交易的所有用户数:</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 方法一(最快)</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(<span class="keyword">distinct</span> a.user_name),</span><br><span class="line">    <span class="keyword">count</span>(a.user_name)</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    (<span class="keyword">select</span> user_name</span><br><span class="line">    <span class="keyword">from</span> trade_2017</span><br><span class="line">    <span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line">    <span class="keyword">select</span> user_name</span><br><span class="line">    <span class="keyword">from</span> trade_2018</span><br><span class="line">    <span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line">    <span class="keyword">select</span> user_name</span><br><span class="line">    <span class="keyword">from</span> trade_2019) a;</span><br><span class="line">结果:</span><br><span class="line">_c0	_c1</span><br><span class="line">199	796</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 方法二(其次)</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(<span class="keyword">distinct</span> a.user_name),</span><br><span class="line">    <span class="keyword">count</span>(a.user_name)</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    (<span class="keyword">select</span> user_name</span><br><span class="line">    <span class="keyword">from</span> trade_2017</span><br><span class="line">    <span class="keyword">union</span> </span><br><span class="line">    <span class="keyword">select</span> user_name</span><br><span class="line">    <span class="keyword">from</span> trade_2018</span><br><span class="line">    <span class="keyword">union</span> </span><br><span class="line">    <span class="keyword">select</span> user_name</span><br><span class="line">    <span class="keyword">from</span> trade_2019) a;</span><br><span class="line">结果:</span><br><span class="line">_c0	_c1</span><br><span class="line">199	199</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 方法三(最慢)</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(<span class="keyword">distinct</span> a.user_name),</span><br><span class="line">    <span class="keyword">count</span>(a.user_name)</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    (<span class="keyword">select</span> <span class="keyword">distinct</span> user_name</span><br><span class="line">    <span class="keyword">from</span> trade_2017</span><br><span class="line">    <span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line">    <span class="keyword">select</span> <span class="keyword">distinct</span> user_name</span><br><span class="line">    <span class="keyword">from</span> trade_2018</span><br><span class="line">    <span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line">    <span class="keyword">select</span> <span class="keyword">distinct</span> user_name</span><br><span class="line">    <span class="keyword">from</span> trade_2019) a;</span><br><span class="line">结果:</span><br><span class="line">_c0	_c1</span><br><span class="line">199	396</span><br></pre></td></tr></table></figure>

<p><strong>4.02, 查询2019 年用户支付和退款金额汇总:</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 方法一</span></span><br><span class="line"><span class="keyword">select</span> a.user_name,</span><br><span class="line">    <span class="keyword">sum</span>(a.pay_amount),</span><br><span class="line">    <span class="keyword">sum</span>(a.refund_amount)</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    (<span class="keyword">select</span> user_name,</span><br><span class="line">        <span class="keyword">sum</span>(pay_amount) pay_amount,</span><br><span class="line">        <span class="number">0</span> refund_amount</span><br><span class="line">    <span class="keyword">from</span> user_trade</span><br><span class="line">    <span class="keyword">where</span> <span class="keyword">year</span>(dt)=<span class="number">2019</span></span><br><span class="line">    <span class="keyword">group</span> <span class="keyword">by</span> user_name</span><br><span class="line">    <span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line">    <span class="keyword">select</span> user_name,</span><br><span class="line">        <span class="number">0</span>,</span><br><span class="line">        <span class="keyword">sum</span>(refund_amount)</span><br><span class="line">    <span class="keyword">from</span> user_refund</span><br><span class="line">    <span class="keyword">where</span> <span class="keyword">year</span>(dt)=<span class="number">2019</span></span><br><span class="line">    <span class="keyword">group</span> <span class="keyword">by</span> user_name</span><br><span class="line">    ) a</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> a.user_name;</span><br><span class="line"><span class="comment">-- 方法二(full join)</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">coalesce</span>(a.user_name, b.user_name),</span><br><span class="line">    <span class="keyword">if</span>(a.pay_amount <span class="keyword">is</span> <span class="literal">null</span>, <span class="number">0</span>, a.pay_amount),</span><br><span class="line">    <span class="keyword">if</span>(b.refund_amount <span class="keyword">is</span> <span class="literal">null</span>, <span class="number">0</span>, b.refund_amount)</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    (<span class="keyword">select</span> user_name,</span><br><span class="line">        <span class="keyword">sum</span>(pay_amount) pay_amount</span><br><span class="line">    <span class="keyword">from</span> user_trade</span><br><span class="line">    <span class="keyword">where</span> <span class="keyword">year</span>(dt)=<span class="number">2019</span></span><br><span class="line">    <span class="keyword">group</span> <span class="keyword">by</span> user_name) a</span><br><span class="line">    <span class="keyword">full</span> <span class="keyword">join</span></span><br><span class="line">    (<span class="keyword">select</span> user_name,</span><br><span class="line">        <span class="keyword">sum</span>(refund_amount) refund_amount</span><br><span class="line">    <span class="keyword">from</span> user_refund</span><br><span class="line">    <span class="keyword">where</span> <span class="keyword">year</span>(dt)=<span class="number">2019</span></span><br><span class="line">    <span class="keyword">group</span> <span class="keyword">by</span> user_name) b</span><br><span class="line">    <span class="keyword">on</span> a.user_name=b.user_name;</span><br></pre></td></tr></table></figure>

<p>注意点:<br>方法一中, union all 的前后两个查询, 为了保证字段个数相同和顺序一致用 0 占位, 并且前一个查询需要给 0 起别名作为字段名, 后一个查询可以省略. 交易表和退款表并集的结果任然有重复的 user_name, 还需要再进行聚合运算.<br>方法二中, 全连接后的结果不再需要聚合运算, 如果 a 和 b 都有 user_name 值, 只取其一与付款和退款对应, 只有 a 有 user_name 值, 则只有付款, 退款用 0 填充, 只有 b 有 user_name 值, 则只有退款, 付款用 0 填充.</p>
<p><strong>4.03, 查询 2019 年支付用户的支付金额和退款金额:</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> a.user_name,</span><br><span class="line">    a.pay_amount,</span><br><span class="line">    b.refund_amount</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    (<span class="keyword">select</span> user_name,</span><br><span class="line">        <span class="keyword">sum</span>(pay_amount) pay_amount</span><br><span class="line">    <span class="keyword">from</span> user_trade</span><br><span class="line">    <span class="keyword">where</span> <span class="keyword">year</span>(dt)=<span class="number">2019</span></span><br><span class="line">    <span class="keyword">group</span> <span class="keyword">by</span> user_name) a</span><br><span class="line">    <span class="keyword">left</span> <span class="keyword">join</span></span><br><span class="line">    (<span class="keyword">select</span> user_name,</span><br><span class="line">        <span class="keyword">sum</span>(refund_amount) refund_amount</span><br><span class="line">    <span class="keyword">from</span> user_refund</span><br><span class="line">    <span class="keyword">where</span> <span class="keyword">year</span>(dt)=<span class="number">2019</span></span><br><span class="line">    <span class="keyword">group</span> <span class="keyword">by</span> user_name) b</span><br><span class="line">    <span class="keyword">on</span> a.user_name=b.user_name;</span><br></pre></td></tr></table></figure>

<p><strong>4.04, 查询首次激活在 2017 年, 但一直没有支付的用户的年龄段分布(&lt;20, 20-30, 30-40, &gt;40):</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> a.age_level,</span><br><span class="line">    <span class="keyword">count</span>(a.user_name)</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    (<span class="keyword">select</span> user_name,</span><br><span class="line">        <span class="keyword">case</span> <span class="keyword">when</span> age&lt;<span class="number">20</span> <span class="keyword">then</span> <span class="string">&#x27;&lt;20&#x27;</span></span><br><span class="line">        <span class="keyword">when</span> age&gt;=<span class="number">20</span> <span class="keyword">and</span> age&lt;<span class="number">30</span> <span class="keyword">then</span> <span class="string">&#x27;20-30&#x27;</span></span><br><span class="line">        <span class="keyword">when</span> age&gt;=<span class="number">30</span> <span class="keyword">and</span> age&lt;<span class="number">40</span> <span class="keyword">then</span> <span class="string">&#x27;30-40&#x27;</span></span><br><span class="line">        <span class="keyword">else</span> <span class="string">&#x27;&gt;40&#x27;</span> <span class="keyword">end</span> age_level</span><br><span class="line">    <span class="keyword">from</span> user_info</span><br><span class="line">    <span class="keyword">where</span> <span class="keyword">year</span>(firstactivetime)=<span class="number">2017</span>) a</span><br><span class="line">    <span class="keyword">left</span> <span class="keyword">join</span></span><br><span class="line">    (<span class="keyword">select</span> <span class="keyword">distinct</span> user_name</span><br><span class="line">    <span class="keyword">from</span> user_trade</span><br><span class="line">    <span class="keyword">where</span> dt&gt;<span class="string">&#x27;0&#x27;</span>) b</span><br><span class="line">    <span class="keyword">on</span> a.user_name=b.user_name</span><br><span class="line"><span class="keyword">where</span> b.user_name <span class="keyword">is</span> <span class="literal">null</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> a.age_level;</span><br></pre></td></tr></table></figure>

<p>注意点:<br>交易表 <code>user_trade</code> 是分区表, 必须对分区字段 dt 进行限制 <code>where dt&gt;&#39;0&#39;</code>, 也可以写成 <code>where dt is not null</code>, 只有限制, 无筛选作用.</p>
<p><strong>4.05, 查询 2018, 2019 年交易用户在全天中的激活时间段分布:</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">hour</span>(firstactivetime),</span><br><span class="line">    <span class="keyword">count</span>(a.user_name)</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    (<span class="keyword">select</span> user_name</span><br><span class="line">    <span class="keyword">from</span> trade_2018</span><br><span class="line">    <span class="keyword">union</span></span><br><span class="line">    <span class="keyword">select</span> user_name</span><br><span class="line">    <span class="keyword">from</span> trade_2019) a</span><br><span class="line">    <span class="keyword">left</span> <span class="keyword">join</span> user_info b</span><br><span class="line">    <span class="keyword">on</span> a.user_name=b.user_name</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> <span class="keyword">hour</span>(firstactivetime);</span><br></pre></td></tr></table></figure>

<p><strong>4.06, 查询 2017-2019 年有交易没退款的用户的手机品牌分布:</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 方法一</span></span><br><span class="line"><span class="keyword">select</span> d.phonebrand,</span><br><span class="line">    <span class="keyword">count</span>(c.user_name)</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    (<span class="keyword">select</span> a.user_name</span><br><span class="line">    <span class="keyword">from</span></span><br><span class="line">        (<span class="keyword">select</span> <span class="keyword">distinct</span> user_name</span><br><span class="line">        <span class="keyword">from</span> user_trade</span><br><span class="line">        <span class="keyword">where</span> <span class="keyword">year</span>(dt) <span class="keyword">between</span> <span class="string">&#x27;2017&#x27;</span> <span class="keyword">and</span> <span class="string">&#x27;2019&#x27;</span>) a</span><br><span class="line">    <span class="keyword">left</span> <span class="keyword">join</span></span><br><span class="line">        (<span class="keyword">select</span> <span class="keyword">distinct</span> user_name</span><br><span class="line">        <span class="keyword">from</span> user_refund</span><br><span class="line">        <span class="keyword">where</span> <span class="keyword">year</span>(dt) <span class="keyword">between</span> <span class="string">&#x27;2017&#x27;</span> <span class="keyword">and</span> <span class="string">&#x27;2019&#x27;</span>) b</span><br><span class="line">    <span class="keyword">on</span> a.user_name=b.user_name</span><br><span class="line">    <span class="keyword">where</span> b.user_name <span class="keyword">is</span> <span class="literal">null</span></span><br><span class="line">    ) c</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span></span><br><span class="line">    (<span class="keyword">select</span> user_name,</span><br><span class="line">        extra2[<span class="string">&#x27;phonebrand&#x27;</span>] phonebrand</span><br><span class="line">    <span class="keyword">from</span> user_info) d</span><br><span class="line">    <span class="keyword">on</span> c.user_name=d.user_name</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> d.phonebrand;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 方法二</span></span><br><span class="line"><span class="keyword">SELECT</span> d.extra2[<span class="string">&#x27;phonebrand&#x27;</span>],</span><br><span class="line">    <span class="keyword">count</span>(c.user_name)</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">    (<span class="keyword">SELECT</span> a.user_name</span><br><span class="line">    <span class="keyword">FROM</span> </span><br><span class="line">        (<span class="keyword">SELECT</span> user_name</span><br><span class="line">        <span class="keyword">FROM</span> trade_2017</span><br><span class="line">        <span class="keyword">UNION</span></span><br><span class="line">        <span class="keyword">SELECT</span> user_name</span><br><span class="line">        <span class="keyword">FROM</span> trade_2018</span><br><span class="line">        <span class="keyword">UNION</span></span><br><span class="line">        <span class="keyword">SELECT</span> user_name</span><br><span class="line">        <span class="keyword">FROM</span> trade_2019</span><br><span class="line">        ) a</span><br><span class="line">    <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> </span><br><span class="line">        (<span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> user_name</span><br><span class="line">        <span class="keyword">FROM</span> user_refund</span><br><span class="line">        <span class="keyword">WHERE</span> dt&gt;<span class="string">&#x27;0&#x27;</span></span><br><span class="line">        ) b</span><br><span class="line">    <span class="keyword">ON</span> a.user_name=b.user_name</span><br><span class="line">    <span class="keyword">WHERE</span> b.user_name <span class="keyword">is</span> <span class="literal">null</span></span><br><span class="line">    ) c</span><br><span class="line">    <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> user_info d</span><br><span class="line">    <span class="keyword">ON</span> c.user_name=d.user_name</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span>  d.extra2[<span class="string">&#x27;phonebrand&#x27;</span>];</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>数据分析</category>
      </categories>
      <tags>
        <tag>HiveQL</tag>
      </tags>
  </entry>
  <entry>
    <title>HiveQL 窗口函数和常用优化技巧</title>
    <url>/sql/hadoop3-2506774f632f/</url>
    <content><![CDATA[<blockquote>
<p>内容主要来源：<strong>开课吧</strong>学习笔记整理。</p>
</blockquote>
<h2 id="五-HiveQL-窗口函数"><a href="#五-HiveQL-窗口函数" class="headerlink" title="五, HiveQL 窗口函数"></a>五, HiveQL 窗口函数</h2><p>窗口函数与聚合函数类似, 但是它每一行都生成一个结果, 窗口函数相当于从原数据中提取条件筛选出来的数据进行聚合运算, 有一行就提取计算一次.</p>
<p><strong>窗口函数的格式:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">函数() over (partition by 分组字段 order by 排序字段 rows between 起始行 and 结束行)</span><br></pre></td></tr></table></figure>
<p><code>order by</code>可以指定升序(asc 默认)或降序(desc). <code>起始行</code> 和 <code>结束行</code> 决定窗口函数计算范围.</p>
<h3 id="1-累计计算窗口函数"><a href="#1-累计计算窗口函数" class="headerlink" title="1, 累计计算窗口函数"></a>1, 累计计算窗口函数</h3><p>累计计算窗口函数中的<code>函数()</code>有: sum(), avg(), max() 和 min() 等. 函数中要指明计算的字段.</p>
<p><code>起始行</code> 或 <code>结束行</code> 的写法:<br><code>unbounded preceding</code>前面所有行;<br><code>unbounded following</code>后面所有行;<br><code>n preceding</code>前面 n 行;<br><code>n following</code>后面 n 行;<br><code>current row</code>当前行.</p>
<p><strong>1.01, 对 2018 年支付总额按月度累计分析:</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> a.month,</span><br><span class="line">    a.pay_amount,</span><br><span class="line">    <span class="keyword">sum</span>(a.pay_amount) <span class="keyword">over</span>(<span class="keyword">order</span> <span class="keyword">by</span> a.month)</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    (<span class="keyword">select</span> <span class="keyword">month</span>(dt) <span class="keyword">month</span>,</span><br><span class="line">        <span class="keyword">sum</span>(pay_amount) pay_amount</span><br><span class="line">    <span class="keyword">from</span> user_trade</span><br><span class="line">    <span class="keyword">where</span> <span class="keyword">year</span>(dt)=<span class="number">2018</span></span><br><span class="line">    <span class="keyword">group</span> <span class="keyword">by</span> <span class="keyword">month</span>(dt)) a;</span><br></pre></td></tr></table></figure>
<table>
   <tr>
      <td>a.month</td>
      <td>a.pay_amount</td>
      <td>sum_window_0</td>
   </tr>
   <tr>
      <td>1</td>
      <td>317697.20 </td>
      <td>317697.20 </td>
   </tr>
   <tr>
      <td>2</td>
      <td>2214537.10 </td>
      <td>2532234.30 </td>
   </tr>
   <tr>
      <td>3</td>
      <td>3108435.90 </td>
      <td>5640670.20 </td>
   </tr>
   <tr>
      <td>4</td>
      <td>2717482.60 </td>
      <td>8358152.80 </td>
   </tr>
</table>

<p>可见默认是按<code>前面所有行</code>到<code>当前行</code>进行累计计算的, 窗口函数的每一行, 提取一次<code>前面所有行</code>到<code>当前行</code>进行一次计算.</p>
<p><strong>1.02, 对 2017 和 2018 年支付总额按月度累计分析, 按年汇总:</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> a.year,</span><br><span class="line">    a.month,</span><br><span class="line">    a.pay_amount,</span><br><span class="line">    <span class="keyword">sum</span>(a.pay_amount) <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> a.year </span><br><span class="line">        <span class="keyword">order</span> <span class="keyword">by</span> a.month)</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    (<span class="keyword">select</span> <span class="keyword">year</span>(dt) <span class="keyword">year</span>,</span><br><span class="line">        <span class="keyword">month</span>(dt) <span class="keyword">month</span>,</span><br><span class="line">        <span class="keyword">sum</span>(pay_amount) pay_amount</span><br><span class="line">    <span class="keyword">from</span> user_trade</span><br><span class="line">    <span class="keyword">where</span> <span class="keyword">year</span>(dt) <span class="keyword">in</span> (<span class="number">2017</span>, <span class="number">2018</span>)</span><br><span class="line">    <span class="keyword">group</span> <span class="keyword">by</span> <span class="keyword">year</span>(dt),</span><br><span class="line">        <span class="keyword">month</span>(dt)) a;</span><br></pre></td></tr></table></figure>

<table>
   <tr>
      <td>a.year</td>
      <td>a.month</td>
      <td>a.pay_amount</td>
      <td>sum_window_0</td>
   </tr>
   <tr>
      <td>2017</td>
      <td>1</td>
      <td>241755.70 </td>
      <td>241755.70 </td>
   </tr>
   <tr>
      <td>2017</td>
      <td>2</td>
      <td>2582410.60 </td>
      <td>2824166.30 </td>
   </tr>
   <tr>
      <td>2017</td>
      <td>3</td>
      <td>1977644.70 </td>
      <td>4801811.00 </td>
   </tr>
   <tr>
      <td>2017</td>
      <td>4</td>
      <td>1162322.80 </td>
      <td>5964133.80 </td>
   </tr>
   <tr>
      <td>2017</td>
      <td>5</td>
      <td>3038255.20 </td>
      <td>9002389.00 </td>
   </tr>
   <tr>
      <td>2017</td>
      <td>6</td>
      <td>2773154.40 </td>
      <td>11775543.40 </td>
   </tr>
   <tr>
      <td>2017</td>
      <td>7</td>
      <td>1677527.30 </td>
      <td>13453070.70 </td>
   </tr>
   <tr>
      <td>2017</td>
      <td>8</td>
      <td>2135214.40 </td>
      <td>15588285.10 </td>
   </tr>
   <tr>
      <td>2017</td>
      <td>9</td>
      <td>1355307.30 </td>
      <td>16943592.40 </td>
   </tr>
   <tr>
      <td>2017</td>
      <td>10</td>
      <td>1380672.70 </td>
      <td>18324265.10 </td>
   </tr>
   <tr>
      <td>2017</td>
      <td>11</td>
      <td>2428753.90 </td>
      <td>20753019.00 </td>
   </tr>
   <tr>
      <td>2017</td>
      <td>12</td>
      <td>3580954.60 </td>
      <td>24333973.60 </td>
   </tr>
   <tr>
      <td>2018</td>
      <td>1</td>
      <td>317697.20 </td>
      <td>317697.20 </td>
   </tr>
   <tr>
      <td>2018</td>
      <td>2</td>
      <td>2214537.10 </td>
      <td>2532234.30 </td>
   </tr>
   <tr>
      <td>2018</td>
      <td>3</td>
      <td>3108435.90 </td>
      <td>5640670.20 </td>
   </tr>
   <tr>
      <td>2018</td>
      <td>4</td>
      <td>2717482.60 </td>
      <td>8358152.80 </td>
   </tr>
</table>

<p>可见窗口函数有了分组字段之后, 累计计算完一组, 又开始累计下一组, 需要注意不能分错组.</p>
<p><strong>1.03, 对 2018 年每个月的近三个月求平均支付金额:</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> a.month,</span><br><span class="line">    a.pay_amount,</span><br><span class="line">    <span class="keyword">avg</span>(a.pay_amount) <span class="keyword">over</span>(<span class="keyword">order</span> <span class="keyword">by</span> a.month </span><br><span class="line">        <span class="keyword">rows</span> <span class="keyword">between</span> <span class="number">2</span> <span class="keyword">preceding</span> <span class="keyword">and</span> <span class="keyword">current</span> <span class="keyword">row</span>)</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    (<span class="keyword">select</span> <span class="keyword">month</span>(dt) <span class="keyword">month</span>,</span><br><span class="line">        <span class="keyword">sum</span>(pay_amount) pay_amount</span><br><span class="line">    <span class="keyword">from</span> user_trade</span><br><span class="line">    <span class="keyword">where</span> <span class="keyword">year</span>(dt)=<span class="number">2018</span></span><br><span class="line">    <span class="keyword">group</span> <span class="keyword">by</span> <span class="keyword">month</span>(dt)) a;</span><br></pre></td></tr></table></figure>

<table>
   <tr>
      <td>a.month</td>
      <td>a.pay_amount</td>
      <td>avg_window_0</td>
   </tr>
   <tr>
      <td>1</td>
      <td>317697.20 </td>
      <td>317697.20 </td>
   </tr>
   <tr>
      <td>2</td>
      <td>2214537.10 </td>
      <td>1266117.15 </td>
   </tr>
   <tr>
      <td>3</td>
      <td>3108435.90 </td>
      <td>1880223.40 </td>
   </tr>
   <tr>
      <td>4</td>
      <td>2717482.60 </td>
      <td>2680151.87 </td>
   </tr>
   <tr>
      <td>5</td>
      <td>2723670.10 </td>
      <td>2849862.87 </td>
   </tr>
   <tr>
      <td>6</td>
      <td>3808041.30 </td>
      <td>3083064.67 </td>
   </tr>
   <tr>
      <td>7</td>
      <td>5426222.30 </td>
      <td>3985977.90 </td>
   </tr>
   <tr>
      <td>8</td>
      <td>2749747.00 </td>
      <td>3994670.20 </td>
   </tr>
   <tr>
      <td>9</td>
      <td>891197.00 </td>
      <td>3022388.77 </td>
   </tr>
   <tr>
      <td>10</td>
      <td>1510374.30 </td>
      <td>1717106.10 </td>
   </tr>
   <tr>
      <td>11</td>
      <td>2307257.40 </td>
      <td>1569609.57 </td>
   </tr>
   <tr>
      <td>12</td>
      <td>1759487.20 </td>
      <td>1859039.63 </td>
   </tr>
</table>

<p>近三个月, 就是计算前两个月和当月, 前面没有三个月的, 有几个月就计算几个月的平均值, 逐行移动一直计算完毕.</p>
<h3 id="2-分区排序窗口函数"><a href="#2-分区排序窗口函数" class="headerlink" title="2, 分区排序窗口函数"></a>2, 分区排序窗口函数</h3><p>分区排序窗口函数中的<code>函数()</code>有: row_number(), rank() 和 dense_rank(). 函数括号内不加任何字段, 返回值是<strong>相应规则的排序序号</strong>.</p>
<p>row_number(): 分组内, 查询出来的每一行记录都生成一个序号, 依次排序且不重复.</p>
<p>rank(): 分组内, 跳跃排序, 例如有两个第一, 接下来就是第三.</p>
<p>dense_rank(): 分组内, 连续排序, 例如有两个第一, 接下来就是第二.</p>
<p><strong>2.01, 查询 2019 年 1 月, 用户购买商品品类数量排名:</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> user_name,</span><br><span class="line">    <span class="keyword">count</span>(<span class="keyword">distinct</span> goods_category) goods_num,</span><br><span class="line">    row_number() <span class="keyword">over</span>(<span class="keyword">order</span> <span class="keyword">by</span> </span><br><span class="line">    <span class="keyword">count</span>(<span class="keyword">distinct</span> goods_category) <span class="keyword">desc</span> ) row_number,</span><br><span class="line">    <span class="keyword">rank</span>() <span class="keyword">over</span>(<span class="keyword">order</span> <span class="keyword">by</span> </span><br><span class="line">    <span class="keyword">count</span>(<span class="keyword">distinct</span> goods_category) <span class="keyword">desc</span> ) <span class="keyword">rank</span>,</span><br><span class="line">    <span class="keyword">dense_rank</span>() <span class="keyword">over</span>(<span class="keyword">order</span> <span class="keyword">by</span> </span><br><span class="line">    <span class="keyword">count</span>(<span class="keyword">distinct</span> goods_category) <span class="keyword">desc</span> ) <span class="keyword">dense_rank</span></span><br><span class="line"><span class="keyword">from</span> user_trade</span><br><span class="line"><span class="keyword">where</span> <span class="keyword">substr</span>(dt, <span class="number">1</span>, <span class="number">7</span>)=<span class="string">&#x27;2019-01&#x27;</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> user_name;</span><br></pre></td></tr></table></figure>

<table>
   <tr>
      <td>user_name</td>
      <td>goods_num</td>
      <td>row_number</td>
      <td>rank</td>
      <td>dense_rank</td>
   </tr>
   <tr>
      <td>Payne</td>
      <td>2</td>
      <td>1</td>
      <td>1</td>
      <td>1</td>
   </tr>
   <tr>
      <td>Catherine</td>
      <td>2</td>
      <td>2</td>
      <td>1</td>
      <td>1</td>
   </tr>
   <tr>
      <td>Christy</td>
      <td>2</td>
      <td>3</td>
      <td>1</td>
      <td>1</td>
   </tr>
   <tr>
      <td>Angelia</td>
      <td>2</td>
      <td>4</td>
      <td>1</td>
      <td>1</td>
   </tr>
   <tr>
      <td>Ingrid</td>
      <td>2</td>
      <td>5</td>
      <td>1</td>
      <td>1</td>
   </tr>
   <tr>
      <td>Wheeler</td>
      <td>1</td>
      <td>6</td>
      <td>6</td>
      <td>2</td>
   </tr>
   <tr>
      <td>Ward</td>
      <td>1</td>
      <td>7</td>
      <td>6</td>
      <td>2</td>
   </tr>
</table>

<p><strong>2.02, 查询 2019 年支付金额排名第 5, 10, 15 的用户:</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> a.user_name,</span><br><span class="line">    a.pay_amount,</span><br><span class="line">    a.dr</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    (<span class="keyword">select</span> user_name,</span><br><span class="line">        <span class="keyword">sum</span>(pay_amount) pay_amount,</span><br><span class="line">        <span class="keyword">dense_rank</span>() <span class="keyword">over</span>(<span class="keyword">order</span> <span class="keyword">by</span> <span class="keyword">sum</span>(pay_amount) <span class="keyword">desc</span>) dr</span><br><span class="line">    <span class="keyword">from</span> user_trade</span><br><span class="line">    <span class="keyword">where</span> <span class="keyword">year</span>(dt)=<span class="number">2019</span></span><br><span class="line">    <span class="keyword">group</span> <span class="keyword">by</span> user_name) a</span><br><span class="line"><span class="keyword">where</span> a.dr <span class="keyword">in</span> (<span class="number">5</span>, <span class="number">10</span>, <span class="number">15</span>);</span><br></pre></td></tr></table></figure>

<table>
   <tr>
      <td>a.user_name</td>
      <td>a.pay_amount</td>
      <td>a.dr</td>
   </tr>
   <tr>
      <td>King</td>
      <td>553856.5</td>
      <td>5</td>
   </tr>
   <tr>
      <td>James</td>
      <td>286638.0</td>
      <td>10</td>
   </tr>
   <tr>
      <td>Frieda</td>
      <td>192670.0</td>
      <td>15</td>
   </tr>
</table>

<h3 id="3-切片排序窗口函数"><a href="#3-切片排序窗口函数" class="headerlink" title="3, 切片排序窗口函数"></a>3, 切片排序窗口函数</h3><p><code>函数()</code>是 <code>ntile()</code>, 括号内指明切分的片数, 返回值: 切到第几片就是几.<br>不支持 <code>rows between ... and ...</code>.<br>如果行数无法整除, 切片不均匀, 则前面的片(组)均分余数.</p>
<p><strong>3.01, 将 2019 年 1 月支付用户按支付金额分为 5 组:</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> user_name,</span><br><span class="line">    <span class="keyword">sum</span>(pay_amount) pay_amount,</span><br><span class="line">    ntile(<span class="number">5</span>) <span class="keyword">over</span>(<span class="keyword">order</span> <span class="keyword">by</span> <span class="keyword">sum</span>(pay_amount) <span class="keyword">desc</span>) <span class="keyword">level</span></span><br><span class="line"><span class="keyword">from</span> user_trade</span><br><span class="line"><span class="keyword">where</span> <span class="keyword">substr</span>(dt, <span class="number">1</span>, <span class="number">7</span>)=<span class="string">&#x27;2019-01&#x27;</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> user_name;</span><br></pre></td></tr></table></figure>

<table>
   <tr>
      <td>user_name</td>
      <td>pay_amount</td>
      <td>level</td>
   </tr>
   <tr>
      <td>Angelia</td>
      <td>677710.0</td>
      <td>1</td>
   </tr>
   <tr>
      <td>Cherry</td>
      <td>359964.0</td>
      <td>1</td>
   </tr>
   <tr>
      <td>Christy</td>
      <td>217772.5</td>
      <td>1</td>
   </tr>
   <tr>
      <td>Rupert</td>
      <td>62680.8</td>
      <td>1</td>
   </tr>
   <tr>
      <td>Janet</td>
      <td>56481.6</td>
      <td>2</td>
   </tr>
   <tr>
      <td>Ward</td>
      <td>26174.4</td>
      <td>2</td>
   </tr>
   <tr>
      <td>Frank</td>
      <td>22041.6</td>
      <td>2</td>
   </tr>
   <tr>
      <td>Wheeler</td>
      <td>21600.0</td>
      <td>2</td>
   </tr>
   <tr>
      <td>Jill</td>
      <td>14800.0</td>
      <td>3</td>
   </tr>
   <tr>
      <td>Payne</td>
      <td>12247.3</td>
      <td>3</td>
   </tr>
   <tr>
      <td>Peterson</td>
      <td>2066.4</td>
      <td>3</td>
   </tr>
   <tr>
      <td>Catherine</td>
      <td>1320.9</td>
      <td>3</td>
   </tr>
   <tr>
      <td>Cameron</td>
      <td>1219.3</td>
      <td>4</td>
   </tr>
   <tr>
      <td>Cathy</td>
      <td>1000.0</td>
      <td>4</td>
   </tr>
   <tr>
      <td>Amanda</td>
      <td>827.7</td>
      <td>4</td>
   </tr>
   <tr>
      <td>Parker</td>
      <td>631.9</td>
      <td>4</td>
   </tr>
   <tr>
      <td>Mitchell</td>
      <td>471.7</td>
      <td>5</td>
   </tr>
   <tr>
      <td>Ingrid</td>
      <td>465.2</td>
      <td>5</td>
   </tr>
   <tr>
      <td>Cloris</td>
      <td>418.3</td>
      <td>5</td>
   </tr>
   <tr>
      <td>Fiona</td>
      <td>110.0</td>
      <td>5</td>
   </tr>
</table>

<p><strong>3.02, 选出 2019 年退款金额排名前 5% 的用户:</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> a.user_name,</span><br><span class="line">    a.refund_amount,</span><br><span class="line">    a.level</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    (<span class="keyword">select</span> user_name,</span><br><span class="line">        <span class="keyword">sum</span>(refund_amount) refund_amount,</span><br><span class="line">        ntile(<span class="number">20</span>) <span class="keyword">over</span>(<span class="keyword">order</span> <span class="keyword">by</span> <span class="keyword">sum</span>(refund_amount) <span class="keyword">desc</span>) <span class="keyword">level</span></span><br><span class="line">    <span class="keyword">from</span> user_refund</span><br><span class="line">    <span class="keyword">where</span> <span class="keyword">year</span>(dt)=<span class="number">2019</span></span><br><span class="line">    <span class="keyword">group</span> <span class="keyword">by</span> user_name) a</span><br><span class="line"><span class="keyword">where</span> a.level=<span class="number">1</span>;</span><br></pre></td></tr></table></figure>

<table>
   <tr>
      <td>a.user_name</td>
      <td>a.refund_amount</td>
      <td>a.level</td>
   </tr>
   <tr>
      <td>Phillips</td>
      <td>626604.0</td>
      <td>1</td>
   </tr>
   <tr>
      <td>Angelia</td>
      <td>586608.0</td>
      <td>1</td>
   </tr>
</table>

<h3 id="4-偏移分析窗口函数"><a href="#4-偏移分析窗口函数" class="headerlink" title="4, 偏移分析窗口函数"></a>4, 偏移分析窗口函数</h3><p><code>函数()</code>为 <code>lag(偏移字段, 偏移量, 填充值)</code> 和 <code>lead(偏移字段, 偏移量, 填充值)</code>, 可在同一次查询中取出同一个字段<strong>前 n 行的数据(lag)**和</strong>后 n 行的数据(lead)**参与计算.</p>
<p>lag: 滞后, 也就是取出原字段数据向下移, 前面空出来的用<code>填充值</code>(默认是 null)填充的数据.</p>
<p>lead: 领先, 也就是取出原字段数据向上移, 后面空出来的用<code>填充值</code>(默认是 null)填充的数据.</p>
<p><code>偏移量</code>默认是 <code>1</code>.</p>
<p><strong>4.01, 查询支付时间间隔有超过 100 天的用户:</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(<span class="keyword">distinct</span> a.user_name)</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    (<span class="keyword">select</span> user_name,</span><br><span class="line">        dt,</span><br><span class="line">        <span class="keyword">lead</span>(dt) <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> user_name <span class="keyword">order</span> <span class="keyword">by</span> dt) lead_dt</span><br><span class="line">    <span class="keyword">from</span> user_trade</span><br><span class="line">    <span class="keyword">where</span> dt&gt;<span class="string">&#x27;0&#x27;</span>) a</span><br><span class="line"><span class="keyword">where</span> a.lead_dt <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">null</span></span><br><span class="line">    <span class="keyword">and</span> <span class="keyword">datediff</span>(a.lead_dt, a.dt)&gt;<span class="number">100</span>;</span><br></pre></td></tr></table></figure>

<p>注意点:<br>窗口函数对 user_name 分组排序后再移动, 分组并未去重, 而是分组并保留所有记录进行排序.<br>同一个用户可能有多个时间间隔超过 100 天, 因此要去重统计.</p>
<p><strong>4.02, 查询每个城市, 不同性别 2018 年支付金额最高的 TOP3 用户:</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> c.user_name,</span><br><span class="line">    c.city,</span><br><span class="line">    c.sex,</span><br><span class="line">    c.pay_amount,</span><br><span class="line">    c.rank</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    (<span class="keyword">select</span> a.user_name,</span><br><span class="line">        b.city,</span><br><span class="line">        b.sex,</span><br><span class="line">        a.pay_amount,</span><br><span class="line">        <span class="keyword">dense_rank</span>() <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> b.city, b.sex </span><br><span class="line">            <span class="keyword">order</span> <span class="keyword">by</span> a.pay_amount <span class="keyword">desc</span> ) <span class="keyword">rank</span></span><br><span class="line">    <span class="keyword">from</span></span><br><span class="line">        (<span class="keyword">select</span> user_name,</span><br><span class="line">            <span class="keyword">sum</span>(pay_amount) pay_amount</span><br><span class="line">        <span class="keyword">from</span> user_trade</span><br><span class="line">        <span class="keyword">where</span> <span class="keyword">year</span>(dt)=<span class="number">2018</span></span><br><span class="line">        <span class="keyword">group</span> <span class="keyword">by</span> user_name) a</span><br><span class="line">        <span class="keyword">left</span> <span class="keyword">join</span> user_info b</span><br><span class="line">        <span class="keyword">on</span> a.user_name=b.user_name</span><br><span class="line">    ) c</span><br><span class="line"><span class="keyword">where</span> c.rank&lt;=<span class="number">3</span>;</span><br></pre></td></tr></table></figure>

<table>
   <tr>
      <td>c.user_name</td>
      <td>c.city</td>
      <td>c.sex</td>
      <td>c.pay_amount</td>
      <td>c.rank</td>
   </tr>
   <tr>
      <td>Christine</td>
      <td>beijing</td>
      <td>female</td>
      <td>633270.0</td>
      <td>1</td>
   </tr>
   <tr>
      <td>DARCY</td>
      <td>beijing</td>
      <td>female</td>
      <td>486704.9</td>
      <td>2</td>
   </tr>
   <tr>
      <td>Becky</td>
      <td>beijing</td>
      <td>female</td>
      <td>268957.7</td>
      <td>3</td>
   </tr>
   <tr>
      <td>Campbell</td>
      <td>beijing</td>
      <td>male</td>
      <td>653347.2</td>
      <td>1</td>
   </tr>
   <tr>
      <td>Ross</td>
      <td>beijing</td>
      <td>male</td>
      <td>546811.2</td>
      <td>2</td>
   </tr>
   <tr>
      <td>Mitchell</td>
      <td>beijing</td>
      <td>male</td>
      <td>466620.0</td>
      <td>3</td>
   </tr>
   <tr>
      <td>Joanna</td>
      <td>changchun</td>
      <td>female</td>
      <td>1059184.0</td>
      <td>1</td>
   </tr>
   <tr>
      <td>Andrea</td>
      <td>changchun</td>
      <td>female</td>
      <td>1058965.3</td>
      <td>2</td>
   </tr>
   <tr>
      <td>Cherry</td>
      <td>changchun</td>
      <td>female</td>
      <td>524638.5</td>
      <td>3</td>
   </tr>
   <tr>
      <td>Noah</td>
      <td>changchun</td>
      <td>male</td>
      <td>1033230.0</td>
      <td>1</td>
   </tr>
</table>

<p><strong>4.03, 查询每个手机品牌退款金额前 20% 的用户:</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> *</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    (<span class="keyword">select</span> a.user_name,</span><br><span class="line">        b.extra2[<span class="string">&#x27;phonebrand&#x27;</span>] phonebrand,</span><br><span class="line">        a.refund_amount,</span><br><span class="line">        ntile(<span class="number">5</span>) <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> b.extra2[<span class="string">&#x27;phonebrand&#x27;</span>]</span><br><span class="line">            <span class="keyword">order</span> <span class="keyword">by</span> a.refund_amount <span class="keyword">desc</span>) <span class="keyword">level</span></span><br><span class="line">    <span class="keyword">from</span></span><br><span class="line">        (<span class="keyword">select</span> user_name,</span><br><span class="line">            <span class="keyword">sum</span>(refund_amount) refund_amount</span><br><span class="line">        <span class="keyword">from</span> user_refund</span><br><span class="line">        <span class="keyword">where</span> dt&gt;<span class="string">&#x27;0&#x27;</span></span><br><span class="line">        <span class="keyword">group</span> <span class="keyword">by</span> user_name</span><br><span class="line">        ) a</span><br><span class="line">        <span class="keyword">left</span> <span class="keyword">join</span> user_info b</span><br><span class="line">        <span class="keyword">on</span> a.user_name=b.user_name</span><br><span class="line">    ) c</span><br><span class="line"><span class="keyword">where</span> c.level=<span class="number">1</span>;</span><br></pre></td></tr></table></figure>

<table>
   <tr>
      <td>c.user_name</td>
      <td>c.phonebrand</td>
      <td>c.refund_amount</td>
      <td>c.level</td>
   </tr>
   <tr>
      <td>Martin</td>
      <td>CHUIZI</td>
      <td>606953.1</td>
      <td>1</td>
   </tr>
   <tr>
      <td>David</td>
      <td>CHUIZI</td>
      <td>277750.0</td>
      <td>1</td>
   </tr>
   <tr>
      <td>DORIS</td>
      <td>CHUIZI</td>
      <td>231168.3</td>
      <td>1</td>
   </tr>
   <tr>
      <td>Jordan</td>
      <td>CHUIZI</td>
      <td>182266.7</td>
      <td>1</td>
   </tr>
   <tr>
      <td>Angelia</td>
      <td>HUAWEI</td>
      <td>586697.1</td>
      <td>1</td>
   </tr>
   <tr>
      <td>DIANA</td>
      <td>HUAWEI</td>
      <td>566610.0</td>
      <td>1</td>
   </tr>
   <tr>
      <td>Cassie</td>
      <td>HUAWEI</td>
      <td>234443.2</td>
      <td>1</td>
   </tr>
   <tr>
      <td>KATE</td>
      <td>MI</td>
      <td>826619.6</td>
      <td>1</td>
   </tr>
   <tr>
      <td>ELLIE</td>
      <td>MI</td>
      <td>664728.3</td>
      <td>1</td>
   </tr>
   <tr>
      <td>JUNE</td>
      <td>MI</td>
      <td>379962.0</td>
      <td>1</td>
   </tr>
</table>

<p><strong>4.04, 查询退款时间间隔最长的前 10 位用户:</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 方法一</span></span><br><span class="line"><span class="keyword">select</span> a.user_name,</span><br><span class="line">    <span class="keyword">max</span>(<span class="keyword">datediff</span>(a.lead_dt, a.dt)) dt_interval</span><br><span class="line"><span class="keyword">from</span>    </span><br><span class="line">    (<span class="keyword">select</span> user_name,</span><br><span class="line">            dt,</span><br><span class="line">            <span class="keyword">lead</span>(dt) <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> user_name <span class="keyword">order</span> <span class="keyword">by</span> dt) lead_dt</span><br><span class="line">        <span class="keyword">from</span> user_refund</span><br><span class="line">        <span class="keyword">where</span> dt&gt;<span class="string">&#x27;0&#x27;</span>) a</span><br><span class="line"><span class="keyword">where</span> a.lead_dt <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">null</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> user_name</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> dt_interval <span class="keyword">desc</span></span><br><span class="line"><span class="keyword">limit</span> <span class="number">10</span>;</span><br></pre></td></tr></table></figure>

<table>
   <tr>
      <td>a.user_name</td>
      <td>dt_interval</td>
   </tr>
   <tr>
      <td>April</td>
      <td>725</td>
   </tr>
   <tr>
      <td>Aviva</td>
      <td>648</td>
   </tr>
   <tr>
      <td>Jamie</td>
      <td>513</td>
   </tr>
   <tr>
      <td>Angela</td>
      <td>507</td>
   </tr>
   <tr>
      <td>Harrison</td>
      <td>503</td>
   </tr>
   <tr>
      <td>Maynard</td>
      <td>496</td>
   </tr>
   <tr>
      <td>Noah</td>
      <td>476</td>
   </tr>
   <tr>
      <td>DEMI</td>
      <td>461</td>
   </tr>
   <tr>
      <td>DEBBIE</td>
      <td>448</td>
   </tr>
   <tr>
      <td>DORIS</td>
      <td>441</td>
   </tr>
</table>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 方法二</span></span><br><span class="line"><span class="keyword">select</span> b.user_name,</span><br><span class="line">    b.rank</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    (<span class="keyword">select</span> a.user_name,</span><br><span class="line">        <span class="keyword">rank</span>() <span class="keyword">over</span>(<span class="keyword">order</span> <span class="keyword">by</span> <span class="keyword">max</span>(<span class="keyword">datediff</span>(a.lead_dt, a.dt)) <span class="keyword">desc</span>) <span class="keyword">rank</span></span><br><span class="line">    <span class="keyword">from</span></span><br><span class="line">        (<span class="keyword">select</span> user_name,</span><br><span class="line">            dt,</span><br><span class="line">            <span class="keyword">lead</span>(dt) <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> user_name <span class="keyword">order</span> <span class="keyword">by</span> dt) lead_dt</span><br><span class="line">        <span class="keyword">from</span> user_refund</span><br><span class="line">        <span class="keyword">where</span> dt&gt;<span class="string">&#x27;0&#x27;</span>) a</span><br><span class="line">    <span class="keyword">where</span> a.lead_dt <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">null</span></span><br><span class="line">    <span class="keyword">group</span> <span class="keyword">by</span> a.user_name</span><br><span class="line">    ) b</span><br><span class="line"><span class="keyword">where</span> b.rank&lt;=<span class="number">10</span>;</span><br></pre></td></tr></table></figure>
<table>
   <tr>
      <td>b.user_name</td>
      <td>b.rank</td>
   </tr>
   <tr>
      <td>April</td>
      <td>1</td>
   </tr>
   <tr>
      <td>Aviva</td>
      <td>2</td>
   </tr>
   <tr>
      <td>Jamie</td>
      <td>3</td>
   </tr>
   <tr>
      <td>Angela</td>
      <td>4</td>
   </tr>
   <tr>
      <td>Harrison</td>
      <td>5</td>
   </tr>
   <tr>
      <td>Maynard</td>
      <td>6</td>
   </tr>
   <tr>
      <td>Noah</td>
      <td>7</td>
   </tr>
   <tr>
      <td>DEMI</td>
      <td>8</td>
   </tr>
   <tr>
      <td>DEBBIE</td>
      <td>9</td>
   </tr>
   <tr>
      <td>DORIS</td>
      <td>10</td>
   </tr>
</table>

<p>方法一如果出现并列排名, 就会有误差, 方法二则无此顾虑, 但是需要注意窗口函数分组是不去重的, 两个方法都需要对 <code>user_name</code> 去重, 不然可能出现同一个用户重复出现的情况.</p>
<br>

<h2 id="六-HiveQL-常用优化技巧"><a href="#六-HiveQL-常用优化技巧" class="headerlink" title="六, HiveQL 常用优化技巧"></a>六, HiveQL 常用优化技巧</h2><h3 id="1-用-group-by-代替-distinct-去重"><a href="#1-用-group-by-代替-distinct-去重" class="headerlink" title="1, 用 group by 代替 distinct 去重"></a>1, 用 group by 代替 distinct 去重</h3><p>在数据量大, 重复值多时, 能先使用 group by 去重的, 使用 group by 去重后再计算, 比之后再去重计算效率更高.</p>
<p>例如前面的例题中, <strong>查询 2019 年购买后又退款的用户</strong>, 可以这样优化:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> a.user_name</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    (<span class="keyword">select</span> user_name</span><br><span class="line">    <span class="keyword">from</span> user_trade</span><br><span class="line">    <span class="keyword">where</span> <span class="keyword">year</span>(dt)=<span class="number">2019</span></span><br><span class="line">    <span class="keyword">group</span> <span class="keyword">by</span> user_name) a</span><br><span class="line"><span class="keyword">join</span></span><br><span class="line">    (<span class="keyword">select</span> user_name</span><br><span class="line">    <span class="keyword">from</span> user_refund</span><br><span class="line">    <span class="keyword">where</span> <span class="keyword">year</span>(dt)=<span class="number">2019</span></span><br><span class="line">    <span class="keyword">group</span> <span class="keyword">by</span> user_name) b</span><br><span class="line"><span class="keyword">on</span> a.user_name=b.user_name;</span><br></pre></td></tr></table></figure>

<h3 id="2-多维度聚合"><a href="#2-多维度聚合" class="headerlink" title="2, 多维度聚合"></a>2, 多维度聚合</h3><p>需要对多个字段进行聚合运算, 一个字段一个字段的写 SQL 计算, 不如使用多维度聚合计算语句: <code>grouping sets</code>, <code>cube</code> 和 <code>rollup</code>.</p>
<p><strong>2.01, 分别查询用性别, 城市, 等级分布:</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> sex, city, <span class="keyword">level</span>,</span><br><span class="line">    <span class="keyword">count</span>(user_id)</span><br><span class="line"><span class="keyword">from</span> user_info</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> sex, city, <span class="keyword">level</span>;</span><br></pre></td></tr></table></figure>
<p>上述 sql 查询出来的是同一性别, 不同城市, 不同等级的分布, 而我们需要的结果是三个字段的结果是分开的:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> sex, city, <span class="keyword">level</span>,</span><br><span class="line">    <span class="keyword">count</span>(user_id)</span><br><span class="line"><span class="keyword">from</span> user_info</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> sex, city, <span class="keyword">level</span></span><br><span class="line"><span class="keyword">grouping</span> <span class="keyword">sets</span> (sex, city, <span class="keyword">level</span>);</span><br></pre></td></tr></table></figure>
<table>
   <tr>
      <td>sex</td>
      <td>city</td>
      <td>level</td>
      <td>_c3</td>
   </tr>
   <tr>
      <td>NULL</td>
      <td>NULL</td>
      <td>1</td>
      <td>33</td>
   </tr>
   <tr>
      <td>NULL</td>
      <td>NULL</td>
      <td>2</td>
      <td>26</td>
   </tr>
   <tr>
      <td>NULL</td>
      <td>NULL</td>
      <td>3</td>
      <td>30</td>
   </tr>
   <tr>
      <td>NULL</td>
      <td>NULL</td>
      <td>4</td>
      <td>44</td>
   </tr>
   <tr>
      <td>NULL</td>
      <td>NULL</td>
      <td>5</td>
      <td>30</td>
   </tr>
   <tr>
      <td>NULL</td>
      <td>NULL</td>
      <td>6</td>
      <td>32</td>
   </tr>
   <tr>
      <td>NULL</td>
      <td>NULL</td>
      <td>7</td>
      <td>35</td>
   </tr>
   <tr>
      <td>NULL</td>
      <td>NULL</td>
      <td>8</td>
      <td>34</td>
   </tr>
   <tr>
      <td>NULL</td>
      <td>NULL</td>
      <td>9</td>
      <td>30</td>
   </tr>
   <tr>
      <td>NULL</td>
      <td>NULL</td>
      <td>10</td>
      <td>33</td>
   </tr>
   <tr>
      <td>NULL</td>
      <td>beijing</td>
      <td>NULL</td>
      <td>53</td>
   </tr>
   <tr>
      <td>NULL</td>
      <td>changchun</td>
      <td>NULL</td>
      <td>53</td>
   </tr>
   <tr>
      <td>NULL</td>
      <td>guangzhou</td>
      <td>NULL</td>
      <td>55</td>
   </tr>
   <tr>
      <td>NULL</td>
      <td>hangzhou</td>
      <td>NULL</td>
      <td>57</td>
   </tr>
   <tr>
      <td>NULL</td>
      <td>shanghai</td>
      <td>NULL</td>
      <td>61</td>
   </tr>
   <tr>
      <td>NULL</td>
      <td>shenzhen</td>
      <td>NULL</td>
      <td>48</td>
   </tr>
   <tr>
      <td>female</td>
      <td>NULL</td>
      <td>NULL</td>
      <td>177</td>
   </tr>
   <tr>
      <td>male</td>
      <td>NULL</td>
      <td>NULL</td>
      <td>150</td>
   </tr>
</table>

<p>a, <code>grouping sets()</code> 相当于将不同 group by 聚合的结果进行 union all, 可以在括号中指明聚合规则.</p>
<p><strong>2.02, 查询性别分布, 以及不同性别的城市分布:</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> sex, city,</span><br><span class="line">    <span class="keyword">count</span>(user_id)</span><br><span class="line"><span class="keyword">from</span> user_info</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> sex, city</span><br><span class="line"><span class="keyword">grouping</span> <span class="keyword">sets</span> (sex, (sex, city));</span><br></pre></td></tr></table></figure>
<table>
   <tr>
      <td>sex</td>
      <td>city</td>
      <td>_c2</td>
   </tr>
   <tr>
      <td>female</td>
      <td>NULL</td>
      <td>177</td>
   </tr>
   <tr>
      <td>female</td>
      <td>beijing</td>
      <td>26</td>
   </tr>
   <tr>
      <td>female</td>
      <td>changchun</td>
      <td>32</td>
   </tr>
   <tr>
      <td>female</td>
      <td>guangzhou</td>
      <td>30</td>
   </tr>
   <tr>
      <td>female</td>
      <td>hangzhou</td>
      <td>30</td>
   </tr>
   <tr>
      <td>female</td>
      <td>shanghai</td>
      <td>36</td>
   </tr>
   <tr>
      <td>female</td>
      <td>shenzhen</td>
      <td>23</td>
   </tr>
   <tr>
      <td>male</td>
      <td>NULL</td>
      <td>150</td>
   </tr>
   <tr>
      <td>male</td>
      <td>beijing</td>
      <td>27</td>
   </tr>
   <tr>
      <td>male</td>
      <td>changchun</td>
      <td>21</td>
   </tr>
   <tr>
      <td>male</td>
      <td>guangzhou</td>
      <td>25</td>
   </tr>
   <tr>
      <td>male</td>
      <td>hangzhou</td>
      <td>27</td>
   </tr>
   <tr>
      <td>male</td>
      <td>shanghai</td>
      <td>25</td>
   </tr>
   <tr>
      <td>male</td>
      <td>shenzhen</td>
      <td>25</td>
   </tr>
</table>

<p>城市一列为 null 的是性别分布, 其他的是每个性别的城市分布.</p>
<p>b, <code>with cube</code>将分组聚合的所有维度都进行计算:</p>
<p><strong>2.03, 查询性别, 城市, 等级各种组合的用户分布情况:</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 方法一</span></span><br><span class="line"><span class="keyword">select</span> sex, city, <span class="keyword">level</span>,</span><br><span class="line">    <span class="keyword">count</span>(user_id)</span><br><span class="line"><span class="keyword">from</span> user_info</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> sex, city, <span class="keyword">level</span></span><br><span class="line"><span class="keyword">grouping</span> <span class="keyword">sets</span> (sex, city, <span class="keyword">level</span>, </span><br><span class="line">    (sex, city), (sex, <span class="keyword">level</span>), (city, <span class="keyword">level</span>),</span><br><span class="line">    (sex, city, <span class="keyword">level</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 方法二</span></span><br><span class="line"><span class="keyword">select</span> sex, city, <span class="keyword">level</span>,</span><br><span class="line">    <span class="keyword">count</span>(user_id)</span><br><span class="line"><span class="keyword">from</span> user_info</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> sex, city, <span class="keyword">level</span></span><br><span class="line"><span class="keyword">with</span> <span class="keyword">cube</span>;</span><br></pre></td></tr></table></figure>
<p>方法二将所有用户数进行了统计, 方法一没有.</p>
<p>c, <code>with rollup</code>以最左侧的字段为主, 进行层级聚合, 结果是 <code>with cube</code> 的子集.</p>
<p><strong>2.04, 查询每个月的支付金额及每年的支付金额:</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 方法一</span></span><br><span class="line"><span class="keyword">select</span> a.dt,</span><br><span class="line">    <span class="keyword">sum</span>(a.year_amount),</span><br><span class="line">    <span class="keyword">sum</span>(a.month_amount)</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    (<span class="keyword">select</span> <span class="keyword">substr</span>(dt, <span class="number">1</span>, <span class="number">4</span>) dt,</span><br><span class="line">        <span class="keyword">sum</span>(pay_amount) year_amount,</span><br><span class="line">        <span class="number">0</span> month_amount</span><br><span class="line">    <span class="keyword">from</span> user_trade</span><br><span class="line">    <span class="keyword">where</span> dt&gt;<span class="string">&#x27;0&#x27;</span></span><br><span class="line">    <span class="keyword">group</span> <span class="keyword">by</span> <span class="keyword">substr</span>(dt, <span class="number">1</span>, <span class="number">4</span>)</span><br><span class="line">    <span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line">    <span class="keyword">select</span> <span class="keyword">substr</span>(dt, <span class="number">1</span>, <span class="number">7</span>) dt,</span><br><span class="line">        <span class="number">0</span> year_mount,</span><br><span class="line">        <span class="keyword">sum</span>(pay_amount) month_amount</span><br><span class="line">    <span class="keyword">from</span> user_trade</span><br><span class="line">    <span class="keyword">where</span> dt&gt;<span class="string">&#x27;0&#x27;</span></span><br><span class="line">    <span class="keyword">group</span> <span class="keyword">by</span> <span class="keyword">substr</span>(dt, <span class="number">1</span>, <span class="number">7</span>)</span><br><span class="line">    ) a</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> a.dt;</span><br></pre></td></tr></table></figure>
<table>
   <tr>
      <td>a.dt</td>
      <td>_c1</td>
      <td>_c2</td>
   </tr>
   <tr>
      <td>2017</td>
      <td>24333973.60 </td>
      <td>0.00 </td>
   </tr>
   <tr>
      <td>2017-01</td>
      <td>0.00 </td>
      <td>241755.70 </td>
   </tr>
   <tr>
      <td>2017-02</td>
      <td>0.00 </td>
      <td>2582410.60 </td>
   </tr>
</table>

<p>第一列是年的总额.</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 方法二</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">year</span>(dt) <span class="keyword">year</span>,</span><br><span class="line">    <span class="keyword">month</span>(dt) <span class="keyword">month</span>,</span><br><span class="line">    <span class="keyword">sum</span>(pay_amount)</span><br><span class="line"><span class="keyword">from</span> user_trade</span><br><span class="line"><span class="keyword">where</span> dt&gt;<span class="string">&#x27;0&#x27;</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> <span class="keyword">year</span>(dt), <span class="keyword">month</span>(dt)</span><br><span class="line"><span class="keyword">with</span> <span class="keyword">rollup</span>;</span><br></pre></td></tr></table></figure>
<table>
   <tr>
      <td>year</td>
      <td>month</td>
      <td>_c2</td>
   </tr>
   <tr>
      <td>NULL</td>
      <td>NULL</td>
      <td>62348041.30 </td>
   </tr>
   <tr>
      <td>2017</td>
      <td>NULL</td>
      <td>24333973.60 </td>
   </tr>
   <tr>
      <td>2017</td>
      <td>1</td>
      <td>241755.70 </td>
   </tr>
   <tr>
      <td>2017</td>
      <td>2</td>
      <td>2582410.60 </td>
   </tr>
</table>

<p>第一列是全部的总额, 第二列是年的总额. <code>with rollup</code>计算了全部的总额和以 year 字段为主的两个维度 <code>year</code>, <code>(year, month)</code>的总额.</p>
<h3 id="3-转换解题思路"><a href="#3-转换解题思路" class="headerlink" title="3, 转换解题思路"></a>3, 转换解题思路</h3><p>前面的例题, <strong>查询 2017 和 2018 都购买的用户</strong>, 可以如下优化:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> a.user_name</span><br><span class="line"><span class="keyword">from</span> (<span class="keyword">select</span> user_name,</span><br><span class="line">        <span class="keyword">count</span>(<span class="keyword">distinct</span> <span class="keyword">year</span>(dt)) year_num</span><br><span class="line">    <span class="keyword">from</span> user_trade</span><br><span class="line">    <span class="keyword">where</span> <span class="keyword">year</span>(dt) <span class="keyword">in</span> (<span class="number">2017</span>, <span class="number">2018</span>)</span><br><span class="line">    <span class="keyword">group</span> <span class="keyword">by</span> user_name) a</span><br><span class="line"><span class="keyword">where</span> a.year_num=<span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 还可再优化</span></span><br><span class="line"><span class="keyword">select</span> user_name,</span><br><span class="line">    <span class="keyword">count</span>(<span class="keyword">distinct</span> <span class="keyword">year</span>(dt)) year_num</span><br><span class="line"><span class="keyword">from</span> user_trade</span><br><span class="line"><span class="keyword">where</span> <span class="keyword">year</span>(dt) <span class="keyword">in</span> (<span class="number">2017</span>, <span class="number">2018</span>)</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> user_name</span><br><span class="line"><span class="keyword">having</span> <span class="keyword">count</span>(<span class="keyword">distinct</span> <span class="keyword">year</span>(dt))=<span class="number">2</span>;</span><br></pre></td></tr></table></figure>

<h3 id="4-有-union-all-查询时-开启并发执行"><a href="#4-有-union-all-查询时-开启并发执行" class="headerlink" title="4, 有 union all 查询时, 开启并发执行"></a>4, 有 union all 查询时, 开启并发执行</h3><p>开启参数设置: <code>set hive.exec.parallel=true</code></p>
<p>查看是否设置成功: <code>set hive.exec.parallel;</code></p>
<p>多台服务器时开启才有效.</p>
<h3 id="5-同一字段的数据展开-或按分组归类"><a href="#5-同一字段的数据展开-或按分组归类" class="headerlink" title="5, 同一字段的数据展开, 或按分组归类"></a>5, 同一字段的数据展开, 或按分组归类</h3><p>有用户购买的商品表 <code>user_goods_category</code>:</p>
<table>
   <tr>
      <td>col_name</td>
      <td>data_type</td>
   </tr>
   <tr>
      <td>user_name           </td>
      <td>string              </td>
   </tr>
   <tr>
      <td>category_detail     </td>
      <td>string     </td>
   </tr>
</table>

<p>部分数据:</p>
<table>
   <tr>
      <td>Abby</td>
      <td>clothes,food,electronics</td>
   </tr>
   <tr>
      <td>Ailsa</td>
      <td>book,clothes,food</td>
   </tr>
   <tr>
      <td>Albert</td>
      <td>clothes,electronics,computer</td>
   </tr>
</table>

<p>a, 同一字段的数据展开:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">基表 lateral view explode(列表字段) 单列表 as 列名1</span><br></pre></td></tr></table></figure>
<p>得到的结果是一个<strong>将 <code>基表</code> 的 <code>列表字段</code> 展开得到列名为 <code>列名1</code> 的 <code>单列表</code> 与 <code>基表</code> 合并</strong>的特殊表.</p>
<p><strong>5.01, 查询每个商品品类的购买用户数:</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> b.category,</span><br><span class="line">    <span class="keyword">count</span>(<span class="keyword">distinct</span> a.user_name)</span><br><span class="line"><span class="keyword">from</span> user_goods_category a</span><br><span class="line"><span class="keyword">lateral</span> <span class="keyword">view</span> <span class="keyword">explode</span>(<span class="keyword">split</span>(category_detail, <span class="string">&#x27;,&#x27;</span>)) b <span class="keyword">as</span> <span class="keyword">category</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> b.category;</span><br></pre></td></tr></table></figure>
<table>
   <tr>
      <td>b.category</td>
      <td>_c1</td>
   </tr>
   <tr>
      <td>book</td>
      <td>99</td>
   </tr>
   <tr>
      <td>clothes</td>
      <td>110</td>
   </tr>
   <tr>
      <td>computer</td>
      <td>99</td>
   </tr>
   <tr>
      <td>electronics</td>
      <td>99</td>
   </tr>
   <tr>
      <td>food</td>
      <td>105</td>
   </tr>
   <tr>
      <td>shoes</td>
      <td>91</td>
   </tr>
</table>

<p><code>split()</code>将字符串分割并以列表形式返回.</p>
<p><code>explode()</code>将值为列表形式的字段展开成多行.</p>
<p><code>from</code>语句后面得到的特殊表如下:</p>
<table>
   <tr>
      <td>a.user_name</td>
      <td>a.category_detail</td>
      <td>b.category</td>
   </tr>
   <tr>
      <td>Abby</td>
      <td>clothes,food,electronics</td>
      <td>clothes</td>
   </tr>
   <tr>
      <td>Abby</td>
      <td>clothes,food,electronics</td>
      <td>food</td>
   </tr>
   <tr>
      <td>Abby</td>
      <td>clothes,food,electronics</td>
      <td>electronics</td>
   </tr>
   <tr>
      <td>Ailsa</td>
      <td>book,clothes,food</td>
      <td>book</td>
   </tr>
   <tr>
      <td>Ailsa</td>
      <td>book,clothes,food</td>
      <td>clothes</td>
   </tr>
   <tr>
      <td>Ailsa</td>
      <td>book,clothes,food</td>
      <td>food</td>
   </tr>
</table>

<p>b, 同一字段按分组归类:</p>
<p><strong>5.02, 查看每个商品品类都有哪些用户购买:</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> b.category,</span><br><span class="line">    collect_set(<span class="keyword">distinct</span> a.user_name)</span><br><span class="line"><span class="keyword">from</span> user_goods_category a</span><br><span class="line"><span class="keyword">lateral</span> <span class="keyword">view</span> <span class="keyword">explode</span>(<span class="keyword">split</span>(category_detail, <span class="string">&#x27;,&#x27;</span>)) b <span class="keyword">as</span> <span class="keyword">category</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> b.category;</span><br></pre></td></tr></table></figure>
<table>
   <tr>
      <td>b.category</td>
      <td>_c1</td>
   </tr>
   <tr>
      <td>book</td>
      <td>["Ailsa","Alexander",…(后面省略)]</td>
   </tr>
   <tr>
      <td>clothes</td>
      <td>["Abby","Ailsa",...(后面省略)]</td>
   </tr>
</table>

<p><code>collect_set()</code>将分组后分到同一组的值全部放到一个列表里显示出来, 还可以再用 <code>concat_ws(&#39;分隔符&#39;, ...)</code> 将列表中的值连接成字符串.</p>
<h3 id="6-表连接优化"><a href="#6-表连接优化" class="headerlink" title="6, 表连接优化"></a>6, 表连接优化</h3><ul>
<li><p>使用相同的连接键<br>对3个以上表进行 join 连接, on 条件使用相同的连接键, 只会产生一个 MapReduce job.</p>
</li>
<li><p>尽早进行数据过滤<br>例如数据只选择需要的区段和字段, 分组去重等.</p>
</li>
<li><p>逻辑过于复杂时引入中间表</p>
</li>
</ul>
<h3 id="7-防止数据倾斜"><a href="#7-防止数据倾斜" class="headerlink" title="7, 防止数据倾斜"></a>7, 防止数据倾斜</h3><p>数据倾斜: 任务执行过程中, 大部分任务执行完成, 少数任务一直在执行中的情况.</p>
<ul>
<li><p>空值产生的数据倾斜<br>表连接时, 连接字段有空值, 增加空值过滤条件, 例如:<br><code>on a.id=b.id and a.id is not null</code></p>
</li>
<li><p>表连接时, 连接字段数据类型不一致<br>将数据类型转换一致, 例如:<br><code>on a.id=cast(b.id as string)</code></p>
</li>
</ul>
]]></content>
      <categories>
        <category>数据分析</category>
      </categories>
      <tags>
        <tag>HiveQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Mysql 索引，视图和三范式</title>
    <url>/sql/mysql4-99c5d36532eb/</url>
    <content><![CDATA[<blockquote>
<p>内容主要来源：<strong>开课吧</strong>学习笔记整理。</p>
</blockquote>
<h2 id="五-索引"><a href="#五-索引" class="headerlink" title="五, 索引"></a>五, 索引</h2><p>(此知识点需要重新深入理顺逻辑)</p>
<h3 id="1-索引介绍"><a href="#1-索引介绍" class="headerlink" title="1, 索引介绍"></a>1, 索引介绍</h3><p>索引是存储引擎用于快速查找数据记录的一种数据结构, 而不必扫描整个数据库, 索引优化是查询性能优化非常有效的手段, 根据存储类型可以分为 B(B+) 树索引(innodb 引擎), 哈希索引(memory 引擎).</p>
<p>索引确保查询速度, 同时还能保证数据完整性, 通常主键, 唯一键, 联合键等有约束功能的字段就是索引, 还可以设置无约束的普通索引.</p>
<h3 id="2-普通索引的创建"><a href="#2-普通索引的创建" class="headerlink" title="2, 普通索引的创建"></a>2, 普通索引的创建</h3><p>无约束条件, 可以创建在任何字段上, 有三种方法创建索引.</p>
<p>建表时指定索引:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">create table 表名(</span><br><span class="line">    字段 数据类型 属性 ...,</span><br><span class="line">    ...,</span><br><span class="line">    index|key [索引名](字段, [(长度)] [asc|desc]));</span><br></pre></td></tr></table></figure>

<p>在表中指定字段作为索引:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">create index 索引名 on 表名 (字段 [(长度)] [asc|sesc]);</span><br></pre></td></tr></table></figure>

<p>修改表结构指定索引:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">alter table 表名 add index|key 索引名 (字段 [(长度)] [asc|desc])</span><br></pre></td></tr></table></figure>

<p>创建多列索引时, 上述语句中指定多个字段即可</p>
<p>创建唯一索引, 上述语句 index 前加上 unique</p>
<p>全文索引, 主要设置在数据量较大的字符串类型字段, 创建全文索引, 在上述语句 index 前加上 fulltext</p>
<h3 id="3-删除索引"><a href="#3-删除索引" class="headerlink" title="3, 删除索引"></a>3, 删除索引</h3><p>创建主键, 外键等自动创建索引, 删除键, 并没有删除索引.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">drop index 索引名 on 表名;</span><br></pre></td></tr></table></figure>

<br>

<h2 id="六-视图"><a href="#六-视图" class="headerlink" title="六, 视图"></a>六, 视图</h2><h3 id="1-视图介绍"><a href="#1-视图介绍" class="headerlink" title="1, 视图介绍"></a>1, 视图介绍</h3><p>视图是从数据库的基本表(可以是多个不同的表)中, 将某些有特定联系和特定需要的数据筛选出来联系在一起动态生成的虚拟表, 相当于查询语句得到的中间结果. </p>
<p>视图的建立和删除不影响基本表, 视图内容的更新(增删改)直接影响基本表, 但视图来自多个表时, 不允许添加和删除数据.</p>
<p>视图的作用:</p>
<p>a, 对需要重复查询的数据, 直接建立视图便可重复使用, 减少重复的甚至复杂的 sql 语句查询.</p>
<p>b, 如果数据库重构, 例如表拆分, 之前的脚本程序可能会受影响, 利用视图可以恢复脚本使用.</p>
<p>c, 可以对不同的用户设定不同的视图, 隐藏需要保密的信息, 提高数据安全性.</p>
<p>d, 把需要的数据, 创建相应的视图, 使数据更加清晰.</p>
<h3 id="2-视图的基本操作"><a href="#2-视图的基本操作" class="headerlink" title="2, 视图的基本操作"></a>2, 视图的基本操作</h3><p>视图不能和表名和其他视图重名, 视图是封装了查询语句中间表, 查询视图数据和查询表一样.</p>
<p>创建视图:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">create view 视图名 <span class="keyword">as</span> 查询语句;</span><br></pre></td></tr></table></figure>

<p>查看视图:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">show table status;  <span class="comment">#显示所有的表与视图</span></span><br><span class="line">show create view 视图名; <span class="comment"># 显示创建视图的语句</span></span><br><span class="line">desc 视图名; <span class="comment"># 显示视图结构</span></span><br></pre></td></tr></table></figure>

<p>删除视图:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">drop view 视图名;</span><br></pre></td></tr></table></figure>

<p>修改视图:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">create <span class="keyword">or</span> replace view 视图名 <span class="keyword">as</span> 查询语句;  <span class="comment"># 有视图就修改, 没有就创建</span></span><br><span class="line">alter view 视图名 <span class="keyword">as</span> 查询语句;</span><br><span class="line"><span class="comment"># 视图是虚表, 还可以删除视图重新创建.</span></span><br></pre></td></tr></table></figure>

<br>

<h2 id="七-数据库设计三范式"><a href="#七-数据库设计三范式" class="headerlink" title="七, 数据库设计三范式"></a>七, 数据库设计三范式</h2><p>设计关系型数据库, 遵从一定的规范要求, 越高的范式, 数据冗余越小, 但是会降低数据读写效率, 效率低, 又需要反范式.</p>
<p>第一范式(1NF): 原子性, 字段不可再分, 某个属性有多个值时, 必须拆分为不同属性, 也就是一个字段只存储一项信息. 关系型数据库, 自动满足第一范式.</p>
<p>第二范式(2NF): 在第一范式基础上建立. 有主键, 确保数据库表中的每一列都和主键相关，而不能只与主键的某一部分相关（主要针对联合主键而言）. 也就是说在一个数据库表中，一个表只能保存一种数据，不可以把多种数据保存在同一张数据库表中. 例如一张订单编号和商品编号为联合主键, 存储订单信息和商品信息的表, 就不满足第二范式.</p>
<p>第三范式(3NF): 必须先满足第二范式. 非主键字段不能相互依赖, 每一列与主键直接依赖, 不存在传递依赖. 例如一个订单信息表, 订单编号为主键, 可将客户编号作为外键与订单信息表建立联系.</p>
]]></content>
      <categories>
        <category>数据分析</category>
      </categories>
      <tags>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>Mysql 常用函数</title>
    <url>/sql/mysql3-718da85106ae/</url>
    <content><![CDATA[<blockquote>
<p>内容主要来源：<strong>开课吧</strong>学习笔记整理。</p>
</blockquote>
<h2 id="四-mysql-常用函数"><a href="#四-mysql-常用函数" class="headerlink" title="四, mysql 常用函数"></a>四, mysql 常用函数</h2><h3 id="1-字符串函数"><a href="#1-字符串函数" class="headerlink" title="1, 字符串函数"></a>1, 字符串函数</h3><h4 id="字符串合并-concat-concat-ws"><a href="#字符串合并-concat-concat-ws" class="headerlink" title="字符串合并 concat, concat_ws:"></a>字符串合并 <code>concat</code>, <code>concat_ws</code>:</h4><ul>
<li><code>concat(s1, s2, ..., sn)</code>, 将多个对象合并, 某个对象为 <code>null</code>, 全体为空.</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">%%sql</span><br><span class="line">select concat(<span class="string">&#x27;bill&#x27;</span>, <span class="string">&#x27;is&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;student.&#x27;</span>) <span class="keyword">as</span> bill</span><br></pre></td></tr></table></figure>

<pre><code> * mysql+pymysql://root:***@localhost/test
1 rows affected.</code></pre>
<table>
    <tr>
        <th>bill</th>
    </tr>
    <tr>
        <td>billisastudent.</td>
    </tr>
</table>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">%%sql</span><br><span class="line">select concat(curdate(), <span class="string">&#x27;_&#x27;</span>, <span class="number">12.34</span>, <span class="string">&#x27;_&#x27;</span>)</span><br></pre></td></tr></table></figure>

<pre><code> * mysql+pymysql://root:***@localhost/test
1 rows affected.</code></pre>
<table>
    <tr>
        <th>concat(curdate(), &#x27;_&#x27;, 12.34, &#x27;_&#x27;)</th>
    </tr>
    <tr>
        <td>2020-05-17_12.34_</td>
    </tr>
</table>



<ul>
<li><code>concat_ws(sep, s1, s2, ..., sn)</code>, 用分隔符 <code>sep</code> 将对象连接, <code>sep</code> 为 null, 全体为空, 其他为 null 无影响.</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">%%sql</span><br><span class="line">select concat_ws(<span class="string">&#x27;_&#x27;</span>, <span class="string">&#x27;bill&#x27;</span>, <span class="string">&#x27;is&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;student&#x27;</span>) <span class="keyword">as</span> bill</span><br></pre></td></tr></table></figure>

<pre><code> * mysql+pymysql://root:***@localhost/test
1 rows affected.</code></pre>
<table>
    <tr>
        <th>bill</th>
    </tr>
    <tr>
        <td>bill_is_a_student</td>
    </tr>
</table>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">%%sql</span><br><span class="line">select concat_ws(curdate(), <span class="string">&#x27;_&#x27;</span>, <span class="number">12.34</span>, <span class="string">&#x27;什么情况&#x27;</span>, <span class="string">&#x27;_&#x27;</span>)</span><br></pre></td></tr></table></figure>

<pre><code> * mysql+pymysql://root:***@localhost/test
1 rows affected.</code></pre>
<table>
    <tr>
        <th>concat_ws(curdate(), &#x27;_&#x27;, 12.34, &#x27;什么情况&#x27;, &#x27;_&#x27;)</th>
    </tr>
    <tr>
        <td>_2020-05-1812.342020-05-18什么情况2020-05-18_</td>
    </tr>
</table>



<h4 id="字符串比较-strcmp"><a href="#字符串比较-strcmp" class="headerlink" title="字符串比较 strcmp:"></a>字符串比较 <code>strcmp</code>:</h4><p><code>strcmp(s1, s2)</code>, s1 &gt; s2 返回 1, s1 &lt; s2 返回 -1, 等于返回 0</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">%%sql</span><br><span class="line">select strcmp(<span class="number">1</span>, <span class="number">2</span>),</span><br><span class="line">    strcmp(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;3&#x27;</span>),</span><br><span class="line">    strcmp(<span class="string">&#x27;2&#x27;</span>, <span class="number">1.6</span>)</span><br></pre></td></tr></table></figure>

<pre><code> * mysql+pymysql://root:***@localhost/test
1 rows affected.</code></pre>
<table>
    <tr>
        <th>strcmp(1, 2)</th>
        <th>strcmp(&#x27;a&#x27;, &#x27;3&#x27;)</th>
        <th>strcmp(&#x27;2&#x27;, 1.6)</th>
    </tr>
    <tr>
        <td>-1</td>
        <td>1</td>
        <td>1</td>
    </tr>
</table>



<h4 id="字符串长度-length-char-length"><a href="#字符串长度-length-char-length" class="headerlink" title="字符串长度 length, char_length:"></a>字符串长度 <code>length</code>, <code>char_length</code>:</h4><ul>
<li><code>length()</code> 返回字符串的长度，以字节为单位, utf8 编码下, 一个汉字三个字节，一个数字或字母一个字节, gbk 下, 一个汉字两个字节，一个数字或字母一个字节.</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">%%sql</span><br><span class="line">select <span class="string">&#x27;bill&#x27;</span>, length(<span class="string">&#x27;bill&#x27;</span>), <span class="string">&#x27;中文&#x27;</span>, length(<span class="string">&#x27;中文&#x27;</span>)</span><br></pre></td></tr></table></figure>

<pre><code> * mysql+pymysql://root:***@localhost/test
1 rows affected.</code></pre>
<table>
    <tr>
        <th>bill</th>
        <th>length(&#x27;bill&#x27;)</th>
        <th>中文</th>
        <th>length(&#x27;中文&#x27;)</th>
    </tr>
    <tr>
        <td>bill</td>
        <td>4</td>
        <td>中文</td>
        <td>6</td>
    </tr>
</table>



<ul>
<li><code>char_length()</code> 返回字符串的长度，以字符为单位.</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">%%sql</span><br><span class="line">select <span class="string">&#x27;bill&#x27;</span>, char_length(<span class="string">&#x27;bill&#x27;</span>), <span class="string">&#x27;中文&#x27;</span>, char_length(<span class="string">&#x27;中文&#x27;</span>)</span><br></pre></td></tr></table></figure>

<pre><code> * mysql+pymysql://root:***@localhost/test
1 rows affected.</code></pre>
<table>
    <tr>
        <th>bill</th>
        <th>char_length(&#x27;bill&#x27;)</th>
        <th>中文</th>
        <th>char_length(&#x27;中文&#x27;)</th>
    </tr>
    <tr>
        <td>bill</td>
        <td>4</td>
        <td>中文</td>
        <td>2</td>
    </tr>
</table>



<h4 id="大小写转换-lower-upper"><a href="#大小写转换-lower-upper" class="headerlink" title="大小写转换 lower, upper:"></a>大小写转换 <code>lower</code>, <code>upper</code>:</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">%%sql</span><br><span class="line">select <span class="string">&#x27;bill&#x27;</span>, upper(<span class="string">&#x27;bill&#x27;</span>), <span class="string">&#x27;BILL&#x27;</span>, lower(<span class="string">&#x27;BILL&#x27;</span>)</span><br></pre></td></tr></table></figure>

<pre><code> * mysql+pymysql://root:***@localhost/test
1 rows affected.</code></pre>
<table>
    <tr>
        <th>bill</th>
        <th>upper(&#x27;bill&#x27;)</th>
        <th>BILL</th>
        <th>lower(&#x27;BILL&#x27;)</th>
    </tr>
    <tr>
        <td>bill</td>
        <td>BILL</td>
        <td>BILL</td>
        <td>bill</td>
    </tr>
</table>



<h4 id="字符串查找"><a href="#字符串查找" class="headerlink" title="字符串查找"></a>字符串查找</h4><ul>
<li><code>find_in_set(s1,s2)</code> 返回 s1 在 s2 中的位置, 只能用逗号<code>,</code>隔开.</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">%%sql</span><br><span class="line">select find_in_set(<span class="string">&#x27;bill&#x27;</span>, <span class="string">&#x27;bob, bill, jack,bill&#x27;</span>) <span class="keyword">as</span> <span class="string">&#x27;bill 的位置&#x27;</span></span><br></pre></td></tr></table></figure>

<pre><code> * mysql+pymysql://root:***@localhost/test
1 rows affected.</code></pre>
<table>
    <tr>
        <th>bill 的位置</th>
    </tr>
    <tr>
        <td>4</td>
    </tr>
</table>



<ul>
<li><code>field(s, s1, s2, ..., sn)</code> 返回第一个字符串 s 匹配的字符串的位置.</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">%%sql</span><br><span class="line">select field(<span class="string">&#x27;bill&#x27;</span>, <span class="string">&#x27;bob&#x27;</span>, <span class="string">&#x27;jack&#x27;</span>, <span class="string">&#x27;bill&#x27;</span>) <span class="string">&#x27;bill 的位置&#x27;</span></span><br></pre></td></tr></table></figure>

<pre><code> * mysql+pymysql://root:***@localhost/test
1 rows affected.</code></pre>
<table>
    <tr>
        <th>bill 的位置</th>
    </tr>
    <tr>
        <td>3</td>
    </tr>
</table>



<ul>
<li><code>locate(s1, s)</code>, <code>position(s1 in s)</code> 返回 s1 在 s 中开始的位置.</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">%%sql</span><br><span class="line">select locate(<span class="string">&#x27;bill&#x27;</span>, <span class="string">&#x27;bob jack bill&#x27;</span>)</span><br></pre></td></tr></table></figure>

<pre><code> * mysql+pymysql://root:***@localhost/test
1 rows affected.</code></pre>
<table>
    <tr>
        <th>locate(&#x27;bill&#x27;, &#x27;bob jack bill&#x27;)</th>
    </tr>
    <tr>
        <td>10</td>
    </tr>
</table>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">%%sql</span><br><span class="line">select position(<span class="string">&#x27;bill&#x27;</span> <span class="keyword">in</span> <span class="string">&#x27;bob jack bill&#x27;</span>)</span><br></pre></td></tr></table></figure>

<pre><code> * mysql+pymysql://root:***@localhost/test
1 rows affected.</code></pre>
<table>
    <tr>
        <th>position(&#x27;bill&#x27; in &#x27;bob jack bill&#x27;)</th>
    </tr>
    <tr>
        <td>10</td>
    </tr>
</table>



<h4 id="字符串截取子串"><a href="#字符串截取子串" class="headerlink" title="字符串截取子串"></a>字符串截取子串</h4><ul>
<li><code>left(str, n)</code> 获取字符串的前 n 个字符.</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">%%sql</span><br><span class="line">select left(<span class="string">&#x27;中bill文&#x27;</span>, <span class="number">2</span>)</span><br></pre></td></tr></table></figure>

<pre><code> * mysql+pymysql://root:***@localhost/test
1 rows affected.</code></pre>
<table>
    <tr>
        <th>left(&#x27;中bill文&#x27;, 2)</th>
    </tr>
    <tr>
        <td>中b</td>
    </tr>
</table>



<ul>
<li><code>right(str, n)</code> 获取字符串后 n 个字符.</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">%%sql</span><br><span class="line">select right(<span class="string">&#x27;中bill文&#x27;</span>, <span class="number">2</span>)</span><br></pre></td></tr></table></figure>

<pre><code> * mysql+pymysql://root:***@localhost/test
1 rows affected.</code></pre>
<table>
    <tr>
        <th>right(&#x27;中bill文&#x27;, 2)</th>
    </tr>
    <tr>
        <td>l文</td>
    </tr>
</table>



<ul>
<li><code>substring(str, m, n)</code> 获取字符串从 m 开始的 n 个字符.</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">%%sql</span><br><span class="line">select substring(<span class="string">&#x27;中bill文&#x27;</span>, <span class="number">2</span>, <span class="number">4</span>)</span><br></pre></td></tr></table></figure>

<pre><code> * mysql+pymysql://root:***@localhost/test
1 rows affected.</code></pre>
<table>
    <tr>
        <th>substring(&#x27;中bill文&#x27;, 2, 4)</th>
    </tr>
    <tr>
        <td>bill</td>
    </tr>
</table>



<h4 id="去除字符串的首尾空格"><a href="#去除字符串的首尾空格" class="headerlink" title="去除字符串的首尾空格"></a>去除字符串的首尾空格</h4><ul>
<li><code>ltrim()</code> 去除首空格, <code>rtrim()</code> 去除尾空格, <code>trim()</code> 去除两边空格.</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">%%sql</span><br><span class="line">select concat(ltrim(<span class="string">&#x27; bill &#x27;</span>), rtrim(<span class="string">&#x27;is_ &#x27;</span>), <span class="string">&#x27;a&#x27;</span>, trim(<span class="string">&#x27; _student &#x27;</span>)) bill</span><br></pre></td></tr></table></figure>

<pre><code> * mysql+pymysql://root:***@localhost/test
1 rows affected.</code></pre>
<table>
    <tr>
        <th>bill</th>
    </tr>
    <tr>
        <td>bill is_a_student</td>
    </tr>
</table>



<h4 id="替换字符串"><a href="#替换字符串" class="headerlink" title="替换字符串"></a>替换字符串</h4><ul>
<li><code>insert(str, m, n, newstr)</code> 将字符串 str 中, 位置从 m 起长度为 n 的子串替换为 newstr. m 超过字符串长度, 返回 str, n 大于 str 剩余长度, 从 m 开始替换, 任何参数为 null, 返回 null.</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">%%sql</span><br><span class="line">select <span class="string">&#x27;这是mysql数据库&#x27;</span> MySQL, insert(<span class="string">&#x27;这是mysqlL数据库&#x27;</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="string">&#x27;Oracle&#x27;</span>) 转为</span><br></pre></td></tr></table></figure>

<pre><code> * mysql+pymysql://root:***@localhost/test
1 rows affected.</code></pre>
<table>
    <tr>
        <th>MySQL</th>
        <th>转为</th>
    </tr>
    <tr>
        <td>这是mysql数据库</td>
        <td>这是OracleL数据库</td>
    </tr>
</table>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">%%sql</span><br><span class="line">select <span class="string">&#x27;这是mysql数据库&#x27;</span> MySQL, insert(<span class="string">&#x27;这是mysql数据库&#x27;</span>, <span class="number">3</span>, <span class="number">10</span>, <span class="string">&#x27;Oracle&#x27;</span>) 转为</span><br></pre></td></tr></table></figure>

<pre><code> * mysql+pymysql://root:***@localhost/test
1 rows affected.</code></pre>
<table>
    <tr>
        <th>MySQL</th>
        <th>转为</th>
    </tr>
    <tr>
        <td>这是mysql数据库</td>
        <td>这是Oracle</td>
    </tr>
</table>



<ul>
<li><code>replace(str, substr, newstr)</code> 用 newstr 替换 str 中的 substr.</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">%%sql</span><br><span class="line">select <span class="string">&#x27;这是mysql数据库&#x27;</span> mysql, replace(<span class="string">&#x27;这是mysql数据库&#x27;</span>, <span class="string">&#x27;mysql&#x27;</span>, <span class="string">&#x27;Oracle&#x27;</span>) Oracle</span><br></pre></td></tr></table></figure>

<pre><code> * mysql+pymysql://root:***@localhost/test
1 rows affected.</code></pre>
<table>
    <tr>
        <th>mysql</th>
        <th>Oracle</th>
    </tr>
    <tr>
        <td>这是mysql数据库</td>
        <td>这是Oracle数据库</td>
    </tr>
</table>



<h3 id="2-数值函数"><a href="#2-数值函数" class="headerlink" title="2, 数值函数"></a>2, 数值函数</h3><p><code>rand()</code> 返回 0~1 之间的随机数, <code>ceil(x)</code> 返回大于等于 x 的最小整数, <code>floor(x)</code> 返回小于等于 x 的最大整数.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">%%sql</span><br><span class="line">select rand(), ceil(<span class="number">3.14</span>), floor(<span class="number">3.14</span>)</span><br></pre></td></tr></table></figure>

<pre><code> * mysql+pymysql://root:***@localhost/test
1 rows affected.</code></pre>
<table>
    <tr>
        <th>rand()</th>
        <th>ceil(3.14)</th>
        <th>floor(3.14)</th>
    </tr>
    <tr>
        <td>0.806298252014721</td>
        <td>4</td>
        <td>3</td>
    </tr>
</table>



<p><code>truncate(x, y)</code> 返回 x 保留小数点后 y 位的数, <code>round(x)</code> 返回 x 四舍五入的整数, <code>round(x, y)</code> x 四舍五入保留小数点后 y 位.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">%%sql</span><br><span class="line">select truncate(<span class="number">3.14159</span>, <span class="number">4</span>), <span class="built_in">round</span>(<span class="number">3.1415</span>), <span class="built_in">round</span>(<span class="number">3.14159</span>, <span class="number">4</span>)</span><br></pre></td></tr></table></figure>

<pre><code> * mysql+pymysql://root:***@localhost/test
1 rows affected.</code></pre>
<table>
    <tr>
        <th>truncate(3.14159, 4)</th>
        <th>round(3.1415)</th>
        <th>round(3.14159, 4)</th>
    </tr>
    <tr>
        <td>3.1415</td>
        <td>3</td>
        <td>3.1416</td>
    </tr>
</table>



<h3 id="3-日期时间函数"><a href="#3-日期时间函数" class="headerlink" title="3, 日期时间函数"></a>3, 日期时间函数</h3><p><code>curdate()</code> 返回当前日期, <code>curtime()</code> 返回当前时间, <code>now()</code> 返回当前日期时间, <code>week(date)</code> 返回日期在一年的第几周, <code>year(date)</code> 返回日期所在年份, <code>hour(time)</code> 返回时间的小时数, <code>minute(time)</code> 返回时间的分钟数, <code>monthname(date)</code> 返回日期的月份名称. </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">%%sql</span><br><span class="line">select curdate() 日期, curtime() 时间, now() 当前</span><br></pre></td></tr></table></figure>

<pre><code> * mysql+pymysql://root:***@localhost/test
1 rows affected.</code></pre>
<table>
    <tr>
        <th>日期</th>
        <th>时间</th>
        <th>当前</th>
    </tr>
    <tr>
        <td>2020-05-18</td>
        <td>11:12:06</td>
        <td>2020-05-18 11:12:06</td>
    </tr>
</table>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">%%sql</span><br><span class="line">select week(<span class="string">&#x27;2020-05-18&#x27;</span>) w, </span><br><span class="line">    year(<span class="string">&#x27;2020-05-18&#x27;</span>) y, </span><br><span class="line">    hour(<span class="string">&#x27;10:57:19&#x27;</span>) h, </span><br><span class="line">    minute(<span class="string">&#x27;98-02-03 10:05:03&#x27;</span>) <span class="built_in">min</span>,</span><br><span class="line">    monthname(<span class="string">&#x27;98-02-05&#x27;</span>) m</span><br></pre></td></tr></table></figure>

<pre><code> * mysql+pymysql://root:***@localhost/test
1 rows affected.</code></pre>
<table>
    <tr>
        <th>w</th>
        <th>y</th>
        <th>h</th>
        <th>min</th>
        <th>m</th>
    </tr>
    <tr>
        <td>20</td>
        <td>2020</td>
        <td>10</td>
        <td>5</td>
        <td>February</td>
    </tr>
</table>



<h3 id="4-系统信息函数"><a href="#4-系统信息函数" class="headerlink" title="4, 系统信息函数"></a>4, 系统信息函数</h3><p><code>version()</code> 返回数据库版本号, <code>database()</code> 返回当前数据库名, <code>user()</code>返回当前用户名.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">%%sql</span><br><span class="line">select version() 版本, database() 数据库, user() 用户</span><br></pre></td></tr></table></figure>

<pre><code> * mysql+pymysql://root:***@localhost/test
1 rows affected.</code></pre>
<table>
    <tr>
        <th>版本</th>
        <th>数据库</th>
        <th>用户</th>
    </tr>
    <tr>
        <td>5.7.27-log</td>
        <td>test</td>
        <td>root@localhost</td>
    </tr>
</table>
]]></content>
      <categories>
        <category>数据分析</category>
      </categories>
      <tags>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>Mysql 多表基础操作</title>
    <url>/sql/mysql2-bc4653311c6b/</url>
    <content><![CDATA[<blockquote>
<p>内容主要来源：<strong>开课吧</strong>学习笔记整理。</p>
</blockquote>
<h2 id="三-多表基础操作"><a href="#三-多表基础操作" class="headerlink" title="三, 多表基础操作"></a>三, 多表基础操作</h2><h3 id="1-1-多表介绍"><a href="#1-1-多表介绍" class="headerlink" title="1.1, 多表介绍"></a>1.1, 多表介绍</h3><p>一个项目的数据库, 储存很多信息, 通过多表, 实现数据的总览, 细分, 结构化, 减少冗余. 但又要通过一定的关系将表联系起来, 便于查询分析.</p>
<h3 id="1-2-多表关联"><a href="#1-2-多表关联" class="headerlink" title="1.2, 多表关联"></a>1.2, 多表关联</h3><h4 id="通过-id-关联"><a href="#通过-id-关联" class="headerlink" title="通过 id 关联"></a>通过 id 关联</h4><p>灵活, 高并发. 但数据完整性很难保证, 需要代码确保数据完整性, 加大代码量.</p>
<h4 id="通过外键关联"><a href="#通过外键关联" class="headerlink" title="通过外键关联"></a>通过外键关联</h4><p>a, 准备数据:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">%%sql</span><br><span class="line">create table dept(</span><br><span class="line">    deptno <span class="built_in">int</span> primary key comment <span class="string">&quot;部门编号&quot;</span>,</span><br><span class="line">    name varchar(<span class="number">20</span>) comment <span class="string">&quot;部门名称&quot;</span>,</span><br><span class="line">    loc varchar(<span class="number">40</span>) comment <span class="string">&quot;所在城市&quot;</span></span><br><span class="line">) charset=utf8;</span><br><span class="line"></span><br><span class="line">insert into dept values</span><br><span class="line">    (<span class="number">10</span>, <span class="string">&quot;accounting&quot;</span>, <span class="string">&quot;new_york&quot;</span>),</span><br><span class="line">    (<span class="number">20</span>, <span class="string">&quot;research&quot;</span>, <span class="string">&quot;dalas&quot;</span>),</span><br><span class="line">    (<span class="number">30</span>, <span class="string">&quot;sales&quot;</span>, <span class="string">&quot;beijing&quot;</span>),</span><br><span class="line">    (<span class="number">40</span>, <span class="string">&quot;financial&quot;</span>, <span class="string">&quot;shanghai&quot;</span>);</span><br><span class="line"></span><br><span class="line">select * <span class="keyword">from</span> dept;</span><br></pre></td></tr></table></figure>

<pre><code> * mysql+pymysql://root:***@localhost/test
0 rows affected.
4 rows affected.
4 rows affected.</code></pre>
<table>
    <tr>
        <th>deptno</th>
        <th>name</th>
        <th>loc</th>
    </tr>
    <tr>
        <td>10</td>
        <td>accounting</td>
        <td>new_york</td>
    </tr>
    <tr>
        <td>20</td>
        <td>research</td>
        <td>dalas</td>
    </tr>
    <tr>
        <td>30</td>
        <td>sales</td>
        <td>beijing</td>
    </tr>
    <tr>
        <td>40</td>
        <td>financial</td>
        <td>shanghai</td>
    </tr>
</table>



<br>

<p>b, 设置外键(父表需要先有主键)</p>
<p>第一种方法, 建表时在字段后指定外键:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">constraint 外键名 foreign key(字段) references 父表名(字段) on delete <span class="built_in">set</span> null on update <span class="built_in">set</span> null</span><br></pre></td></tr></table></figure>

<p>第二种方法, 建表后再添加:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">alter table 子表名 add constraint 外键名 foreign key(字段) references 父表名(字段) on delete <span class="built_in">set</span> null on update <span class="built_in">set</span> null;</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">%%sql</span><br><span class="line">alter table employee add constraint em_fk foreign key(deptno) references dept(deptno) on delete <span class="built_in">set</span> null on update <span class="built_in">set</span> null;</span><br></pre></td></tr></table></figure>

<pre><code> * mysql+pymysql://root:***@localhost/test
14 rows affected.

[]</code></pre>
<br>

<p>c, 外键的几种模式</p>
<p>如果子表试图创建一个在父表中不存在的外键值，InnoDB 会拒绝任何 INSERT 或 UPDATE 操作. 如果父表试图 UPDATE 或者 DELETE 任何子表中存在或匹配的外键值，最终动作取决于外键约束定义中的 ON UPDATE 和 ON DELETE 选项. 如果没有指定 ON DELETE 或者 ON UPDATE，默认的动作为 RESTRICT.</p>
<ul>
<li><p><code>set null</code> 从父表中删除或更新对应的行，同时将子表中的匹配外键列设为空. 注意，这些在外键列没有被设为 NOT NULL 时才有效.</p>
</li>
<li><p><code>cascade</code> 从父表中删除或更新对应的行，同时自动的删除或更新子表中匹配的行.</p>
</li>
<li><p><code>restrict</code> 和 <code>no action</code>, 如果子表中有匹配的记录, 拒绝删除或者更新父表.</p>
</li>
</ul>
<p>多表关联必须保证数据一致性, 并发要求不高, 优先选外键, 数据量过大(百万以上)用外键.</p>
<br>

<h3 id="1-3-并集-union"><a href="#1-3-并集-union" class="headerlink" title="1.3, 并集(union)"></a>1.3, 并集(union)</h3><p>用于把来自多个 select 语句的结果组合到一个结果中, 也叫联合查询.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">select ...</span><br><span class="line">union [<span class="built_in">all</span> | distinct]</span><br><span class="line">select ...</span><br><span class="line">[union [<span class="built_in">all</span> | distinct]</span><br><span class="line">select ...];</span><br></pre></td></tr></table></figure>

<p>在多个 select 语句中, 第一个 select 语句中被使用的字段名将被用做结果的字段名.</p>
<p>使用union 时, 会删除重复记录, 而 union all 会保留所有记录, 且效率高于 union.</p>
<p>只要求每个 select 查询的字段数量一样, 类型无关.</p>
<p>当使用 order by 时, 需要对 select 语句添加括号, 且与 limit 结合才生效.</p>
<p>准备数据:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">%%sql</span><br><span class="line">create table student (</span><br><span class="line">    <span class="built_in">id</span> <span class="built_in">int</span>(<span class="number">11</span>),</span><br><span class="line">    name varchar(<span class="number">10</span>),</span><br><span class="line">    age tinyint(<span class="number">4</span>),</span><br><span class="line">    classID <span class="built_in">int</span>(<span class="number">11</span>),</span><br><span class="line">    primary key(<span class="built_in">id</span>)</span><br><span class="line">) charset=utf8;</span><br><span class="line"></span><br><span class="line">insert into student values </span><br><span class="line">    (<span class="number">1</span>, <span class="string">&#x27;s1&#x27;</span>, <span class="number">20</span>, <span class="number">1</span>),</span><br><span class="line">    (<span class="number">2</span>, <span class="string">&#x27;s4&#x27;</span>, <span class="number">22</span>, <span class="number">1</span>),</span><br><span class="line">    (<span class="number">3</span>, <span class="string">&#x27;s5&#x27;</span>, <span class="number">22</span>, <span class="number">3</span>),</span><br><span class="line">    (<span class="number">4</span>, <span class="string">&#x27;s7&#x27;</span>, <span class="number">25</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">select * <span class="keyword">from</span> student;</span><br></pre></td></tr></table></figure>

<pre><code> * mysql+pymysql://root:***@localhost/test
0 rows affected.
4 rows affected.
4 rows affected.</code></pre>
<table>
    <tr>
        <th>id</th>
        <th>name</th>
        <th>age</th>
        <th>classID</th>
    </tr>
    <tr>
        <td>1</td>
        <td>s1</td>
        <td>20</td>
        <td>1</td>
    </tr>
    <tr>
        <td>2</td>
        <td>s4</td>
        <td>22</td>
        <td>1</td>
    </tr>
    <tr>
        <td>3</td>
        <td>s5</td>
        <td>22</td>
        <td>3</td>
    </tr>
    <tr>
        <td>4</td>
        <td>s7</td>
        <td>25</td>
        <td>2</td>
    </tr>
</table>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">%%sql    </span><br><span class="line">create table teacher (</span><br><span class="line">    <span class="built_in">id</span> <span class="built_in">int</span>(<span class="number">11</span>),</span><br><span class="line">    name varchar(<span class="number">4</span>),</span><br><span class="line">    age tinyint(<span class="number">4</span>),</span><br><span class="line">    primary key(<span class="built_in">id</span>)</span><br><span class="line">) charset=utf8;</span><br><span class="line"></span><br><span class="line">insert into teacher values</span><br><span class="line">    (<span class="number">1</span>, <span class="string">&#x27;t1&#x27;</span>, <span class="number">36</span>),</span><br><span class="line">    (<span class="number">2</span>, <span class="string">&#x27;t2&#x27;</span>, <span class="number">33</span>),</span><br><span class="line">    (<span class="number">3</span>, <span class="string">&#x27;t3&#x27;</span>, <span class="number">30</span>);</span><br><span class="line">    </span><br><span class="line">select * <span class="keyword">from</span> teacher;</span><br></pre></td></tr></table></figure>

<pre><code> * mysql+pymysql://root:***@localhost/test
0 rows affected.
3 rows affected.
3 rows affected.</code></pre>
<table>
    <tr>
        <th>id</th>
        <th>name</th>
        <th>age</th>
    </tr>
    <tr>
        <td>1</td>
        <td>t1</td>
        <td>36</td>
    </tr>
    <tr>
        <td>2</td>
        <td>t2</td>
        <td>33</td>
    </tr>
    <tr>
        <td>3</td>
        <td>t3</td>
        <td>30</td>
    </tr>
</table>



<br>

<p>student 和 teacher 并集:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">%%sql</span><br><span class="line">select <span class="built_in">id</span>, name, age <span class="keyword">from</span> student</span><br><span class="line">union <span class="built_in">all</span></span><br><span class="line">select age, <span class="built_in">id</span>, name <span class="keyword">from</span> teacher;</span><br></pre></td></tr></table></figure>

<pre><code> * mysql+pymysql://root:***@localhost/test
7 rows affected.</code></pre>
<table>
    <tr>
        <th>id</th>
        <th>name</th>
        <th>age</th>
    </tr>
    <tr>
        <td>1</td>
        <td>s1</td>
        <td>20</td>
    </tr>
    <tr>
        <td>2</td>
        <td>s4</td>
        <td>22</td>
    </tr>
    <tr>
        <td>3</td>
        <td>s5</td>
        <td>22</td>
    </tr>
    <tr>
        <td>4</td>
        <td>s7</td>
        <td>25</td>
    </tr>
    <tr>
        <td>36</td>
        <td>1</td>
        <td>t1</td>
    </tr>
    <tr>
        <td>33</td>
        <td>2</td>
        <td>t2</td>
    </tr>
    <tr>
        <td>30</td>
        <td>3</td>
        <td>t3</td>
    </tr>
</table>



<br>

<h3 id="1-4-笛卡尔积"><a href="#1-4-笛卡尔积" class="headerlink" title="1.4, 笛卡尔积"></a>1.4, 笛卡尔积</h3><p>多表查询的笛卡尔积: 表一中的每一条记录, 与表二中的所有记录匹配完.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">%%sql</span><br><span class="line">select * <span class="keyword">from</span> student, teacher;</span><br></pre></td></tr></table></figure>

<pre><code> * mysql+pymysql://root:***@localhost/test
12 rows affected.</code></pre>
<table>
    <tr>
        <th>id</th>
        <th>name</th>
        <th>age</th>
        <th>classID</th>
        <th>id_1</th>
        <th>name_1</th>
        <th>age_1</th>
    </tr>
    <tr>
        <td>1</td>
        <td>s1</td>
        <td>20</td>
        <td>1</td>
        <td>1</td>
        <td>t1</td>
        <td>36</td>
    </tr>
    <tr>
        <td>1</td>
        <td>s1</td>
        <td>20</td>
        <td>1</td>
        <td>2</td>
        <td>t2</td>
        <td>33</td>
    </tr>
    <tr>
        <td>1</td>
        <td>s1</td>
        <td>20</td>
        <td>1</td>
        <td>3</td>
        <td>t3</td>
        <td>30</td>
    </tr>
    <tr>
        <td>2</td>
        <td>s4</td>
        <td>22</td>
        <td>1</td>
        <td>1</td>
        <td>t1</td>
        <td>36</td>
    </tr>
    <tr>
        <td>2</td>
        <td>s4</td>
        <td>22</td>
        <td>1</td>
        <td>2</td>
        <td>t2</td>
        <td>33</td>
    </tr>
    <tr>
        <td>2</td>
        <td>s4</td>
        <td>22</td>
        <td>1</td>
        <td>3</td>
        <td>t3</td>
        <td>30</td>
    </tr>
    <tr>
        <td>3</td>
        <td>s5</td>
        <td>22</td>
        <td>3</td>
        <td>1</td>
        <td>t1</td>
        <td>36</td>
    </tr>
    <tr>
        <td>3</td>
        <td>s5</td>
        <td>22</td>
        <td>3</td>
        <td>2</td>
        <td>t2</td>
        <td>33</td>
    </tr>
    <tr>
        <td>3</td>
        <td>s5</td>
        <td>22</td>
        <td>3</td>
        <td>3</td>
        <td>t3</td>
        <td>30</td>
    </tr>
    <tr>
        <td>4</td>
        <td>s7</td>
        <td>25</td>
        <td>2</td>
        <td>1</td>
        <td>t1</td>
        <td>36</td>
    </tr>
    <tr>
        <td>4</td>
        <td>s7</td>
        <td>25</td>
        <td>2</td>
        <td>2</td>
        <td>t2</td>
        <td>33</td>
    </tr>
    <tr>
        <td>4</td>
        <td>s7</td>
        <td>25</td>
        <td>2</td>
        <td>3</td>
        <td>t3</td>
        <td>30</td>
    </tr>
</table>



<p>一般先确定要用到哪些表, 再进行笛卡儿积, 然后去除不符合逻辑的数据, 最后加上条件查询.</p>
<br>

<h3 id="1-5-内连接"><a href="#1-5-内连接" class="headerlink" title="1.5, 内连接"></a>1.5, 内连接</h3><p>在表关系的笛卡尔积数据中, 保留匹配的数据记录, 舍弃不匹配的.</p>
<p>语句:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">select 字段<span class="number">1</span>, ... 字段n <span class="keyword">from</span> 表<span class="number">1</span> inner join 表<span class="number">2</span> on 条件 ... inner join 表n on 条件;</span><br><span class="line"><span class="comment"># inner 可以省略</span></span><br></pre></td></tr></table></figure>

<p>查询两个表部门相同的人:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">%%sql</span><br><span class="line">select dept.deptno, employee.name, dept.name </span><br><span class="line"><span class="keyword">from</span> employee join dept </span><br><span class="line">    on employee.deptno = dept.deptno;</span><br></pre></td></tr></table></figure>

<pre><code> * mysql+pymysql://root:***@localhost/test
14 rows affected.</code></pre>
<table>
    <tr>
        <th>deptno</th>
        <th>name</th>
        <th>name_1</th>
    </tr>
    <tr>
        <td>10</td>
        <td>clark</td>
        <td>accounting</td>
    </tr>
    <tr>
        <td>10</td>
        <td>king</td>
        <td>accounting</td>
    </tr>
    <tr>
        <td>10</td>
        <td>miller</td>
        <td>accounting</td>
    </tr>
    <tr>
        <td>20</td>
        <td>smith</td>
        <td>research</td>
    </tr>
    <tr>
        <td>20</td>
        <td>jones</td>
        <td>research</td>
    </tr>
    <tr>
        <td>20</td>
        <td>scott</td>
        <td>research</td>
    </tr>
    <tr>
        <td>20</td>
        <td>adams</td>
        <td>research</td>
    </tr>
    <tr>
        <td>20</td>
        <td>ford</td>
        <td>research</td>
    </tr>
    <tr>
        <td>30</td>
        <td>allen</td>
        <td>sales</td>
    </tr>
    <tr>
        <td>30</td>
        <td>ward</td>
        <td>sales</td>
    </tr>
    <tr>
        <td>30</td>
        <td>martin</td>
        <td>sales</td>
    </tr>
    <tr>
        <td>30</td>
        <td>blake</td>
        <td>sales</td>
    </tr>
    <tr>
        <td>30</td>
        <td>turner</td>
        <td>sales</td>
    </tr>
    <tr>
        <td>30</td>
        <td>james</td>
        <td>sales</td>
    </tr>
</table>



<p>字段名相同, 可以将 on 语句换成 using(depton).</p>
<br>

<p>查询同一张表的员工上下级关系(后者是前者的上级):</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">%%sql</span><br><span class="line">select f.no, f.mgr, j.mgr </span><br><span class="line"><span class="keyword">from</span> employee f, employee j </span><br><span class="line">    where f.mgr=j.no;</span><br></pre></td></tr></table></figure>

<pre><code> * mysql+pymysql://root:***@localhost/test
13 rows affected.</code></pre>
<table>
    <tr>
        <th>no</th>
        <th>mgr</th>
        <th>mgr_1</th>
    </tr>
    <tr>
        <td>7788</td>
        <td>7566</td>
        <td>7839</td>
    </tr>
    <tr>
        <td>7902</td>
        <td>7566</td>
        <td>7839</td>
    </tr>
    <tr>
        <td>7499</td>
        <td>7698</td>
        <td>7839</td>
    </tr>
    <tr>
        <td>7521</td>
        <td>7698</td>
        <td>7839</td>
    </tr>
    <tr>
        <td>7654</td>
        <td>7698</td>
        <td>7839</td>
    </tr>
    <tr>
        <td>7844</td>
        <td>7698</td>
        <td>7839</td>
    </tr>
    <tr>
        <td>7900</td>
        <td>7698</td>
        <td>7839</td>
    </tr>
    <tr>
        <td>7934</td>
        <td>7782</td>
        <td>7839</td>
    </tr>
    <tr>
        <td>7876</td>
        <td>7788</td>
        <td>7566</td>
    </tr>
    <tr>
        <td>7566</td>
        <td>7839</td>
        <td>None</td>
    </tr>
    <tr>
        <td>7698</td>
        <td>7839</td>
        <td>None</td>
    </tr>
    <tr>
        <td>7782</td>
        <td>7839</td>
        <td>None</td>
    </tr>
    <tr>
        <td>7369</td>
        <td>7902</td>
        <td>7566</td>
    </tr>
</table>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">%%sql</span><br><span class="line">select f.no, f.mgr, j.mgr </span><br><span class="line"><span class="keyword">from</span> employee f join employee j </span><br><span class="line">    on f.mgr=j.no;</span><br></pre></td></tr></table></figure>

<pre><code> * mysql+pymysql://root:***@localhost/test
13 rows affected.</code></pre>
<table>
    <tr>
        <th>no</th>
        <th>mgr</th>
        <th>mgr_1</th>
    </tr>
    <tr>
        <td>7788</td>
        <td>7566</td>
        <td>7839</td>
    </tr>
    <tr>
        <td>7902</td>
        <td>7566</td>
        <td>7839</td>
    </tr>
    <tr>
        <td>7499</td>
        <td>7698</td>
        <td>7839</td>
    </tr>
    <tr>
        <td>7521</td>
        <td>7698</td>
        <td>7839</td>
    </tr>
    <tr>
        <td>7654</td>
        <td>7698</td>
        <td>7839</td>
    </tr>
    <tr>
        <td>7844</td>
        <td>7698</td>
        <td>7839</td>
    </tr>
    <tr>
        <td>7900</td>
        <td>7698</td>
        <td>7839</td>
    </tr>
    <tr>
        <td>7934</td>
        <td>7782</td>
        <td>7839</td>
    </tr>
    <tr>
        <td>7876</td>
        <td>7788</td>
        <td>7566</td>
    </tr>
    <tr>
        <td>7566</td>
        <td>7839</td>
        <td>None</td>
    </tr>
    <tr>
        <td>7698</td>
        <td>7839</td>
        <td>None</td>
    </tr>
    <tr>
        <td>7782</td>
        <td>7839</td>
        <td>None</td>
    </tr>
    <tr>
        <td>7369</td>
        <td>7902</td>
        <td>7566</td>
    </tr>
</table>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">%%sql</span><br><span class="line">select f.no, f.mgr, j.mgr, k.mgr </span><br><span class="line"><span class="keyword">from</span> employee f join employee j on f.mgr = j.no</span><br><span class="line">    join employee k on j.mgr = k.no;</span><br></pre></td></tr></table></figure>

<pre><code> * mysql+pymysql://root:***@localhost/test
10 rows affected.</code></pre>
<table>
    <tr>
        <th>no</th>
        <th>mgr</th>
        <th>mgr_1</th>
        <th>mgr_2</th>
    </tr>
    <tr>
        <td>7876</td>
        <td>7788</td>
        <td>7566</td>
        <td>7839</td>
    </tr>
    <tr>
        <td>7369</td>
        <td>7902</td>
        <td>7566</td>
        <td>7839</td>
    </tr>
    <tr>
        <td>7788</td>
        <td>7566</td>
        <td>7839</td>
        <td>None</td>
    </tr>
    <tr>
        <td>7902</td>
        <td>7566</td>
        <td>7839</td>
        <td>None</td>
    </tr>
    <tr>
        <td>7499</td>
        <td>7698</td>
        <td>7839</td>
        <td>None</td>
    </tr>
    <tr>
        <td>7521</td>
        <td>7698</td>
        <td>7839</td>
        <td>None</td>
    </tr>
    <tr>
        <td>7654</td>
        <td>7698</td>
        <td>7839</td>
        <td>None</td>
    </tr>
    <tr>
        <td>7844</td>
        <td>7698</td>
        <td>7839</td>
        <td>None</td>
    </tr>
    <tr>
        <td>7900</td>
        <td>7698</td>
        <td>7839</td>
        <td>None</td>
    </tr>
    <tr>
        <td>7934</td>
        <td>7782</td>
        <td>7839</td>
        <td>None</td>
    </tr>
</table>



<br>

<h3 id="1-6-外连接"><a href="#1-6-外连接" class="headerlink" title="1.6, 外连接"></a>1.6, 外连接</h3><p>外连接分 左连接 和 右连接:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">select 字段<span class="number">1</span>, ... 字段n <span class="keyword">from</span> 表<span class="number">1</span> [left|right] [outer] join 表<span class="number">2</span> on 条件;</span><br><span class="line"><span class="comment"># outer 可以省略</span></span><br></pre></td></tr></table></figure>

<p>左连接查看员工所在的部门和城市:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">%%sql</span><br><span class="line">select e.name, d.name <span class="string">&#x27;部门&#x27;</span>, d.loc </span><br><span class="line"><span class="keyword">from</span> employee e left join dept d </span><br><span class="line">    using(deptno);</span><br></pre></td></tr></table></figure>

<pre><code> * mysql+pymysql://root:***@localhost/test
14 rows affected.</code></pre>
<table>
    <tr>
        <th>name</th>
        <th>部门</th>
        <th>loc</th>
    </tr>
    <tr>
        <td>clark</td>
        <td>accounting</td>
        <td>new_york</td>
    </tr>
    <tr>
        <td>king</td>
        <td>accounting</td>
        <td>new_york</td>
    </tr>
    <tr>
        <td>miller</td>
        <td>accounting</td>
        <td>new_york</td>
    </tr>
    <tr>
        <td>smith</td>
        <td>research</td>
        <td>dalas</td>
    </tr>
    <tr>
        <td>jones</td>
        <td>research</td>
        <td>dalas</td>
    </tr>
    <tr>
        <td>scott</td>
        <td>research</td>
        <td>dalas</td>
    </tr>
    <tr>
        <td>adams</td>
        <td>research</td>
        <td>dalas</td>
    </tr>
    <tr>
        <td>ford</td>
        <td>research</td>
        <td>dalas</td>
    </tr>
    <tr>
        <td>allen</td>
        <td>sales</td>
        <td>beijing</td>
    </tr>
    <tr>
        <td>ward</td>
        <td>sales</td>
        <td>beijing</td>
    </tr>
    <tr>
        <td>martin</td>
        <td>sales</td>
        <td>beijing</td>
    </tr>
    <tr>
        <td>blake</td>
        <td>sales</td>
        <td>beijing</td>
    </tr>
    <tr>
        <td>turner</td>
        <td>sales</td>
        <td>beijing</td>
    </tr>
    <tr>
        <td>james</td>
        <td>sales</td>
        <td>beijing</td>
    </tr>
</table>



<br>

<p>右连接以右边的表来匹配下属:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">%%sql</span><br><span class="line">select f.no, f.mgr, j.mgr </span><br><span class="line"><span class="keyword">from</span> employee f right join employee j </span><br><span class="line">    on f.mgr = j.no;</span><br></pre></td></tr></table></figure>

<pre><code> * mysql+pymysql://root:***@localhost/test
21 rows affected.</code></pre>
<table>
    <tr>
        <th>no</th>
        <th>mgr</th>
        <th>mgr_1</th>
    </tr>
    <tr>
        <td>7369</td>
        <td>7902</td>
        <td>7566</td>
    </tr>
    <tr>
        <td>7499</td>
        <td>7698</td>
        <td>7839</td>
    </tr>
    <tr>
        <td>7521</td>
        <td>7698</td>
        <td>7839</td>
    </tr>
    <tr>
        <td>7566</td>
        <td>7839</td>
        <td>None</td>
    </tr>
    <tr>
        <td>7654</td>
        <td>7698</td>
        <td>7839</td>
    </tr>
    <tr>
        <td>7698</td>
        <td>7839</td>
        <td>None</td>
    </tr>
    <tr>
        <td>7782</td>
        <td>7839</td>
        <td>None</td>
    </tr>
    <tr>
        <td>7788</td>
        <td>7566</td>
        <td>7839</td>
    </tr>
    <tr>
        <td>7844</td>
        <td>7698</td>
        <td>7839</td>
    </tr>
    <tr>
        <td>7876</td>
        <td>7788</td>
        <td>7566</td>
    </tr>
    <tr>
        <td>7900</td>
        <td>7698</td>
        <td>7839</td>
    </tr>
    <tr>
        <td>7902</td>
        <td>7566</td>
        <td>7839</td>
    </tr>
    <tr>
        <td>7934</td>
        <td>7782</td>
        <td>7839</td>
    </tr>
    <tr>
        <td>None</td>
        <td>None</td>
        <td>7902</td>
    </tr>
    <tr>
        <td>None</td>
        <td>None</td>
        <td>7698</td>
    </tr>
    <tr>
        <td>None</td>
        <td>None</td>
        <td>7698</td>
    </tr>
    <tr>
        <td>None</td>
        <td>None</td>
        <td>7698</td>
    </tr>
    <tr>
        <td>None</td>
        <td>None</td>
        <td>7698</td>
    </tr>
    <tr>
        <td>None</td>
        <td>None</td>
        <td>7788</td>
    </tr>
    <tr>
        <td>None</td>
        <td>None</td>
        <td>7698</td>
    </tr>
    <tr>
        <td>None</td>
        <td>None</td>
        <td>7782</td>
    </tr>
</table>



<br>

<h3 id="1-7-join连接图解"><a href="#1-7-join连接图解" class="headerlink" title="1.7, join连接图解"></a>1.7, join连接图解</h3><p><img src="/images/join.jpg"></p>
<p>对于所有连接类型而言, 就是将符合 on 后条件匹配的对应组合都放到结果中, 可能存在 一对多 或 多对一 的情况, 则在结果中形成多条记录.</p>
<p>内连接查询到的是 on 条件匹配的两个表中都存在的记录.</p>
<br>

<h3 id="1-8-子查询"><a href="#1-8-子查询" class="headerlink" title="1.8, 子查询"></a>1.8, 子查询</h3><p>select 语句嵌套在另一个 SQL 语句中, 那么该 select 语句称为子查询, 用 () 包围.</p>
<h4 id="单行单列和单行多列子查询"><a href="#单行单列和单行多列子查询" class="headerlink" title="单行单列和单行多列子查询"></a>单行单列和单行多列子查询</h4><p>当子查询返回的结果为单行单列时, 通常包含运算符.</p>
<p>单行单列子查询, 查询工资比 Smith 高的雇员:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">%%sql</span><br><span class="line">select name <span class="keyword">from</span> employee where sal &gt; (</span><br><span class="line">    select sal <span class="keyword">from</span> employee where name = <span class="string">&#x27;smith&#x27;</span>);</span><br></pre></td></tr></table></figure>

<pre><code> * mysql+pymysql://root:***@localhost/test
13 rows affected.</code></pre>
<table>
    <tr>
        <th>name</th>
    </tr>
    <tr>
        <td>allen</td>
    </tr>
    <tr>
        <td>ward</td>
    </tr>
    <tr>
        <td>jones</td>
    </tr>
    <tr>
        <td>martin</td>
    </tr>
    <tr>
        <td>blake</td>
    </tr>
    <tr>
        <td>clark</td>
    </tr>
    <tr>
        <td>scott</td>
    </tr>
    <tr>
        <td>king</td>
    </tr>
    <tr>
        <td>turner</td>
    </tr>
    <tr>
        <td>adams</td>
    </tr>
    <tr>
        <td>james</td>
    </tr>
    <tr>
        <td>ford</td>
    </tr>
    <tr>
        <td>miller</td>
    </tr>
</table>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">单行多列子查询, 查询工资和职位与 ward 一样的雇员:</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">%%sql</span><br><span class="line">select name, sal, job <span class="keyword">from</span> employee where (sal, job) = (</span><br><span class="line">    select sal, job <span class="keyword">from</span> employee where name = <span class="string">&#x27;ward&#x27;</span>);</span><br></pre></td></tr></table></figure>

<pre><code> * mysql+pymysql://root:***@localhost/test
2 rows affected.</code></pre>
<table>
    <tr>
        <th>name</th>
        <th>sal</th>
        <th>job</th>
    </tr>
    <tr>
        <td>ward</td>
        <td>1250.0</td>
        <td>salesman</td>
    </tr>
    <tr>
        <td>martin</td>
        <td>1250.0</td>
        <td>salesman</td>
    </tr>
</table>



<br>

<h4 id="多行单列子查询"><a href="#多行单列子查询" class="headerlink" title="多行单列子查询"></a>多行单列子查询</h4><p>当查询结果为多行单列, 通常包含 in, any, all, exists 等关键字.</p>
<p><code>in</code> 关键字, 主查询的条件为: 判断是否在子查询的结果中, 子查询只能有一个字段, <code>in</code> 把内外表作了hash 连接. </p>
<p>查询部门编号是 30 的雇员:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">%%sql</span><br><span class="line">select name, deptno <span class="keyword">from</span> employee where deptno <span class="keyword">not</span> <span class="keyword">in</span> (</span><br><span class="line">    select deptno <span class="keyword">from</span> dept where deptno != <span class="number">30</span>);</span><br></pre></td></tr></table></figure>

<pre><code> * mysql+pymysql://root:***@localhost/test
6 rows affected.</code></pre>
<table>
    <tr>
        <th>name</th>
        <th>deptno</th>
    </tr>
    <tr>
        <td>allen</td>
        <td>30</td>
    </tr>
    <tr>
        <td>ward</td>
        <td>30</td>
    </tr>
    <tr>
        <td>martin</td>
        <td>30</td>
    </tr>
    <tr>
        <td>blake</td>
        <td>30</td>
    </tr>
    <tr>
        <td>turner</td>
        <td>30</td>
    </tr>
    <tr>
        <td>james</td>
        <td>30</td>
    </tr>
</table>



<p><code>any</code> 关键字, 主查询的条件为: 和任意子查询结果比较. <code>= any</code>, 和 <code>in</code> 一样, <code>&gt; any</code>, 比子查询结果中最小的大, <code>&lt; any</code>, 比子查询结果中最大的小.</p>
<p>查询工资比职位 manager 最低工资高的所有雇员及其工资:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">%%sql</span><br><span class="line">select name, sal <span class="keyword">from</span> employee where sal &gt; <span class="built_in">any</span> (</span><br><span class="line">    select sal <span class="keyword">from</span> employee where job = <span class="string">&#x27;manager&#x27;</span>);</span><br></pre></td></tr></table></figure>

<pre><code> * mysql+pymysql://root:***@localhost/test
5 rows affected.</code></pre>
<table>
    <tr>
        <th>name</th>
        <th>sal</th>
    </tr>
    <tr>
        <td>jones</td>
        <td>2975.0</td>
    </tr>
    <tr>
        <td>blake</td>
        <td>2850.0</td>
    </tr>
    <tr>
        <td>scott</td>
        <td>3000.0</td>
    </tr>
    <tr>
        <td>king</td>
        <td>5000.0</td>
    </tr>
    <tr>
        <td>ford</td>
        <td>3000.0</td>
    </tr>
</table>



<p><code>all</code> 关键字, 主查询的条件为: 和所有子查询结果比较.</p>
<p>查询工资高于职位 manager 工资的雇员及工资.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">%%sql</span><br><span class="line">select name, sal <span class="keyword">from</span> employee where sal &gt; <span class="built_in">all</span> (</span><br><span class="line">    select sal <span class="keyword">from</span> employee where job = <span class="string">&#x27;manager&#x27;</span>);</span><br></pre></td></tr></table></figure>

<pre><code> * mysql+pymysql://root:***@localhost/test
3 rows affected.</code></pre>
<table>
    <tr>
        <th>name</th>
        <th>sal</th>
    </tr>
    <tr>
        <td>scott</td>
        <td>3000.0</td>
    </tr>
    <tr>
        <td>king</td>
        <td>5000.0</td>
    </tr>
    <tr>
        <td>ford</td>
        <td>3000.0</td>
    </tr>
</table>



<br>

<h4 id="exists-子查询"><a href="#exists-子查询" class="headerlink" title="exists 子查询"></a>exists 子查询</h4><p><code>exists</code> 关键字, 主查询条件为: 循环外表, 判断是否满足子查询关联结果, <code>exists</code> 前面不能有字段, 而是对外表作 loop 循环, 需要在子查询中 ‘连接’ 外表.</p>
<p>查询所有有员工的部门.<br>需要内表的 deptno 与外表的 deptno ‘连接’, 子查询的字段对最终结果无影响:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">%%sql</span><br><span class="line">select name <span class="string">&#x27;部门&#x27;</span> <span class="keyword">from</span> dept where exists (</span><br><span class="line">    select * <span class="keyword">from</span> employee where deptno = dept.deptno);</span><br></pre></td></tr></table></figure>

<pre><code> * mysql+pymysql://root:***@localhost/test
3 rows affected.</code></pre>
<table>
    <tr>
        <th>部门</th>
    </tr>
    <tr>
        <td>accounting</td>
    </tr>
    <tr>
        <td>research</td>
    </tr>
    <tr>
        <td>sales</td>
    </tr>
</table>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">%%sql</span><br><span class="line">select name <span class="string">&#x27;部门&#x27;</span> <span class="keyword">from</span> dept where exists (</span><br><span class="line">    select deptno <span class="keyword">from</span> employee where deptno = dept.deptno);</span><br></pre></td></tr></table></figure>

<pre><code> * mysql+pymysql://root:***@localhost/test
3 rows affected.</code></pre>
<table>
    <tr>
        <th>部门</th>
    </tr>
    <tr>
        <td>accounting</td>
    </tr>
    <tr>
        <td>research</td>
    </tr>
    <tr>
        <td>sales</td>
    </tr>
</table>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">%%sql</span><br><span class="line">select name <span class="string">&#x27;部门&#x27;</span> <span class="keyword">from</span> dept where exists (</span><br><span class="line">    select loc <span class="keyword">from</span> employee where deptno = dept.deptno);</span><br></pre></td></tr></table></figure>

<pre><code> * mysql+pymysql://root:***@localhost/test
3 rows affected.</code></pre>
<table>
    <tr>
        <th>部门</th>
    </tr>
    <tr>
        <td>accounting</td>
    </tr>
    <tr>
        <td>research</td>
    </tr>
    <tr>
        <td>sales</td>
    </tr>
</table>



<p>内表的 deptno 与外表的 deptno 不’连接’, 则子查询无关联结果, 主查询始终满足条件, 相当于无条件:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">%%sql</span><br><span class="line">select name <span class="string">&#x27;部门&#x27;</span> <span class="keyword">from</span> dept where exists (</span><br><span class="line">    select * <span class="keyword">from</span> employee where deptno != <span class="number">30</span>);</span><br></pre></td></tr></table></figure>

<pre><code> * mysql+pymysql://root:***@localhost/test
4 rows affected.</code></pre>
<table>
    <tr>
        <th>部门</th>
    </tr>
    <tr>
        <td>accounting</td>
    </tr>
    <tr>
        <td>research</td>
    </tr>
    <tr>
        <td>sales</td>
    </tr>
    <tr>
        <td>financial</td>
    </tr>
</table>



<h4 id="多行多列子查询"><a href="#多行多列子查询" class="headerlink" title="多行多列子查询"></a>多行多列子查询</h4><p>子查询一般在主查询的 from 子句中.</p>
<p>查询雇员表中的部门, 部门号, 地址, 人数, 平均工资.<br>子查询方法:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">%%sql</span><br><span class="line">select d.name <span class="string">&#x27;部门&#x27;</span>, </span><br><span class="line">    d.deptno <span class="string">&#x27;部门号&#x27;</span>, </span><br><span class="line">    d.loc <span class="string">&#x27;地址&#x27;</span>, </span><br><span class="line">    num <span class="string">&#x27;人数&#x27;</span>,</span><br><span class="line">    ag <span class="string">&#x27;平均工资&#x27;</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">from</span> dept d inner join (</span><br><span class="line">        select deptno, </span><br><span class="line">            count(no) num, </span><br><span class="line">            avg(sal) ag</span><br><span class="line">        <span class="keyword">from</span> employee</span><br><span class="line">        group by deptno</span><br><span class="line">    ) em_1 on d.deptno = em_1.deptno; </span><br></pre></td></tr></table></figure>

<pre><code> * mysql+pymysql://root:***@localhost/test
3 rows affected.</code></pre>
<table>
    <tr>
        <th>部门</th>
        <th>部门号</th>
        <th>地址</th>
        <th>人数</th>
        <th>平均工资</th>
    </tr>
    <tr>
        <td>accounting</td>
        <td>10</td>
        <td>new_york</td>
        <td>3</td>
        <td>2916.666667</td>
    </tr>
    <tr>
        <td>research</td>
        <td>20</td>
        <td>dalas</td>
        <td>5</td>
        <td>2175.0</td>
    </tr>
    <tr>
        <td>sales</td>
        <td>30</td>
        <td>beijing</td>
        <td>6</td>
        <td>1566.666667</td>
    </tr>
</table>



<p>连接方法:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">%%sql</span><br><span class="line">select d.deptno <span class="string">&#x27;部门号&#x27;</span>,</span><br><span class="line">    d.name <span class="string">&#x27;部门&#x27;</span>,</span><br><span class="line">    d.loc <span class="string">&#x27;地址&#x27;</span>,</span><br><span class="line">    count(e.no) <span class="string">&#x27;人数&#x27;</span>,</span><br><span class="line">    avg(e.sal) <span class="string">&#x27;平均工资&#x27;</span></span><br><span class="line"><span class="keyword">from</span> employee e inner join dept d </span><br><span class="line">    on e.deptno = d.deptno </span><br><span class="line">    group by d.deptno, d.name, d.loc;</span><br></pre></td></tr></table></figure>

<pre><code> * mysql+pymysql://root:***@localhost/test
3 rows affected.</code></pre>
<table>
    <tr>
        <th>部门号</th>
        <th>部门</th>
        <th>地址</th>
        <th>人数</th>
        <th>平均工资</th>
    </tr>
    <tr>
        <td>10</td>
        <td>accounting</td>
        <td>new_york</td>
        <td>3</td>
        <td>2916.666667</td>
    </tr>
    <tr>
        <td>20</td>
        <td>research</td>
        <td>dalas</td>
        <td>5</td>
        <td>2175.0</td>
    </tr>
    <tr>
        <td>30</td>
        <td>sales</td>
        <td>beijing</td>
        <td>6</td>
        <td>1566.666667</td>
    </tr>
</table>
]]></content>
      <categories>
        <category>数据分析</category>
      </categories>
      <tags>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>Mysql 基本介绍和单表操作</title>
    <url>/sql/mysql1-e9ff17e2db5a/</url>
    <content><![CDATA[<blockquote>
<p>内容主要来源：<strong>开课吧</strong>学习笔记整理。</p>
</blockquote>
<p><font color=#00A600 >2020年5月18日更新</font></p>
<h2 id="一-基本介绍"><a href="#一-基本介绍" class="headerlink" title="一, 基本介绍"></a>一, 基本介绍</h2><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p>1, 数据库(database):  </p>
<p>保存有组织的数据的容器（通常是一个文件或一组文件）. 其实我们一直在使用数据库。每当你从电子邮件地址簿里查找名字时，就是在使用数据库。你在网站上进行搜索，也是在使用数据库。你在工作中登录网络，也需要依靠数据库验证用户名和密码。即使是在自动取款机上使用 ATM卡，也要利用数据库进行密码验证和查询余额。</p>
<p>2, MySQL:  </p>
<p>数据库管理系统（DBMS）的一种, 数据库通过 DBMS 创建和操纵容器.</p>
<p>3, SQL:  </p>
<p>结构化查询语言(structured query language), 用来和数据库通信.</p>
<p>4, 表:  </p>
<p>数据库中一种结构化的文件, 相当于 excel 中的一个 sheet.</p>
<p>5, 列:  </p>
<p>表中的一列, 一个字段, 存储某一特定信息, 例如姓名. 每一列有固定的数据类型.</p>
<p>6, 行:  </p>
<p>表中的数据是按行储存的, 一行就是一条完整的数据(记录).</p>
<p>7, 主键:  </p>
<p>为方便数据管理而定义的, 能够唯一标识表中每一行的一列(或几列, 几列时单列可不唯一, 组合必须唯一). 表中任何列都可作为主键, 只要满足:</p>
<p>a, 任意两行都无相同主键;<br>b, 每一行必须有一个非 NULL 值的主键;<br>c, 主键中的值不允许修改或更新;<br>d, 主键值不能重用(某行删除, 它的主键不能赋给新行)</p>
<p>8, MySQL 常用数据类型:  </p>
<p>整数类型: TINYINT, SMALLINT, MEDIUMINT, INT和INTEGER, BIGINT.</p>
<p>浮点类型: FLOAT, DOUBLE, DECIMAL, 位类型: BIT(m), m 范围 1~64.</p>
<p>时间日期型: DATE, DATETIME, TIMESTAMP, TIME, YEAR.</p>
<p>字符串类型: CHAR(m), VARCHAR(m), TINYTEXT, TEXT, MEDIUMTEXT, LONGTEXT.</p>
<h3 id="数据库和表初探"><a href="#数据库和表初探" class="headerlink" title="数据库和表初探"></a>数据库和表初探</h3><p>1, 建库:</p>
<p><code>create database 库名 charset utf8mb4 collate utf8mb4_genneral_ci;</code>,<br><code>charset utf8mb4</code>, 指定编码(可选); <code>collate utf8mb4_genneral_ci</code>, 指定排序规则(可选).</p>
<p>数据库命名规则: 字母, 数字, 下划线, <code>@</code>, <code>#</code>, <code>$</code>组成, 首字母不能是数字和 <code>$</code>, 且不能与 MySQL 保留字相同.</p>
<p>排序规则设置优先级顺序: SQL语句 &gt; 列 &gt; 表 &gt; 库 &gt; 实例.</p>
<p><code>show create database 库名;</code>, 查看建库时使用的语句.</p>
<p>2, 查看, 进入, 删除库: </p>
<p>查看所有数据库: <code>show databases;</code>.</p>
<p>进入数据库: <code>use 库名;</code>.</p>
<p>删除数据库: <code>drop database 库名;</code>.</p>
<p>3, 建表:</p>
<ul>
<li><p>先进入数据库, 再建表:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create table 表名(</span><br><span class="line">    列名1 数据类型, 列属性, ...</span><br><span class="line">    ...</span><br><span class="line">    列名n ...</span><br><span class="line">)表属性, ...;</span><br></pre></td></tr></table></figure>
</li>
<li><p>常见<code>列属性</code>: </p>
<p>null/not null: 空属性.</p>
<p>default: 默认值, 后面跟默认值. </p>
<p>primary key: 主键, 可在列属性设置, 也可在列字段后面加入.</p>
<p>unique key: 唯一键, 保证字段唯一性, 默认自动允许为空, 加入值后必须唯一, 设置唯一键时和主键类似.</p>
<p>auto_increment: 自增, 对应字段不给值, 给默认值或 null 时, 系统从当前字段中已有的<code>最大值+1</code> 进行填充, 通常和主键搭配.</p>
<p>自增的特点: 自身必须是一个索引(设置了key); 通常是整型; 一个表只能有一个自增.</p>
<p>comment: 列描述, 用来描述字段.</p>
</li>
<li><p><code>表属性</code>有引擎, 编码, 排序等.</p>
</li>
<li><p>主键可以建完表后再追加: <code>alter table 表名 add primary key(字段1, ...);</code>, 删除主键: <code>alter talbe 表名 drop primary key;</code>, 只会删除约束, 不会删除列(唯一键同理).</p>
</li>
<li><p>添加自增: <code>alter table 表名 modify 列名 数据类型 auto_increment;</code> 或 <code>alter table 表名 change 列名 列名 数据类型 auto_increment;</code>, 删除自增: <code>alter table 表名 modify 列名 数据类型;</code> 或 <code>alter table 表名 change 列名 列名 数据类型;</code>.</p>
</li>
</ul>
<p>4, 查看, 删除表: </p>
<p>查看所有表: <code>show tables;</code>.</p>
<p>以表格方式查看表: <code>describe 表名;</code> 或 <code>desc 表名;</code>.</p>
<p>查看建表语句: <code>show create table 表名;</code>.</p>
<p>删除表: <code>drop table 表名;</code>.</p>
<p>5, 修改表:</p>
<p>修改表名: <code>alter table 表名 rename 新表名;</code></p>
<p>添加列: <code>alter table 表名 add 列名 数据类型 first;</code>, first 表示放在所有列之前, 默认最后.</p>
<p>删除列: <code>alter table 表名  drop 列名;</code>.</p>
<p>修改列: </p>
<ul>
<li>修改列类型: <code>alter table 表名 modify 列名 新数据类型;</code>.</li>
<li>修改列名同时修改数据类型: <code>alter table 表名 change 列名 新列名 新数据类型;</code>.</li>
</ul>
<br>


<h2 id="二-单表基础操作"><a href="#二-单表基础操作" class="headerlink" title="二, 单表基础操作"></a>二, 单表基础操作</h2><h3 id="1-准备数据"><a href="#1-准备数据" class="headerlink" title="1, 准备数据"></a>1, 准备数据</h3><p>新建一个存储用户信息的表 <code>user</code>, (jupyter 里面连接的 sql , 忽略 <code>%%sql</code> 和 <code>* mysql+pymysql://root:***@localhost/test</code>.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">%%sql</span><br><span class="line">create table user(</span><br><span class="line">    <span class="built_in">id</span> <span class="built_in">int</span> primary key comment <span class="string">&#x27;用户id&#x27;</span>,</span><br><span class="line">    name varchar(<span class="number">10</span>) <span class="keyword">not</span> null comment <span class="string">&#x27;名字&#x27;</span>,</span><br><span class="line">    age <span class="built_in">int</span> default <span class="number">18</span>,</span><br><span class="line">    birthday date</span><br><span class="line">)charset utf8mb4;</span><br><span class="line"></span><br><span class="line">desc user;  <span class="comment"># 查看表</span></span><br></pre></td></tr></table></figure>

<pre><code> * mysql+pymysql://root:***@localhost/test
0 rows affected.
4 rows affected.</code></pre>
<table>
    <tr>
        <th>Field</th>
        <th>Type</th>
        <th>Null</th>
        <th>Key</th>
        <th>Default</th>
        <th>Extra</th>
    </tr>
    <tr>
        <td>id</td>
        <td>int(11)</td>
        <td>NO</td>
        <td>PRI</td>
        <td>None</td>
        <td></td>
    </tr>
    <tr>
        <td>name</td>
        <td>varchar(10)</td>
        <td>NO</td>
        <td></td>
        <td>None</td>
        <td></td>
    </tr>
    <tr>
        <td>age</td>
        <td>int(11)</td>
        <td>YES</td>
        <td></td>
        <td>18</td>
        <td></td>
    </tr>
    <tr>
        <td>birthday</td>
        <td>date</td>
        <td>YES</td>
        <td></td>
        <td>None</td>
        <td></td>
    </tr>
</table>



<h3 id="2-插入数据"><a href="#2-插入数据" class="headerlink" title="2, 插入数据"></a>2, 插入数据</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">insert into 表名(字段<span class="number">1</span>, 字段<span class="number">2</span>, ...) values</span><br><span class="line">(值<span class="number">1</span>, 值<span class="number">2</span>, ...)</span><br><span class="line">(值<span class="number">1</span>, 值<span class="number">2</span>, ...)</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<p>规则:  </p>
<p><code>字段</code>和<code>值</code>数量一样且对应;  </p>
<p>每个字段的类型和属性决定插入的值, 例如主键必须有, 且不能重复;</p>
<p>字符数不能超过建表时设置的类型数量限制;  </p>
<p>可以省略字段.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">%%sql</span><br><span class="line">insert into user(<span class="built_in">id</span>, name, birthday) values(<span class="number">1</span>, <span class="string">&#x27;bill1&#x27;</span>, <span class="string">&#x27;2020-05-13&#x27;</span>);</span><br><span class="line"></span><br><span class="line">select * <span class="keyword">from</span> user;    <span class="comment"># 查看结果</span></span><br></pre></td></tr></table></figure>

<pre><code> * mysql+pymysql://root:***@localhost/test
1 rows affected.</code></pre>
<table>
    <tr>
        <th>id</th>
        <th>name</th>
        <th>age</th>
        <th>birthday</th>
    </tr>
    <tr>
        <td>1</td>
        <td>bill1</td>
        <td>18</td>
        <td>2020-05-13</td>
    </tr>
</table>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">%%sql</span><br><span class="line">alter table user modify <span class="built_in">id</span> <span class="built_in">int</span> auto_increment;  <span class="comment"># 设置主键 id 自增</span></span><br><span class="line">insert into user(name) values(<span class="string">&#x27;bill2&#x27;</span>), (<span class="string">&#x27;bill3&#x27;</span>);</span><br><span class="line"></span><br><span class="line">select * <span class="keyword">from</span> user;</span><br></pre></td></tr></table></figure>

<pre><code> * mysql+pymysql://root:***@localhost/test
3 rows affected.</code></pre>
<table>
    <tr>
        <th>id</th>
        <th>name</th>
        <th>age</th>
        <th>birthday</th>
    </tr>
    <tr>
        <td>1</td>
        <td>bill1</td>
        <td>18</td>
        <td>2020-05-13</td>
    </tr>
    <tr>
        <td>2</td>
        <td>bill2</td>
        <td>18</td>
        <td>None</td>
    </tr>
    <tr>
        <td>3</td>
        <td>bill3</td>
        <td>18</td>
        <td>None</td>
    </tr>
</table>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">%%sql</span><br><span class="line">insert into user values</span><br><span class="line">(<span class="number">4</span>, <span class="string">&#x27;bill4&#x27;</span>, <span class="number">23</span>, <span class="string">&#x27;2020-05-16&#x27;</span>),</span><br><span class="line">(<span class="number">5</span>, <span class="string">&#x27;bill5&#x27;</span>, <span class="number">23</span>, <span class="string">&#x27;2020-05-16&#x27;</span>),</span><br><span class="line">(<span class="number">6</span>, <span class="string">&#x27;bill6&#x27;</span>, <span class="number">23</span>, <span class="string">&#x27;2020-05-16&#x27;</span>);</span><br><span class="line"></span><br><span class="line">select * <span class="keyword">from</span> user;</span><br></pre></td></tr></table></figure>

<pre><code> * mysql+pymysql://root:***@localhost/test
6 rows affected.</code></pre>
<table>
    <tr>
        <th>id</th>
        <th>name</th>
        <th>age</th>
        <th>birthday</th>
    </tr>
    <tr>
        <td>1</td>
        <td>bill1</td>
        <td>18</td>
        <td>2020-05-13</td>
    </tr>
    <tr>
        <td>2</td>
        <td>bill2</td>
        <td>18</td>
        <td>None</td>
    </tr>
    <tr>
        <td>3</td>
        <td>bill3</td>
        <td>18</td>
        <td>None</td>
    </tr>
    <tr>
        <td>4</td>
        <td>bill4</td>
        <td>23</td>
        <td>2020-05-16</td>
    </tr>
    <tr>
        <td>5</td>
        <td>bill5</td>
        <td>23</td>
        <td>2020-05-16</td>
    </tr>
    <tr>
        <td>6</td>
        <td>bill6</td>
        <td>23</td>
        <td>2020-05-16</td>
    </tr>
</table>



<h3 id="3-更新数据"><a href="#3-更新数据" class="headerlink" title="3, 更新数据"></a>3, 更新数据</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">update 表名</span><br><span class="line">    <span class="built_in">set</span> 字段=值,</span><br><span class="line">        字段=值,</span><br><span class="line">        ...</span><br><span class="line">    where 条件;    <span class="comment"># 可以没有条件</span></span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">%%sql</span><br><span class="line">update user <span class="built_in">set</span> birthday=<span class="string">&#x27;2020-05-14&#x27;</span> where birthday <span class="keyword">is</span> null;</span><br><span class="line"><span class="comment">#  null 值不能用 = 或 != 做判断条件, 不报错, 但无效</span></span><br><span class="line"></span><br><span class="line">select * <span class="keyword">from</span> user;</span><br></pre></td></tr></table></figure>

<pre><code> * mysql+pymysql://root:***@localhost/test
2 rows affected.
6 rows affected.</code></pre>
<table>
    <tr>
        <th>id</th>
        <th>name</th>
        <th>age</th>
        <th>birthday</th>
    </tr>
    <tr>
        <td>1</td>
        <td>bill1</td>
        <td>18</td>
        <td>2020-05-13</td>
    </tr>
    <tr>
        <td>2</td>
        <td>bill2</td>
        <td>18</td>
        <td>2020-05-14</td>
    </tr>
    <tr>
        <td>3</td>
        <td>bill3</td>
        <td>18</td>
        <td>2020-05-14</td>
    </tr>
    <tr>
        <td>4</td>
        <td>bill4</td>
        <td>23</td>
        <td>2020-05-16</td>
    </tr>
    <tr>
        <td>5</td>
        <td>bill5</td>
        <td>23</td>
        <td>2020-05-16</td>
    </tr>
    <tr>
        <td>6</td>
        <td>bill6</td>
        <td>23</td>
        <td>2020-05-16</td>
    </tr>
</table>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">%%sql</span><br><span class="line">update user <span class="built_in">set</span> name=<span class="string">&#x27;bill&#x27;</span>, age=<span class="number">19</span> where <span class="built_in">id</span> &gt; <span class="number">2</span> <span class="keyword">and</span> <span class="built_in">id</span> &lt; <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">select * <span class="keyword">from</span> user;</span><br></pre></td></tr></table></figure>

<pre><code> * mysql+pymysql://root:***@localhost/test
2 rows affected.
6 rows affected.</code></pre>
<table>
    <tr>
        <th>id</th>
        <th>name</th>
        <th>age</th>
        <th>birthday</th>
    </tr>
    <tr>
        <td>1</td>
        <td>bill1</td>
        <td>18</td>
        <td>2020-05-13</td>
    </tr>
    <tr>
        <td>2</td>
        <td>bill2</td>
        <td>18</td>
        <td>2020-05-14</td>
    </tr>
    <tr>
        <td>3</td>
        <td>bill</td>
        <td>19</td>
        <td>2020-05-14</td>
    </tr>
    <tr>
        <td>4</td>
        <td>bill</td>
        <td>19</td>
        <td>2020-05-16</td>
    </tr>
    <tr>
        <td>5</td>
        <td>bill5</td>
        <td>23</td>
        <td>2020-05-16</td>
    </tr>
    <tr>
        <td>6</td>
        <td>bill6</td>
        <td>23</td>
        <td>2020-05-16</td>
    </tr>
</table>



<h3 id="4-删除数据"><a href="#4-删除数据" class="headerlink" title="4, 删除数据"></a>4, 删除数据</h3><p>删除满足条件的一行, 无条件就删除全部数据.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">delete <span class="keyword">from</span> 表名 where 条件; </span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">%%sql</span><br><span class="line">delete <span class="keyword">from</span> user where age=<span class="number">19</span>;</span><br><span class="line"></span><br><span class="line">select * <span class="keyword">from</span> user;</span><br></pre></td></tr></table></figure>

<pre><code> * mysql+pymysql://root:***@localhost/test
2 rows affected.
4 rows affected.</code></pre>
<table>
    <tr>
        <th>id</th>
        <th>name</th>
        <th>age</th>
        <th>birthday</th>
    </tr>
    <tr>
        <td>1</td>
        <td>bill1</td>
        <td>18</td>
        <td>2020-05-13</td>
    </tr>
    <tr>
        <td>2</td>
        <td>bill2</td>
        <td>18</td>
        <td>2020-05-14</td>
    </tr>
    <tr>
        <td>5</td>
        <td>bill5</td>
        <td>23</td>
        <td>2020-05-16</td>
    </tr>
    <tr>
        <td>6</td>
        <td>bill6</td>
        <td>23</td>
        <td>2020-05-16</td>
    </tr>
</table>



<h3 id="5-查询-选择数据"><a href="#5-查询-选择数据" class="headerlink" title="5, 查询/选择数据"></a>5, 查询/选择数据</h3><p>SELECT 语句定义:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&lt;SELECT clause&gt; [&lt;FROM clause&gt;] [&lt;WHERE clause&gt;] [&lt;GROUP BY clause&gt;] [&lt;HAVING clause&gt;] [&lt;ORDER BY clause&gt;] [&lt;LIMIT clause&gt;] </span><br></pre></td></tr></table></figure>

<h4 id="5-1-基本的查询规则"><a href="#5-1-基本的查询规则" class="headerlink" title="5.1, 基本的查询规则:"></a>5.1, 基本的查询规则:</h4><p>a, 语句的顺序固定, 除了 SELECT, FROM 必选, 其他都是可选.</p>
<p>b, 执行顺序与 SELECT 语句顺序不一样, 执行顺序为: </p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">FROM -&gt; WHERE -&gt; GROUP BY -&gt; HAVING -&gt; ORDER BY -&gt; SELECT -&gt; LIMIT</span><br></pre></td></tr></table></figure>

<p>从 GROUP BY 开始可使用 SELECT 设置的别名，后面的语句中都可以使用.</p>
<p>c, 每个子句执行后都会产生一个中间结果，供接下来的子句使用.</p>
<p>d, WHERE 只能筛选表的字段, HAVING 筛选中间结果.</p>
<h4 id="5-2-准备数据"><a href="#5-2-准备数据" class="headerlink" title="5.2, 准备数据"></a>5.2, 准备数据</h4><p>创建雇员信息表 <code>employee</code>:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">%%sql</span><br><span class="line">create table employee(</span><br><span class="line">  no <span class="built_in">int</span> comment <span class="string">&quot;员工编号&quot;</span>,</span><br><span class="line">  name varchar(<span class="number">20</span>) comment <span class="string">&quot;姓名&quot;</span>,</span><br><span class="line">  job varchar(<span class="number">40</span>) comment <span class="string">&quot;职位&quot;</span>,</span><br><span class="line">  mgr <span class="built_in">int</span> comment <span class="string">&quot;上司id&quot;</span>,</span><br><span class="line">  hiredate date comment <span class="string">&quot;雇佣时间&quot;</span>,</span><br><span class="line">  sal double(<span class="number">10</span>, <span class="number">2</span>) comment <span class="string">&quot;工资&quot;</span>,</span><br><span class="line">  comm double(<span class="number">10</span>, <span class="number">2</span>) comment <span class="string">&quot;奖金&quot;</span>,</span><br><span class="line">  deptno <span class="built_in">int</span> comment <span class="string">&quot;部门id&quot;</span></span><br><span class="line">) charset=utf8;</span><br><span class="line"></span><br><span class="line">insert into employee values</span><br><span class="line">  (<span class="number">7369</span>, <span class="string">&quot;smith&quot;</span>, <span class="string">&quot;clerk&quot;</span>, <span class="number">7902</span>, <span class="string">&quot;1981-03-12&quot;</span>, <span class="number">800.00</span>, NULL, <span class="number">20</span>),</span><br><span class="line">  (<span class="number">7499</span>, <span class="string">&quot;allen&quot;</span>, <span class="string">&quot;salesman&quot;</span>, <span class="number">7698</span>, <span class="string">&quot;1982-03-12&quot;</span>, <span class="number">1600.00</span>, <span class="number">300.00</span>, <span class="number">30</span>),</span><br><span class="line">  (<span class="number">7521</span>, <span class="string">&quot;ward&quot;</span>, <span class="string">&quot;salesman&quot;</span>, <span class="number">7698</span>, <span class="string">&quot;1983-03-12&quot;</span>, <span class="number">1250.00</span>, <span class="number">500.00</span>, <span class="number">30</span>),</span><br><span class="line">  (<span class="number">7566</span>, <span class="string">&quot;jones&quot;</span>, <span class="string">&quot;manager&quot;</span>, <span class="number">7839</span>, <span class="string">&quot;1981-03-12&quot;</span>, <span class="number">2975.00</span>, NULL, <span class="number">20</span>),</span><br><span class="line">  (<span class="number">7654</span>, <span class="string">&quot;martin&quot;</span>, <span class="string">&quot;salesman&quot;</span>, <span class="number">7698</span>, <span class="string">&quot;1981-03-12&quot;</span>, <span class="number">1250.00</span>, <span class="number">1400.00</span>, <span class="number">30</span>),</span><br><span class="line">  (<span class="number">7698</span>, <span class="string">&quot;blake&quot;</span>, <span class="string">&quot;manager&quot;</span>, <span class="number">7839</span>, <span class="string">&quot;1981-03-12&quot;</span>, <span class="number">2850.00</span>, NULL, <span class="number">30</span>),</span><br><span class="line">  (<span class="number">7782</span>, <span class="string">&quot;clark&quot;</span>, <span class="string">&quot;manager&quot;</span>, <span class="number">7839</span>, <span class="string">&quot;1985-03-12&quot;</span>, <span class="number">2450.00</span>, NULL, <span class="number">10</span>),</span><br><span class="line">  (<span class="number">7788</span>, <span class="string">&quot;scott&quot;</span>, <span class="string">&quot;analyst&quot;</span>, <span class="number">7566</span>, <span class="string">&quot;1981-03-12&quot;</span>, <span class="number">3000.00</span>, NULL, <span class="number">20</span>),</span><br><span class="line">  (<span class="number">7839</span>, <span class="string">&quot;king&quot;</span>, <span class="string">&quot;president&quot;</span>, NULL, <span class="string">&quot;1981-03-12&quot;</span>, <span class="number">5000.00</span>, NULL, <span class="number">10</span>),</span><br><span class="line">  (<span class="number">7844</span>, <span class="string">&quot;turner&quot;</span>, <span class="string">&quot;salesman&quot;</span>, <span class="number">7698</span>, <span class="string">&quot;1989-03-12&quot;</span>, <span class="number">1500.00</span>, <span class="number">0.00</span>, <span class="number">30</span>),</span><br><span class="line">  (<span class="number">7876</span>, <span class="string">&quot;adams&quot;</span>, <span class="string">&quot;clerk&quot;</span>, <span class="number">7788</span>, <span class="string">&quot;1998-03-12&quot;</span>, <span class="number">1100.00</span>, NULL, <span class="number">20</span>),</span><br><span class="line">  (<span class="number">7900</span>, <span class="string">&quot;james&quot;</span>, <span class="string">&quot;clerk&quot;</span>, <span class="number">7698</span>, <span class="string">&quot;1997-03-12&quot;</span>, <span class="number">950.00</span>, NULL, <span class="number">30</span>),</span><br><span class="line">  (<span class="number">7902</span>, <span class="string">&quot;ford&quot;</span>, <span class="string">&quot;analyst&quot;</span>, <span class="number">7566</span>, <span class="string">&quot;2000-01-01&quot;</span>, <span class="number">3000.00</span>, NULL, <span class="number">20</span>),</span><br><span class="line">  (<span class="number">7934</span>, <span class="string">&quot;miller&quot;</span>, <span class="string">&quot;clerk&quot;</span>, <span class="number">7782</span>, <span class="string">&quot;1981-03-12&quot;</span>, <span class="number">1300.00</span>, NULL, <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">select * <span class="keyword">from</span> employee;</span><br></pre></td></tr></table></figure>

<pre><code> * mysql+pymysql://root:***@localhost/test
0 rows affected.
14 rows affected.
14 rows affected.</code></pre>
<table>
    <tr>
        <th>no</th>
        <th>name</th>
        <th>job</th>
        <th>mgr</th>
        <th>hiredate</th>
        <th>sal</th>
        <th>comm</th>
        <th>deptno</th>
    </tr>
    <tr>
        <td>7369</td>
        <td>smith</td>
        <td>clerk</td>
        <td>7902</td>
        <td>1981-03-12</td>
        <td>800.0</td>
        <td>None</td>
        <td>20</td>
    </tr>
    <tr>
        <td>7499</td>
        <td>allen</td>
        <td>salesman</td>
        <td>7698</td>
        <td>1982-03-12</td>
        <td>1600.0</td>
        <td>300.0</td>
        <td>30</td>
    </tr>
    <tr>
        <td>7521</td>
        <td>ward</td>
        <td>salesman</td>
        <td>7698</td>
        <td>1983-03-12</td>
        <td>1250.0</td>
        <td>500.0</td>
        <td>30</td>
    </tr>
    <tr>
        <td>7566</td>
        <td>jones</td>
        <td>manager</td>
        <td>7839</td>
        <td>1981-03-12</td>
        <td>2975.0</td>
        <td>None</td>
        <td>20</td>
    </tr>
    <tr>
        <td>7654</td>
        <td>martin</td>
        <td>salesman</td>
        <td>7698</td>
        <td>1981-03-12</td>
        <td>1250.0</td>
        <td>1400.0</td>
        <td>30</td>
    </tr>
    <tr>
        <td>7698</td>
        <td>blake</td>
        <td>manager</td>
        <td>7839</td>
        <td>1981-03-12</td>
        <td>2850.0</td>
        <td>None</td>
        <td>30</td>
    </tr>
    <tr>
        <td>7782</td>
        <td>clark</td>
        <td>manager</td>
        <td>7839</td>
        <td>1985-03-12</td>
        <td>2450.0</td>
        <td>None</td>
        <td>10</td>
    </tr>
    <tr>
        <td>7788</td>
        <td>scott</td>
        <td>analyst</td>
        <td>7566</td>
        <td>1981-03-12</td>
        <td>3000.0</td>
        <td>None</td>
        <td>20</td>
    </tr>
    <tr>
        <td>7839</td>
        <td>king</td>
        <td>president</td>
        <td>None</td>
        <td>1981-03-12</td>
        <td>5000.0</td>
        <td>None</td>
        <td>10</td>
    </tr>
    <tr>
        <td>7844</td>
        <td>turner</td>
        <td>salesman</td>
        <td>7698</td>
        <td>1989-03-12</td>
        <td>1500.0</td>
        <td>0.0</td>
        <td>30</td>
    </tr>
    <tr>
        <td>7876</td>
        <td>adams</td>
        <td>clerk</td>
        <td>7788</td>
        <td>1998-03-12</td>
        <td>1100.0</td>
        <td>None</td>
        <td>20</td>
    </tr>
    <tr>
        <td>7900</td>
        <td>james</td>
        <td>clerk</td>
        <td>7698</td>
        <td>1997-03-12</td>
        <td>950.0</td>
        <td>None</td>
        <td>30</td>
    </tr>
    <tr>
        <td>7902</td>
        <td>ford</td>
        <td>analyst</td>
        <td>7566</td>
        <td>2000-01-01</td>
        <td>3000.0</td>
        <td>None</td>
        <td>20</td>
    </tr>
    <tr>
        <td>7934</td>
        <td>miller</td>
        <td>clerk</td>
        <td>7782</td>
        <td>1981-03-12</td>
        <td>1300.0</td>
        <td>None</td>
        <td>10</td>
    </tr>
</table>



<h4 id="5-3-结果去重"><a href="#5-3-结果去重" class="headerlink" title="5.3, 结果去重"></a>5.3, 结果去重</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">%%sql</span><br><span class="line">select distinct job <span class="keyword">from</span> employee;</span><br></pre></td></tr></table></figure>

<pre><code> * mysql+pymysql://root:***@localhost/test
5 rows affected.</code></pre>
<table>
    <tr>
        <th>job</th>
    </tr>
    <tr>
        <td>clerk</td>
    </tr>
    <tr>
        <td>salesman</td>
    </tr>
    <tr>
        <td>manager</td>
    </tr>
    <tr>
        <td>analyst</td>
    </tr>
    <tr>
        <td>president</td>
    </tr>
</table>



<h4 id="5-4-结果运算"><a href="#5-4-结果运算" class="headerlink" title="5.4, 结果运算"></a>5.4, 结果运算</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">%%sql</span><br><span class="line">select name, sal*<span class="number">12</span> <span class="keyword">from</span> employee;</span><br></pre></td></tr></table></figure>

<pre><code> * mysql+pymysql://root:***@localhost/test
14 rows affected.</code></pre>
<table>
    <tr>
        <th>name</th>
        <th>sal*12</th>
    </tr>
    <tr>
        <td>smith</td>
        <td>9600.0</td>
    </tr>
    <tr>
        <td>allen</td>
        <td>19200.0</td>
    </tr>
    <tr>
        <td>ward</td>
        <td>15000.0</td>
    </tr>
    <tr>
        <td>jones</td>
        <td>35700.0</td>
    </tr>
    <tr>
        <td>martin</td>
        <td>15000.0</td>
    </tr>
    <tr>
        <td>blake</td>
        <td>34200.0</td>
    </tr>
    <tr>
        <td>clark</td>
        <td>29400.0</td>
    </tr>
    <tr>
        <td>scott</td>
        <td>36000.0</td>
    </tr>
    <tr>
        <td>king</td>
        <td>60000.0</td>
    </tr>
    <tr>
        <td>turner</td>
        <td>18000.0</td>
    </tr>
    <tr>
        <td>adams</td>
        <td>13200.0</td>
    </tr>
    <tr>
        <td>james</td>
        <td>11400.0</td>
    </tr>
    <tr>
        <td>ford</td>
        <td>36000.0</td>
    </tr>
    <tr>
        <td>miller</td>
        <td>15600.0</td>
    </tr>
</table>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">%%sql</span><br><span class="line">select name <span class="keyword">as</span> <span class="string">&#x27;姓名&#x27;</span>, sal*<span class="number">12</span> <span class="string">&#x27;年薪&#x27;</span> <span class="keyword">from</span> employee; <span class="comment"># as 设置别名, 可以省略</span></span><br></pre></td></tr></table></figure>

<pre><code> * mysql+pymysql://root:***@localhost/test
14 rows affected.</code></pre>
<table>
    <tr>
        <th>姓名</th>
        <th>年薪</th>
    </tr>
    <tr>
        <td>smith</td>
        <td>9600.0</td>
    </tr>
    <tr>
        <td>allen</td>
        <td>19200.0</td>
    </tr>
    <tr>
        <td>ward</td>
        <td>15000.0</td>
    </tr>
    <tr>
        <td>jones</td>
        <td>35700.0</td>
    </tr>
    <tr>
        <td>martin</td>
        <td>15000.0</td>
    </tr>
    <tr>
        <td>blake</td>
        <td>34200.0</td>
    </tr>
    <tr>
        <td>clark</td>
        <td>29400.0</td>
    </tr>
    <tr>
        <td>scott</td>
        <td>36000.0</td>
    </tr>
    <tr>
        <td>king</td>
        <td>60000.0</td>
    </tr>
    <tr>
        <td>turner</td>
        <td>18000.0</td>
    </tr>
    <tr>
        <td>adams</td>
        <td>13200.0</td>
    </tr>
    <tr>
        <td>james</td>
        <td>11400.0</td>
    </tr>
    <tr>
        <td>ford</td>
        <td>36000.0</td>
    </tr>
    <tr>
        <td>miller</td>
        <td>15600.0</td>
    </tr>
</table>



<h4 id="5-5-函数和方法对结果进行处理"><a href="#5-5-函数和方法对结果进行处理" class="headerlink" title="5.5, 函数和方法对结果进行处理"></a>5.5, 函数和方法对结果进行处理</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">%%sql</span><br><span class="line">select count(*) <span class="keyword">from</span> employee;  <span class="comment"># count(*) 会统计所有值个数</span></span><br></pre></td></tr></table></figure>

<pre><code> * mysql+pymysql://root:***@localhost/test
1 rows affected.</code></pre>
<table>
    <tr>
        <th>count(*)</th>
    </tr>
    <tr>
        <td>14</td>
    </tr>
</table>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">%%sql</span><br><span class="line">select count(comm) <span class="keyword">from</span> employee;  <span class="comment"># count(字段) 统计非 null 的值个数</span></span><br></pre></td></tr></table></figure>

<pre><code> * mysql+pymysql://root:***@localhost/test
1 rows affected.</code></pre>
<table>
    <tr>
        <th>count(comm)</th>
    </tr>
    <tr>
        <td>4</td>
    </tr>
</table>



<p>统计函数 avg, sum, max, min 等, 统计时忽略 null 值, 都是 null 值或空表时, count 返回 0 , 其他返回 null.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">%%sql</span><br><span class="line">select concat(name, <span class="string">&#x27;的年薪: &#x27;</span>, sal*<span class="number">12</span>) <span class="string">&#x27;薪资&#x27;</span> <span class="keyword">from</span> employee;  <span class="comment"># concat() 拼接字符串</span></span><br></pre></td></tr></table></figure>

<pre><code> * mysql+pymysql://root:***@localhost/test
14 rows affected.</code></pre>
<table>
    <tr>
        <th>薪资</th>
    </tr>
    <tr>
        <td>smith的年薪: 9600.00</td>
    </tr>
    <tr>
        <td>allen的年薪: 19200.00</td>
    </tr>
    <tr>
        <td>ward的年薪: 15000.00</td>
    </tr>
    <tr>
        <td>jones的年薪: 35700.00</td>
    </tr>
    <tr>
        <td>martin的年薪: 15000.00</td>
    </tr>
    <tr>
        <td>blake的年薪: 34200.00</td>
    </tr>
    <tr>
        <td>clark的年薪: 29400.00</td>
    </tr>
    <tr>
        <td>scott的年薪: 36000.00</td>
    </tr>
    <tr>
        <td>king的年薪: 60000.00</td>
    </tr>
    <tr>
        <td>turner的年薪: 18000.00</td>
    </tr>
    <tr>
        <td>adams的年薪: 13200.00</td>
    </tr>
    <tr>
        <td>james的年薪: 11400.00</td>
    </tr>
    <tr>
        <td>ford的年薪: 36000.00</td>
    </tr>
    <tr>
        <td>miller的年薪: 15600.00</td>
    </tr>
</table>



<h4 id="5-6-where-条件查询"><a href="#5-6-where-条件查询" class="headerlink" title="5.6, where 条件查询"></a>5.6, where 条件查询</h4><p>运算符有 <code>&gt;</code>, <code>&lt;</code>, <code>=</code>, <code>!=</code> 或 <code>&lt;&gt;</code>, <code>&lt;=</code>, <code>&gt;=</code>, <code>and</code> 或 <code>&amp;&amp;</code>, <code>or</code> 或 <code>||</code>, <code>xor</code>, <code>not</code> 或 <code>!</code>. 灵活运用, 不同的组合可以得到一样的结果, 也可用 <code>between and</code>, <code>in</code> 限制范围, <code>like</code> 模糊查询.</p>
<p>注意区分 <code>null</code>, <code>None</code>, <code>NaN</code>, <code>0</code> 和 <code>&#39;&#39;</code>.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">%%sql</span><br><span class="line">select job, name <span class="keyword">from</span> employee </span><br><span class="line">where job != <span class="string">&#x27;clerk&#x27;</span> <span class="keyword">and</span> sal &gt; <span class="number">1000</span>;</span><br></pre></td></tr></table></figure>

<pre><code> * mysql+pymysql://root:***@localhost/test
10 rows affected.</code></pre>
<table>
    <tr>
        <th>job</th>
        <th>name</th>
    </tr>
    <tr>
        <td>salesman</td>
        <td>allen</td>
    </tr>
    <tr>
        <td>salesman</td>
        <td>ward</td>
    </tr>
    <tr>
        <td>manager</td>
        <td>jones</td>
    </tr>
    <tr>
        <td>salesman</td>
        <td>martin</td>
    </tr>
    <tr>
        <td>manager</td>
        <td>blake</td>
    </tr>
    <tr>
        <td>manager</td>
        <td>clark</td>
    </tr>
    <tr>
        <td>analyst</td>
        <td>scott</td>
    </tr>
    <tr>
        <td>president</td>
        <td>king</td>
    </tr>
    <tr>
        <td>salesman</td>
        <td>turner</td>
    </tr>
    <tr>
        <td>analyst</td>
        <td>ford</td>
    </tr>
</table>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">%%sql</span><br><span class="line">select job <span class="keyword">from</span> employee </span><br><span class="line">where sal between <span class="number">1000</span> <span class="keyword">and</span> <span class="number">2000</span>;</span><br></pre></td></tr></table></figure>

<pre><code> * mysql+pymysql://root:***@localhost/test
6 rows affected.</code></pre>
<table>
    <tr>
        <th>job</th>
    </tr>
    <tr>
        <td>salesman</td>
    </tr>
    <tr>
        <td>salesman</td>
    </tr>
    <tr>
        <td>salesman</td>
    </tr>
    <tr>
        <td>salesman</td>
    </tr>
    <tr>
        <td>clerk</td>
    </tr>
    <tr>
        <td>clerk</td>
    </tr>
</table>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">%%sql</span><br><span class="line">select name, sal <span class="keyword">from</span> employee where job <span class="keyword">in</span> (<span class="string">&#x27;analyst&#x27;</span>, <span class="string">&#x27;president&#x27;</span>);</span><br></pre></td></tr></table></figure>

<pre><code> * mysql+pymysql://root:***@localhost/test
3 rows affected.</code></pre>
<table>
    <tr>
        <th>name</th>
        <th>sal</th>
    </tr>
    <tr>
        <td>scott</td>
        <td>3000.0</td>
    </tr>
    <tr>
        <td>king</td>
        <td>5000.0</td>
    </tr>
    <tr>
        <td>ford</td>
        <td>3000.0</td>
    </tr>
</table>



<p><code>like</code> 匹配, <code>_</code>表示匹配单个字符串, <code>%</code>匹配任意长度的字符串, 包括 0 个.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">%%sql</span><br><span class="line">select name <span class="keyword">from</span> employee where name like <span class="string">&#x27;_m%&#x27;</span>;</span><br></pre></td></tr></table></figure>

<pre><code> * mysql+pymysql://root:***@localhost/test
1 rows affected.</code></pre>
<table>
    <tr>
        <th>name</th>
    </tr>
    <tr>
        <td>smith</td>
    </tr>
</table>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">%%sql</span><br><span class="line">select name <span class="keyword">from</span> employee where name like <span class="string">&#x27;%M%&#x27;</span>;</span><br></pre></td></tr></table></figure>

<pre><code> * mysql+pymysql://root:***@localhost/test
5 rows affected.</code></pre>
<table>
    <tr>
        <th>name</th>
    </tr>
    <tr>
        <td>smith</td>
    </tr>
    <tr>
        <td>martin</td>
    </tr>
    <tr>
        <td>adams</td>
    </tr>
    <tr>
        <td>james</td>
    </tr>
    <tr>
        <td>miller</td>
    </tr>
</table>



<h4 id="5-7-排序查询"><a href="#5-7-排序查询" class="headerlink" title="5.7, 排序查询"></a>5.7, 排序查询</h4><p>用 <code>order by asc/desc</code> 语句排序, asc 为升序(默认), desc 降序.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">%%sql</span><br><span class="line">select name, sal, hiredate <span class="keyword">from</span> employee </span><br><span class="line">order by hiredate, sal desc;  <span class="comment"># 先按前一个排序, 再第二个</span></span><br></pre></td></tr></table></figure>

<pre><code> * mysql+pymysql://root:***@localhost/test
14 rows affected.</code></pre>
<table>
    <tr>
        <th>name</th>
        <th>sal</th>
        <th>hiredate</th>
    </tr>
    <tr>
        <td>king</td>
        <td>5000.0</td>
        <td>1981-03-12</td>
    </tr>
    <tr>
        <td>scott</td>
        <td>3000.0</td>
        <td>1981-03-12</td>
    </tr>
    <tr>
        <td>jones</td>
        <td>2975.0</td>
        <td>1981-03-12</td>
    </tr>
    <tr>
        <td>blake</td>
        <td>2850.0</td>
        <td>1981-03-12</td>
    </tr>
    <tr>
        <td>miller</td>
        <td>1300.0</td>
        <td>1981-03-12</td>
    </tr>
    <tr>
        <td>martin</td>
        <td>1250.0</td>
        <td>1981-03-12</td>
    </tr>
    <tr>
        <td>smith</td>
        <td>800.0</td>
        <td>1981-03-12</td>
    </tr>
    <tr>
        <td>allen</td>
        <td>1600.0</td>
        <td>1982-03-12</td>
    </tr>
    <tr>
        <td>ward</td>
        <td>1250.0</td>
        <td>1983-03-12</td>
    </tr>
    <tr>
        <td>clark</td>
        <td>2450.0</td>
        <td>1985-03-12</td>
    </tr>
    <tr>
        <td>turner</td>
        <td>1500.0</td>
        <td>1989-03-12</td>
    </tr>
    <tr>
        <td>james</td>
        <td>950.0</td>
        <td>1997-03-12</td>
    </tr>
    <tr>
        <td>adams</td>
        <td>1100.0</td>
        <td>1998-03-12</td>
    </tr>
    <tr>
        <td>ford</td>
        <td>3000.0</td>
        <td>2000-01-01</td>
    </tr>
</table>



<h4 id="5-8-限制查询结果的输出数"><a href="#5-8-限制查询结果的输出数" class="headerlink" title="5.8, 限制查询结果的输出数"></a>5.8, 限制查询结果的输出数</h4><p>用 <code>limit 行数</code> 或 <code>limit 起始, 行数</code> 限制显示数量.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">%%sql</span><br><span class="line">select * <span class="keyword">from</span> employee </span><br><span class="line">where comm <span class="keyword">is</span> null </span><br><span class="line">limit <span class="number">2</span>;</span><br></pre></td></tr></table></figure>

<pre><code> * mysql+pymysql://root:***@localhost/test
2 rows affected.</code></pre>
<table>
    <tr>
        <th>no</th>
        <th>name</th>
        <th>job</th>
        <th>mgr</th>
        <th>hiredate</th>
        <th>sal</th>
        <th>comm</th>
        <th>deptno</th>
    </tr>
    <tr>
        <td>7369</td>
        <td>smith</td>
        <td>clerk</td>
        <td>7902</td>
        <td>1981-03-12</td>
        <td>800.0</td>
        <td>None</td>
        <td>20</td>
    </tr>
    <tr>
        <td>7566</td>
        <td>jones</td>
        <td>manager</td>
        <td>7839</td>
        <td>1981-03-12</td>
        <td>2975.0</td>
        <td>None</td>
        <td>20</td>
    </tr>
</table>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">%%sql</span><br><span class="line">select * <span class="keyword">from</span> employee </span><br><span class="line">where comm <span class="keyword">is</span> null </span><br><span class="line">limit <span class="number">1</span>, <span class="number">2</span>;</span><br></pre></td></tr></table></figure>

<pre><code> * mysql+pymysql://root:***@localhost/test
2 rows affected.</code></pre>
<table>
    <tr>
        <th>no</th>
        <th>name</th>
        <th>job</th>
        <th>mgr</th>
        <th>hiredate</th>
        <th>sal</th>
        <th>comm</th>
        <th>deptno</th>
    </tr>
    <tr>
        <td>7566</td>
        <td>jones</td>
        <td>manager</td>
        <td>7839</td>
        <td>1981-03-12</td>
        <td>2975.0</td>
        <td>None</td>
        <td>20</td>
    </tr>
    <tr>
        <td>7698</td>
        <td>blake</td>
        <td>manager</td>
        <td>7839</td>
        <td>1981-03-12</td>
        <td>2850.0</td>
        <td>None</td>
        <td>30</td>
    </tr>
</table>



<h4 id="5-9-分组查询"><a href="#5-9-分组查询" class="headerlink" title="5.9, 分组查询"></a>5.9, 分组查询</h4><p>用分组语句 <code>group by</code> 指定分组.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">%%sql</span><br><span class="line">select avg(sal) <span class="keyword">from</span> employee </span><br><span class="line">where job=<span class="string">&#x27;clerk&#x27;</span>;  <span class="comment"># 简单分组</span></span><br></pre></td></tr></table></figure>

<pre><code> * mysql+pymysql://root:***@localhost/test
1 rows affected.</code></pre>
<table>
    <tr>
        <th>avg(sal)</th>
    </tr>
    <tr>
        <td>1037.5</td>
    </tr>
</table>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">%%sql</span><br><span class="line">select name, job, avg(sal) <span class="string">&#x27;平均薪资&#x27;</span> <span class="keyword">from</span> employee</span><br><span class="line">group by job;  <span class="comment"># 按job 分组, name 只显示第一个</span></span><br></pre></td></tr></table></figure>

<pre><code> * mysql+pymysql://root:***@localhost/test
5 rows affected.</code></pre>
<table>
    <tr>
        <th>name</th>
        <th>job</th>
        <th>平均薪资</th>
    </tr>
    <tr>
        <td>scott</td>
        <td>analyst</td>
        <td>3000.0</td>
    </tr>
    <tr>
        <td>smith</td>
        <td>clerk</td>
        <td>1037.5</td>
    </tr>
    <tr>
        <td>jones</td>
        <td>manager</td>
        <td>2758.333333</td>
    </tr>
    <tr>
        <td>king</td>
        <td>president</td>
        <td>5000.0</td>
    </tr>
    <tr>
        <td>allen</td>
        <td>salesman</td>
        <td>1400.0</td>
    </tr>
</table>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">%%sql</span><br><span class="line">select </span><br><span class="line">    group_concat(name) <span class="string">&#x27;所有员工&#x27;</span>,  <span class="comment"># 显示所有 name</span></span><br><span class="line">    job, </span><br><span class="line">    avg(sal) </span><br><span class="line">    <span class="keyword">from</span> employee</span><br><span class="line">group by job;</span><br></pre></td></tr></table></figure>

<pre><code> * mysql+pymysql://root:***@localhost/test
5 rows affected.</code></pre>
<table>
    <tr>
        <th>所有员工</th>
        <th>job</th>
        <th>avg(sal)</th>
    </tr>
    <tr>
        <td>scott,ford</td>
        <td>analyst</td>
        <td>3000.0</td>
    </tr>
    <tr>
        <td>smith,adams,james,miller</td>
        <td>clerk</td>
        <td>1037.5</td>
    </tr>
    <tr>
        <td>jones,blake,clark</td>
        <td>manager</td>
        <td>2758.333333</td>
    </tr>
    <tr>
        <td>king</td>
        <td>president</td>
        <td>5000.0</td>
    </tr>
    <tr>
        <td>allen,ward,martin,turner</td>
        <td>salesman</td>
        <td>1400.0</td>
    </tr>
</table>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">%%sql</span><br><span class="line">select </span><br><span class="line">    deptno, </span><br><span class="line">    group_concat(name, <span class="string">&#x27;:&#x27;</span>, sal order by sal desc) names </span><br><span class="line">    <span class="keyword">from</span> employee </span><br><span class="line">group by deptno;</span><br></pre></td></tr></table></figure>

<pre><code> * mysql+pymysql://root:***@localhost/test
3 rows affected.</code></pre>
<table>
    <tr>
        <th>deptno</th>
        <th>names</th>
    </tr>
    <tr>
        <td>10</td>
        <td>king:5000.00,clark:2450.00,miller:1300.00</td>
    </tr>
    <tr>
        <td>20</td>
        <td>ford:3000.00,scott:3000.00,jones:2975.00,adams:1100.00,smith:800.00</td>
    </tr>
    <tr>
        <td>30</td>
        <td>blake:2850.00,allen:1600.00,turner:1500.00,martin:1250.00,ward:1250.00,james:950.00</td>
    </tr>
</table>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">%%sql</span><br><span class="line">select </span><br><span class="line">    deptno, </span><br><span class="line">    hiredate, </span><br><span class="line">    group_concat(name) names, </span><br><span class="line">    count(name) </span><br><span class="line">    <span class="keyword">from</span> employee</span><br><span class="line">group by deptno, hiredate;</span><br></pre></td></tr></table></figure>

<pre><code> * mysql+pymysql://root:***@localhost/test
10 rows affected.</code></pre>
<table>
    <tr>
        <th>deptno</th>
        <th>hiredate</th>
        <th>names</th>
        <th>count(name)</th>
    </tr>
    <tr>
        <td>10</td>
        <td>1981-03-12</td>
        <td>king,miller</td>
        <td>2</td>
    </tr>
    <tr>
        <td>10</td>
        <td>1985-03-12</td>
        <td>clark</td>
        <td>1</td>
    </tr>
    <tr>
        <td>20</td>
        <td>1981-03-12</td>
        <td>smith,jones,scott</td>
        <td>3</td>
    </tr>
    <tr>
        <td>20</td>
        <td>1998-03-12</td>
        <td>adams</td>
        <td>1</td>
    </tr>
    <tr>
        <td>20</td>
        <td>2000-01-01</td>
        <td>ford</td>
        <td>1</td>
    </tr>
    <tr>
        <td>30</td>
        <td>1981-03-12</td>
        <td>martin,blake</td>
        <td>2</td>
    </tr>
    <tr>
        <td>30</td>
        <td>1982-03-12</td>
        <td>allen</td>
        <td>1</td>
    </tr>
    <tr>
        <td>30</td>
        <td>1983-03-12</td>
        <td>ward</td>
        <td>1</td>
    </tr>
    <tr>
        <td>30</td>
        <td>1989-03-12</td>
        <td>turner</td>
        <td>1</td>
    </tr>
    <tr>
        <td>30</td>
        <td>1997-03-12</td>
        <td>james</td>
        <td>1</td>
    </tr>
</table>



<h4 id="5-10-having-条件查询"><a href="#5-10-having-条件查询" class="headerlink" title="5.10, having 条件查询"></a>5.10, having 条件查询</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">%%sql</span><br><span class="line">select name, sal <span class="keyword">from</span> employee</span><br><span class="line">having sal &gt; <span class="number">2000</span>;  <span class="comment"># 最好用 where, 能用 where 的地方最好用 where</span></span><br></pre></td></tr></table></figure>

<pre><code> * mysql+pymysql://root:***@localhost/test
6 rows affected.</code></pre>
<table>
    <tr>
        <th>name</th>
        <th>sal</th>
    </tr>
    <tr>
        <td>jones</td>
        <td>2975.0</td>
    </tr>
    <tr>
        <td>blake</td>
        <td>2850.0</td>
    </tr>
    <tr>
        <td>clark</td>
        <td>2450.0</td>
    </tr>
    <tr>
        <td>scott</td>
        <td>3000.0</td>
    </tr>
    <tr>
        <td>king</td>
        <td>5000.0</td>
    </tr>
    <tr>
        <td>ford</td>
        <td>3000.0</td>
    </tr>
</table>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">%%sql</span><br><span class="line">select </span><br><span class="line">    group_concat(<span class="string">&#x27; &#x27;</span>, name) names, </span><br><span class="line">    deptno, </span><br><span class="line">    avg(sal) ag </span><br><span class="line">    <span class="keyword">from</span> employee</span><br><span class="line">group by deptno</span><br><span class="line">having ag &gt; <span class="number">2000</span> <span class="keyword">and</span> names like <span class="string">&#x27;%m%&#x27;</span>;  <span class="comment"># 不能用 name</span></span><br></pre></td></tr></table></figure>

<pre><code> * mysql+pymysql://root:***@localhost/test
2 rows affected.</code></pre>
<table>
    <tr>
        <th>names</th>
        <th>deptno</th>
        <th>ag</th>
    </tr>
    <tr>
        <td> clark, king, miller</td>
        <td>10</td>
        <td>2916.666667</td>
    </tr>
    <tr>
        <td> smith, jones, scott, adams, ford</td>
        <td>20</td>
        <td>2175.0</td>
    </tr>
</table>
]]></content>
      <categories>
        <category>数据分析</category>
      </categories>
      <tags>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>matplotlib 快速入门</title>
    <url>/matplotlib-a8d811132015/</url>
    <content><![CDATA[<p><a href="https://billwuhao.com/" title="诗和远方都在脚下"><img src="/images/dbj.jpg"></a></p>
<br>

<blockquote>
<p>整理 matplotlib 基础知识点, 快速入门, 然后在练习和实践中慢慢提升</p>
</blockquote>
<p><font color=#00A600 >2020年6月28日更新</font></p>
<p><a href="https://matplotlib.org/">matpotlib官网</a></p>
<h2 id="1-以一个例子开始"><a href="#1-以一个例子开始" class="headerlink" title="1, 以一个例子开始"></a>1, 以一个例子开始</h2><p>matpotlib 绘图非常灵活, 方法和参数繁多, 同样的效果, 可以有很多实现方法, 因此常常让人很混乱和困惑, 理解了绘图的层级结构, 使用起来更得心应手:</p>
<p><img src="/images/mpt.jpg"></p>
<p>下面将其分四个层级来作说明: 画布 Figure, 绘图对象 Axes, 坐标和图像, 以及图像调整和辅助描述</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 导入库</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">设置 rc 参数: 可以用来修改图形的各种默认属性</span></span><br><span class="line"><span class="string">包括窗体大小, 线条宽度, 颜色, 符号, 字体等等</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.family&#x27;</span>] = <span class="string">&#x27;YouYuan&#x27;</span> <span class="comment"># 字体</span></span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.size&#x27;</span>] = <span class="number">18</span> <span class="comment"># 全体字体大小</span></span><br><span class="line">plt.rcParams[<span class="string">&#x27;legend.fontsize&#x27;</span>] = <span class="number">12</span> <span class="comment"># 图例标签字体大小</span></span><br><span class="line">plt.rcParams[<span class="string">&#x27;axes.unicode_minus&#x27;</span>] = <span class="literal">False</span> <span class="comment"># 正常显示符号</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建画布对象 Figure, 可以设置大小等</span></span><br><span class="line">fig = plt.figure()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 用 add_subplot()在画布上面创建绘图对象 Axes, 默认创建一个</span></span><br><span class="line"><span class="comment"># 也可以用 subplots() 直接将 Figure 和 Axes 一起创建</span></span><br><span class="line">ax = fig.add_subplot()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在绘图对象 ax 上绘图, 并设置标签</span></span><br><span class="line">x = <span class="built_in">range</span>(<span class="number">-9</span>, <span class="number">10</span>)</span><br><span class="line">y = [n**<span class="number">3</span> <span class="keyword">for</span> n <span class="keyword">in</span> x]</span><br><span class="line">ax.plot(x, y, label=<span class="string">&#x27;曲线&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制点 P(5, 125)</span></span><br><span class="line">ax.scatter(<span class="number">5</span>, <span class="number">125</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制曲线过 P 点的切线</span></span><br><span class="line">y1 = [<span class="number">3</span>*(<span class="number">5</span>**<span class="number">2</span>)*(m - <span class="number">5</span>) + <span class="number">125</span> <span class="keyword">for</span> m <span class="keyword">in</span> x]</span><br><span class="line">ax.plot(x, y1, label=<span class="string">&#x27;切线&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 一次性设置 ax 的多个属性</span></span><br><span class="line">ax.<span class="built_in">set</span>(title=<span class="string">&#x27;y=x**3&#x27;</span>, <span class="comment"># ax 标题</span></span><br><span class="line">       xlabel=<span class="string">&#x27;x&#x27;</span>, <span class="comment"># x轴标题</span></span><br><span class="line">       ylabel=<span class="string">&#x27;y&#x27;</span>, <span class="comment"># y轴标题</span></span><br><span class="line">       xlim=(<span class="number">-10</span>,<span class="number">10</span>), <span class="comment"># x轴范围</span></span><br><span class="line">       ylim=(<span class="number">-500</span>, <span class="number">600</span>), <span class="comment"># y轴范围</span></span><br><span class="line">       xticks=<span class="built_in">range</span>(<span class="number">-10</span>, <span class="number">11</span>, <span class="number">2</span>), <span class="comment"># x轴刻度和标签</span></span><br><span class="line">       yticks=<span class="built_in">range</span>(<span class="number">-500</span>, <span class="number">600</span>, <span class="number">100</span>) <span class="comment"># y轴刻度和标签       </span></span><br><span class="line">      ) </span><br><span class="line"><span class="comment"># 上述属性设置方法, 都可以改为如下方法: </span></span><br><span class="line"><span class="comment"># ax.set_title() 或 plt.title()</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 注释标注 P 点, (4, 160) 为 P 的坐标</span></span><br><span class="line">ax.text(<span class="number">4</span>, <span class="number">160</span>, <span class="string">&#x27;P&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置轴标签字体和倾斜度</span></span><br><span class="line">ax.tick_params(labelsize=<span class="number">12</span>, labelrotation=<span class="number">20</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 去除非 x, y 轴的包围线</span></span><br><span class="line">ax.spines[<span class="string">&#x27;right&#x27;</span>].set_color(<span class="string">&#x27;none&#x27;</span>)</span><br><span class="line">ax.spines[<span class="string">&#x27;top&#x27;</span>].set_color(<span class="string">&#x27;none&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示每个图的标签</span></span><br><span class="line">plt.legend(fontsize=<span class="number">15</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>


<p><img src="https://wx1.sbimg.cn/2020/07/01/2wT6j.png" alt="png"></p>
<p>通过上例, 能够对 matplotlib 绘图有初步了解:</p>
<p>先有一个画布”桌子”, 然后在上面放”画纸”, 有了”画纸”, 就可以开始画图, 然后按照需求去选”笔”, 布局, 着色, 顺便”作诗落款”注释一下</p>
<h2 id="2-绘制多个绘图对象-Axes"><a href="#2-绘制多个绘图对象-Axes" class="headerlink" title="2, 绘制多个绘图对象 Axes"></a>2, 绘制多个绘图对象 Axes</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line">fig = plt.figure(figsize=(<span class="number">20</span>, <span class="number">12</span>), dpi=<span class="number">120</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># &#x27;222&#x27;表示第 2 行, 第 2 列的第 2 个位置</span></span><br><span class="line">ax1 = fig.add_subplot(<span class="number">222</span>)</span><br><span class="line">ax1.plot(<span class="built_in">range</span>(<span class="number">8</span>), [x**<span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>)])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以逗号隔开</span></span><br><span class="line">ax2 = fig.add_subplot(<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line">ax2.plot(<span class="built_in">range</span>(<span class="number">8</span>), [math.sin(x) <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>)])</span><br><span class="line"></span><br><span class="line">ax3 = fig.add_subplot(<span class="number">221</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># gca() 获取当前绘图对象, 最后绘制的那个</span></span><br><span class="line"><span class="comment"># 如果没有, 将创建一个新的</span></span><br><span class="line">pg = plt.gca()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置属性</span></span><br><span class="line">pg.<span class="built_in">set</span>(title=<span class="string">&#x27;最后绘制的图&#x27;</span>, xlabel=<span class="string">&#x27;x轴&#x27;</span>)</span><br><span class="line">pg.set_ylabel(<span class="string">&#x27;y轴&#x27;</span>, rotation=<span class="number">0</span>) <span class="comment"># 设置 y 轴标签水平显示</span></span><br><span class="line"></span><br><span class="line">pg.plot(<span class="built_in">range</span>(<span class="number">10</span>), <span class="built_in">range</span>(<span class="number">10</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将 y 轴移动到 x=4 处</span></span><br><span class="line">pg.spines[<span class="string">&#x27;left&#x27;</span>].set_position((<span class="string">&#x27;data&#x27;</span>, <span class="number">4</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加网格线, 设置颜色, 透明度</span></span><br><span class="line">pg.grid(color=<span class="string">&#x27;r&#x27;</span>, linestyle=<span class="string">&#x27;-.&#x27;</span>, alpha=<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>


<p><img src="https://wx1.sbimg.cn/2020/07/01/2wytk.md.png" alt="png"></p>
<p>有了层次结构的了解, 就可以更潇洒地直接使用 <code>plt</code> 绘图了, 用 <code>plt</code> 直接绘图, 如果不创建画布, 画布 和 绘图对象 自动生成</p>
<p>下面用常用的图形风格举例(参数非常多, 不做详细介绍):</p>
<h2 id="3-折线图"><a href="#3-折线图" class="headerlink" title="3, 折线图"></a>3, 折线图</h2><p>折线图一般用来反映数据的变化情况和趋势 </p>
<p>上面例子中绘制的都是折线图, 下面<strong>将折线图映射成一排排点, 比较数据的分散程度:</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建两组数据</span></span><br><span class="line">x1 = np.random.randint(<span class="number">0</span>, <span class="number">20</span>, size=<span class="number">500</span>)</span><br><span class="line">x2 = np.random.randint(<span class="number">2</span>, <span class="number">10</span>, size=<span class="number">500</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 映射成两排点</span></span><br><span class="line">plt.figure(figsize=(<span class="number">15</span>, <span class="number">4</span>))</span><br><span class="line">plt.ylim(<span class="number">-0.5</span>, <span class="number">1.5</span>)</span><br><span class="line">plt.plot(x1, np.zeros(<span class="built_in">len</span>(x1)),</span><br><span class="line">         ls=<span class="string">&#x27;&#x27;</span>, <span class="comment"># 线条设为空</span></span><br><span class="line">         marker=<span class="string">&#x27;o&#x27;</span>, <span class="comment"># 数据点的样式</span></span><br><span class="line">         ms=<span class="number">10</span>, <span class="comment"># 点的大小</span></span><br><span class="line">         label=<span class="string">&#x27;x1&#x27;</span>)</span><br><span class="line">plt.plot(x2, np.ones(<span class="built_in">len</span>(x2)), ls=<span class="string">&#x27;&#x27;</span>, marker=<span class="string">&#x27;o&#x27;</span>, ms=<span class="number">10</span>, label=<span class="string">&#x27;x2&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘出两组数据均值所在位置</span></span><br><span class="line">plt.axvline(x1.mean(),</span><br><span class="line">            <span class="number">0.1</span>, <span class="number">0.4</span>, <span class="comment"># 竖线的范围, 取值为 0~1 之间</span></span><br><span class="line">            ls=<span class="string">&#x27;--&#x27;</span>, <span class="comment"># 线条样式</span></span><br><span class="line">            label=<span class="string">&#x27;x1均值&#x27;</span>)</span><br><span class="line">plt.axvline(x2.mean(), <span class="number">0.6</span>, <span class="number">0.9</span>, ls=<span class="string">&#x27;-.&#x27;</span>, color=<span class="string">&#x27;r&#x27;</span>, label=<span class="string">&#x27;x2均值&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 划出 x2 的范围线</span></span><br><span class="line">plt.hlines(<span class="number">0.8</span>, x2.<span class="built_in">min</span>(), x2.<span class="built_in">max</span>())</span><br><span class="line"></span><br><span class="line">plt.legend(fontsize=<span class="number">18</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>


<p><img src="https://wx1.sbimg.cn/2020/07/01/2wrWD.md.png" alt="png"></p>
<h2 id="4-散点图"><a href="#4-散点图" class="headerlink" title="4, 散点图"></a>4, 散点图</h2><p>散点图一般用来反映数据之间关联性(类别和分布规律)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建数据</span></span><br><span class="line">y = np.random.randn(<span class="number">2</span>, <span class="number">100</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第一个类别</span></span><br><span class="line">plt.scatter(y[<span class="number">0</span>], y[<span class="number">1</span>], label=<span class="string">&#x27;第一类&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第二个类别</span></span><br><span class="line">plt.scatter(y[<span class="number">0</span>] + <span class="number">1</span>, y[<span class="number">1</span>] + <span class="number">3</span>, label=<span class="string">&#x27;第二类&#x27;</span>)</span><br><span class="line"></span><br><span class="line">plt.legend()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>


<p><img src="https://wx1.sbimg.cn/2020/07/01/2wOyN.png" alt="png"></p>
<h2 id="5-柱状图"><a href="#5-柱状图" class="headerlink" title="5, 柱状图"></a>5, 柱状图</h2><p>柱状图一般用来比较数据的统计量, 对数据进行直观的比较</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 接下来 5 天下雨的概率</span></span><br><span class="line">prob = [<span class="number">0.81</span>, <span class="number">0.22</span>, <span class="number">0.63</span>, <span class="number">0.18</span>, <span class="number">0.74</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># x 轴标签</span></span><br><span class="line">x = [<span class="string">&#x27;第一天&#x27;</span>, <span class="string">&#x27;第二天&#x27;</span>, <span class="string">&#x27;第三天&#x27;</span>, <span class="string">&#x27;第四天&#x27;</span>, <span class="string">&#x27;第五天&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘图并将图赋值给 rects</span></span><br><span class="line">rects = plt.bar(x, prob, width=<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置 x 轴标签字体和倾斜度; y 轴范围</span></span><br><span class="line">plt.xticks(fontsize=<span class="number">12</span>, rotation=<span class="number">45</span>)</span><br><span class="line">plt.ylim(<span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在柱状图上添加概率标注</span></span><br><span class="line"><span class="keyword">for</span> rect <span class="keyword">in</span> rects:</span><br><span class="line">    height = rect.get_height()</span><br><span class="line">    plt.text(rect.get_x(), height + <span class="number">0.01</span>, <span class="built_in">str</span>(height))</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>


<p><img src="https://wx2.sbimg.cn/2020/07/01/2wVbn.png" alt="png"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 还可以横向绘制</span></span><br><span class="line">rects = plt.barh(x, prob, height=<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line">plt.yticks(fontsize=<span class="number">12</span>, rotation=<span class="number">45</span>)</span><br><span class="line">plt.xlim(<span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在柱状图上添加概率标注</span></span><br><span class="line"><span class="keyword">for</span> rect <span class="keyword">in</span> rects:</span><br><span class="line">    width = rect.get_width()</span><br><span class="line">    plt.text(width,</span><br><span class="line">             rect.get_y() + <span class="number">0.5</span>/<span class="number">2</span>,</span><br><span class="line">             <span class="built_in">str</span>(width),</span><br><span class="line">             va=<span class="string">&#x27;center&#x27;</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>


<p><img src="https://wx2.sbimg.cn/2020/07/01/2wI2h.png" alt="png"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 假设概率大于 0.5 就是下雨, 展示下雨和不下雨, 同时展示概率</span></span><br><span class="line"><span class="comment"># 接下来 5 天下雨的概率</span></span><br><span class="line">prob1 = [<span class="number">0.81</span>, <span class="number">0.22</span>, <span class="number">0.63</span>, <span class="number">0.18</span>, <span class="number">0.74</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 不下雨的概率</span></span><br><span class="line">prob2 = <span class="number">1</span> - np.array(prob)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置 x 轴标签</span></span><br><span class="line">x = [<span class="string">&#x27;第一天&#x27;</span>, <span class="string">&#x27;第二天&#x27;</span>, <span class="string">&#x27;第三天&#x27;</span>, <span class="string">&#x27;第四天&#x27;</span>, <span class="string">&#x27;第五天&#x27;</span>]</span><br><span class="line">m = [<span class="string">&#x27;下雨&#x27;</span> <span class="keyword">if</span> i &gt; <span class="number">0.5</span> <span class="keyword">else</span> <span class="string">&#x27;不下&#x27;</span> <span class="keyword">for</span> i <span class="keyword">in</span> prob1]</span><br><span class="line">n = [x[i] + m[i] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(x))]</span><br><span class="line">     </span><br><span class="line"><span class="comment"># 绘图</span></span><br><span class="line">plt.bar(n, prob1, label=<span class="string">&#x27;下雨的概率&#x27;</span>)</span><br><span class="line">plt.bar(n, prob2, label=<span class="string">&#x27;不下雨的概率&#x27;</span>, bottom=prob1)</span><br><span class="line"></span><br><span class="line">plt.ylim(<span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line">plt.xticks(fontsize=<span class="number">12</span>, rotation=<span class="number">45</span>)</span><br><span class="line"></span><br><span class="line">plt.legend(fontsize=<span class="number">10</span>, loc=<span class="string">&#x27;best&#x27;</span>, bbox_to_anchor=(<span class="number">0.7</span>, <span class="number">1</span>))</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>


<p><img src="https://wx2.sbimg.cn/2020/07/01/2wfLM.png" alt="png"></p>
<h2 id="6-直方图"><a href="#6-直方图" class="headerlink" title="6, 直方图"></a>6, 直方图</h2><p>直方图用来直观地反映数据的总体分布情况</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建数据</span></span><br><span class="line">np.random.seed(<span class="number">0</span>)</span><br><span class="line">data = np.random.normal(<span class="number">30</span>, <span class="number">5</span>, size=<span class="number">1000</span>)</span><br><span class="line"><span class="comment"># 30 是数据的均值, 5 是标准差</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制直方图</span></span><br><span class="line">plt.hist(data,</span><br><span class="line">         <span class="number">40</span>, <span class="comment"># 组数</span></span><br><span class="line">         density=<span class="literal">True</span> <span class="comment"># 每组以占比显示</span></span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制概率密度曲线</span></span><br><span class="line">x = np.arange(<span class="built_in">int</span>(data.<span class="built_in">min</span>()), <span class="built_in">int</span>(data.<span class="built_in">max</span>()))</span><br><span class="line">f = <span class="keyword">lambda</span> x, mu, sigma: np.exp(-((x - mu)**<span class="number">2</span>) / (<span class="number">2</span> * sigma**<span class="number">2</span>)</span><br><span class="line">                               ) / (sigma * np.sqrt(<span class="number">2</span> * np.pi))</span><br><span class="line">y = f(x, <span class="number">30</span>, <span class="number">5</span>)</span><br><span class="line">plt.plot(x, y, ls=<span class="string">&#x27;-&#x27;</span>, color=<span class="string">&#x27;r&#x27;</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>


<p><img src="https://wx2.sbimg.cn/2020/07/01/2z4ia.png" alt="png"></p>
<p>上图可以利用基于 matpoltlib 的库 seaborn 绘制更方便:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line">sns.distplot(data)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>


<p><img src="https://wx2.sbimg.cn/2020/07/01/2zMMR.png" alt="png"></p>
<h2 id="7-饼图"><a href="#7-饼图" class="headerlink" title="7, 饼图"></a>7, 饼图</h2><p>饼图用来直观地反映各个类别占比</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">plt.rcParams[<span class="string">&#x27;font.size&#x27;</span>] = <span class="number">14</span></span><br><span class="line">fig = plt.figure(figsize=(<span class="number">5</span>, <span class="number">6</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 准备数据</span></span><br><span class="line">x = [<span class="number">60</span>, <span class="number">45</span>, <span class="number">21</span>, <span class="number">12</span>, <span class="number">8</span>, <span class="number">2</span>] <span class="comment"># 每个类别数量</span></span><br><span class="line">labels = [<span class="string">f&#x27;<span class="subst">&#123;i&#125;</span>类&#x27;</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(x) + <span class="number">1</span>)] <span class="comment"># 类别名</span></span><br><span class="line">explode = [<span class="number">0.02</span>] * <span class="built_in">len</span>(x) <span class="comment"># 每一块离中心的距离</span></span><br><span class="line"></span><br><span class="line">plt.pie(x,</span><br><span class="line">        explode=explode,</span><br><span class="line">        labels=labels,</span><br><span class="line">        colors=<span class="literal">None</span>, <span class="comment"># 颜色不配置, 使用默认</span></span><br><span class="line">        autopct=<span class="string">&#x27;%.1f%%&#x27;</span>, <span class="comment"># 设置百分比标签</span></span><br><span class="line">        pctdistance=<span class="number">0.7</span>, <span class="comment"># 设置百分比标签离中心的距离</span></span><br><span class="line">        shadow=<span class="literal">False</span>, <span class="comment"># 设置阴影</span></span><br><span class="line">        labeldistance=<span class="number">1.05</span>, <span class="comment"># 设置类别标签离中心的距离</span></span><br><span class="line">        startangle=<span class="number">180</span>, <span class="comment"># 设置绘制起始位置</span></span><br><span class="line">        radius=<span class="number">1.1</span>, <span class="comment"># 设置饼图大小</span></span><br><span class="line">        counterclock=<span class="literal">False</span>, <span class="comment"># 设置顺逆时针</span></span><br><span class="line">       )</span><br><span class="line">      </span><br><span class="line">plt.legend(fontsize=<span class="number">16</span>, loc=<span class="string">&#x27;best&#x27;</span>, bbox_to_anchor=(<span class="number">1</span>, <span class="number">1</span>))</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>


<p><img src="https://wx1.sbimg.cn/2020/07/01/2zXRI.png" alt="png"></p>
<p><strong>拓展:</strong> 绘制三维立体图</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> mpl_toolkits.mplot3d <span class="keyword">import</span> axes3d</span><br><span class="line"></span><br><span class="line">fig = plt.figure()</span><br><span class="line">ax = fig.gca(projection=<span class="string">&#x27;3d&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 准备数据</span></span><br><span class="line">theta = np.linspace(<span class="number">-4</span> * np.pi, <span class="number">4</span> * np.pi, <span class="number">100</span>)</span><br><span class="line">z = np.linspace(<span class="number">-2</span>, <span class="number">2</span>, <span class="number">100</span>)</span><br><span class="line">r = z**<span class="number">2</span> + <span class="number">1</span></span><br><span class="line">x = r * np.sin(theta)</span><br><span class="line">y = r * np.cos(theta)</span><br><span class="line"></span><br><span class="line">ax.plot(x, y, z, label=<span class="string">&#x27;空间曲线&#x27;</span>, color=<span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">ax.legend()</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>


<p><img src="https://wx1.sbimg.cn/2020/07/01/2zmWK.png" alt="png"></p>
]]></content>
      <categories>
        <category>数据分析</category>
      </categories>
      <tags>
        <tag>matplotlib</tag>
      </tags>
  </entry>
  <entry>
    <title>Numpy 速查笔记</title>
    <url>/numpy-464aacb14f3e/</url>
    <content><![CDATA[<p><a href="https://billwuhao.com/" title="诗和远方都在脚下"><img src="/images/dbj.jpg"></a></p>
<br>

<blockquote>
<p>内容主要来源：<a href="https://numpy.org/doc/">官方文档</a> 学习笔记。</p>
</blockquote>
<blockquote>
<p>numpy 是 python 的强大科学计算库, 它让 python 处理数据, 进行科学计算变得极其便捷, 高效</p>
</blockquote>
<p><font color=#00A600 >2020年7月8日更新</font></p>
<h2 id="一-ndarray-对象"><a href="#一-ndarray-对象" class="headerlink" title="一, ndarray 对象"></a>一, ndarray 对象</h2><h3 id="1-ndaraay-介绍"><a href="#1-ndaraay-介绍" class="headerlink" title="1, ndaraay 介绍"></a>1, ndaraay 介绍</h3><p>ndarray 是具有相同类型和大小的项目的多维容器, 它的数据存储效率和输入输出性能远远优于 python 中等价的数据结构</p>
<h4 id="1-01-理解-ndarray"><a href="#1-01-理解-ndarray" class="headerlink" title="1.01, 理解 ndarray"></a>1.01, 理解 ndarray</h4><p>创建 ndarray 用方法 <code>np.array()</code>, 下面只介绍 3 维以下数组, 理解它们的结构</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 一维</span></span><br><span class="line">a = np.array([<span class="number">1</span>, <span class="string">&#x27;a&#x27;</span>])</span><br><span class="line">print(a)</span><br><span class="line">a</span><br></pre></td></tr></table></figure>

<pre><code>[&#39;1&#39; &#39;a&#39;]

array([&#39;1&#39;, &#39;a&#39;], dtype=&#39;&lt;U11&#39;)</code></pre>
<p>上例可见, 打印结果是一个列表, 元素都是字符串, 但其实它是一个 ndarray, 它其中每个元素息息相关, 数据类型都统一成 Unicode, 元素位长是 11, 所以说它是一个具有相同类型和大小的项目的多维容器</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 二维</span></span><br><span class="line">a = np.array([[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="string">&#x27;4&#x27;</span>]])</span><br><span class="line">print(a)</span><br><span class="line">a</span><br></pre></td></tr></table></figure>

<pre><code>[[&#39;1&#39; &#39;2&#39;]
 [&#39;3&#39; &#39;4&#39;]]

array([[&#39;1&#39;, &#39;2&#39;],
       [&#39;3&#39;, &#39;4&#39;]], dtype=&#39;&lt;U11&#39;)</code></pre>
<p>二维就像一个表格, 横着的就是一行, 竖着的就是一列</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 三维</span></span><br><span class="line">a = np.array([[[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">1</span>, <span class="number">2</span>]], [[<span class="number">3</span>, <span class="number">4</span>], [<span class="number">3</span>, <span class="number">4</span>]]])</span><br><span class="line">print(a)</span><br><span class="line">a</span><br></pre></td></tr></table></figure>

<pre><code>[[[1 2]
  [1 2]]

 [[3 4]
  [3 4]]]

array([[[1, 2],
        [1, 2]],

       [[3, 4],
        [3, 4]]])</code></pre>
<p>三维类似多个表格放到一个 excel 文件里</p>
<h4 id="1-02-ndarray-对象计算的优势"><a href="#1-02-ndarray-对象计算的优势" class="headerlink" title="1.02, ndarray 对象计算的优势"></a>1.02, ndarray 对象计算的优势</h4><p>用实例来对比利用 ndarray 进行计算的优势</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="comment"># 假设有如下列表和 array, 使其中每个数都变成它的平方</span></span><br><span class="line">a1 = [random.random() <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100000000</span>)]</span><br><span class="line"><span class="comment"># a2 = np.array(a1)</span></span><br><span class="line"></span><br><span class="line">t1 = time.time()</span><br><span class="line">b = [i**<span class="number">2</span> <span class="keyword">for</span> i <span class="keyword">in</span> a1]</span><br><span class="line">t2 = time.time()</span><br><span class="line">a2 = np.array(a1)</span><br><span class="line">c = a2**<span class="number">2</span></span><br><span class="line">t3 = time.time()</span><br><span class="line">print(t2 - t1, t3 - t2, sep=<span class="string">&#x27;\n&#x27;</span>)</span><br></pre></td></tr></table></figure>

<pre><code>28.430076599121094
15.24291205406189</code></pre>
<p>差距非常明显(如果 a2 在计算之前就已经是 ndarray 对象会更明显), python 计算需要遍历, numpy 有其自身机制(广播)实现快速计算</p>
<h4 id="1-03-ndarray-的数据类型和常量"><a href="#1-03-ndarray-的数据类型和常量" class="headerlink" title="1.03, ndarray 的数据类型和常量"></a>1.03, ndarray 的数据类型和常量</h4><p>ndarray 对象数据的数据类型有 <code>bool</code>, <code>int</code>, <code>float</code>, <code>U</code>(字符串), <code>O</code>(python 对象)等, 查看数据类型用 <code>dtype</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a = np.array([<span class="number">1</span>, <span class="string">&#x27;a&#x27;</span>, np.nan])</span><br><span class="line">a.dtype, a[<span class="number">0</span>].dtype, a[<span class="number">2</span>].dtype</span><br></pre></td></tr></table></figure>




<pre><code>(dtype(&#39;&lt;U11&#39;), dtype(&#39;&lt;U1&#39;), dtype(&#39;&lt;U3&#39;))</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.array(<span class="literal">True</span>).dtype</span><br></pre></td></tr></table></figure>




<pre><code>dtype(&#39;bool&#39;)</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.array(<span class="number">123456</span>).dtype</span><br></pre></td></tr></table></figure>




<pre><code>dtype(&#39;int32&#39;)</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.array(<span class="number">3.1415926</span>).dtype</span><br></pre></td></tr></table></figure>




<pre><code>dtype(&#39;float64&#39;)</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.array(<span class="built_in">list</span>).dtype</span><br></pre></td></tr></table></figure>




<pre><code>dtype(&#39;O&#39;)</code></pre>
<p>ndarray 对象数据的常量有 <code>pi</code>, <code>e</code>, <code>nan</code> (空值), <code>inf</code> (无穷大)等</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.pi</span><br></pre></td></tr></table></figure>




<pre><code>3.141592653589793</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.e</span><br></pre></td></tr></table></figure>




<pre><code>2.718281828459045</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.nan</span><br></pre></td></tr></table></figure>




<pre><code>nan</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.inf</span><br></pre></td></tr></table></figure>




<pre><code>inf</code></pre>
<h3 id="2-ndarray-的属性"><a href="#2-ndarray-的属性" class="headerlink" title="2, ndarray 的属性"></a>2, ndarray 的属性</h3><p>常用 ndarray 对象的属性</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = np.array([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]])</span><br><span class="line">a</span><br></pre></td></tr></table></figure>




<pre><code>array([[1, 2, 3],
       [4, 5, 6]])</code></pre>
<p>查看数组形状 <code>(行, 列)</code>, 这在数据处理和计算时非常有用, 例如遍历出所有行或列</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a.shape</span><br></pre></td></tr></table></figure>




<pre><code>(2, 3)</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 遍历所有列</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(a.shape[<span class="number">1</span>]):</span><br><span class="line">    print(a[:, i])</span><br></pre></td></tr></table></figure>

<pre><code>[1 4]
[2 5]
[3 6]</code></pre>
<p>查看数组维度</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a.ndim</span><br></pre></td></tr></table></figure>




<pre><code>2</code></pre>
<p>查看数组元素个数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a.size</span><br></pre></td></tr></table></figure>




<pre><code>6</code></pre>
<p>查看数组类型</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a.dtype</span><br></pre></td></tr></table></figure>




<pre><code>dtype(&#39;int32&#39;)</code></pre>
<p>查看数组元素的大小, 字节为单位</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a.itemsize</span><br></pre></td></tr></table></figure>




<pre><code>4</code></pre>
<p>数组转置, 就是行列互换</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a.T</span><br></pre></td></tr></table></figure>




<pre><code>array([[1, 4],
       [2, 5],
       [3, 6]])</code></pre>
<h2 id="二-ndarray-对象的切片操作"><a href="#二-ndarray-对象的切片操作" class="headerlink" title="二, ndarray 对象的切片操作"></a>二, ndarray 对象的切片操作</h2><p>与 python 的 range 对应的 numpy 方法是 arange, 下面用它创建数组作为例子</p>
<h3 id="1-切片取值"><a href="#1-切片取值" class="headerlink" title="1, 切片取值"></a>1, 切片取值</h3><p>ndarray 的切片操作和 python 类似, 一维切片 <code>[起始:结束:步长]</code>, 二维的切片 <code>[起始行:结束行:步长, 起始列:结束列:步长]</code> 或 <code>[[行, ...], [列, ...]]</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = np.arange(<span class="number">20</span>)</span><br><span class="line">a.shape = (<span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line">a</span><br></pre></td></tr></table></figure>




<pre><code>array([[ 0,  1,  2,  3,  4],
       [ 5,  6,  7,  8,  9],
       [10, 11, 12, 13, 14],
       [15, 16, 17, 18, 19]])</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 第一行的第 1, 3, 5 个数</span></span><br><span class="line">a[<span class="number">0</span>][<span class="number">0</span>::<span class="number">2</span>]</span><br></pre></td></tr></table></figure>




<pre><code>array([0, 2, 4])</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a[<span class="number">2</span>, <span class="number">3</span>]</span><br></pre></td></tr></table></figure>




<pre><code>13</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a[<span class="number">0</span>:<span class="number">2</span>, <span class="number">1</span>:<span class="number">5</span>]</span><br></pre></td></tr></table></figure>




<pre><code>array([[1, 2, 3, 4],
       [6, 7, 8, 9]])</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a[<span class="number">0</span>:<span class="number">3</span>:<span class="number">2</span>, <span class="number">0</span>:<span class="number">4</span>:<span class="number">2</span>]</span><br></pre></td></tr></table></figure>




<pre><code>array([[ 0,  2],
       [10, 12]])</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a[[<span class="number">1</span>, <span class="number">3</span>], <span class="number">0</span>:<span class="number">3</span>]</span><br></pre></td></tr></table></figure>




<pre><code>array([[ 5,  6,  7],
       [15, 16, 17]])</code></pre>
<p>还可以通过逻辑运算取值</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 取出数组中的数翻倍之后小于 15 的数</span></span><br><span class="line"><span class="comment"># 结果展开为 1 维</span></span><br><span class="line">a[a * <span class="number">2</span> &lt; <span class="number">15</span>]</span><br></pre></td></tr></table></figure>




<pre><code>array([0, 1, 2, 3, 4, 5, 6, 7])</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># &amp; 与</span></span><br><span class="line">a[(a &lt; <span class="number">5</span>) &amp; (a &gt; <span class="number">1</span>)]</span><br></pre></td></tr></table></figure>




<pre><code>array([2, 3, 4])</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># | 或</span></span><br><span class="line">a[(a &lt; <span class="number">3</span>) | (a &gt; <span class="number">15</span>)]</span><br></pre></td></tr></table></figure>




<pre><code>array([ 0,  1,  2, 16, 17, 18, 19])</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ~ 非</span></span><br><span class="line">a[~ (a &gt; <span class="number">3</span>)]</span><br></pre></td></tr></table></figure>




<pre><code>array([0, 1, 2, 3])</code></pre>
<h3 id="2-利用切片修改值"><a href="#2-利用切片修改值" class="headerlink" title="2, 利用切片修改值"></a>2, 利用切片修改值</h3><p>切片修改值, 其实就是将取到的值重新赋值</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a[~ (a &gt; <span class="number">3</span>)] = <span class="number">1</span></span><br><span class="line">a</span><br></pre></td></tr></table></figure>




<pre><code>array([[ 1,  1,  1,  1,  4],
       [ 5,  6,  7,  8,  9],
       [10, 11, 12, 13, 14],
       [15, 16, 17, 18, 19]])</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将 1 修改为 nan, nan 是 float 类型, </span></span><br><span class="line"><span class="comment"># 保证类型一致性, 需要将 a 转为 float</span></span><br><span class="line">a = a.astype(<span class="built_in">float</span>)</span><br><span class="line">a[a == <span class="number">1</span>] = np.nan</span><br><span class="line">a</span><br></pre></td></tr></table></figure>




<pre><code>array([[nan, nan, nan, nan,  4.],
       [ 5.,  6.,  7.,  8.,  9.],
       [10., 11., 12., 13., 14.],
       [15., 16., 17., 18., 19.]])</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 任何 nan 都不等于 nan, </span></span><br><span class="line"><span class="comment"># 利用此特性取 nan, 或非 nan 的数</span></span><br><span class="line">a[a != a], a[a == a]</span><br></pre></td></tr></table></figure>




<pre><code>(array([nan, nan, nan, nan]),
 array([ 4.,  5.,  6.,  7.,  8.,  9., 10., 11., 12., 13., 14., 15., 16.,
        17., 18., 19.]))</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 交换行, 交换列</span></span><br><span class="line">a[[<span class="number">0</span>, <span class="number">3</span>], :] = a[[<span class="number">3</span>, <span class="number">0</span>], :]</span><br><span class="line">a[:, [<span class="number">4</span>, <span class="number">0</span>]] = a[:, [<span class="number">0</span>, <span class="number">4</span>]]</span><br><span class="line">a</span><br></pre></td></tr></table></figure>




<pre><code>array([[19., 16., 17., 18., 15.],
       [ 9.,  6.,  7.,  8.,  5.],
       [14., 11., 12., 13., 10.],
       [ 4., nan, nan, nan, nan]])</code></pre>
<h2 id="三-ndarray-对象的运算及其方法"><a href="#三-ndarray-对象的运算及其方法" class="headerlink" title="三, ndarray 对象的运算及其方法"></a>三, ndarray 对象的运算及其方法</h2><h3 id="1-ndarray-的运算"><a href="#1-ndarray-的运算" class="headerlink" title="1, ndarray 的运算"></a>1, ndarray 的运算</h3><p>numpy 在运算时, 会通过广播机制, 将运算相对应到每个元素上:</p>
<p><strong>数和数组计算, 数会和数组中的每一个元素进行计算</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 方法 reshape 用于设置数组的形状, 后面会说</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">a = np.arange(<span class="number">9</span>).reshape((<span class="number">3</span>, <span class="number">3</span>))</span><br><span class="line">a</span><br></pre></td></tr></table></figure>




<pre><code>array([[0, 1, 2],
       [3, 4, 5],
       [6, 7, 8]])</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">b = -a * <span class="number">2</span></span><br><span class="line">b</span><br></pre></td></tr></table></figure>




<pre><code>array([[  0,  -2,  -4],
       [ -6,  -8, -10],
       [-12, -14, -16]])</code></pre>
<p><strong>相同形状的多维数组之间的运算, 对应位置的元素进行计算</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a + b</span><br></pre></td></tr></table></figure>




<pre><code>array([[ 0, -1, -2],
       [-3, -4, -5],
       [-6, -7, -8]])</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 行相同</span></span><br><span class="line">a[<span class="number">1</span>] + (a + b)</span><br></pre></td></tr></table></figure>




<pre><code>array([[ 3,  3,  3],
       [ 0,  0,  0],
       [-3, -3, -3]])</code></pre>
<p><strong>二维一列的数组和多维数组之间的运算, 需要列元素个数相同, 然后一一对应并广播计算</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 列相同</span></span><br><span class="line"><span class="comment"># a 的列取出来成了一维, 需要转为二维</span></span><br><span class="line">a[:, <span class="number">1</span>].reshape((<span class="number">3</span>, <span class="number">1</span>)) + (a + b)</span><br></pre></td></tr></table></figure>




<pre><code>array([[ 1,  0, -1],
       [ 1,  0, -1],
       [ 1,  0, -1]])</code></pre>
<h3 id="2-常用-ndarray-对象的方法"><a href="#2-常用-ndarray-对象的方法" class="headerlink" title="2, 常用 ndarray 对象的方法"></a>2, 常用 ndarray 对象的方法</h3><p>就是直接用 ndarray 对象调用的方法</p>
<h4 id="2-01-形状操作"><a href="#2-01-形状操作" class="headerlink" title="2.01, 形状操作"></a>2.01, 形状操作</h4><p><strong>flatten 或 ravel 将多维数组展开为一维, 不改变原数组</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a</span><br></pre></td></tr></table></figure>




<pre><code>array([[0, 1, 2],
       [3, 4, 5],
       [6, 7, 8]])</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 默认参数 &#x27;C&#x27; 以行展开, &#x27;F&#x27; 以列展开</span></span><br><span class="line">display(a.flatten())</span><br><span class="line">display(a.flatten(<span class="string">&#x27;F&#x27;</span>))</span><br><span class="line">a.ravel(<span class="string">&#x27;F&#x27;</span>)</span><br></pre></td></tr></table></figure>


<pre><code>array([0, 1, 2, 3, 4, 5, 6, 7, 8])

array([0, 3, 6, 1, 4, 7, 2, 5, 8])

array([0, 3, 6, 1, 4, 7, 2, 5, 8])</code></pre>
<p><strong>reshape 修改数组的形状, 不改变原数组, 行列数相乘要等于元素总数; resize 就地修改原数组形状</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 默认以行展开修改</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">b = np.arange(<span class="number">12</span>).reshape((<span class="number">3</span>, <span class="number">4</span>))</span><br><span class="line">display(b)</span><br><span class="line">b.reshape((<span class="number">2</span>, <span class="number">6</span>), order=<span class="string">&#x27;F&#x27;</span>)</span><br></pre></td></tr></table></figure>


<pre><code>array([[ 0,  1,  2,  3],
       [ 4,  5,  6,  7],
       [ 8,  9, 10, 11]])

array([[ 0,  8,  5,  2, 10,  7],
       [ 4,  1,  9,  6,  3, 11]])</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 就地修改 b</span></span><br><span class="line">display(b)</span><br><span class="line">b.resize((<span class="number">4</span>, <span class="number">3</span>))</span><br><span class="line">b</span><br></pre></td></tr></table></figure>


<pre><code>array([[ 0,  1,  2,  3],
       [ 4,  5,  6,  7],
       [ 8,  9, 10, 11]])

array([[ 0,  1,  2],
       [ 3,  4,  5],
       [ 6,  7,  8],
       [ 9, 10, 11]])</code></pre>
<h4 id="2-02-转换类型"><a href="#2-02-转换类型" class="headerlink" title="2.02, 转换类型"></a>2.02, 转换类型</h4><p><strong>tolist 数组转列表</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">b.tolist()</span><br></pre></td></tr></table></figure>




<pre><code>[[0, 1, 2], [3, 4, 5], [6, 7, 8], [9, 10, 11]]</code></pre>
<p><strong>astype 改变数组类型</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">b.astype(<span class="built_in">float</span>)</span><br></pre></td></tr></table></figure>




<pre><code>array([[ 0.,  1.,  2.],
       [ 3.,  4.,  5.],
       [ 6.,  7.,  8.],
       [ 9., 10., 11.]])</code></pre>
<h4 id="2-03-修改-排序及查找"><a href="#2-03-修改-排序及查找" class="headerlink" title="2.03, 修改, 排序及查找"></a>2.03, 修改, 排序及查找</h4><p><strong>fill 给原数组重新填值, 类型不变</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">b[<span class="number">0</span>].fill(<span class="number">2.01</span>)</span><br><span class="line">b</span><br></pre></td></tr></table></figure>




<pre><code>array([[ 2,  2,  2],
       [ 3,  4,  5],
       [ 6,  7,  8],
       [ 9, 10, 11]])</code></pre>
<p><strong>sort 就地排序, 参数 0 将列排序, 1 将行排序</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = np.array([[<span class="number">3</span>, <span class="number">0</span>, <span class="number">5</span>], [<span class="number">8</span>, <span class="number">4</span>, <span class="number">6</span>], [<span class="number">0</span>, <span class="number">7</span>, <span class="number">3</span>]])</span><br><span class="line">a.sort(<span class="number">0</span>)</span><br><span class="line">a</span><br></pre></td></tr></table></figure>




<pre><code>array([[0, 0, 3],
       [3, 4, 5],
       [8, 7, 6]])</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a.argsort() <span class="comment"># 返回排序后的索引位置</span></span><br></pre></td></tr></table></figure>




<pre><code>array([[1, 0, 2],
       [0, 1, 2],
       [2, 1, 0]], dtype=int64)</code></pre>
<p><strong>nonzero 返回非零元素的索引, 行坐标一个数组, 列坐标一个数组</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a.nonzero()</span><br></pre></td></tr></table></figure>




<pre><code>(array([0, 1, 1, 1, 2, 2, 2], dtype=int64),
 array([2, 0, 1, 2, 0, 1, 2], dtype=int64))</code></pre>
<h4 id="2-04-计算"><a href="#2-04-计算" class="headerlink" title="2.04, 计算"></a>2.04, 计算</h4><p><strong>max 返回最大值, 给定轴将返回给定轴的最大值, argmax 返回索引, 与之对应的还有最小min 和 argmin</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 参数 0 列的最大值, 参数 1 行的最大值</span></span><br><span class="line">a = np.arange(<span class="number">1.01</span>, <span class="number">13.13</span>, <span class="number">1.01</span>).reshape(<span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">print(a)</span><br><span class="line">print(a.<span class="built_in">max</span>(), a.<span class="built_in">max</span>(axis=<span class="number">0</span>), a.<span class="built_in">max</span>(axis=<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 参数 0 行索引, 1 列索引</span></span><br><span class="line">print(a.argmax(), a.argmax(<span class="number">0</span>), a.argmax(<span class="number">1</span>))</span><br></pre></td></tr></table></figure>

<pre><code>[[ 1.01  2.02  3.03  4.04]
 [ 5.05  6.06  7.07  8.08]
 [ 9.09 10.1  11.11 12.12]]
12.12 [ 9.09 10.1  11.11 12.12] [ 4.04  8.08 12.12]
11 [2 2 2 2] [3 3 3]</code></pre>
<p><strong>ptp 返回极值或给定轴的极值(最大-最小)</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a.ptp(), a.ptp(axis=<span class="number">0</span>), a.ptp(axis=<span class="number">1</span>)</span><br></pre></td></tr></table></figure>




<pre><code>(11.11, array([8.08, 8.08, 8.08, 8.08]), array([3.03, 3.03, 3.03]))</code></pre>
<p><strong>clip 返回指定值之间的数组, 小于或大于指定值的, 用指定值填充</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a.clip(<span class="number">2</span>, <span class="number">6</span>)</span><br></pre></td></tr></table></figure>




<pre><code>array([[2.  , 2.02, 3.03, 4.04],
       [5.05, 6.  , 6.  , 6.  ],
       [6.  , 6.  , 6.  , 6.  ]])</code></pre>
<p><strong>round 四舍五入到指定位数</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a.<span class="built_in">round</span>(<span class="number">1</span>)</span><br></pre></td></tr></table></figure>




<pre><code>array([[ 1. ,  2. ,  3. ,  4. ],
       [ 5. ,  6.1,  7.1,  8.1],
       [ 9.1, 10.1, 11.1, 12.1]])</code></pre>
<p><strong>sum 求和, cumsum 累积求和</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(a.<span class="built_in">sum</span>()) <span class="comment"># 总和</span></span><br><span class="line">print(a.<span class="built_in">sum</span>(<span class="number">0</span>)) <span class="comment"># 列求和</span></span><br><span class="line">print(a.<span class="built_in">sum</span>(<span class="number">1</span>)) <span class="comment"># 行求和</span></span><br></pre></td></tr></table></figure>

<pre><code>78.78
[15.15 18.18 21.21 24.24]
[10.1  26.26 42.42]</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(a.cumsum()) <span class="comment"># 全部累积</span></span><br><span class="line">print(a.cumsum(<span class="number">0</span>)) <span class="comment"># 列累积</span></span><br><span class="line">print(a.cumsum(<span class="number">1</span>)) <span class="comment"># 行累积</span></span><br></pre></td></tr></table></figure>

<pre><code>[ 1.01  3.03  6.06 10.1  15.15 21.21 28.28 36.36 45.45 55.55 66.66 78.78]
[[ 1.01  2.02  3.03  4.04]
 [ 6.06  8.08 10.1  12.12]
 [15.15 18.18 21.21 24.24]]
[[ 1.01  3.03  6.06 10.1 ]
 [ 5.05 11.11 18.18 26.26]
 [ 9.09 19.19 30.3  42.42]]</code></pre>
<p>类似还有 mean 均值, var 方差, std 标准差, prod 乘积, cumprod 累积乘积, 不在一一举例</p>
<p><strong>all 数组所有元素都判断为 True, 返回 True, 而 any 只要任何一个 True 返回 True</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = np.array([<span class="number">1</span>, <span class="number">2</span>])</span><br><span class="line">b = np.array([<span class="number">0</span>, <span class="number">0</span>])</span><br><span class="line">a.<span class="built_in">all</span>(), b.<span class="built_in">all</span>(), a.<span class="built_in">any</span>(), b.<span class="built_in">any</span>()</span><br></pre></td></tr></table></figure>




<pre><code>(True, False, True, False)</code></pre>
<h2 id="四-创建或生成-ndarray-对象"><a href="#四-创建或生成-ndarray-对象" class="headerlink" title="四, 创建或生成 ndarray 对象"></a>四, 创建或生成 ndarray 对象</h2><h3 id="1-生成随机数"><a href="#1-生成随机数" class="headerlink" title="1, 生成随机数"></a>1, 生成随机数</h3><p>利用 numpy 生成随机数的模块 random, 创建数据来作例子非常有用. 先研究一下这个模块, 再研究通用函数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成 0 ~ 1 之间的随机数</span></span><br><span class="line">display(<span class="number">1</span> + np.random.random(<span class="number">3</span>))</span><br><span class="line">np.random.random((<span class="number">2</span>,<span class="number">3</span>)) * <span class="number">10</span></span><br></pre></td></tr></table></figure>


<pre><code>array([1.82284856, 1.74169635, 1.13422422])

array([[6.36362188, 1.14392333, 8.91802989],
       [6.36495372, 3.45182186, 5.43685741]])</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 同上, 传参方式不一样</span></span><br><span class="line">display(np.random.rand(<span class="number">3</span>))</span><br><span class="line">np.random.rand(<span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>)</span><br></pre></td></tr></table></figure>


<pre><code>array([0.98425577, 0.14132891, 0.18846798])

array([[[0.45803962, 0.04218858],
        [0.63973453, 0.21237992],
        [0.70729683, 0.21256585]]])</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 返回指定范围内的随机整数 [a,b) 包含 a 不包含 b, 不指定 b 则 [0,a)</span></span><br><span class="line">display(np.random.randint(<span class="number">3</span>, size=<span class="number">3</span>))</span><br><span class="line">np.random.randint(<span class="number">1</span>, <span class="number">4</span>, (<span class="number">2</span>, <span class="number">3</span>))</span><br></pre></td></tr></table></figure>


<pre><code>array([1, 0, 0])

array([[2, 1, 3],
       [3, 2, 1]])</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 生成的随机数服从标准正态分布</span></span><br><span class="line">display(np.random.randn(<span class="number">3</span>))</span><br><span class="line">np.random.randn(<span class="number">3</span>, <span class="number">2</span>)</span><br></pre></td></tr></table></figure>


<pre><code>array([-0.09604445, -0.75864414, -1.5083506 ])

array([[-1.23948685, -0.81579078],
       [ 0.40326043,  1.09253726],
       [ 0.89420717,  1.09676142]])</code></pre>
<p>类似还有拉普拉斯分布 laplace, 逻辑分布 logistic, 正态分布 normal 等, 可以设置分布的参数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.random.logistic(<span class="number">5</span>, <span class="number">2</span>, (<span class="number">2</span>, <span class="number">3</span>))</span><br></pre></td></tr></table></figure>




<pre><code>array([[ 0.40236115, -3.75399016,  6.85283009],
       [ 6.68625045, 14.34102472,  6.39633631]])</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 打乱原数组元素, 二维时只能打乱行的顺序</span></span><br><span class="line">a = np.arange(<span class="number">5</span>)</span><br><span class="line">b = np.arange(<span class="number">9</span>).reshape(<span class="number">3</span>, <span class="number">3</span>)</span><br><span class="line">np.random.shuffle(a)</span><br><span class="line">np.random.shuffle(b)</span><br><span class="line">a, b</span><br></pre></td></tr></table></figure>




<pre><code>(array([1, 4, 0, 3, 2]),
 array([[3, 4, 5],
        [0, 1, 2],
        [6, 7, 8]]))</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 从一个一维数组里随机选择指定数量的元素, </span></span><br><span class="line"><span class="comment"># 或随机生成 0 到指定整数(不包含)的随机数</span></span><br><span class="line"><span class="comment"># replace=True 元素可以重复选择(默认)</span></span><br><span class="line">display(np.random.choice(<span class="number">5</span>, <span class="number">5</span>, replace=<span class="literal">False</span>))</span><br><span class="line">np.random.choice(a, (<span class="number">2</span>, <span class="number">3</span>))</span><br></pre></td></tr></table></figure>


<pre><code>array([4, 3, 0, 1, 2])

array([[4, 2, 3],
       [3, 4, 0]])</code></pre>
<h3 id="2-创建数组"><a href="#2-创建数组" class="headerlink" title="2, 创建数组"></a>2, 创建数组</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.empty((<span class="number">2</span>, <span class="number">3</span>))</span><br></pre></td></tr></table></figure>




<pre><code>array([[0.0e+000, 9.9e-324, 1.5e-323],
       [2.0e-323, 2.5e-323, 3.0e-323]])</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = np.eye(<span class="number">3</span>)</span><br><span class="line">a</span><br></pre></td></tr></table></figure>




<pre><code>array([[1., 0., 0.],
       [0., 1., 0.],
       [0., 0., 1.]])</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.ones((<span class="number">2</span>, <span class="number">3</span>))</span><br></pre></td></tr></table></figure>




<pre><code>array([[1., 1., 1.],
       [1., 1., 1.]])</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.ones_like(a)</span><br></pre></td></tr></table></figure>




<pre><code>array([[1., 1., 1.],
       [1., 1., 1.],
       [1., 1., 1.]])</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.zeros((<span class="number">2</span>, <span class="number">3</span>))</span><br></pre></td></tr></table></figure>




<pre><code>array([[0., 0., 0.],
       [0., 0., 0.]])</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.full((<span class="number">2</span>, <span class="number">3</span>), <span class="number">3</span>)</span><br></pre></td></tr></table></figure>




<pre><code>array([[3, 3, 3],
       [3, 3, 3]])</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.array(<span class="built_in">list</span>)</span><br></pre></td></tr></table></figure>




<pre><code>array(&lt;class &#39;list&#39;&gt;, dtype=object)</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.arange(<span class="number">3</span>)</span><br></pre></td></tr></table></figure>




<pre><code>array([0, 1, 2])</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.linspace(<span class="number">1</span>, <span class="number">9</span>, <span class="number">3</span>)</span><br></pre></td></tr></table></figure>




<pre><code>array([1., 5., 9.])</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.logspace(<span class="number">1</span>, <span class="number">3</span>, <span class="number">3</span>)</span><br></pre></td></tr></table></figure>




<pre><code>array([  10.,  100., 1000.])</code></pre>
<h2 id="五-常用的通函数及-API"><a href="#五-常用的通函数及-API" class="headerlink" title="五, 常用的通函数及 API"></a>五, 常用的通函数及 API</h2><p>numpy 调用, 用来操作 ndarray 对象的函数</p>
<h3 id="1-修改数组形状"><a href="#1-修改数组形状" class="headerlink" title="1, 修改数组形状"></a>1, 修改数组形状</h3><p><strong>reshape 与 ndarray 对象的方法一样, 另有 resize 只能按行展开</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = np.random.choice(<span class="number">5</span>, (<span class="number">2</span>, <span class="number">3</span>))</span><br><span class="line">display(a)</span><br><span class="line">np.reshape(a,(<span class="number">1</span>, <span class="number">6</span>), <span class="string">&#x27;F&#x27;</span>)</span><br></pre></td></tr></table></figure>


<pre><code>array([[4, 2, 3],
       [1, 0, 0]])

array([[4, 1, 2, 0, 3, 0]])</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.resize(a, (<span class="number">1</span>, <span class="number">6</span>))</span><br></pre></td></tr></table></figure>




<pre><code>array([[4, 2, 3, 1, 0, 0]])</code></pre>
<p><strong>ravel 展开为一维(ndarray 对象也有该方法)</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.ravel(a, <span class="string">&#x27;F&#x27;</span>)</span><br></pre></td></tr></table></figure>




<pre><code>array([2, 1, 1, 2, 4, 3])</code></pre>
<h3 id="2-组合数组"><a href="#2-组合数组" class="headerlink" title="2, 组合数组"></a>2, 组合数组</h3><p><strong>concatenate, hstack, vstack 连接数组</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># axis=0, 行方向连接(默认), axis=1, 列方向连接</span></span><br><span class="line">b = np.random.choice(<span class="number">6</span>, (<span class="number">2</span>, <span class="number">3</span>))</span><br><span class="line">np.concatenate((a, b), axis=<span class="number">1</span>)</span><br></pre></td></tr></table></figure>




<pre><code>array([[2, 1, 4, 3, 0, 1],
       [1, 2, 3, 3, 2, 1]])</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.hstack((a, b)) <span class="comment"># 列方向连接</span></span><br></pre></td></tr></table></figure>




<pre><code>array([[2, 1, 4, 3, 0, 1],
       [1, 2, 3, 3, 2, 1]])</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.vstack((a, b)) <span class="comment"># 行方向连接</span></span><br></pre></td></tr></table></figure>




<pre><code>array([[2, 1, 4],
       [1, 2, 3],
       [3, 0, 1],
       [3, 2, 1]])</code></pre>
<p><strong>stack 堆叠数组, 堆叠后维度增加 1</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># axis=0, 行方向堆叠(默认), axis=1, 列方向堆叠</span></span><br><span class="line">np.stack((a[<span class="number">0</span>], b[<span class="number">0</span>])), np.stack((a[<span class="number">0</span>], b[<span class="number">0</span>]), axis=<span class="number">1</span>)</span><br></pre></td></tr></table></figure>




<pre><code>(array([[2, 1, 4],
        [3, 0, 1]]),
 array([[2, 3],
        [1, 0],
        [4, 1]]))</code></pre>
<h3 id="3-拆分数组"><a href="#3-拆分数组" class="headerlink" title="3, 拆分数组"></a>3, 拆分数组</h3><p><strong>split, hsplit, vsplit 将数组拆分, 返回为列表</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.split(a, <span class="number">2</span>), np.vsplit(a, <span class="number">2</span>), np.hsplit(a, <span class="number">3</span>)</span><br></pre></td></tr></table></figure>




<pre><code>([array([[2, 1, 4]]), array([[1, 2, 3]])],
 [array([[2, 1, 4]]), array([[1, 2, 3]])],
 [array([[2],
         [1]]),
  array([[1],
         [2]]),
  array([[4],
         [3]])])</code></pre>
<h3 id="4-添加-删除元素"><a href="#4-添加-删除元素" class="headerlink" title="4, 添加, 删除元素"></a>4, 添加, 删除元素</h3><p><strong>delete 删除指定索引的元素, 行或列</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a, np.delete(a, <span class="number">1</span>) <span class="comment"># 删除第 2 个元素</span></span><br></pre></td></tr></table></figure>




<pre><code>(array([[2, 1, 4],
        [1, 2, 3]]),
 array([2, 4, 1, 2, 3]))</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 删除第 2 行, 或第 2 列</span></span><br><span class="line">np.delete(a, <span class="number">1</span>, axis=<span class="number">0</span>), np.delete(a, <span class="number">1</span>, axis=<span class="number">1</span>)</span><br></pre></td></tr></table></figure>




<pre><code>(array([[2, 1, 4]]),
 array([[2, 4],
        [1, 3]]))</code></pre>
<p><strong>insert 在指定索引前插入元素, 行或列</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.insert(a, <span class="number">1</span>, <span class="number">9</span>)</span><br></pre></td></tr></table></figure>




<pre><code>array([2, 9, 1, 4, 1, 2, 3])</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.insert(a, <span class="number">1</span>, <span class="number">9</span>, axis=<span class="number">0</span>), np.insert(a, <span class="number">1</span>, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], axis=<span class="number">0</span>)</span><br></pre></td></tr></table></figure>




<pre><code>(array([[2, 1, 4],
        [9, 9, 9],
        [1, 2, 3]]),
 array([[2, 1, 4],
        [1, 2, 3],
        [1, 2, 3]]))</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.insert(a, <span class="number">1</span>, [<span class="number">1</span>, <span class="number">3</span>], axis=<span class="number">1</span>)</span><br></pre></td></tr></table></figure>




<pre><code>array([[2, 1, 1, 4],
       [1, 3, 2, 3]])</code></pre>
<p><strong>append 在数组末尾(或行,列末尾)加入元素, 行或列(维数必须相同)</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.append(a, <span class="number">2</span>)</span><br></pre></td></tr></table></figure>




<pre><code>array([2, 1, 4, 1, 2, 3, 2])</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.append(a, [[<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>]], axis=<span class="number">0</span>), np.append(a, [[<span class="number">2</span>], [<span class="number">2</span>]], axis=<span class="number">1</span>)</span><br></pre></td></tr></table></figure>




<pre><code>(array([[2, 1, 4],
        [1, 2, 3],
        [2, 2, 2]]),
 array([[2, 1, 4, 2],
        [1, 2, 3, 2]]))</code></pre>
<p><strong>unique 查找数组中的唯一值</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = np.random.choice(<span class="number">4</span>, (<span class="number">2</span>, <span class="number">3</span>))</span><br><span class="line">display(a)</span><br><span class="line">np.unique(a,return_index=<span class="literal">True</span>,</span><br><span class="line">             return_inverse=<span class="literal">True</span>,</span><br><span class="line">             return_counts=<span class="literal">True</span>, axis=<span class="literal">None</span>)</span><br></pre></td></tr></table></figure>


<pre><code>array([[2, 3, 2],
       [2, 2, 0]])

(array([0, 2, 3]),
 array([5, 0, 1], dtype=int64),
 array([1, 2, 1, 1, 1, 0], dtype=int64),
 array([1, 4, 1], dtype=int64))</code></pre>
<h3 id="5-重新排列元素"><a href="#5-重新排列元素" class="headerlink" title="5, 重新排列元素"></a>5, 重新排列元素</h3><p><strong>flip, fliplr, flipud 翻转数组</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.flip(a), np.flip(a, <span class="number">0</span>), np.flip(a, <span class="number">1</span>)</span><br></pre></td></tr></table></figure>




<pre><code>(array([[0, 2, 2],
        [2, 3, 2]]),
 array([[2, 2, 0],
        [2, 3, 2]]),
 array([[2, 3, 2],
        [0, 2, 2]]))</code></pre>
<p><strong>sort 排序数组元素</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.sort(a)</span><br></pre></td></tr></table></figure>




<pre><code>array([[2, 2, 3],
       [0, 2, 2]])</code></pre>
<p><strong>roll 滚动数组元素</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.roll(a, <span class="number">1</span>), np.roll(a, <span class="number">1</span>, axis=<span class="number">0</span>), np.roll(a, <span class="number">1</span>, axis=<span class="number">1</span>)</span><br></pre></td></tr></table></figure>




<pre><code>(array([[0, 2, 3],
        [2, 2, 2]]),
 array([[2, 2, 0],
        [2, 3, 2]]),
 array([[2, 2, 3],
        [0, 2, 2]]))</code></pre>
<h3 id="6-常用数学运算函数"><a href="#6-常用数学运算函数" class="headerlink" title="6, 常用数学运算函数"></a>6, 常用数学运算函数</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="comment"># 固定随机种子</span></span><br><span class="line">np.random.seed(<span class="number">0</span>)</span><br><span class="line">a = np.random.randint(<span class="number">1</span>, <span class="number">6</span>, (<span class="number">3</span>, <span class="number">4</span>))</span><br><span class="line">b = np.arange(<span class="number">12</span>).reshape((<span class="number">3</span>, <span class="number">4</span>))</span><br><span class="line">a, b</span><br></pre></td></tr></table></figure>




<pre><code>(array([[5, 1, 4, 4],
        [4, 2, 4, 3],
        [5, 1, 1, 5]]),
 array([[ 0,  1,  2,  3],
        [ 4,  5,  6,  7],
        [ 8,  9, 10, 11]]))</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.power(b, a) <span class="comment"># b**a</span></span><br></pre></td></tr></table></figure>




<pre><code>array([[     0,      1,     16,     81],
       [   256,     25,   1296,    343],
       [ 32768,      9,     10, 161051]], dtype=int32)</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.<span class="built_in">divmod</span>(b, a) <span class="comment"># 商 和 余</span></span><br></pre></td></tr></table></figure>




<pre><code>(array([[ 0,  1,  0,  0],
        [ 1,  2,  1,  2],
        [ 1,  9, 10,  2]], dtype=int32),
 array([[0, 0, 2, 3],
        [0, 1, 2, 1],
        [3, 0, 0, 1]], dtype=int32))</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.fabs(-a), np.<span class="built_in">abs</span>(-a) <span class="comment"># 取绝对值</span></span><br></pre></td></tr></table></figure>




<pre><code>(array([[5., 1., 4., 4.],
        [4., 2., 4., 3.],
        [5., 1., 1., 5.]]),
 array([[5, 1, 4, 4],
        [4, 2, 4, 3],
        [5, 1, 1, 5]]))</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">c = np.random.rand(<span class="number">3</span>, <span class="number">4</span>) * <span class="number">10</span></span><br><span class="line">display(c)</span><br><span class="line">np.rint(c) <span class="comment"># 舍入最接近的整数</span></span><br></pre></td></tr></table></figure>


<pre><code>array([[5.81272873, 8.81735362, 6.9253159 , 7.2525428 ],
       [5.01324382, 9.56083635, 6.43990199, 4.23855049],
       [6.06393214, 0.19193198, 3.01574817, 6.60173537]])

array([[ 6.,  9.,  7.,  7.],
       [ 5., 10.,  6.,  4.],
       [ 6.,  0.,  3.,  7.]])</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.exp(a).<span class="built_in">round</span>(<span class="number">1</span>) <span class="comment"># np.e ** a</span></span><br></pre></td></tr></table></figure>




<pre><code>array([[148.4,   2.7,  54.6,  54.6],
       [ 54.6,   7.4,  54.6,  20.1],
       [148.4,   2.7,   2.7, 148.4]])</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">b = np.exp2(a) <span class="comment"># 2**a</span></span><br><span class="line">a, b</span><br></pre></td></tr></table></figure>




<pre><code>(array([[5, 1, 4, 4],
        [4, 2, 4, 3],
        [5, 1, 1, 5]]),
 array([[32.,  2., 16., 16.],
        [16.,  4., 16.,  8.],
        [32.,  2.,  2., 32.]]))</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.log(a)</span><br><span class="line">np.log2(a)</span><br><span class="line">np.log10(a)</span><br><span class="line">np.sqrt(a) <span class="comment"># 开根号</span></span><br><span class="line">np.gcd(a, b.astype(<span class="built_in">int</span>)) <span class="comment"># 最大公约数</span></span><br><span class="line">np.lcm(a, b.astype(<span class="built_in">int</span>)) <span class="comment"># 最小公倍数</span></span><br></pre></td></tr></table></figure>




<pre><code>array([[160,   2,  16,  16],
       [ 16,   4,  16,  24],
       [160,   2,   2, 160]])</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.sin(a)</span><br><span class="line">np.cos(a)</span><br><span class="line">np.tan(a)</span><br></pre></td></tr></table></figure>




<pre><code>array([[-3.38051501,  1.55740772,  1.15782128,  1.15782128],
       [ 1.15782128, -2.18503986,  1.15782128, -0.14254654],
       [-3.38051501,  1.55740772,  1.55740772, -3.38051501]])</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.greater(a, b) <span class="comment"># a &gt; b</span></span><br><span class="line">np.less(a, b) <span class="comment"># a &lt; b</span></span><br><span class="line">a != b <span class="comment"># np.not_equal(a, b)</span></span><br><span class="line">(a &gt; <span class="number">2</span>) | ~(b &lt; <span class="number">5</span>) <span class="comment"># np.logical_or(a&gt;2, ~(b&lt;5))</span></span><br></pre></td></tr></table></figure>




<pre><code>array([[ True, False,  True,  True],
       [ True, False,  True,  True],
       [ True, False, False,  True]])</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 两者取其大, 同 np.fmax(a*5, b) 对应还有 minimum, fmin</span></span><br><span class="line">np.maximum(a*<span class="number">5</span>, b) </span><br></pre></td></tr></table></figure>




<pre><code>array([[32.,  5., 20., 20.],
       [20., 10., 20., 15.],
       [32.,  5.,  5., 32.]])</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.isinf(a) <span class="comment"># 判断是否正负无穷大</span></span><br><span class="line">np.isnan(a) <span class="comment"># 判断是否 nan</span></span><br></pre></td></tr></table></figure>




<pre><code>array([[False, False, False, False],
       [False, False, False, False],
       [False, False, False, False]])</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.modf(c) <span class="comment"># 分别返回小数和整数部分</span></span><br></pre></td></tr></table></figure>




<pre><code>(array([[0.81272873, 0.81735362, 0.9253159 , 0.2525428 ],
        [0.01324382, 0.56083635, 0.43990199, 0.23855049],
        [0.06393214, 0.19193198, 0.01574817, 0.60173537]]),
 array([[5., 8., 6., 7.],
        [5., 9., 6., 4.],
        [6., 0., 3., 6.]]))</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.fmod(b, a) <span class="comment"># 返回余数</span></span><br></pre></td></tr></table></figure>




<pre><code>array([[2., 0., 0., 0.],
       [0., 0., 0., 2.],
       [2., 0., 0., 2.]])</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">c = np.random.rand(<span class="number">3</span>, <span class="number">4</span>) * <span class="number">10</span></span><br><span class="line">display(c)</span><br><span class="line">np.floor(c) <span class="comment"># 向下取整</span></span><br><span class="line">np.ceil(c) <span class="comment"># 向上取整</span></span><br></pre></td></tr></table></figure>


<pre><code>array([[9.61570155, 2.31701626, 9.49318822, 9.41377705],
       [7.99202587, 6.30447937, 8.74287967, 2.93020285],
       [8.48943555, 6.17876692, 0.13236858, 3.47233518]])

array([[10.,  3., 10., 10.],
       [ 8.,  7.,  9.,  3.],
       [ 9.,  7.,  1.,  4.]])</code></pre>
<h3 id="7-字符串操作"><a href="#7-字符串操作" class="headerlink" title="7, 字符串操作"></a>7, 字符串操作</h3><p>字符串的操作函数, 和 python 的操作函数相似, 只是 numpy 作用到整个数组上</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = np.array([[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>], [<span class="number">20</span>, <span class="number">19</span>, <span class="number">18</span>]])</span><br><span class="line">np.char.add(a, a)</span><br></pre></td></tr></table></figure>




<pre><code>array([[&#39;aa&#39;, &#39;bb&#39;, &#39;cc&#39;],
       [&#39;2020&#39;, &#39;1919&#39;, &#39;1818&#39;]], dtype=&#39;&lt;U4&#39;)</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.char.multiply(a, <span class="number">3</span>)</span><br></pre></td></tr></table></figure>




<pre><code>array([[&#39;aaa&#39;, &#39;bbb&#39;, &#39;ccc&#39;],
       [&#39;202020&#39;, &#39;191919&#39;, &#39;181818&#39;]], dtype=&#39;&lt;U6&#39;)</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将每一个制表符替换成指定个数的空格</span></span><br><span class="line">b = np.array(<span class="string">&#x27;\ta\t\tbc\td&#x27;</span>)</span><br><span class="line">np.char.expandtabs(b, <span class="number">1</span>)</span><br></pre></td></tr></table></figure>




<pre><code>array(&#39; a  bc d&#39;, dtype=&#39;&lt;U8&#39;)</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.char.replace(a, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>) <span class="comment"># 替换</span></span><br></pre></td></tr></table></figure>




<pre><code>array([[&#39;a&#39;, &#39;b&#39;, &#39;c&#39;],
       [&#39;20&#39;, &#39;29&#39;, &#39;28&#39;]], dtype=&#39;&lt;U2&#39;)</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.char.title(a)</span><br></pre></td></tr></table></figure>




<pre><code>array([[&#39;A&#39;, &#39;B&#39;, &#39;C&#39;],
       [&#39;20&#39;, &#39;19&#39;, &#39;18&#39;]], dtype=&#39;&lt;U2&#39;)</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">b = np.char.zfill(a, <span class="number">4</span>)</span><br><span class="line">b</span><br></pre></td></tr></table></figure>




<pre><code>array([[&#39;000a&#39;, &#39;000b&#39;, &#39;000c&#39;],
       [&#39;0020&#39;, &#39;0019&#39;, &#39;0018&#39;]], dtype=&#39;&lt;U4&#39;)</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.char.count(b, <span class="string">&#x27;0&#x27;</span>) <span class="comment"># 0 出现的次数</span></span><br></pre></td></tr></table></figure>




<pre><code>array([[3, 3, 3],
       [3, 2, 2]])</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.char.str_len(a) <span class="comment"># 字符串长度</span></span><br></pre></td></tr></table></figure>




<pre><code>array([[1, 1, 1],
       [2, 2, 2]])</code></pre>
<h3 id="8-索引与迭代"><a href="#8-索引与迭代" class="headerlink" title="8, 索引与迭代"></a>8, 索引与迭代</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = np.random.choice(<span class="number">4</span>, (<span class="number">3</span>, <span class="number">4</span>))</span><br><span class="line">display(a)</span><br><span class="line">np.nonzero(a) <span class="comment"># 非 0 索引</span></span><br></pre></td></tr></table></figure>


<pre><code>array([[0, 0, 1, 0],
       [1, 0, 3, 2],
       [2, 1, 0, 0]])

(array([0, 1, 1, 1, 2, 2], dtype=int64),
 array([2, 0, 2, 3, 0, 1], dtype=int64))</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 返回指定条件的元素的索引, 并可进行替换</span></span><br><span class="line"><span class="comment"># 不设条件, 和 nonzero 一样</span></span><br><span class="line">np.where(a&gt;<span class="number">0</span>)</span><br></pre></td></tr></table></figure>




<pre><code>(array([0, 1, 1, 1, 2, 2], dtype=int64),
 array([2, 0, 2, 3, 0, 1], dtype=int64))</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 大于 0 都换成 a, 否则都换成 b</span></span><br><span class="line">np.where(a&gt;<span class="number">0</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>)</span><br></pre></td></tr></table></figure>




<pre><code>array([[&#39;b&#39;, &#39;b&#39;, &#39;a&#39;, &#39;b&#39;],
       [&#39;a&#39;, &#39;b&#39;, &#39;a&#39;, &#39;a&#39;],
       [&#39;a&#39;, &#39;a&#39;, &#39;b&#39;, &#39;b&#39;]], dtype=&#39;&lt;U1&#39;)</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.nditer(a) <span class="comment"># 将数组变成一个高效的迭代器</span></span><br></pre></td></tr></table></figure>




<pre><code>&lt;numpy.nditer at 0x2066f761710&gt;</code></pre>
<h3 id="9-统计运算函数"><a href="#9-统计运算函数" class="headerlink" title="9, 统计运算函数"></a>9, 统计运算函数</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 下述与 ndarray 对象直接调用的方法一样</span></span><br><span class="line">a = np.random.rand(<span class="number">3</span>, <span class="number">4</span>) * <span class="number">5</span></span><br><span class="line">np.<span class="built_in">all</span>(a)</span><br><span class="line">np.<span class="built_in">any</span>(a)</span><br><span class="line">np.<span class="built_in">max</span>(a)</span><br><span class="line">np.<span class="built_in">sum</span>(a)</span><br><span class="line">np.mean(a)</span><br><span class="line">np.cumsum(a)</span><br><span class="line">np.var(a)</span><br><span class="line">np.std(a)</span><br><span class="line">np.clip(a, <span class="number">1</span>, <span class="number">3</span>)</span><br><span class="line">np.around(a, <span class="number">2</span>) <span class="comment"># ndarray 对象的方法是 round</span></span><br><span class="line"><span class="comment"># 等等</span></span><br></pre></td></tr></table></figure>




<pre><code>array([[0.38, 2.59, 1.53, 2.89],
       [4.8 , 3.23, 0.18, 2.15],
       [2.55, 2.68, 3.41, 1.39]])</code></pre>
<p>任何数与 nan 计算都是 nan, 可以用相应的函数排除 nan</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">b = np.array([<span class="number">1</span>, np.nan, <span class="number">3</span>, <span class="number">4</span>])</span><br><span class="line">np.<span class="built_in">sum</span>(b), np.nansum(b)</span><br></pre></td></tr></table></figure>




<pre><code>(nan, 8.0)</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.nancumsum(b)</span><br></pre></td></tr></table></figure>




<pre><code>array([1., 1., 4., 8.])</code></pre>
]]></content>
      <categories>
        <category>数据分析</category>
      </categories>
      <tags>
        <tag>numpy</tag>
      </tags>
  </entry>
  <entry>
    <title>Pandas 速查笔记</title>
    <url>/pandas-a5600fdbeadc/</url>
    <content><![CDATA[<p><a href="https://billwuhao.com/" title="诗和远方都在脚下"><img src="/images/dbj.jpg"></a></p>
<br>

<blockquote>
<p>内容主要来源：<a href="https://pandas.pydata.org/docs/">官方文档</a> 学习笔记。</p>
</blockquote>
<blockquote>
<p>Pandas 是 Python 的核心数据分析支持库, 基于 NumPy 创建, 它使 python 成为强大而高效的数据分析环境 </p>
</blockquote>
<p><font color=#00A600 >2020年7月13日更新</font></p>
<blockquote>
<p>下文约定 NumPy 简写 <code>np</code>, Pandas 简写 <code>pd</code>, Series 简写 <code>s</code>, DataFrame 简写 <code>df</code></p>
</blockquote>
<h2 id="一-数据结构"><a href="#一-数据结构" class="headerlink" title="一, 数据结构"></a>一, 数据结构</h2><p>pd 的数据结构是基于 np 的, 因此其有着 np 的基因, 许多操作和大部分函数与 np 类似</p>
<p>pd 的数据结构其实是 np 数组数据对象 array 的容器, 在 pd 中有了索引结构, 可以利用索引来取 array 或 array 的值</p>
<h3 id="1-创建-s-和-df"><a href="#1-创建-s-和-df" class="headerlink" title="1, 创建 s 和 df"></a>1, 创建 s 和 df</h3><p>创建 s 用 Series 方法, 创建 df 用 DataFrame 方法, 创建时若不指定索引, 将自动生成(从 0 开始)</p>
<p>s 是一维, 只有行索引, 而 df 有行和列索引</p>
<p>创建方式灵活多变, 可以查看参数, 根据要求传参进行创建, 简单介绍几种</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">s = pd.Series(<span class="built_in">range</span>(<span class="number">3</span>))</span><br><span class="line">df = pd.DataFrame(<span class="built_in">range</span>(<span class="number">3</span>))</span><br><span class="line">display(s)</span><br><span class="line">df</span><br></pre></td></tr></table></figure>


<pre><code>0    0
1    1
2    2
dtype: int64</code></pre>
<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>0</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>0</td>
    </tr>
    <tr>
      <th>1</th>
      <td>1</td>
    </tr>
    <tr>
      <th>2</th>
      <td>2</td>
    </tr>
  </tbody>
</table>
</div>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = pd.Series(<span class="built_in">range</span>(<span class="number">3</span>), index=<span class="built_in">list</span>(<span class="string">&#x27;abc&#x27;</span>))</span><br><span class="line">df = pd.DataFrame(&#123;<span class="string">&#x27;A&#x27;</span>: <span class="built_in">range</span>(<span class="number">3</span>), <span class="string">&#x27;B&#x27;</span>: <span class="built_in">list</span>(<span class="string">&#x27;jkl&#x27;</span>)&#125;, index=<span class="built_in">list</span>(<span class="string">&#x27;abc&#x27;</span>))</span><br><span class="line">display(s)</span><br><span class="line">df</span><br></pre></td></tr></table></figure>


<pre><code>a    0
b    1
c    2
dtype: int64</code></pre>
<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>A</th>
      <th>B</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>a</th>
      <td>0</td>
      <td>j</td>
    </tr>
    <tr>
      <th>b</th>
      <td>1</td>
      <td>k</td>
    </tr>
    <tr>
      <th>c</th>
      <td>2</td>
      <td>l</td>
    </tr>
  </tbody>
</table>
</div>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dict_1 = &#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">0</span>, <span class="string">&#x27;b&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;c&#x27;</span>: <span class="number">2</span>&#125;</span><br><span class="line">dict_2 = &#123;<span class="string">&#x27;a&#x27;</span>: <span class="built_in">range</span>(<span class="number">3</span>), <span class="string">&#x27;b&#x27;</span>: <span class="built_in">list</span>(<span class="string">&#x27;jkl&#x27;</span>)&#125;</span><br><span class="line">s = pd.Series(dict_1)</span><br><span class="line">df1 = pd.DataFrame(dict_1, index=[<span class="string">&#x27;A&#x27;</span>])</span><br><span class="line">df2 = pd.DataFrame(dict_2)</span><br><span class="line">display(s)</span><br><span class="line">display(df1)</span><br><span class="line">df2</span><br></pre></td></tr></table></figure>


<pre><code>a    0
b    1
c    2
dtype: int64</code></pre>
<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>a</th>
      <th>b</th>
      <th>c</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>A</th>
      <td>0</td>
      <td>1</td>
      <td>2</td>
    </tr>
  </tbody>
</table>
</div>





<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>a</th>
      <th>b</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>0</td>
      <td>j</td>
    </tr>
    <tr>
      <th>1</th>
      <td>1</td>
      <td>k</td>
    </tr>
    <tr>
      <th>2</th>
      <td>2</td>
      <td>l</td>
    </tr>
  </tbody>
</table>
</div>



<h3 id="2-s-和-df-的常用属性"><a href="#2-s-和-df-的常用属性" class="headerlink" title="2, s 和 df 的常用属性"></a>2, s 和 df 的常用属性</h3><p>大部分属性和 numpy 一样</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = pd.Series(<span class="number">1</span>, index=<span class="built_in">list</span>(<span class="string">&#x27;abc&#x27;</span>))</span><br><span class="line">df = pd.DataFrame(dict_2)</span><br><span class="line"></span><br><span class="line">s, df</span><br></pre></td></tr></table></figure>




<pre><code>(a    1
 b    1
 c    1
 dtype: int64,
    a  b
 0  0  j
 1  1  k
 2  2  l)</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看形状, 形状不包括 索引</span></span><br><span class="line">s.shape, df.shape</span><br></pre></td></tr></table></figure>




<pre><code>((3,), (3, 2))</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 获取索引</span></span><br><span class="line">s.index, df.index, df.columns</span><br></pre></td></tr></table></figure>




<pre><code>(Index([&#39;a&#39;, &#39;b&#39;, &#39;c&#39;], dtype=&#39;object&#39;),
 RangeIndex(start=0, stop=3, step=1),
 Index([&#39;a&#39;, &#39;b&#39;], dtype=&#39;object&#39;))</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看元素个数</span></span><br><span class="line">s.size, df.size</span><br></pre></td></tr></table></figure>




<pre><code>(3, 6)</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看数据类型</span></span><br><span class="line">s.dtype, df.dtypes</span><br></pre></td></tr></table></figure>




<pre><code>(dtype(&#39;int64&#39;),
 a     int64
 b    object
 dtype: object)</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看值</span></span><br><span class="line">s.values, df.values, df[<span class="string">&#x27;a&#x27;</span>].values</span><br></pre></td></tr></table></figure>




<pre><code>(array([1, 1, 1], dtype=int64),
 array([[0, &#39;j&#39;],
        [1, &#39;k&#39;],
        [2, &#39;l&#39;]], dtype=object),
 array([0, 1, 2], dtype=int64))</code></pre>
<h3 id="3-s-和-df-结构理解"><a href="#3-s-和-df-结构理解" class="headerlink" title="3, s 和 df 结构理解"></a>3, s 和 df 结构理解</h3><p>从上述可以看出, pd 数据结构的值, 是一个 array 对象. 对于 df, 每一列的值取出来也是一个 array 对象, 并且每一列可以是不同的数据类型</p>
<p>需要注意的是, df 每一列取出来, 整体是一个 s, 因此 df 又可以看成 s 的容器</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">type</span>(s), <span class="built_in">type</span>(df[<span class="string">&#x27;a&#x27;</span>]), <span class="built_in">type</span>(df)</span><br></pre></td></tr></table></figure>




<pre><code>(pandas.core.series.Series,
 pandas.core.series.Series,
 pandas.core.frame.DataFrame)</code></pre>
<p>s 和 df 可以有多层索引</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s.index = [[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>], [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]]</span><br><span class="line">df.index = [[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>], [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]]</span><br><span class="line"></span><br><span class="line">s, df</span><br></pre></td></tr></table></figure>




<pre><code>(a  1    1
 b  2    1
 c  3    1
 dtype: int64,
      a  b
 a 1  0  j
 b 2  1  k
 c 3  2  l)</code></pre>
<h2 id="二-数据结构操作-处理与计算"><a href="#二-数据结构操作-处理与计算" class="headerlink" title="二, 数据结构操作, 处理与计算"></a>二, 数据结构操作, 处理与计算</h2><h3 id="1-查看-s-和-df-数据信息常用方法"><a href="#1-查看-s-和-df-数据信息常用方法" class="headerlink" title="1, 查看 s 和 df 数据信息常用方法"></a>1, 查看 s 和 df 数据信息常用方法</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = np.random.randint(<span class="number">1</span>, <span class="number">9</span>, (<span class="number">6</span>, <span class="number">2</span>))</span><br><span class="line">s = pd.Series(a[:, <span class="number">0</span>])</span><br><span class="line">df = pd.DataFrame(a)</span><br><span class="line">s, df</span><br></pre></td></tr></table></figure>




<pre><code>(0    1
 1    2
 2    2
 3    8
 4    8
 5    2
 dtype: int32,
    0  1
 0  1  8
 1  2  3
 2  2  1
 3  8  3
 4  8  8
 5  2  7)</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看前 5 行(默认)</span></span><br><span class="line">s.head()</span><br><span class="line">df.head()</span><br></pre></td></tr></table></figure>




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>0</th>
      <th>1</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>5</td>
      <td>5</td>
    </tr>
    <tr>
      <th>1</th>
      <td>8</td>
      <td>2</td>
    </tr>
    <tr>
      <th>2</th>
      <td>2</td>
      <td>3</td>
    </tr>
    <tr>
      <th>3</th>
      <td>1</td>
      <td>1</td>
    </tr>
    <tr>
      <th>4</th>
      <td>5</td>
      <td>1</td>
    </tr>
  </tbody>
</table>
</div>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看后 5 行(默认)</span></span><br><span class="line">s.tail()</span><br><span class="line">df.tail()</span><br></pre></td></tr></table></figure>




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>0</th>
      <th>1</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>1</th>
      <td>8</td>
      <td>2</td>
    </tr>
    <tr>
      <th>2</th>
      <td>2</td>
      <td>3</td>
    </tr>
    <tr>
      <th>3</th>
      <td>1</td>
      <td>1</td>
    </tr>
    <tr>
      <th>4</th>
      <td>5</td>
      <td>1</td>
    </tr>
    <tr>
      <th>5</th>
      <td>3</td>
      <td>7</td>
    </tr>
  </tbody>
</table>
</div>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看详情, s 没有该方法</span></span><br><span class="line">df.info()</span><br></pre></td></tr></table></figure>

<pre><code>&lt;class &#39;pandas.core.frame.DataFrame&#39;&gt;
RangeIndex: 6 entries, 0 to 5
Data columns (total 2 columns):
 #   Column  Non-Null Count  Dtype
---  ------  --------------  -----
 0   0       6 non-null      int32
 1   1       6 non-null      int32
dtypes: int32(2)
memory usage: 176.0 bytes</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看统计量</span></span><br><span class="line">s.describe()</span><br><span class="line">df.describe()</span><br></pre></td></tr></table></figure>




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>0</th>
      <th>1</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>count</th>
      <td>6.000000</td>
      <td>6.000000</td>
    </tr>
    <tr>
      <th>mean</th>
      <td>4.000000</td>
      <td>3.166667</td>
    </tr>
    <tr>
      <th>std</th>
      <td>2.529822</td>
      <td>2.401388</td>
    </tr>
    <tr>
      <th>min</th>
      <td>1.000000</td>
      <td>1.000000</td>
    </tr>
    <tr>
      <th>25%</th>
      <td>2.250000</td>
      <td>1.250000</td>
    </tr>
    <tr>
      <th>50%</th>
      <td>4.000000</td>
      <td>2.500000</td>
    </tr>
    <tr>
      <th>75%</th>
      <td>5.000000</td>
      <td>4.500000</td>
    </tr>
    <tr>
      <th>max</th>
      <td>8.000000</td>
      <td>7.000000</td>
    </tr>
  </tbody>
</table>
</div>



<h3 id="2-数据的直接计算"><a href="#2-数据的直接计算" class="headerlink" title="2, 数据的直接计算"></a>2, 数据的直接计算</h3><p>s 和 df 的数据可以像 np 的数组一样直接进行计算, 索引相同的行列进行计算, 不同的 NaN 填充</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df1 = pd.DataFrame(a, columns=[<span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>])</span><br><span class="line">df1 * df</span><br></pre></td></tr></table></figure>




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>0</th>
      <th>1</th>
      <th>b</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>NaN</td>
      <td>8</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>1</th>
      <td>NaN</td>
      <td>6</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>2</th>
      <td>NaN</td>
      <td>2</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>3</th>
      <td>NaN</td>
      <td>24</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>4</th>
      <td>NaN</td>
      <td>64</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>5</th>
      <td>NaN</td>
      <td>14</td>
      <td>NaN</td>
    </tr>
  </tbody>
</table>
</div>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s1 = pd.Series(a[:, <span class="number">0</span>], index=[<span class="string">&#x27;a&#x27;</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>])</span><br><span class="line">s**<span class="number">2</span> + s1</span><br></pre></td></tr></table></figure>




<pre><code>0     NaN
1     6.0
2     6.0
3    72.0
4    72.0
5     6.0
a     NaN
dtype: float64</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 笛卡儿积展开</span></span><br><span class="line">s + df1</span><br></pre></td></tr></table></figure>




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>0</th>
      <th>1</th>
      <th>2</th>
      <th>3</th>
      <th>4</th>
      <th>5</th>
      <th>b</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>NaN</td>
      <td>3.0</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>1</th>
      <td>NaN</td>
      <td>4.0</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>2</th>
      <td>NaN</td>
      <td>4.0</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>3</th>
      <td>NaN</td>
      <td>10.0</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>4</th>
      <td>NaN</td>
      <td>10.0</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>5</th>
      <td>NaN</td>
      <td>4.0</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
    </tr>
  </tbody>
</table>
</div>



<h3 id="3-s-和-df-下标和索引切片操作"><a href="#3-s-和-df-下标和索引切片操作" class="headerlink" title="3, s 和 df 下标和索引切片操作"></a>3, s 和 df 下标和索引切片操作</h3><h4 id="3-01-s-和-df-下标切片取值"><a href="#3-01-s-和-df-下标切片取值" class="headerlink" title="3.01, s 和 df 下标切片取值"></a>3.01, s 和 df 下标切片取值</h4><p>s 和 df 下标切片取值有许多不同之处</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s1, df1</span><br></pre></td></tr></table></figure>




<pre><code>(a    1
 1    2
 2    2
 3    8
 4    8
 5    2
 dtype: int32,
    1  b
 0  1  8
 1  2  3
 2  2  1
 3  8  3
 4  8  8
 5  2  7)</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 此方法 df 只能取行, 不能取列</span></span><br><span class="line">s1[<span class="number">0</span>:<span class="number">2</span>], df1[<span class="number">0</span>:<span class="number">2</span>], s1[[<span class="number">0</span>, <span class="number">2</span>]]</span><br></pre></td></tr></table></figure>




<pre><code>(a    1
 1    2
 dtype: int32,
    1  b
 0  1  8
 1  2  3,
 a    1
 2    2
 dtype: int32)</code></pre>
<p><strong>同 np 一样, 可以条件取值, 此方法常用来筛选和重新赋值等</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s1[s1&gt;<span class="number">1</span>], df1[df1&gt;<span class="number">1</span>], df1[df1 == <span class="number">8</span>]</span><br></pre></td></tr></table></figure>




<pre><code>(1    2
 2    2
 3    8
 4    8
 5    2
 dtype: int32,
      1    b
 0  NaN  8.0
 1  2.0  3.0
 2  2.0  NaN
 3  8.0  3.0
 4  8.0  8.0
 5  2.0  7.0,
      1    b
 0  NaN  8.0
 1  NaN  NaN
 2  NaN  NaN
 3  8.0  NaN
 4  8.0  8.0
 5  NaN  NaN)</code></pre>
<h4 id="3-02-s-和-df-索引切片取值"><a href="#3-02-s-和-df-索引切片取值" class="headerlink" title="3.02, s 和 df 索引切片取值"></a>3.02, s 和 df 索引切片取值</h4><p>索引切片取值, 左右都包含</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 需要将索引转换类型</span></span><br><span class="line">s1.index = s1.index.astype(<span class="built_in">str</span>)</span><br><span class="line">df1.index = df1.index.astype(<span class="built_in">str</span>)</span><br><span class="line">s1[<span class="string">&#x27;a&#x27;</span>:<span class="string">&#x27;2&#x27;</span>], df1[<span class="string">&#x27;1&#x27;</span>:<span class="string">&#x27;3&#x27;</span>]</span><br></pre></td></tr></table></figure>




<pre><code>(a    1
 1    2
 2    2
 dtype: int32,
    1  b
 1  2  3
 2  2  1
 3  8  3)</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df1[<span class="string">&#x27;1&#x27;</span>:<span class="string">&#x27;3&#x27;</span>][[<span class="number">1</span>]], df1[<span class="string">&#x27;b&#x27;</span>], df1[[<span class="string">&#x27;b&#x27;</span>, <span class="number">1</span>]]</span><br></pre></td></tr></table></figure>




<pre><code>(   1
 1  2
 2  2
 3  8,
 0    8
 1    3
 2    1
 3    3
 4    8
 5    7
 Name: b, dtype: int32,
    b  1
 0  8  1
 1  3  2
 2  1  2
 3  3  8
 4  8  8
 5  7  2)</code></pre>
<h4 id="3-03-用-iloc-方法取值-推荐"><a href="#3-03-用-iloc-方法取值-推荐" class="headerlink" title="3.03, 用 iloc 方法取值(推荐)"></a>3.03, 用 iloc 方法取值(推荐)</h4><p>上述的取值太复杂麻烦, iloc 方法传入下标取值更方便且条理清晰. 存在多层索引时, iloc 按最内层索引取值</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 右不包含</span></span><br><span class="line">s1.iloc[<span class="number">0</span>:<span class="number">3</span>], df1.iloc[<span class="number">0</span>:<span class="number">5</span>:<span class="number">2</span>], df1.iloc[[<span class="number">1</span>, <span class="number">4</span>, <span class="number">2</span>], <span class="number">0</span>]</span><br></pre></td></tr></table></figure>




<pre><code>(a    1
 1    2
 2    2
 dtype: int32,
    1  b
 0  1  8
 2  2  1
 4  8  8,
 1    2
 4    8
 2    2
 Name: 1, dtype: int32)</code></pre>
<h4 id="3-04-用-loc-方法"><a href="#3-04-用-loc-方法" class="headerlink" title="3.04, 用 loc 方法"></a>3.04, 用 loc 方法</h4><p>loc 方法取值左右都包含, 传入索引标签取值</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s1.loc[<span class="string">&#x27;a&#x27;</span>:<span class="string">&#x27;2&#x27;</span>], df1.loc[<span class="string">&#x27;1&#x27;</span>:<span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;b&#x27;</span>]</span><br></pre></td></tr></table></figure>




<pre><code>(a    1
 1    2
 2    2
 dtype: int32,
 1    3
 2    1
 3    3
 Name: b, dtype: int32)</code></pre>
<h4 id="3-05-利用切片修改数据"><a href="#3-05-利用切片修改数据" class="headerlink" title="3.05, 利用切片修改数据"></a>3.05, 利用切片修改数据</h4><p>利用切片修改数据, 其实就是取值重新赋值</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">df = pd.DataFrame(np.random.rand(<span class="number">5</span>, <span class="number">4</span>),</span><br><span class="line">                  index=<span class="built_in">list</span>(<span class="string">&#x27;abcde&#x27;</span>),</span><br><span class="line">                  columns=<span class="built_in">list</span>(<span class="string">&#x27;ABCD&#x27;</span>))</span><br><span class="line">df[df&gt;<span class="number">0.5</span>]</span><br></pre></td></tr></table></figure>




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>A</th>
      <th>B</th>
      <th>C</th>
      <th>D</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>a</th>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>0.584239</td>
    </tr>
    <tr>
      <th>b</th>
      <td>NaN</td>
      <td>0.946957</td>
      <td>0.710115</td>
      <td>0.542091</td>
    </tr>
    <tr>
      <th>c</th>
      <td>NaN</td>
      <td>0.749082</td>
      <td>NaN</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>d</th>
      <td>0.990660</td>
      <td>0.537833</td>
      <td>NaN</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>e</th>
      <td>0.579108</td>
      <td>0.527163</td>
      <td>NaN</td>
      <td>0.930887</td>
    </tr>
  </tbody>
</table>
</div>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将大于 0.5 的数据换成 nan</span></span><br><span class="line">df[df&gt;<span class="number">0.5</span>] = np.nan</span><br><span class="line">df</span><br></pre></td></tr></table></figure>




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>A</th>
      <th>B</th>
      <th>C</th>
      <th>D</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>a</th>
      <td>0.055483</td>
      <td>0.376705</td>
      <td>0.295532</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>b</th>
      <td>0.230846</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>c</th>
      <td>0.304272</td>
      <td>NaN</td>
      <td>0.415037</td>
      <td>0.271673</td>
    </tr>
    <tr>
      <th>d</th>
      <td>NaN</td>
      <td>NaN</td>
      <td>0.413262</td>
      <td>0.207829</td>
    </tr>
    <tr>
      <th>e</th>
      <td>NaN</td>
      <td>NaN</td>
      <td>0.387687</td>
      <td>NaN</td>
    </tr>
  </tbody>
</table>
</div>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将 A 列全部改成 1 , 增加一列 E 值为 0</span></span><br><span class="line">df[<span class="string">&#x27;A&#x27;</span>] = <span class="number">1</span> <span class="comment"># 与 df.A = 1 等价</span></span><br><span class="line">df[<span class="string">&#x27;E&#x27;</span>] = <span class="number">0</span></span><br><span class="line">df</span><br></pre></td></tr></table></figure>




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>A</th>
      <th>B</th>
      <th>C</th>
      <th>D</th>
      <th>E</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>a</th>
      <td>1</td>
      <td>0.376705</td>
      <td>0.295532</td>
      <td>NaN</td>
      <td>0</td>
    </tr>
    <tr>
      <th>b</th>
      <td>1</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>0</td>
    </tr>
    <tr>
      <th>c</th>
      <td>1</td>
      <td>NaN</td>
      <td>0.415037</td>
      <td>0.271673</td>
      <td>0</td>
    </tr>
    <tr>
      <th>d</th>
      <td>1</td>
      <td>NaN</td>
      <td>0.413262</td>
      <td>0.207829</td>
      <td>0</td>
    </tr>
    <tr>
      <th>e</th>
      <td>1</td>
      <td>NaN</td>
      <td>0.387687</td>
      <td>NaN</td>
      <td>0</td>
    </tr>
  </tbody>
</table>
</div>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 行列值互换</span></span><br><span class="line">df.loc[[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;c&#x27;</span>], [<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;C&#x27;</span>]] = df.loc[[<span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;a&#x27;</span>], [<span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;A&#x27;</span>]].to_numpy()</span><br><span class="line">df</span><br></pre></td></tr></table></figure>




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>A</th>
      <th>B</th>
      <th>C</th>
      <th>D</th>
      <th>E</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>a</th>
      <td>0.415037</td>
      <td>0.376705</td>
      <td>1.000000</td>
      <td>NaN</td>
      <td>0</td>
    </tr>
    <tr>
      <th>b</th>
      <td>1.000000</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>0</td>
    </tr>
    <tr>
      <th>c</th>
      <td>0.295532</td>
      <td>NaN</td>
      <td>1.000000</td>
      <td>0.271673</td>
      <td>0</td>
    </tr>
    <tr>
      <th>d</th>
      <td>1.000000</td>
      <td>NaN</td>
      <td>0.413262</td>
      <td>0.207829</td>
      <td>0</td>
    </tr>
    <tr>
      <th>e</th>
      <td>1.000000</td>
      <td>NaN</td>
      <td>0.387687</td>
      <td>NaN</td>
      <td>0</td>
    </tr>
  </tbody>
</table>
</div>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 只要 B 不为 nan 的数据</span></span><br><span class="line">df[df[<span class="string">&#x27;B&#x27;</span>] == df[<span class="string">&#x27;B&#x27;</span>]]</span><br></pre></td></tr></table></figure>




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>A</th>
      <th>B</th>
      <th>C</th>
      <th>D</th>
      <th>E</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>a</th>
      <td>0.415037</td>
      <td>0.376705</td>
      <td>1.0</td>
      <td>NaN</td>
      <td>0</td>
    </tr>
  </tbody>
</table>
</div>

<h2 id="三-s-和-df-的处理和计算函数"><a href="#三-s-和-df-的处理和计算函数" class="headerlink" title="三, s 和 df 的处理和计算函数"></a>三, s 和 df 的处理和计算函数</h2><h3 id="1-索引"><a href="#1-索引" class="headerlink" title="1, 索引"></a>1, 索引</h3><p>在 pd 里, 索引非常重要, 一个行索引, 通常就是数据的一条记录(例如一个人的信息), 一个列索引就是数据的一个特征(例如某个人的性别, 年龄等), 通过索引能够更方便数据处理与计算</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">s = pd.Series(np.random.rand(<span class="number">4</span>), index=<span class="built_in">list</span>(<span class="string">&#x27;abcd&#x27;</span>))</span><br><span class="line">df = pd.DataFrame(np.random.rand(<span class="number">4</span>, <span class="number">4</span>),</span><br><span class="line">                  index=<span class="built_in">list</span>(<span class="string">&#x27;abcd&#x27;</span>),</span><br><span class="line">                  columns=<span class="built_in">list</span>(<span class="string">&#x27;ABCD&#x27;</span>))</span><br><span class="line">s, df</span><br></pre></td></tr></table></figure>




<pre><code>(a    0.081048
 b    0.075218
 c    0.339713
 d    0.103027
 dtype: float64,
           A         B         C         D
 a  0.752838  0.858899  0.779652  0.390347
 b  0.727027  0.518987  0.356425  0.154784
 c  0.134500  0.115313  0.994597  0.236809
 d  0.259354  0.624735  0.430290  0.282564)</code></pre>
<p><strong>reindex 索引重排, 新增的索引 nan 填充, 缺少索引的数据舍弃</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 新增 e 舍弃 d, 有许多参数可以调节</span></span><br><span class="line">s.reindex(<span class="built_in">list</span>(<span class="string">&#x27;bcae&#x27;</span>)), df.reindex(columns=<span class="built_in">list</span>(<span class="string">&#x27;BCAE&#x27;</span>))</span><br></pre></td></tr></table></figure>




<pre><code>(b    0.719566
 c    0.997383
 a    0.702877
 e         NaN
 dtype: float64,
           B         C         A   E
 a  0.260505  0.112192  0.661345 NaN
 b  0.419849  0.335675  0.840509 NaN
 c  0.211215  0.542169  0.751707 NaN
 d  0.310829  0.019690  0.859212 NaN)</code></pre>
<p><strong>sort_index 索引排序</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 默认 True 升序, 许多参数可调, df 只排行索引</span></span><br><span class="line">s.sort_index(ascending=<span class="literal">False</span>), df.sort_index(ascending=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure>




<pre><code>(d    0.182391
 c    0.387592
 b    0.457121
 a    0.637088
 dtype: float64,
           A         B         C         D
 d  0.729718  0.406537  0.248429  0.837150
 c  0.527112  0.646597  0.956364  0.444216
 b  0.232444  0.790157  0.504928  0.728113
 a  0.693281  0.805136  0.185669  0.737717)</code></pre>
<p><strong>rename, set_index, reset_index 设置索引</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 注意参数及传参方式</span></span><br><span class="line">s.rename(index=&#123;<span class="string">&#x27;a&#x27;</span>: <span class="string">&#x27;f&#x27;</span>&#125;), df.rename(<span class="keyword">lambda</span> x: x + x)</span><br></pre></td></tr></table></figure>




<pre><code>(f    0.637088
 b    0.457121
 c    0.387592
 d    0.182391
 dtype: float64,
            A         B         C         D
 aa  0.693281  0.805136  0.185669  0.737717
 bb  0.232444  0.790157  0.504928  0.728113
 cc  0.527112  0.646597  0.956364  0.444216
 dd  0.729718  0.406537  0.248429  0.837150)</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># s 没有此方法, 可以将某列设为索引, 默认不保留原列, 可设参数 drop 保留</span></span><br><span class="line">df1 = df.set_index([[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>], [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]])</span><br><span class="line">df2 = df.set_index(<span class="string">&#x27;A&#x27;</span>)</span><br><span class="line">df1, df2</span><br></pre></td></tr></table></figure>




<pre><code>(            A         B         C         D
 a 1  0.752838  0.858899  0.779652  0.390347
 b 2  0.727027  0.518987  0.356425  0.154784
 c 3  0.134500  0.115313  0.994597  0.236809
 d 4  0.259354  0.624735  0.430290  0.282564,
                  B         C         D
 A                                     
 0.752838  0.858899  0.779652  0.390347
 0.727027  0.518987  0.356425  0.154784
 0.134500  0.115313  0.994597  0.236809
 0.259354  0.624735  0.430290  0.282564)</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将索引设为列(drop=True将其删除), 多层索引时可选某层</span></span><br><span class="line">df1.reset_index(level=<span class="number">1</span>), df2.reset_index()</span><br></pre></td></tr></table></figure>




<pre><code>(   level_1         A         B         C         D
 a        1  0.693281  0.805136  0.185669  0.737717
 b        2  0.232444  0.790157  0.504928  0.728113
 c        3  0.527112  0.646597  0.956364  0.444216
 d        4  0.729718  0.406537  0.248429  0.837150,
           A         B         C         D
 0  0.693281  0.805136  0.185669  0.737717
 1  0.232444  0.790157  0.504928  0.728113
 2  0.527112  0.646597  0.956364  0.444216
 3  0.729718  0.406537  0.248429  0.837150)</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 索引可以设置名字, 设置索引还可以通过获取索引重新赋值</span></span><br><span class="line"><span class="comment"># df 还可以转置</span></span><br><span class="line">print(df2.index.name)</span><br><span class="line">df2.index = <span class="built_in">list</span>(<span class="string">&#x27;abcd&#x27;</span>) <span class="comment"># 重设索引后, 索引名消失</span></span><br><span class="line">df2, df2.T</span><br></pre></td></tr></table></figure>

<pre><code>A





(          B         C         D
 a  0.858899  0.779652  0.390347
 b  0.518987  0.356425  0.154784
 c  0.115313  0.994597  0.236809
 d  0.624735  0.430290  0.282564,
           a         b         c         d
 B  0.858899  0.518987  0.115313  0.624735
 C  0.779652  0.356425  0.994597  0.430290
 D  0.390347  0.154784  0.236809  0.282564)</code></pre>
<p><strong>多层索引</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ar = [[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>], [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]]</span><br><span class="line">tup = <span class="built_in">list</span>(<span class="built_in">zip</span>(*ar))</span><br><span class="line">pd.MultiIndex.from_tuples(tup)</span><br></pre></td></tr></table></figure>




<pre><code>MultiIndex([(&#39;a&#39;, 1),
            (&#39;b&#39;, 2),
            (&#39;c&#39;, 3)],
           )</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">index = pd.MultiIndex.from_product(ar)</span><br><span class="line">s = pd.Series(<span class="built_in">range</span>(<span class="number">9</span>), index=index)</span><br><span class="line">s</span><br></pre></td></tr></table></figure>




<pre><code>a  1    0
   2    1
   3    2
b  1    3
   2    4
   3    5
c  1    6
   2    7
   3    8
dtype: int64</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pd.MultiIndex.from_frame(df2[[<span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>]])</span><br></pre></td></tr></table></figure>




<pre><code>MultiIndex([( 0.8588989323584892,  0.7796522836753877),
            ( 0.5189870245469372,  0.3564252746188795),
            (0.11531289701355718,  0.9945971753660031),
            (  0.624734777956396, 0.43029040226834503)],
           names=[&#39;B&#39;, &#39;C&#39;])</code></pre>
<h3 id="2-增删与合并数据"><a href="#2-增删与合并数据" class="headerlink" title="2, 增删与合并数据"></a>2, 增删与合并数据</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">df = pd.DataFrame(np.random.randint(<span class="number">1</span>, <span class="number">9</span>, (<span class="number">4</span>, <span class="number">5</span>)))</span><br><span class="line">print(df)</span><br></pre></td></tr></table></figure>

<pre><code>   0  1  2  3  4
0  8  5  1  6  2
1  6  5  1  6  8
2  7  5  5  4  6
3  2  1  3  6  1</code></pre>
<p><strong>insert 在指定位置前插入数据</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># s 没有该方法</span></span><br><span class="line">df.insert(<span class="number">2</span>, <span class="string">&#x27;A&#x27;</span>, <span class="number">1</span>)</span><br><span class="line">print(df)</span><br></pre></td></tr></table></figure>

<pre><code>   0  1  A  2  3  4
0  8  5  1  1  6  2
1  6  5  1  1  6  8
2  7  5  1  5  4  6
3  2  1  1  3  6  1</code></pre>
<p><strong>append 在数据最后增加数据</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># s 只能传 s</span></span><br><span class="line">df1 = pd.DataFrame(&#123;<span class="string">&#x27;B&#x27;</span>: [<span class="number">1</span>, <span class="number">2</span>]&#125;)</span><br><span class="line"><span class="comment"># df 可以在行后面增加, 也可在列后面新增</span></span><br><span class="line">df.iloc[<span class="number">0</span>].append(pd.Series(<span class="number">8</span>))</span><br><span class="line">df.append([<span class="number">1</span>]), df.append(df1, ignore_index=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>




<pre><code>(   0    1    A    2    3    4
 0  8  5.0  1.0  1.0  6.0  2.0
 1  6  5.0  1.0  1.0  6.0  8.0
 2  7  5.0  1.0  5.0  4.0  6.0
 3  2  1.0  1.0  3.0  6.0  1.0
 0  1  NaN  NaN  NaN  NaN  NaN,
      0    1    A    2    3    4    B
 0  8.0  5.0  1.0  1.0  6.0  2.0  NaN
 1  6.0  5.0  1.0  1.0  6.0  8.0  NaN
 2  7.0  5.0  1.0  5.0  4.0  6.0  NaN
 3  2.0  1.0  1.0  3.0  6.0  1.0  NaN
 4  NaN  NaN  NaN  NaN  NaN  NaN  1.0
 5  NaN  NaN  NaN  NaN  NaN  NaN  2.0)</code></pre>
<p><strong>drop 删除指定数据</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df[<span class="string">&#x27;A&#x27;</span>].drop(<span class="number">1</span>), df.drop(<span class="number">1</span>, axis=<span class="number">1</span>)</span><br></pre></td></tr></table></figure>




<pre><code>(0    1
 2    1
 3    1
 Name: A, dtype: int64,
    0  A  2  3  4
 0  8  1  1  6  2
 1  6  1  1  6  8
 2  7  1  5  4  6
 3  2  1  3  6  1)</code></pre>
<p><strong>concat 合并数据</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df1 = pd.DataFrame(np.random.randint(<span class="number">1</span>, <span class="number">3</span>, (<span class="number">4</span>, <span class="number">4</span>)),</span><br><span class="line">                   index=<span class="built_in">list</span>(<span class="string">&#x27;abcd&#x27;</span>), columns=<span class="built_in">list</span>(<span class="string">&#x27;ABCD&#x27;</span>))</span><br><span class="line">df2 = pd.DataFrame(np.random.randint(<span class="number">1</span>, <span class="number">3</span>, (<span class="number">4</span>, <span class="number">4</span>)),</span><br><span class="line">                   index=<span class="built_in">list</span>(<span class="string">&#x27;abef&#x27;</span>), columns=<span class="built_in">list</span>(<span class="string">&#x27;ABEF&#x27;</span>))</span><br><span class="line">df1, df2</span><br></pre></td></tr></table></figure>




<pre><code>(   A  B  C  D
 a  2  2  1  2
 b  2  1  1  2
 c  2  1  2  2
 d  1  1  2  2,
    A  B  E  F
 a  2  1  1  1
 b  1  2  1  1
 e  2  1  1  2
 f  2  2  2  1)</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 默认按列索引合并, 保留合并后的全部索引, 缺失用 nan 填充</span></span><br><span class="line"><span class="comment"># join 参数可控制合并的方式: inner 只留下都有的索引</span></span><br><span class="line">pd.concat([df1, df2]), pd.concat([df1, df2], join=<span class="string">&#x27;inner&#x27;</span>)</span><br></pre></td></tr></table></figure>




<pre><code>(   A  B    C    D    E    F
 a  2  2  1.0  2.0  NaN  NaN
 b  2  1  1.0  2.0  NaN  NaN
 c  2  1  2.0  2.0  NaN  NaN
 d  1  1  2.0  2.0  NaN  NaN
 a  2  1  NaN  NaN  1.0  1.0
 b  1  2  NaN  NaN  1.0  1.0
 e  2  1  NaN  NaN  1.0  2.0
 f  2  2  NaN  NaN  2.0  1.0,
    A  B
 a  2  2
 b  2  1
 c  2  1
 d  1  1
 a  2  1
 b  1  2
 e  2  1
 f  2  2)</code></pre>
<p><strong>join 主要用于行索引的合并</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 默认以左边(df1)为基准, 相同列名需要加以区分</span></span><br><span class="line"><span class="comment"># how 参数: outer 全保留, inner 只保留共同部分</span></span><br><span class="line">df1.join(df2, lsuffix=<span class="string">&#x27;_1&#x27;</span>, rsuffix=<span class="string">&#x27;_2&#x27;</span>), df1.join(df2, how=<span class="string">&#x27;outer&#x27;</span>, lsuffix=<span class="string">&#x27;_1&#x27;</span>, rsuffix=<span class="string">&#x27;_2&#x27;</span>)</span><br></pre></td></tr></table></figure>




<pre><code>(   A_1  B_1  C  D  A_2  B_2    E    F
 a    2    2  1  2  2.0  1.0  1.0  1.0
 b    2    1  1  2  1.0  2.0  1.0  1.0
 c    2    1  2  2  NaN  NaN  NaN  NaN
 d    1    1  2  2  NaN  NaN  NaN  NaN,
    A_1  B_1    C    D  A_2  B_2    E    F
 a  2.0  2.0  1.0  2.0  2.0  1.0  1.0  1.0
 b  2.0  1.0  1.0  2.0  1.0  2.0  1.0  1.0
 c  2.0  1.0  2.0  2.0  NaN  NaN  NaN  NaN
 d  1.0  1.0  2.0  2.0  NaN  NaN  NaN  NaN
 e  NaN  NaN  NaN  NaN  2.0  1.0  1.0  2.0
 f  NaN  NaN  NaN  NaN  2.0  2.0  2.0  1.0)</code></pre>
<p><strong>merge 主要用于内容的合并, 常用于两者有相同内容的列</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 默认 inner, 全部列都保留, </span></span><br><span class="line"><span class="comment"># 但只保留两者都有的列内容相同的行, 且行索引都舍弃</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以选择以某一个为基准, 需要合并的列内容, 以及保留某一个的索引</span></span><br><span class="line">pd.merge(df1, df2), pd.merge(df1, df2,</span><br><span class="line">                             how=<span class="string">&#x27;left&#x27;</span>, <span class="comment"># 以 df1 为准, 匹配不上的保留 df1</span></span><br><span class="line">                             on=[<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>], <span class="comment"># 按 A,B 列合并</span></span><br><span class="line">                             left_index=<span class="literal">True</span>) <span class="comment"># 保留匹配上的 df1 的行索引</span></span><br></pre></td></tr></table></figure>




<pre><code>(   A  B  C  D  E  F
 0  2  2  1  2  2  1
 1  2  1  1  2  1  1
 2  2  1  1  2  1  2
 3  2  1  2  2  1  1
 4  2  1  2  2  1  2,
      A  B  C  D    E    F
 f    2  2  1  2  2.0  1.0
 a    2  1  1  2  1.0  1.0
 e    2  1  1  2  1.0  2.0
 a    2  1  2  2  1.0  1.0
 e    2  1  2  2  1.0  2.0
 NaN  1  1  2  2  NaN  NaN)</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 假设 df1 的 C 列与 df2 的 E 列内容相同需要合并</span></span><br><span class="line">print(pd.merge(df1, df2, left_on=<span class="string">&#x27;C&#x27;</span>, right_on=<span class="string">&#x27;E&#x27;</span>))</span><br></pre></td></tr></table></figure>

<pre><code>   A_x  B_x  C  D  A_y  B_y  E  F
0    2    2  1  2    2    1  1  1
1    2    2  1  2    1    2  1  1
2    2    2  1  2    2    1  1  2
3    2    1  1  2    2    1  1  1
4    2    1  1  2    1    2  1  1
5    2    1  1  2    2    1  1  2
6    2    1  2  2    2    2  2  1
7    1    1  2  2    2    2  2  1</code></pre>
<h3 id="3-数据选择与处理"><a href="#3-数据选择与处理" class="headerlink" title="3, 数据选择与处理"></a>3, 数据选择与处理</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">np.random.seed(<span class="number">0</span>)</span><br><span class="line">df = pd.DataFrame(np.random.randint(<span class="number">1</span>, <span class="number">9</span>, (<span class="number">6</span>, <span class="number">6</span>)),</span><br><span class="line">                  index=<span class="built_in">list</span>(<span class="string">&#x27;abcdef&#x27;</span>),</span><br><span class="line">                  columns=<span class="built_in">list</span>(<span class="string">&#x27;ABCDEF&#x27;</span>))</span><br><span class="line">print(df)</span><br></pre></td></tr></table></figure>

<pre><code>   A  B  C  D  E  F
a  5  8  6  1  4  4
b  4  8  2  4  6  3
c  5  8  7  1  1  5
d  3  2  7  8  8  7
e  1  2  6  2  6  1
f  2  5  4  1  4  6</code></pre>
<p><strong>sample 随机选择数据</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 可以指定数量, 也可以按比例选</span></span><br><span class="line">df.iloc[<span class="number">0</span>].sample(<span class="number">2</span>) <span class="comment"># s 也可</span></span><br><span class="line">df.sample(<span class="number">3</span>), df.sample(frac=<span class="number">0.5</span>, axis=<span class="number">1</span>)</span><br></pre></td></tr></table></figure>




<pre><code>(   A  B  C  D  E  F
 d  3  2  7  8  8  7
 b  4  8  2  4  6  3
 f  2  5  4  1  4  6,
    E  F  D
 a  4  4  1
 b  6  3  4
 c  1  5  1
 d  8  7  8
 e  6  1  2
 f  4  6  1)</code></pre>
<p><strong>where 按条件选择数据, 且可替换, 替换的是条件之外的数据</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df.A.where(df.A&gt;<span class="number">3</span>) <span class="comment"># s 也可</span></span><br><span class="line">df1 = df.where(df&gt;<span class="number">1</span>)</span><br><span class="line">df1, df.where(df==<span class="number">1</span>, <span class="keyword">lambda</span> x: x*x)</span><br></pre></td></tr></table></figure>




<pre><code>(     A  B  C    D    E    F
 a  5.0  8  6  NaN  4.0  4.0
 b  4.0  8  2  4.0  6.0  3.0
 c  5.0  8  7  NaN  NaN  5.0
 d  3.0  2  7  8.0  8.0  7.0
 e  NaN  2  6  2.0  6.0  NaN
 f  2.0  5  4  NaN  4.0  6.0,
     A   B   C   D   E   F
 a  25  64  36   1  16  16
 b  16  64   4  16  36   9
 c  25  64  49   1   1  25
 d   9   4  49  64  64  49
 e   1   4  36   4  36   1
 f   4  25  16   1  16  36)</code></pre>
<p><strong>isin 生成布尔数组来选择数据</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">values = [<span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]</span><br><span class="line">df.C.isin(values), df.A[df.C.isin(values)]</span><br></pre></td></tr></table></figure>




<pre><code>(a    False
 b    False
 c     True
 d     True
 e    False
 f    False
 Name: C, dtype: bool,
 c    5
 d    3
 Name: A, dtype: int32)</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df[df.isin(values)], df[df.index.isin(values)]</span><br></pre></td></tr></table></figure>




<pre><code>(     A    B    C   D   E    F
 a  5.0  NaN  NaN NaN NaN  NaN
 b  NaN  NaN  NaN NaN NaN  3.0
 c  5.0  NaN  7.0 NaN NaN  5.0
 d  3.0  NaN  7.0 NaN NaN  7.0
 e  NaN  NaN  NaN NaN NaN  NaN
 f  NaN  5.0  NaN NaN NaN  NaN,
    A  B  C  D  E  F
 a  5  8  6  1  4  4
 c  5  8  7  1  1  5)</code></pre>
<p><strong>isna( isnull ) 和 notna ( notnull ) 生成布尔数组</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 可以 pd 调用, 也可 df 或 s 调用</span></span><br><span class="line">pd.isna(df1.D), df1.D.isnull(), df1.isna()</span><br></pre></td></tr></table></figure>




<pre><code>(a     True
 b    False
 c     True
 d    False
 e    False
 f     True
 Name: D, dtype: bool,
 a     True
 b    False
 c     True
 d    False
 e    False
 f     True
 Name: D, dtype: bool,
        A      B      C      D      E      F
 a  False  False  False   True  False  False
 b  False  False  False  False  False  False
 c  False  False  False   True   True  False
 d  False  False  False  False  False  False
 e   True  False  False  False  False   True
 f  False  False  False   True  False  False)</code></pre>
<p><strong>dropna 删除 nan, fillna 将 nan 填充</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 默认有 nan 的行就删除, 参数 all: 全部 nan 才删除</span></span><br><span class="line">df1.A.dropna() <span class="comment"># s 也可</span></span><br><span class="line">df1.dropna(), df1.dropna(axis=<span class="number">1</span>, how=<span class="string">&#x27;all&#x27;</span>)</span><br></pre></td></tr></table></figure>




<pre><code>(     A  B  C    D    E    F
 b  4.0  8  2  4.0  6.0  3.0
 d  3.0  2  7  8.0  8.0  7.0,
      A  B  C    D    E    F
 a  5.0  8  6  NaN  4.0  4.0
 b  4.0  8  2  4.0  6.0  3.0
 c  5.0  8  7  NaN  NaN  5.0
 d  3.0  2  7  8.0  8.0  7.0
 e  NaN  2  6  2.0  6.0  NaN
 f  2.0  5  4  NaN  4.0  6.0)</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 给定填充值, 默认全部填充, </span></span><br><span class="line"><span class="comment"># 可以指定填充数, 填充方式</span></span><br><span class="line">df1.A.fillna(<span class="number">0</span>) <span class="comment"># s 也可</span></span><br><span class="line">df1.fillna(<span class="number">0</span>), df1.fillna(<span class="number">0</span>, limit=<span class="number">1</span>) <span class="comment"># 每一列填充一个</span></span><br></pre></td></tr></table></figure>




<pre><code>(     A  B  C    D    E    F
 a  5.0  8  6  0.0  4.0  4.0
 b  4.0  8  2  4.0  6.0  3.0
 c  5.0  8  7  0.0  0.0  5.0
 d  3.0  2  7  8.0  8.0  7.0
 e  0.0  2  6  2.0  6.0  0.0
 f  2.0  5  4  0.0  4.0  6.0,
      A  B  C    D    E    F
 a  5.0  8  6  0.0  4.0  4.0
 b  4.0  8  2  4.0  6.0  3.0
 c  5.0  8  7  NaN  0.0  5.0
 d  3.0  2  7  8.0  8.0  7.0
 e  0.0  2  6  2.0  6.0  0.0
 f  2.0  5  4  NaN  4.0  6.0)</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ffill 前面值填充, bfill 后面值填充</span></span><br><span class="line">df1.fillna(method=<span class="string">&#x27;ffill&#x27;</span>), df1.fillna(method=<span class="string">&#x27;bfill&#x27;</span>)</span><br></pre></td></tr></table></figure>




<pre><code>(     A  B  C    D    E    F
 a  5.0  8  6  NaN  4.0  4.0
 b  4.0  8  2  4.0  6.0  3.0
 c  5.0  8  7  4.0  6.0  5.0
 d  3.0  2  7  8.0  8.0  7.0
 e  3.0  2  6  2.0  6.0  7.0
 f  2.0  5  4  2.0  4.0  6.0,
      A  B  C    D    E    F
 a  5.0  8  6  4.0  4.0  4.0
 b  4.0  8  2  4.0  6.0  3.0
 c  5.0  8  7  8.0  8.0  5.0
 d  3.0  2  7  8.0  8.0  7.0
 e  2.0  2  6  2.0  6.0  6.0
 f  2.0  5  4  NaN  4.0  6.0)</code></pre>
<p><strong>drop_duplicates 去重</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df.iloc[<span class="number">0</span>] = df.iloc[<span class="number">1</span>]</span><br><span class="line"><span class="comment"># 默认保留第 1 条数据</span></span><br><span class="line">df.A.drop_duplicates() <span class="comment"># s 也可</span></span><br><span class="line">df, df.drop_duplicates()</span><br></pre></td></tr></table></figure>




<pre><code>(   A  B  C  D  E  F
 a  4  8  2  4  6  3
 b  4  8  2  4  6  3
 c  5  8  7  1  1  5
 d  3  2  7  8  8  7
 e  1  2  6  2  6  1
 f  2  5  4  1  4  6,
    A  B  C  D  E  F
 a  4  8  2  4  6  3
 c  5  8  7  1  1  5
 d  3  2  7  8  8  7
 e  1  2  6  2  6  1
 f  2  5  4  1  4  6)</code></pre>
<p><strong>nlargest 选择某列(某几列)值最大的几条数据, 对应还有 nsmallest</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df.nlargest(<span class="number">3</span>, <span class="string">&#x27;A&#x27;</span>), df.nsmallest(<span class="number">3</span>, <span class="string">&#x27;A&#x27;</span>), df.nlargest(<span class="number">3</span>, [<span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;D&#x27;</span>])</span><br></pre></td></tr></table></figure>




<pre><code>(   A  B  C  D  E  F
 c  5  8  7  1  1  5
 a  4  8  2  4  6  3
 b  4  8  2  4  6  3,
    A  B  C  D  E  F
 e  1  2  6  2  6  1
 f  2  5  4  1  4  6
 d  3  2  7  8  8  7,
    A  B  C  D  E  F
 d  3  2  7  8  8  7
 c  5  8  7  1  1  5
 e  1  2  6  2  6  1)</code></pre>
<p><strong>filter 按索引查找数据, 可正则模糊查找</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df.<span class="built_in">filter</span>([<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>]), df.<span class="built_in">filter</span>(like=<span class="string">&#x27;a&#x27;</span>, axis=<span class="number">0</span>), df.<span class="built_in">filter</span>(regex=<span class="string">&#x27;c&#x27;</span>, axis=<span class="number">0</span>)</span><br></pre></td></tr></table></figure>




<pre><code>(   A  B
 a  4  8
 b  4  8
 c  5  8
 d  3  2
 e  1  2
 f  2  5,
    A  B  C  D  E  F
 a  4  8  2  4  6  3,
    A  B  C  D  E  F
 c  5  8  7  1  1  5)</code></pre>
<p><strong>assign 用于新增辅助列</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df.assign(A1=df[<span class="string">&#x27;A&#x27;</span>]/df[<span class="string">&#x27;F&#x27;</span>]), df.assign(A1=<span class="keyword">lambda</span> x:x.A/x.F)</span><br></pre></td></tr></table></figure>




<pre><code>(   A  B  C  D  E  F        A1
 a  4  8  2  4  6  3  1.333333
 b  4  8  2  4  6  3  1.333333
 c  5  8  7  1  1  5  1.000000
 d  3  2  7  8  8  7  0.428571
 e  1  2  6  2  6  1  1.000000
 f  2  5  4  1  4  6  0.333333,
    A  B  C  D  E  F        A1
 a  4  8  2  4  6  3  1.333333
 b  4  8  2  4  6  3  1.333333
 c  5  8  7  1  1  5  1.000000
 d  3  2  7  8  8  7  0.428571
 e  1  2  6  2  6  1  1.000000
 f  2  5  4  1  4  6  0.333333)</code></pre>
<p><strong>clip 将过大或过小的数据去掉, 并填充指定值</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 小于指定值的填充为指定值小者, 大于的反之</span></span><br><span class="line">df.clip(<span class="number">2</span>, <span class="number">6</span>), df.clip(df.A, df.A + <span class="number">2</span>, axis=<span class="number">0</span>)</span><br></pre></td></tr></table></figure>




<pre><code>(   A  B  C  D  E  F
 a  4  6  2  4  6  3
 b  4  6  2  4  6  3
 c  5  6  6  2  2  5
 d  3  2  6  6  6  6
 e  2  2  6  2  6  2
 f  2  5  4  2  4  6,
    A  B  C  D  E  F
 a  4  6  4  4  6  4
 b  4  6  4  4  6  4
 c  5  7  7  5  5  5
 d  3  3  5  5  5  5
 e  1  2  3  2  3  1
 f  2  4  4  2  4  4)</code></pre>
<h3 id="4-数据分组聚合计算"><a href="#4-数据分组聚合计算" class="headerlink" title="4, 数据分组聚合计算"></a>4, 数据分组聚合计算</h3><p>聚合计算和 np 函数基本一样, 例如 sum, count, median, min, max, mean, var, std 等, 比较容易. 更为重要的, 是将数据按需分组后再聚合运算</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">np.random.seed(<span class="number">0</span>)</span><br><span class="line">df = pd.DataFrame(np.random.randint(<span class="number">1</span>, <span class="number">9</span>, (<span class="number">6</span>, <span class="number">6</span>)),</span><br><span class="line">                  index=<span class="built_in">list</span>(<span class="string">&#x27;abcdef&#x27;</span>),</span><br><span class="line">                  columns=<span class="built_in">list</span>(<span class="string">&#x27;ABCDEF&#x27;</span>))</span><br><span class="line"></span><br><span class="line">df.A.where(df.A&gt;<span class="number">3</span>, <span class="string">&#x27;M&#x27;</span>, inplace=<span class="literal">True</span>)</span><br><span class="line">df.A.where(df.A==<span class="string">&#x27;M&#x27;</span>, <span class="string">&#x27;N&#x27;</span>, inplace=<span class="literal">True</span>)</span><br><span class="line">df.B.where(df.B&gt;<span class="number">3</span>, <span class="string">&#x27;J&#x27;</span>, inplace=<span class="literal">True</span>)</span><br><span class="line">df.B.where(df.B==<span class="string">&#x27;J&#x27;</span>, <span class="string">&#x27;K&#x27;</span>, inplace=<span class="literal">True</span>)</span><br><span class="line">df.C.where(df.C&lt;<span class="number">5</span>, np.nan, inplace=<span class="literal">True</span>)</span><br><span class="line">print(df)</span><br></pre></td></tr></table></figure>

<pre><code>   A  B    C  D  E  F
a  N  K  NaN  1  4  4
b  N  K  2.0  4  6  3
c  N  K  NaN  1  1  5
d  M  J  NaN  8  8  7
e  M  J  NaN  2  6  1
f  M  K  4.0  1  4  6</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 默认按列加和, 将 nan 转换为 0 来计算</span></span><br><span class="line">df.<span class="built_in">sum</span>(), df.<span class="built_in">sum</span>(axis=<span class="number">1</span>)</span><br><span class="line"><span class="comment"># 默认按列统计忽略 nan</span></span><br><span class="line">df.count(axis=<span class="number">1</span>), df.set_index([<span class="string">&quot;A&quot;</span>, <span class="string">&quot;B&quot;</span>]).count(level=<span class="string">&quot;A&quot;</span>)</span><br><span class="line"><span class="comment"># df.cumsum()</span></span><br><span class="line"><span class="comment"># df.cummax()</span></span><br><span class="line"><span class="comment"># 等等</span></span><br></pre></td></tr></table></figure>




<pre><code>(a    5
 b    6
 c    5
 d    5
 e    5
 f    6
 dtype: int64,
    C  D  E  F
 A            
 M  1  3  3  3
 N  1  3  3  3)</code></pre>
<p><strong>value_counts 统计 s 中每个值出现次数</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># s 的值统计, 也即是 df 的每一列中每个值的数量统计</span></span><br><span class="line">df.A.value_counts(), df.C.value_counts()</span><br></pre></td></tr></table></figure>




<pre><code>(M    3
 N    3
 Name: A, dtype: int64,
 4.0    1
 2.0    1
 Name: C, dtype: int64)</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 可以统计索引, 可按百分比显示, 可以分组统计</span></span><br><span class="line">df.set_index(<span class="string">&#x27;A&#x27;</span>).index.value_counts(normalize=<span class="literal">True</span>), df.D.value_counts(bins=<span class="number">2</span>)</span><br></pre></td></tr></table></figure>




<pre><code>(M    0.5
 N    0.5
 Name: A, dtype: float64,
 (0.992, 4.5]    5
 (4.5, 8.0]      1
 Name: D, dtype: int64)</code></pre>
<p><strong>nunique 去重计数, 统计每一行或列不同值的数量</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df.nunique() </span><br></pre></td></tr></table></figure>




<pre><code>A    2
B    2
C    2
D    4
E    4
F    6
dtype: int64</code></pre>
<p><strong>quantile 计算分位数</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(df.quantile([<span class="number">0.3</span>, <span class="number">0.6</span>]))</span><br></pre></td></tr></table></figure>

<pre><code>       C    D    E    F
0.3  2.6  1.0  4.0  3.5
0.6  3.2  2.0  6.0  5.0</code></pre>
<p><strong>cut 与 qcut 数据分箱</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将某一列中的值分别分到一个范围中, 默认左不包含右包含</span></span><br><span class="line"><span class="comment"># 这对分组非常有用, 例如年龄分段</span></span><br><span class="line">c = pd.cut(df.D, bins=[<span class="number">0</span>, <span class="number">3</span>, <span class="number">8</span>], labels=[<span class="string">&#x27;0到3&#x27;</span>, <span class="string">&#x27;3到8&#x27;</span>])</span><br><span class="line">c</span><br></pre></td></tr></table></figure>




<pre><code>a    0到3
b    3到8
c    0到3
d    3到8
e    0到3
f    0到3
Name: D, dtype: category
Categories (2, object): [0到3 &lt; 3到8]</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 根据数值的频率来选择间隔, 使每个分段里值的个数相同</span></span><br><span class="line">pd.qcut(df.D, q=<span class="number">2</span>), pd.qcut(df.D, q=<span class="number">2</span>).value_counts()</span><br></pre></td></tr></table></figure>




<pre><code>(a    (0.999, 1.5]
 b      (1.5, 8.0]
 c    (0.999, 1.5]
 d      (1.5, 8.0]
 e      (1.5, 8.0]
 f    (0.999, 1.5]
 Name: D, dtype: category
 Categories (2, interval[float64]): [(0.999, 1.5] &lt; (1.5, 8.0]],
 (1.5, 8.0]      3
 (0.999, 1.5]    3
 Name: D, dtype: int64)</code></pre>
<p><strong>rank 用来给数据排名, 例如销售额, 成绩等</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 有多种排名方式可供选择, 举一例: 给 D 列排名</span></span><br><span class="line">df[<span class="string">&#x27;排名&#x27;</span>] = df.D.rank(method=<span class="string">&#x27;dense&#x27;</span>, ascending=<span class="literal">False</span>)</span><br><span class="line">print(df)</span><br></pre></td></tr></table></figure>

<pre><code>   A  B    C  D  E  F   排名
a  N  K  NaN  1  4  4  4.0
b  N  K  2.0  4  6  3  2.0
c  N  K  NaN  1  1  5  4.0
d  M  J  NaN  8  8  7  1.0
e  M  J  NaN  2  6  1  3.0
f  M  K  4.0  1  4  6  4.0</code></pre>
<p><strong>sort_values 数据排序</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df.sort_values(<span class="string">&#x27;排名&#x27;</span>, inplace=<span class="literal">True</span>)</span><br><span class="line">print(df)</span><br></pre></td></tr></table></figure>

<pre><code>   A  B    C  D  E  F   排名
d  M  J  NaN  8  8  7  1.0
b  N  K  2.0  4  6  3  2.0
e  M  J  NaN  2  6  1  3.0
a  N  K  NaN  1  4  4  4.0
c  N  K  NaN  1  1  5  4.0
f  M  K  4.0  1  4  6  4.0</code></pre>
<p><strong>shift 数据移动, 索引不变</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 默认向后移动一行, 同类型相移动, nan 填充</span></span><br><span class="line">df.info(), df.shift(<span class="number">1</span>), df.shift(<span class="number">-1</span>, axis=<span class="number">1</span>)</span><br></pre></td></tr></table></figure>

<pre><code>&lt;class &#39;pandas.core.frame.DataFrame&#39;&gt;
Index: 6 entries, d to f
Data columns (total 7 columns):
 #   Column  Non-Null Count  Dtype  
---  ------  --------------  -----  
 0   A       6 non-null      object 
 1   B       6 non-null      object 
 2   C       2 non-null      float64
 3   D       6 non-null      int32  
 4   E       6 non-null      int32  
 5   F       6 non-null      int32  
 6   排名      6 non-null      float64
dtypes: float64(2), int32(3), object(2)
memory usage: 312.0+ bytes

(None,
      A    B    C    D    E    F   排名
 d  NaN  NaN  NaN  NaN  NaN  NaN  NaN
 b    M    J  NaN  8.0  8.0  7.0  1.0
 e    N    K  2.0  4.0  6.0  3.0  2.0
 a    M    J  NaN  2.0  6.0  1.0  3.0
 c    N    K  NaN  1.0  4.0  4.0  4.0
 f    N    K  NaN  1.0  1.0  5.0  4.0,
    A    B    C    D    E   F  排名
 d  J  NaN  1.0  8.0  7.0 NaN NaN
 b  K  NaN  2.0  6.0  3.0 NaN NaN
 e  J  NaN  3.0  6.0  1.0 NaN NaN
 a  K  NaN  4.0  4.0  4.0 NaN NaN
 c  K  NaN  4.0  1.0  5.0 NaN NaN
 f  K  NaN  4.0  4.0  6.0 NaN NaN)</code></pre>
<p><strong>agg 和 apply 传入函数进行高级聚合运算, 已存在的函数用字符串形式传入, 自定义函数传入函数名</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df.agg(<span class="string">&#x27;sum&#x27;</span>), df.agg([<span class="string">&#x27;max&#x27;</span>, <span class="string">&#x27;min&#x27;</span>]), df.apply([<span class="string">&#x27;max&#x27;</span>, <span class="string">&#x27;min&#x27;</span>])</span><br></pre></td></tr></table></figure>




<pre><code>(A     MNMNNM
 B     JKJKKK
 C          6
 D         17
 E         29
 F         26
 排名        18
 dtype: object,
      A  B    C  D  E  F   排名
 max  N  K  4.0  8  8  7  4.0
 min  M  J  2.0  1  1  1  1.0,
      A  B    C  D  E  F   排名
 max  N  K  4.0  8  8  7  4.0
 min  M  J  2.0  1  1  1  1.0)</code></pre>
<p>🔺🔺<strong>groupby 按指定的列(行)中不同值分组, 与前面的聚合函数组合出无限的变化, 满足各种需求</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 分组后是一个迭代器, 可以查看分组, 获取分组</span></span><br><span class="line">df.groupby(<span class="string">&#x27;A&#x27;</span>), df.groupby(<span class="string">&#x27;A&#x27;</span>).groups, df.groupby(<span class="string">&#x27;A&#x27;</span>).get_group(<span class="string">&#x27;M&#x27;</span>)</span><br></pre></td></tr></table></figure>




<pre><code>(&lt;pandas.core.groupby.generic.DataFrameGroupBy object at 0x000002C3AE430630&gt;,
 &#123;&#39;M&#39;: Index([&#39;d&#39;, &#39;e&#39;, &#39;f&#39;], dtype=&#39;object&#39;),
  &#39;N&#39;: Index([&#39;b&#39;, &#39;a&#39;, &#39;c&#39;], dtype=&#39;object&#39;)&#125;,
    A  B    C  D  E  F   排名
 d  M  J  NaN  8  8  7  1.0
 e  M  J  NaN  2  6  1  3.0
 f  M  K  4.0  1  4  6  4.0)</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 分别取出 M 和 N 中 F 列任意排名的数据</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_second</span>(<span class="params">x, m, n</span>):</span></span><br><span class="line">    <span class="keyword">return</span> x[x[m].rank(method=<span class="string">&#x27;dense&#x27;</span>, ascending=<span class="literal">False</span>)==n]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过修改 n 参数取出任意排名</span></span><br><span class="line">print(df.groupby(<span class="string">&#x27;A&#x27;</span>).apply(get_second, m=<span class="string">&#x27;F&#x27;</span>, n=<span class="number">3.0</span>))</span><br></pre></td></tr></table></figure>

<pre><code>     A  B    C  D  E  F   排名
A                           
M e  M  J  NaN  2  6  1  3.0
N b  N  K  2.0  4  6  3  2.0</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将上述 cut 分箱得到的数据用来分组统计</span></span><br><span class="line">print(df.groupby(c).count())</span><br></pre></td></tr></table></figure>

<pre><code>     A  B  C  D  E  F  排名
D                        
0到3  4  4  1  4  4  4   4
3到8  2  2  1  2  2  2   2</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 对不同的列作不同的分组聚合运算</span></span><br><span class="line">print(df.groupby(<span class="string">&#x27;A&#x27;</span>).agg(&#123;<span class="string">&#x27;E&#x27;</span>: [<span class="string">&#x27;mean&#x27;</span>, <span class="string">&#x27;max&#x27;</span>], <span class="string">&#x27;F&#x27;</span>: <span class="string">&#x27;sum&#x27;</span>&#125;))</span><br></pre></td></tr></table></figure>

<pre><code>          E       F
       mean max sum
A                  
M  6.000000   8  14
N  3.666667   6  12</code></pre>
<h3 id="5-数据透视与窗口函数"><a href="#5-数据透视与窗口函数" class="headerlink" title="5, 数据透视与窗口函数"></a>5, 数据透视与窗口函数</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">np.random.seed(<span class="number">0</span>)</span><br><span class="line">df = pd.DataFrame(np.random.randint(<span class="number">1</span>, <span class="number">20</span>, (<span class="number">4</span>, <span class="number">5</span>)))</span><br><span class="line">df.columns = <span class="built_in">list</span>(<span class="string">&#x27;ABCDE&#x27;</span>)</span><br><span class="line">print(df)</span><br></pre></td></tr></table></figure>

<pre><code>    A   B   C  D   E
0  13  16   1  4   4
1   8  10  19  5   7
2  13   2   7  8  15
3  18   6  14  9  10</code></pre>
<p><strong>melt 将列索引展开成数据</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 默认全部展开</span></span><br><span class="line">df1 = pd.melt(df, id_vars=[<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>], var_name=<span class="string">&#x27;F&#x27;</span>, value_name=<span class="string">&#x27;G&#x27;</span>)</span><br><span class="line">df1, pd.melt(df, id_vars=[<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>], value_vars=[<span class="string">&#x27;C&#x27;</span>])</span><br></pre></td></tr></table></figure>




<pre><code>(     A   B  F   G
 0   13  16  C   1
 1    8  10  C  19
 2   13   2  C   7
 3   18   6  C  14
 4   13  16  D   4
 5    8  10  D   5
 6   13   2  D   8
 7   18   6  D   9
 8   13  16  E   4
 9    8  10  E   7
 10  13   2  E  15
 11  18   6  E  10,
     A   B variable  value
 0  13  16        C      1
 1   8  10        C     19
 2  13   2        C      7
 3  18   6        C     14)</code></pre>
<p><strong>pivot 将行值展开成为列索引</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(df1.pivot(columns=<span class="string">&#x27;F&#x27;</span>, values=[<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>]))</span><br></pre></td></tr></table></figure>

<pre><code>       A                 B            
F      C     D     E     C     D     E
0   13.0   NaN   NaN  16.0   NaN   NaN
1    8.0   NaN   NaN  10.0   NaN   NaN
2   13.0   NaN   NaN   2.0   NaN   NaN
3   18.0   NaN   NaN   6.0   NaN   NaN
4    NaN  13.0   NaN   NaN  16.0   NaN
5    NaN   8.0   NaN   NaN  10.0   NaN
6    NaN  13.0   NaN   NaN   2.0   NaN
7    NaN  18.0   NaN   NaN   6.0   NaN
8    NaN   NaN  13.0   NaN   NaN  16.0
9    NaN   NaN   8.0   NaN   NaN  10.0
10   NaN   NaN  13.0   NaN   NaN   2.0
11   NaN   NaN  18.0   NaN   NaN   6.0</code></pre>
<p><strong>pivot_table 与 groupby + 聚合函数 类似, 可以对表格进行各种需求的透视</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df1.index = <span class="built_in">list</span>(<span class="string">&#x27;LMNLMNLMNLMN&#x27;</span>)</span><br><span class="line">df1.reset_index(inplace=<span class="literal">True</span>)</span><br><span class="line">df1.rename(columns=&#123;<span class="string">&#x27;index&#x27;</span>: <span class="string">&#x27;Q&#x27;</span>&#125;, inplace=<span class="literal">True</span>)</span><br><span class="line">print(df1.pivot_table(index=[<span class="string">&#x27;Q&#x27;</span>, <span class="string">&#x27;F&#x27;</span>], aggfunc=<span class="string">&#x27;mean&#x27;</span>))</span><br></pre></td></tr></table></figure>

<pre><code>        A   B     G
Q F                
L C  15.5  11   7.5
  D  13.0   2   8.0
  E   8.0  10   7.0
M C   8.0  10  19.0
  D  15.5  11   6.5
  E  13.0   2  15.0
N C  13.0   2   7.0
  D   8.0  10   5.0
  E  15.5  11   7.0</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df1, df1.pivot_table(index=<span class="string">&#x27;Q&#x27;</span>,</span><br><span class="line">                    columns=<span class="string">&#x27;F&#x27;</span>,</span><br><span class="line">                    values=<span class="string">&#x27;A&#x27;</span>,</span><br><span class="line">                    aggfunc=[<span class="string">&#x27;mean&#x27;</span>, <span class="string">&#x27;sum&#x27;</span>])</span><br></pre></td></tr></table></figure>




<pre><code>(    Q   A   B  F   G
 0   L  13  16  C   1
 1   M   8  10  C  19
 2   N  13   2  C   7
 3   L  18   6  C  14
 4   M  13  16  D   4
 5   N   8  10  D   5
 6   L  13   2  D   8
 7   M  18   6  D   9
 8   N  13  16  E   4
 9   L   8  10  E   7
 10  M  13   2  E  15
 11  N  18   6  E  10,
    mean             sum        
 F     C     D     E   C   D   E
 Q                              
 L  15.5  13.0   8.0  31  13   8
 M   8.0  15.5  13.0   8  31  13
 N  13.0   8.0  15.5  13   8  31)</code></pre>
<p><strong>rolling 将数据依次移动指定尺寸的窗口并进行聚合运算</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df1.rolling(<span class="number">3</span>)</span><br></pre></td></tr></table></figure>




<pre><code>Rolling [window=3,center=False,axis=0]</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 每移动 3 条数据加和一次作为一条新数据,</span></span><br><span class="line"><span class="comment"># 前面默认 nan 填充</span></span><br><span class="line">df1, df1.rolling(<span class="number">3</span>).<span class="built_in">sum</span>()</span><br></pre></td></tr></table></figure>




<pre><code>(    Q   A   B  F   G
 0   L  13  16  C   1
 1   M   8  10  C  19
 2   N  13   2  C   7
 3   L  18   6  C  14
 4   M  13  16  D   4
 5   N   8  10  D   5
 6   L  13   2  D   8
 7   M  18   6  D   9
 8   N  13  16  E   4
 9   L   8  10  E   7
 10  M  13   2  E  15
 11  N  18   6  E  10,
        A     B     G
 0    NaN   NaN   NaN
 1    NaN   NaN   NaN
 2   34.0  28.0  27.0
 3   39.0  18.0  40.0
 4   44.0  24.0  25.0
 5   39.0  32.0  23.0
 6   34.0  28.0  17.0
 7   39.0  18.0  22.0
 8   44.0  24.0  21.0
 9   39.0  32.0  20.0
 10  34.0  28.0  26.0
 11  39.0  18.0  32.0)</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 可以设置最小观察值(必须小于移动尺寸)</span></span><br><span class="line"><span class="comment"># 可以用高级函数聚合运算</span></span><br><span class="line">df1.rolling(<span class="built_in">len</span>(df1), min_periods=<span class="number">1</span>).<span class="built_in">sum</span>(), df1.rolling(<span class="number">2</span>).agg([<span class="string">&#x27;sum&#x27;</span>, np.<span class="built_in">max</span>])</span><br></pre></td></tr></table></figure>




<pre><code>(        A      B      G
 0    13.0   16.0    1.0
 1    21.0   26.0   20.0
 2    34.0   28.0   27.0
 3    52.0   34.0   41.0
 4    65.0   50.0   45.0
 5    73.0   60.0   50.0
 6    86.0   62.0   58.0
 7   104.0   68.0   67.0
 8   117.0   84.0   71.0
 9   125.0   94.0   78.0
 10  138.0   96.0   93.0
 11  156.0  102.0  103.0,
        A           B           G      
      sum  amax   sum  amax   sum  amax
 0    NaN   NaN   NaN   NaN   NaN   NaN
 1   21.0  13.0  26.0  16.0  20.0  19.0
 2   21.0  13.0  12.0  10.0  26.0  19.0
 3   31.0  18.0   8.0   6.0  21.0  14.0
 4   31.0  18.0  22.0  16.0  18.0  14.0
 5   21.0  13.0  26.0  16.0   9.0   5.0
 6   21.0  13.0  12.0  10.0  13.0   8.0
 7   31.0  18.0   8.0   6.0  17.0   9.0
 8   31.0  18.0  22.0  16.0  13.0   9.0
 9   21.0  13.0  26.0  16.0  11.0   7.0
 10  21.0  13.0  12.0  10.0  22.0  15.0
 11  31.0  18.0   8.0   6.0  25.0  15.0)</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="keyword">return</span> x.iloc[<span class="number">0</span>] * x.iloc[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">df1[[<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;G&#x27;</span>]], df1.rolling(<span class="number">2</span>)[<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;G&#x27;</span>].apply(f)</span><br></pre></td></tr></table></figure>




<pre><code>(     A   G
 0   13   1
 1    8  19
 2   13   7
 3   18  14
 4   13   4
 5    8   5
 6   13   8
 7   18   9
 8   13   4
 9    8   7
 10  13  15
 11  18  10,
         A      G
 0     NaN    NaN
 1   104.0   19.0
 2   104.0  133.0
 3   234.0   98.0
 4   234.0   56.0
 5   104.0   20.0
 6   104.0   40.0
 7   234.0   72.0
 8   234.0   36.0
 9   104.0   28.0
 10  104.0  105.0
 11  234.0  150.0)</code></pre>
<h3 id="6-文本字符串处理"><a href="#6-文本字符串处理" class="headerlink" title="6, 文本字符串处理"></a>6, 文本字符串处理</h3><p>文本字符串处理方法基本上和 python 内建字符串方法同名, 这些方法自动忽略 nan 进行处理</p>
<p>方法较多, 常用的举几个例子:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = pd.Series([<span class="string">&#x27;A_1&#x27;</span>, <span class="string">&#x27;B_2&#x27;</span>, <span class="string">&#x27;C_3&#x27;</span>, np.nan],</span><br><span class="line">              index=[<span class="string">&#x27;A_a&#x27;</span>, <span class="string">&#x27;B_b&#x27;</span>, <span class="string">&#x27;C_c&#x27;</span>, <span class="string">&#x27;D&#x27;</span>])</span><br><span class="line">s</span><br></pre></td></tr></table></figure>




<pre><code>A_a    A_1
B_b    B_2
C_c    C_3
D      NaN
dtype: object</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 取值</span></span><br><span class="line">s.<span class="built_in">str</span>[<span class="number">0</span>], s.<span class="built_in">str</span>[:<span class="number">2</span>], s.index.<span class="built_in">str</span>[<span class="number">2</span>]</span><br></pre></td></tr></table></figure>




<pre><code>(A_a      A
 B_b      B
 C_c      C
 D      NaN
 dtype: object,
 A_a     A_
 B_b     B_
 C_c     C_
 D      NaN
 dtype: object,
 Index([&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, nan], dtype=&#39;object&#39;))</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 拆分</span></span><br><span class="line">s.<span class="built_in">str</span>.split(<span class="string">&#x27;_&#x27;</span>), s.<span class="built_in">str</span>.split(<span class="string">&#x27;_&#x27;</span>).<span class="built_in">str</span>.get(<span class="number">0</span>), s.<span class="built_in">str</span>.split(<span class="string">&#x27;_&#x27;</span>).<span class="built_in">str</span>[<span class="number">1</span>]</span><br></pre></td></tr></table></figure>




<pre><code>(A_a    [A, 1]
 B_b    [B, 2]
 C_c    [C, 3]
 D         NaN
 dtype: object,
 A_a      A
 B_b      B
 C_c      C
 D      NaN
 dtype: object,
 A_a      1
 B_b      2
 C_c      3
 D      NaN
 dtype: object)</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s, s.<span class="built_in">str</span>.split(<span class="string">&#x27;_&#x27;</span>, expand=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>




<pre><code>(A_a    A_1
 B_b    B_2
 C_c    C_3
 D      NaN
 dtype: object,
        0    1
 A_a    A    1
 B_b    B    2
 C_c    C    3
 D    NaN  NaN)</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 替换, 默认正则匹配, 可传入函数高级匹配</span></span><br><span class="line">s.<span class="built_in">str</span>.replace(<span class="string">&#x27;_&#x27;</span>, <span class="string">&#x27;&#x27;</span>), s.index.<span class="built_in">str</span>.replace(<span class="string">&#x27;_&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure>




<pre><code>(A_a     A1
 B_b     B2
 C_c     C3
 D      NaN
 dtype: object,
 Index([&#39;Aa&#39;, &#39;Bb&#39;, &#39;Cc&#39;, &#39;D&#39;], dtype=&#39;object&#39;))</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 拼接</span></span><br><span class="line">s1 = s.<span class="built_in">str</span>.split(<span class="string">&#x27;_&#x27;</span>).<span class="built_in">str</span>[<span class="number">0</span>]</span><br><span class="line">s1, s1.<span class="built_in">str</span>.cat(), s1.<span class="built_in">str</span>.cat(sep=<span class="string">&#x27;_&#x27;</span>), s1.<span class="built_in">str</span>.cat(sep=<span class="string">&#x27;_&#x27;</span>, na_rep=<span class="string">&#x27;_&#x27;</span>)</span><br></pre></td></tr></table></figure>




<pre><code>(A_a      A
 B_b      B
 C_c      C
 D      NaN
 dtype: object,
 &#39;ABC&#39;,
 &#39;A_B_C&#39;,
 &#39;A_B_C__&#39;)</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s1.<span class="built_in">str</span>.cat([<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;4&#x27;</span>], na_rep=<span class="string">&#x27;_&#x27;</span>)</span><br></pre></td></tr></table></figure>




<pre><code>A_a    A1
B_b    B2
C_c    C3
D      _4
dtype: object</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 提取</span></span><br><span class="line">s, s.<span class="built_in">str</span>.extract(<span class="string">r&#x27;([ABC])_(\d)&#x27;</span>)</span><br></pre></td></tr></table></figure>




<pre><code>(A_a    A_1
 B_b    B_2
 C_c    C_3
 D      NaN
 dtype: object,
        0    1
 A_a    A    1
 B_b    B    2
 C_c    C    3
 D    NaN  NaN)</code></pre>
<h2 id="三-时间序列"><a href="#三-时间序列" class="headerlink" title="三, 时间序列"></a>三, 时间序列</h2><p>时间序列对数据分析很重要, 很多数据都和时间发生的先后顺序相关</p>
<p><strong>date_range 生成时间序列</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">pd.date_range(start=<span class="string">&#x27;20200701&#x27;</span>, end=<span class="string">&#x27;20200705&#x27;</span>)</span><br></pre></td></tr></table></figure>




<pre><code>DatetimeIndex([&#39;2020-07-01&#39;, &#39;2020-07-02&#39;, &#39;2020-07-03&#39;, &#39;2020-07-04&#39;,
               &#39;2020-07-05&#39;],
              dtype=&#39;datetime64[ns]&#39;, freq=&#39;D&#39;)</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 可以指定生成个数与频率等</span></span><br><span class="line">pd.date_range(start=<span class="string">&#x27;6/1/2020&#x27;</span>, periods=<span class="number">5</span>, freq=<span class="string">&#x27;10D&#x27;</span>)</span><br></pre></td></tr></table></figure>




<pre><code>DatetimeIndex([&#39;2020-06-01&#39;, &#39;2020-06-11&#39;, &#39;2020-06-21&#39;, &#39;2020-07-01&#39;,
               &#39;2020-07-11&#39;],
              dtype=&#39;datetime64[ns]&#39;, freq=&#39;10D&#39;)</code></pre>
<p><strong>to_datetime 转换时间格式</strong></p>
<p>1970年 1 月 1 日 00:00:00 UTC+00:00 时区的时刻称为 epoch time，记为 0，当前时间就是相对于 epoch time 的秒数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 获取本地当前时间</span></span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line">print(datetime.now())</span><br><span class="line">d = datetime.now().timestamp()</span><br><span class="line">print(datetime.fromtimestamp(d))</span><br><span class="line">d</span><br></pre></td></tr></table></figure>

<pre><code>2020-07-17 10:57:59.465220
2020-07-17 10:57:59.465220

1594954679.46522</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 数字形式的时间, 用 to_datetime 转换为时间格式后与上述有差别,</span></span><br><span class="line"><span class="comment"># 是由于时区的原因, 转换时区即可一样</span></span><br><span class="line">print(pd.to_datetime(d, utc=<span class="literal">True</span>, unit=<span class="string">&#x27;s&#x27;</span>))</span><br><span class="line">d = pd.Series(d)</span><br><span class="line">pd.to_datetime(d, utc=<span class="literal">True</span>, unit=<span class="string">&#x27;s&#x27;</span>).dt.tz_convert(<span class="string">&#x27;Asia/Shanghai&#x27;</span>)</span><br></pre></td></tr></table></figure>

<pre><code>0   2020-07-17 02:57:59.465219975+00:00
dtype: datetime64[ns, UTC]

0   2020-07-17 10:57:59.465219975+08:00
dtype: datetime64[ns, Asia/Shanghai]</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 各种日期格式的转换</span></span><br><span class="line">print(pd.to_datetime([<span class="string">&#x27;07-17-2020&#x27;</span>, <span class="string">&#x27;11-07-2020&#x27;</span>], dayfirst=<span class="literal">True</span>))</span><br><span class="line">print(pd.to_datetime(<span class="string">&#x27;2020年7月17日&#x27;</span>, <span class="built_in">format</span>=<span class="string">&#x27;%Y年%m月%d日&#x27;</span>))</span><br><span class="line">pd.to_datetime([<span class="string">&#x27;jul 17, 2020&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;2020-07-17&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;20200717&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;2020/07/17&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;2020.07.17&#x27;</span>, </span><br><span class="line">                np.nan])</span><br></pre></td></tr></table></figure>

<pre><code>DatetimeIndex([&#39;2020-07-17&#39;, &#39;2020-07-11&#39;], dtype=&#39;datetime64[ns]&#39;, freq=None)
2020-07-17 00:00:00

DatetimeIndex([&#39;2020-07-17&#39;, &#39;2020-07-17&#39;, &#39;2020-07-17&#39;, &#39;2020-07-17&#39;,
               &#39;2020-07-17&#39;, &#39;NaT&#39;],
              dtype=&#39;datetime64[ns]&#39;, freq=None)</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 可以跳过非时间, 可以转换 df 但索引名是固定的名称</span></span><br><span class="line">print(pd.to_datetime([<span class="string">&#x27;2020.07.17&#x27;</span>, <span class="string">&#x27;日期&#x27;</span>], errors=<span class="string">&#x27;coerce&#x27;</span>))</span><br><span class="line">df = pd.DataFrame(&#123;<span class="string">&#x27;year&#x27;</span>: [<span class="number">2019</span>, <span class="number">2020</span>],</span><br><span class="line">              <span class="string">&#x27;month&#x27;</span>: [<span class="number">6</span>, <span class="number">7</span>],</span><br><span class="line">              <span class="string">&#x27;day&#x27;</span>: [<span class="number">4</span>, <span class="number">5</span>]&#125;)</span><br><span class="line">pd.to_datetime(df)</span><br></pre></td></tr></table></figure>

<pre><code>DatetimeIndex([&#39;2020-07-17&#39;, &#39;NaT&#39;], dtype=&#39;datetime64[ns]&#39;, freq=None)

0   2019-06-04
1   2020-07-05
dtype: datetime64[ns]</code></pre>
<p><strong>tshift 时间索引移动, 数据不变</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df = pd.DataFrame(np.random.randint(<span class="number">0</span>, <span class="number">10</span>, (<span class="number">5</span>, <span class="number">2</span>)),</span><br><span class="line">                  index=pd.date_range(<span class="string">&#x27;20180717&#x27;</span>, periods=<span class="number">5</span>, freq=<span class="string">&#x27;200D&#x27;</span>))</span><br><span class="line">df, df.tshift(<span class="number">2</span>), df.tshift(<span class="number">-2</span>)</span><br></pre></td></tr></table></figure>




<pre><code>(            0  1
 2018-07-17  0  5
 2019-02-02  7  9
 2019-08-21  2  4
 2020-03-08  5  8
 2020-09-24  8  6,
             0  1
 2019-08-21  0  5
 2020-03-08  7  9
 2020-09-24  2  4
 2021-04-12  5  8
 2021-10-29  8  6,
             0  1
 2017-06-12  0  5
 2017-12-29  7  9
 2018-07-17  2  4
 2019-02-02  5  8
 2019-08-21  8  6)</code></pre>
<p><strong>时间索引取值, between_time 取时间段</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df[<span class="string">&#x27;2018&#x27;</span>:<span class="string">&#x27;2019&#x27;</span>], df[<span class="string">&#x27;2019-01&#x27;</span>:<span class="string">&#x27;2020-01&#x27;</span>]</span><br></pre></td></tr></table></figure>




<pre><code>(            0  1
 2018-07-17  0  5
 2019-02-02  7  9
 2019-08-21  2  4,
             0  1
 2019-02-02  7  9
 2019-08-21  2  4)</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df.index = pd.date_range(<span class="string">&#x27;20200717&#x27;</span>, periods=<span class="number">5</span>, freq=<span class="string">&#x27;2H&#x27;</span>)</span><br><span class="line">print(df.between_time(<span class="string">&#x27;3:00&#x27;</span>, <span class="string">&#x27;7:00&#x27;</span>))</span><br></pre></td></tr></table></figure>

<pre><code>                     0  1
2020-07-17 04:00:00  2  4
2020-07-17 06:00:00  5  8</code></pre>
<p><strong>时间序列作为数据的操作</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df.index = pd.date_range(<span class="string">&#x27;20180717&#x27;</span>, periods=<span class="number">5</span>, freq=<span class="string">&#x27;100D&#x27;</span>)</span><br><span class="line">df.index.name = <span class="string">&#x27;日期&#x27;</span></span><br><span class="line">df.reset_index(inplace=<span class="literal">True</span>)</span><br><span class="line">df, df.日期.dt.day</span><br></pre></td></tr></table></figure>




<pre><code>(                   日期  0  1  月份
 2018-07-17 2018-07-17  0  5   7
 2018-10-25 2018-10-25  7  9  10
 2019-02-02 2019-02-02  2  4   2
 2019-05-13 2019-05-13  5  8   5
 2019-08-21 2019-08-21  8  6   8,
 2018-07-17    17
 2018-10-25    25
 2019-02-02     2
 2019-05-13    13
 2019-08-21    21
 Freq: 100D, Name: 日期, dtype: int64)</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df[<span class="string">&#x27;月份&#x27;</span>] = df[<span class="string">&#x27;日期&#x27;</span>].dt.month</span><br><span class="line">df, df[df.日期.dt.month &gt;= <span class="number">5</span>], df[df.月份 &gt;= <span class="number">5</span>]</span><br></pre></td></tr></table></figure>




<pre><code>(                   日期  0  1  月份
 2018-07-17 2018-07-17  0  5   7
 2018-10-25 2018-10-25  7  9  10
 2019-02-02 2019-02-02  2  4   2
 2019-05-13 2019-05-13  5  8   5
 2019-08-21 2019-08-21  8  6   8,
                    日期  0  1  月份
 2018-07-17 2018-07-17  0  5   7
 2018-10-25 2018-10-25  7  9  10
 2019-05-13 2019-05-13  5  8   5
 2019-08-21 2019-08-21  8  6   8,
                    日期  0  1  月份
 2018-07-17 2018-07-17  0  5   7
 2018-10-25 2018-10-25  7  9  10
 2019-05-13 2019-05-13  5  8   5
 2019-08-21 2019-08-21  8  6   8)</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d = df.日期.astype(<span class="built_in">str</span>).<span class="built_in">str</span>.split(<span class="string">&#x27;-&#x27;</span>, expand=<span class="literal">True</span>)</span><br><span class="line">df, d, df[d[<span class="number">0</span>] ==<span class="string">&#x27;2018&#x27;</span>]</span><br></pre></td></tr></table></figure>




<pre><code>(                   日期  0  1  月份
 2018-07-17 2018-07-17  0  5   7
 2018-10-25 2018-10-25  7  9  10
 2019-02-02 2019-02-02  2  4   2
 2019-05-13 2019-05-13  5  8   5
 2019-08-21 2019-08-21  8  6   8,
                0   1   2
 2018-07-17  2018  07  17
 2018-10-25  2018  10  25
 2019-02-02  2019  02  02
 2019-05-13  2019  05  13
 2019-08-21  2019  08  21,
                    日期  0  1  月份
 2018-07-17 2018-07-17  0  5   7
 2018-10-25 2018-10-25  7  9  10)</code></pre>
<h2 id="四-数据的导入导出与可视化"><a href="#四-数据的导入导出与可视化" class="headerlink" title="四, 数据的导入导出与可视化"></a>四, 数据的导入导出与可视化</h2><h3 id="1-pd-可以导入导出多种格式的数据"><a href="#1-pd-可以导入导出多种格式的数据" class="headerlink" title="1, pd 可以导入导出多种格式的数据:"></a>1, pd 可以导入导出多种格式的数据:</h3><p>read_csv,    to_csv<br>read_json,    to_json<br>read_html,    to_html<br>read_excel,    to_excel<br>read_hdf,    to_hdf<br>等等</p>
<p>参数非常多, 简单看几个</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 默认读取第一个 sheet, 默认第一行为列索引</span></span><br><span class="line">df = pd.read_excel(<span class="string">&#x27;数据/sheet.xlsx&#x27;</span>,</span><br><span class="line">                   sheet_name=<span class="number">0</span>, header=<span class="number">0</span>)</span><br><span class="line">print(df)</span><br></pre></td></tr></table></figure>

<pre><code>   名次  战队名         说明
0   1  FPX      四包二战术
1   2   G2      个人能力强
2   3   IG       喜欢打架
3   4  SKT  Faker状态低迷
4   5  GRF      上单是短板
5   6  DWG        下路弱
6   7  FNC       欧洲强队
7   8  SPY        AD强
8   9  RNG        四保一
9  10   TL       北美强队</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 可以设置将某列作为行索引, 某列作为列索引</span></span><br><span class="line">df1 = pd.read_excel(<span class="string">&#x27;数据/sheet.xlsx&#x27;</span>,</span><br><span class="line">                   sheet_name=<span class="number">1</span>)</span><br><span class="line">df2 = pd.read_excel(<span class="string">&#x27;数据/sheet.xlsx&#x27;</span>,</span><br><span class="line">                   sheet_name=<span class="number">1</span>,</span><br><span class="line">                   header=<span class="number">1</span>,</span><br><span class="line">                   index_col=<span class="number">0</span>)</span><br><span class="line">df1, df2</span><br></pre></td></tr></table></figure>




<pre><code>(   名次        上单
 0   1   GIMGOOM
 1   2    WUNDER
 2   3      KHAN
 3   4   FLANDER
 4   5    THESHY
 5   6    NUGURI
 6   7     BWIPO
 7   8   IPMPACT
 8   9  LICORICE
 9  10      HUNI,
      GIMGOOM
 1           
 2     WUNDER
 3       KHAN
 4    FLANDER
 5     THESHY
 6     NUGURI
 7      BWIPO
 8    IPMPACT
 9   LICORICE
 10      HUNI)</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 有时报错需要根据文件调节编码和引擎参数</span></span><br><span class="line">df = pd.read_csv(<span class="string">&#x27;数据/ratings_chinses.csv&#x27;</span>,</span><br><span class="line">                 engine=<span class="literal">None</span>,</span><br><span class="line">                 encoding=<span class="string">&#x27;gbk&#x27;</span>)</span><br><span class="line">print(df)</span><br></pre></td></tr></table></figure>

<pre><code>       数量   收获  评分
0     1.0  235   4
1     1.0  260   4
2     2.0  296   4
3     2.0  316   5
4     2.5  333   5
..    ...  ...  ..
97   39.7  231   4
98   40.1  235   5
99   40.5  260   4
100  40.9  296   5
101  41.3  316   3

[102 rows x 3 columns]</code></pre>
<h3 id="2-可视化"><a href="#2-可视化" class="headerlink" title="2, 可视化"></a>2, 可视化</h3><p>pd 有自己简单的可视化方法, 但通常使用 matplotlib, 或一起使用</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.family&#x27;</span>] = <span class="string">&#x27;YouYuan&#x27;</span> </span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.size&#x27;</span>] = <span class="number">12</span></span><br><span class="line"></span><br><span class="line">df.收获.plot() </span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df[<span class="string">&#x27;评分&#x27;</span>].plot(kind=<span class="string">&#x27;hist&#x27;</span>) </span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df.plot(x=<span class="string">&#x27;数量&#x27;</span>, y=<span class="string">&#x27;评分&#x27;</span>) </span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df.评分.plot.box()</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>数据分析</category>
      </categories>
      <tags>
        <tag>pandas</tag>
      </tags>
  </entry>
  <entry>
    <title>实用 Markdown 语法汇总</title>
    <url>/Markdown-d39685381dd6/</url>
    <content><![CDATA[<p><a href="https://billwuhao.com/" title="诗和远方都在脚下"><img src="/images/dbj.jpg"></a></p>
<blockquote>
<p>Markdown , 兼容 HTML，易读易写的轻量级网络标记语言, 注重内容和简洁的排版, “心中无尘，码字入神”。</p>
</blockquote>
<h2 id="一-段落-换行-空行等"><a href="#一-段落-换行-空行等" class="headerlink" title="一. 段落, 换行,空行等"></a>一. 段落, 换行,空行等</h2><h3 id="1，段落"><a href="#1，段落" class="headerlink" title="1，段落"></a>1，段落</h3><p>段落之间使用空行隔开</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">第一段落</span><br><span class="line"></span><br><span class="line">第二段落</span><br></pre></td></tr></table></figure>

<p>第一段落</p>
<p>第二段落</p>
<h3 id="2，换行"><a href="#2，换行" class="headerlink" title="2，换行"></a>2，换行</h3><p>在需要换行处多敲两个空格来实现</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">第一行（接两个空格）  </span><br><span class="line">第二行</span><br></pre></td></tr></table></figure>

<p>第一行<br>第二行</p>
<h3 id="3，插入空行"><a href="#3，插入空行" class="headerlink" title="3，插入空行"></a>3，插入空行</h3><p>使用两个空行中加入一个<code>&lt;br&gt;</code>独占一行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">段落</span><br><span class="line"></span><br><span class="line">&lt;br&gt;</span><br><span class="line"></span><br><span class="line">段落</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>段落</p>
<br>

<p>段落</p>
<h3 id="4，插入分隔符"><a href="#4，插入分隔符" class="headerlink" title="4，插入分隔符"></a>4，插入分隔符</h3><p><code>***</code>、<code>---</code>或者<code>___</code> 独占一行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="5，插入空格或特殊符号"><a href="#5，插入空格或特殊符号" class="headerlink" title="5，插入空格或特殊符号"></a>5，插入空格或特殊符号</h3><p>插入空格或特殊符号，需要 HTML 字符实体语言，例如：</p>
<p><code>&amp;#32;</code>为半角空格<code> </code>，<code>&amp;#12288;</code>为全角空格&#12288;，<code>&amp;#12539;</code>为全角分隔号<code>・</code>，等等。</p>
<br>

<h2 id="二-标题-列表-引用与代码块"><a href="#二-标题-列表-引用与代码块" class="headerlink" title="二. 标题, 列表, 引用与代码块"></a>二. 标题, 列表, 引用与代码块</h2><h3 id="1，标题"><a href="#1，标题" class="headerlink" title="1，标题"></a>1，标题</h3><p><code>#</code>后面跟一个空格接着写文本即是标题</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 标题1</span><br><span class="line">## 标题2</span><br><span class="line">### 标题3</span><br></pre></td></tr></table></figure>

<h3 id="2，列表"><a href="#2，列表" class="headerlink" title="2，列表"></a>2，列表</h3><p><code>1.</code>、<code>*</code>、<code>+</code>或者<code>-</code>后面跟一个空格在文字前生成</p>
<p>a. 有序列表:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 第一列</span><br><span class="line">2. 第二列</span><br><span class="line">3. 第三列</span><br></pre></td></tr></table></figure>
<ol>
<li>第一列</li>
<li>第二列</li>
<li>第三列</li>
</ol>
<p>b. 无序列表:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- 第一列</span><br><span class="line">* 第二列</span><br><span class="line">+ 第三列</span><br></pre></td></tr></table></figure>

<ul>
<li>第一列</li>
</ul>
<ul>
<li>第二列</li>
</ul>
<ul>
<li>第三列</li>
</ul>
<p>c. 嵌套列表:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 第一章</span><br><span class="line">   1. 1-1</span><br><span class="line">   2. 1-2</span><br><span class="line">2. 第二章</span><br><span class="line">   * 2-1</span><br><span class="line">   * 2-2</span><br></pre></td></tr></table></figure>

<ol>
<li>第一章<ol>
<li>1-1</li>
<li>1-2</li>
</ol>
</li>
<li>第二章<ul>
<li>2-1</li>
<li>2-2</li>
</ul>
</li>
</ol>
<h3 id="3，引用"><a href="#3，引用" class="headerlink" title="3，引用"></a>3，引用</h3><p><code>&gt;</code> 符号后的内容表现为引用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;这里划重点......</span><br><span class="line"></span><br><span class="line">&gt;这里是重点    </span><br><span class="line">这里还是重点</span><br><span class="line"></span><br><span class="line">&gt;&gt;多个 &gt; 符号也可以...</span><br></pre></td></tr></table></figure>

<blockquote>
<p>这里划重点……</p>
</blockquote>
<blockquote>
<p>这里还重点<br>这里还是重点</p>
</blockquote>
<blockquote>
<blockquote>
<p>多个 &gt; 符号也可以…</p>
</blockquote>
</blockquote>
<br>

<h3 id="4，代码块"><a href="#4，代码块" class="headerlink" title="4，代码块"></a>4，代码块</h3><p>a. 文字中代码用``来插入，例如 <code>print(&#39;hello, world.&#39;)</code> ，` 是Tab键上边，数字 1 键左侧的那个</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">例如 &#96;print(&#39;hello, world.&#39;)&#96; , </span><br></pre></td></tr></table></figure>

<p>b. 代码块用一组```来插入, 例如:  </p>
<p>```<br>love = ‘就多多抱抱我’<br>if ‘你爱我’ &gt; ‘0’:<br>&nbsp;&nbsp;&nbsp;&nbsp;print(love)<br>```</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">love &#x3D; &#39;就多多抱抱我&#39;</span><br><span class="line">if &#39;你爱我&#39; &gt; &#39;0&#39;:</span><br><span class="line">    print(love)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>还可以另起段落直接缩进四个空格成为代码块，例如：</p>
<pre><code># 这里是代码块
love = &#39;就多多抱抱我&#39;
if &#39;你爱我&#39; &gt; &#39;0&#39;:
    print(love)</code></pre>
<p>c. 代码高亮显示, 在第一组```后面加上代码的相应语言, 例如:  </p>
<p>```Python<br>love = ‘就多多抱抱我’<br>if ‘你爱我’ &gt; ‘0’:<br>&nbsp;&nbsp;&nbsp;&nbsp;print(love)<br>```</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">love = <span class="string">&#x27;就多多抱抱我&#x27;</span></span><br><span class="line"><span class="keyword">if</span> <span class="string">&#x27;你爱我&#x27;</span> &gt; <span class="string">&#x27;0&#x27;</span>:</span><br><span class="line">    print(love)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<br>

<h2 id="三-超链接与插入图片"><a href="#三-超链接与插入图片" class="headerlink" title="三. 超链接与插入图片"></a>三. 超链接与插入图片</h2><h3 id="1，超链接"><a href="#1，超链接" class="headerlink" title="1，超链接"></a>1，超链接</h3><p>用<code>[]()</code>建立, 例如:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[超链接](网址)</span><br></pre></td></tr></table></figure>

<p><a href="%E7%BD%91%E5%9D%80">超链接</a></p>
<h3 id="2，插入图片"><a href="#2，插入图片" class="headerlink" title="2，插入图片"></a>2，插入图片</h3><p>用<code>![]()</code>建立, 例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">![]()</span><br></pre></td></tr></table></figure>

<p><img src=""></p>
<h3 id="3，图片作为超链接"><a href="#3，图片作为超链接" class="headerlink" title="3，图片作为超链接"></a>3，图片作为超链接</h3><p>用<code>[![]()]()</code>建立，其实就是在超链接语法里嵌套图片链接语法</p>
<br>

<h2 id="四-表格与科学表达式"><a href="#四-表格与科学表达式" class="headerlink" title="四. 表格与科学表达式"></a>四. 表格与科学表达式</h2><h3 id="1，插入表格，"><a href="#1，插入表格，" class="headerlink" title="1，插入表格，"></a>1，插入表格，</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">自动|右对齐|居中|左对齐</span><br><span class="line">0  |---: | :---: | :---  </span><br><span class="line">0  |1    |2      |3</span><br><span class="line">0  |1    |2      |3</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>自动</th>
<th align="right">右对齐</th>
<th align="center">居中</th>
<th align="left">左对齐</th>
</tr>
</thead>
<tbody><tr>
<td>0</td>
<td align="right">1</td>
<td align="center">2</td>
<td align="left">3</td>
</tr>
<tr>
<td>0</td>
<td align="right">1</td>
<td align="center">2</td>
<td align="left">3</td>
</tr>
</tbody></table>
<p>推荐神器，将表格转为各种格式：<a href="https://tableconvert.com/">https://tableconvert.com/</a>，省时省力。</p>
<h3 id="2，科学公式"><a href="#2，科学公式" class="headerlink" title="2，科学公式"></a>2，科学公式</h3><p>输入 LaTeX 语法的表达式，可以通过相应的插件渲染成公式：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$$</span><br><span class="line">H(Y | X)&#x3D;\sum_&#123;x \in \mathcal&#123;X&#125;, y \in \mathcal&#123;Y&#125;&#125; p(x, y) \log \left(\frac&#123;p(x)&#125;&#123;p(x, y)&#125;\right)</span><br><span class="line">$$</span><br><span class="line"></span><br><span class="line">$$</span><br><span class="line">f(x)&#x3D;\frac&#123;1&#125;&#123;\sqrt&#123;2 \pi \sigma x&#125;&#125; e^&#123;-\frac&#123;(x-\mu)^&#123;2&#125;&#125;&#123;2 \sigma^&#123;2&#125;&#125;&#125;</span><br><span class="line">$$</span><br></pre></td></tr></table></figure>
<p>$$<br>H(Y | X)=\sum_{x \in \mathcal{X}, y \in \mathcal{Y}} p(x, y) \log \left(\frac{p(x)}{p(x, y)}\right)<br>$$</p>
<p>$$<br>f(x)=\frac{1}{\sqrt{2 \pi \sigma x}} e^{-\frac{(x-\mu)^{2}}{2 \sigma^{2}}}<br>$$</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$$</span><br><span class="line">\vec&#123;E&#125;&#x3D;\frac&#123;1&#125;&#123;4 \pi \varepsilon&#125; \int \frac&#123;d q&#125;&#123;r^&#123;2&#125;&#125; \hat&#123;r&#125;, \quad U&#x3D;\frac&#123;1&#125;&#123;4 \pi \varepsilon&#125; \int \frac&#123;d q&#125;&#123;r&#125;, \quad\left(U_&#123;\infty&#125;&#x3D;0\right), \quad \vec&#123;B&#125;&#x3D;\frac&#123;\mu&#125;&#123;4 \pi&#125; \frac&#123;q \vec&#123;v&#125; \times \hat&#123;\vec&#123;r&#125;&#125;&#125;&#123;r^&#123;2&#125;&#125;</span><br><span class="line">$$</span><br></pre></td></tr></table></figure>
<p>$$<br>\vec{E}=\frac{1}{4 \pi \varepsilon} \int \frac{d q}{r^{2}} \hat{r}, \quad U=\frac{1}{4 \pi \varepsilon} \int \frac{d q}{r}, \quad\left(U_{\infty}=0\right), \quad \vec{B}=\frac{\mu}{4 \pi} \frac{q \vec{v} \times \hat{\vec{r}}}{r^{2}}<br>$$</p>
<p>推荐一个神器可以将图片转为文本公式，甚至是手写的：<a href="https://mathpix.com/">https://mathpix.com/</a></p>
<br>

<h2 id="五-其他常用语法"><a href="#五-其他常用语法" class="headerlink" title="五. 其他常用语法"></a>五. 其他常用语法</h2><h3 id="1，斜体-加粗和下划线"><a href="#1，斜体-加粗和下划线" class="headerlink" title="1，斜体, 加粗和下划线"></a>1，斜体, 加粗和下划线</h3><p>斜体用<code>*</code>包含文字, 加粗字体用<code>**</code>包含文字, 下划线用<code>&lt;u&gt;&lt;/u&gt;</code>包含文字，删除用<code>~~</code>包含文字。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">*斜体*, **加粗**, &lt;u&gt;下划线&lt;&#x2F;u&gt;，~~删除~~</span><br></pre></td></tr></table></figure>

<p><em>斜体</em>, <strong>加粗</strong>, <u>下划线</u>，<del>删除</del></p>
<p>如果就想显示字符本身，可用 <code>\</code> 进行转义，例如：<code>\*\*加粗\*\*</code>，显示为 **加粗**</p>
<h3 id="2，设置字体等"><a href="#2，设置字体等" class="headerlink" title="2，设置字体等"></a>2，设置字体等</h3><p>因为支持 HTML 语法，更多高级功能查看 HTML 语法。HTML 颜色代码查询：<a href="https://html-color-codes.info/chinese/">https://html-color-codes.info/chinese/</a></p>
<p>大字蓝色居中：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;font color&#x3D;#0080FF size&#x3D;5 face&#x3D;&quot;黑体&quot;&gt;&lt;center&gt;欢迎来到我的博客&lt;&#x2F;center&gt;&lt;&#x2F;font&gt;</span><br></pre></td></tr></table></figure>
<p><font color=#0080FF size=5 face="黑体"><center>欢迎来到我的博客</center></font></p>
<p>红色靠左</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;font color&#x3D;#ff0000 &gt;&lt;p align&#x3D;&quot;left&quot;&gt;24时时时学习, 365天天天进步&lt;&#x2F;p&gt;&lt;&#x2F;font&gt;</span><br></pre></td></tr></table></figure>

<p><font color=#ff0000 ><p align="left">24时时时学习, 365天天天进步</p></font></p>
<p>小字靠右</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;font size&#x3D;3&gt;&lt;p align&#x3D;&quot;right&quot;&gt;2019年4月12日&lt;&#x2F;p&gt;&lt;&#x2F;font&gt;</span><br></pre></td></tr></table></figure>

<p><font size=3><p align="right">2019年4月12日</p></font></p>
]]></content>
      <categories>
        <category>文本排版</category>
      </categories>
      <tags>
        <tag>markdown</tag>
      </tags>
  </entry>
</search>
